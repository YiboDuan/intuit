//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/angular:angular/angular.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license AngularJS v1.4.6                                                                                           // 2
 * (c) 2010-2015 Google, Inc. http://angularjs.org                                                                     // 3
 * License: MIT                                                                                                        // 4
 */                                                                                                                    // 5
(function(window, document, undefined) {'use strict';                                                                  // 6
                                                                                                                       // 7
/**                                                                                                                    // 8
 * @description                                                                                                        // 9
 *                                                                                                                     // 10
 * This object provides a utility for producing rich Error messages within                                             // 11
 * Angular. It can be called as follows:                                                                               // 12
 *                                                                                                                     // 13
 * var exampleMinErr = minErr('example');                                                                              // 14
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);                                                            // 15
 *                                                                                                                     // 16
 * The above creates an instance of minErr in the example namespace. The                                               // 17
 * resulting error will have a namespaced error code of example.one.  The                                              // 18
 * resulting error will replace {0} with the value of foo, and {1} with the                                            // 19
 * value of bar. The object is not restricted in the number of arguments it can                                        // 20
 * take.                                                                                                               // 21
 *                                                                                                                     // 22
 * If fewer arguments are specified than necessary for interpolation, the extra                                        // 23
 * interpolation markers will be preserved in the final string.                                                        // 24
 *                                                                                                                     // 25
 * Since data will be parsed statically during a build step, some restrictions                                         // 26
 * are applied with respect to how minErr instances are created and called.                                            // 27
 * Instances should have names of the form namespaceMinErr for a minErr created                                        // 28
 * using minErr('namespace') . Error codes, namespaces and template strings                                            // 29
 * should all be static strings, not variables or general expressions.                                                 // 30
 *                                                                                                                     // 31
 * @param {string} module The namespace to use for the new minErr instance.                                            // 32
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning                       // 33
 *   error from returned function, for cases when a particular type of error is useful.                                // 34
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance                           // 35
 */                                                                                                                    // 36
                                                                                                                       // 37
function minErr(module, ErrorConstructor) {                                                                            // 38
  ErrorConstructor = ErrorConstructor || Error;                                                                        // 39
  return function() {                                                                                                  // 40
    var SKIP_INDEXES = 2;                                                                                              // 41
                                                                                                                       // 42
    var templateArgs = arguments,                                                                                      // 43
      code = templateArgs[0],                                                                                          // 44
      message = '[' + (module ? module + ':' : '') + code + '] ',                                                      // 45
      template = templateArgs[1],                                                                                      // 46
      paramPrefix, i;                                                                                                  // 47
                                                                                                                       // 48
    message += template.replace(/\{\d+\}/g, function(match) {                                                          // 49
      var index = +match.slice(1, -1),                                                                                 // 50
        shiftedIndex = index + SKIP_INDEXES;                                                                           // 51
                                                                                                                       // 52
      if (shiftedIndex < templateArgs.length) {                                                                        // 53
        return toDebugString(templateArgs[shiftedIndex]);                                                              // 54
      }                                                                                                                // 55
                                                                                                                       // 56
      return match;                                                                                                    // 57
    });                                                                                                                // 58
                                                                                                                       // 59
    message += '\nhttp://errors.angularjs.org/1.4.6/' +                                                                // 60
      (module ? module + '/' : '') + code;                                                                             // 61
                                                                                                                       // 62
    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {                       // 63
      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +                                                        // 64
        encodeURIComponent(toDebugString(templateArgs[i]));                                                            // 65
    }                                                                                                                  // 66
                                                                                                                       // 67
    return new ErrorConstructor(message);                                                                              // 68
  };                                                                                                                   // 69
}                                                                                                                      // 70
                                                                                                                       // 71
/* We need to tell jshint what variables are being exported */                                                         // 72
/* global angular: true,                                                                                               // 73
  msie: true,                                                                                                          // 74
  jqLite: true,                                                                                                        // 75
  jQuery: true,                                                                                                        // 76
  slice: true,                                                                                                         // 77
  splice: true,                                                                                                        // 78
  push: true,                                                                                                          // 79
  toString: true,                                                                                                      // 80
  ngMinErr: true,                                                                                                      // 81
  angularModule: true,                                                                                                 // 82
  uid: true,                                                                                                           // 83
  REGEX_STRING_REGEXP: true,                                                                                           // 84
  VALIDITY_STATE_PROPERTY: true,                                                                                       // 85
                                                                                                                       // 86
  lowercase: true,                                                                                                     // 87
  uppercase: true,                                                                                                     // 88
  manualLowercase: true,                                                                                               // 89
  manualUppercase: true,                                                                                               // 90
  nodeName_: true,                                                                                                     // 91
  isArrayLike: true,                                                                                                   // 92
  forEach: true,                                                                                                       // 93
  forEachSorted: true,                                                                                                 // 94
  reverseParams: true,                                                                                                 // 95
  nextUid: true,                                                                                                       // 96
  setHashKey: true,                                                                                                    // 97
  extend: true,                                                                                                        // 98
  toInt: true,                                                                                                         // 99
  inherit: true,                                                                                                       // 100
  merge: true,                                                                                                         // 101
  noop: true,                                                                                                          // 102
  identity: true,                                                                                                      // 103
  valueFn: true,                                                                                                       // 104
  isUndefined: true,                                                                                                   // 105
  isDefined: true,                                                                                                     // 106
  isObject: true,                                                                                                      // 107
  isBlankObject: true,                                                                                                 // 108
  isString: true,                                                                                                      // 109
  isNumber: true,                                                                                                      // 110
  isDate: true,                                                                                                        // 111
  isArray: true,                                                                                                       // 112
  isFunction: true,                                                                                                    // 113
  isRegExp: true,                                                                                                      // 114
  isWindow: true,                                                                                                      // 115
  isScope: true,                                                                                                       // 116
  isFile: true,                                                                                                        // 117
  isFormData: true,                                                                                                    // 118
  isBlob: true,                                                                                                        // 119
  isBoolean: true,                                                                                                     // 120
  isPromiseLike: true,                                                                                                 // 121
  trim: true,                                                                                                          // 122
  escapeForRegexp: true,                                                                                               // 123
  isElement: true,                                                                                                     // 124
  makeMap: true,                                                                                                       // 125
  includes: true,                                                                                                      // 126
  arrayRemove: true,                                                                                                   // 127
  copy: true,                                                                                                          // 128
  shallowCopy: true,                                                                                                   // 129
  equals: true,                                                                                                        // 130
  csp: true,                                                                                                           // 131
  jq: true,                                                                                                            // 132
  concat: true,                                                                                                        // 133
  sliceArgs: true,                                                                                                     // 134
  bind: true,                                                                                                          // 135
  toJsonReplacer: true,                                                                                                // 136
  toJson: true,                                                                                                        // 137
  fromJson: true,                                                                                                      // 138
  convertTimezoneToLocal: true,                                                                                        // 139
  timezoneToOffset: true,                                                                                              // 140
  startingTag: true,                                                                                                   // 141
  tryDecodeURIComponent: true,                                                                                         // 142
  parseKeyValue: true,                                                                                                 // 143
  toKeyValue: true,                                                                                                    // 144
  encodeUriSegment: true,                                                                                              // 145
  encodeUriQuery: true,                                                                                                // 146
  angularInit: true,                                                                                                   // 147
  bootstrap: true,                                                                                                     // 148
  getTestability: true,                                                                                                // 149
  snake_case: true,                                                                                                    // 150
  bindJQuery: true,                                                                                                    // 151
  assertArg: true,                                                                                                     // 152
  assertArgFn: true,                                                                                                   // 153
  assertNotHasOwnProperty: true,                                                                                       // 154
  getter: true,                                                                                                        // 155
  getBlockNodes: true,                                                                                                 // 156
  hasOwnProperty: true,                                                                                                // 157
  createMap: true,                                                                                                     // 158
                                                                                                                       // 159
  NODE_TYPE_ELEMENT: true,                                                                                             // 160
  NODE_TYPE_ATTRIBUTE: true,                                                                                           // 161
  NODE_TYPE_TEXT: true,                                                                                                // 162
  NODE_TYPE_COMMENT: true,                                                                                             // 163
  NODE_TYPE_DOCUMENT: true,                                                                                            // 164
  NODE_TYPE_DOCUMENT_FRAGMENT: true,                                                                                   // 165
*/                                                                                                                     // 166
                                                                                                                       // 167
////////////////////////////////////                                                                                   // 168
                                                                                                                       // 169
/**                                                                                                                    // 170
 * @ngdoc module                                                                                                       // 171
 * @name ng                                                                                                            // 172
 * @module ng                                                                                                          // 173
 * @description                                                                                                        // 174
 *                                                                                                                     // 175
 * # ng (core module)                                                                                                  // 176
 * The ng module is loaded by default when an AngularJS application is started. The module itself                      // 177
 * contains the essential components for an AngularJS application to function. The table below                         // 178
 * lists a high level breakdown of each of the services/factories, filters, directives and testing                     // 179
 * components available within this core module.                                                                       // 180
 *                                                                                                                     // 181
 * <div doc-module-components="ng"></div>                                                                              // 182
 */                                                                                                                    // 183
                                                                                                                       // 184
var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;                                                                        // 185
                                                                                                                       // 186
// The name of a form control's ValidityState property.                                                                // 187
// This is used so that it's possible for internal tests to create mock ValidityStates.                                // 188
var VALIDITY_STATE_PROPERTY = 'validity';                                                                              // 189
                                                                                                                       // 190
/**                                                                                                                    // 191
 * @ngdoc function                                                                                                     // 192
 * @name angular.lowercase                                                                                             // 193
 * @module ng                                                                                                          // 194
 * @kind function                                                                                                      // 195
 *                                                                                                                     // 196
 * @description Converts the specified string to lowercase.                                                            // 197
 * @param {string} string String to be converted to lowercase.                                                         // 198
 * @returns {string} Lowercased string.                                                                                // 199
 */                                                                                                                    // 200
var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};                           // 201
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 202
                                                                                                                       // 203
/**                                                                                                                    // 204
 * @ngdoc function                                                                                                     // 205
 * @name angular.uppercase                                                                                             // 206
 * @module ng                                                                                                          // 207
 * @kind function                                                                                                      // 208
 *                                                                                                                     // 209
 * @description Converts the specified string to uppercase.                                                            // 210
 * @param {string} string String to be converted to uppercase.                                                         // 211
 * @returns {string} Uppercased string.                                                                                // 212
 */                                                                                                                    // 213
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};                           // 214
                                                                                                                       // 215
                                                                                                                       // 216
var manualLowercase = function(s) {                                                                                    // 217
  /* jshint bitwise: false */                                                                                          // 218
  return isString(s)                                                                                                   // 219
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})                         // 220
      : s;                                                                                                             // 221
};                                                                                                                     // 222
var manualUppercase = function(s) {                                                                                    // 223
  /* jshint bitwise: false */                                                                                          // 224
  return isString(s)                                                                                                   // 225
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})                        // 226
      : s;                                                                                                             // 227
};                                                                                                                     // 228
                                                                                                                       // 229
                                                                                                                       // 230
// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish                    // 231
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods                        // 232
// with correct but slower alternatives.                                                                               // 233
if ('i' !== 'I'.toLowerCase()) {                                                                                       // 234
  lowercase = manualLowercase;                                                                                         // 235
  uppercase = manualUppercase;                                                                                         // 236
}                                                                                                                      // 237
                                                                                                                       // 238
                                                                                                                       // 239
var                                                                                                                    // 240
    msie,             // holds major version number for IE, or NaN if UA is not IE.                                    // 241
    jqLite,           // delay binding since jQuery could be loaded after us.                                          // 242
    jQuery,           // delay binding                                                                                 // 243
    slice             = [].slice,                                                                                      // 244
    splice            = [].splice,                                                                                     // 245
    push              = [].push,                                                                                       // 246
    toString          = Object.prototype.toString,                                                                     // 247
    getPrototypeOf    = Object.getPrototypeOf,                                                                         // 248
    ngMinErr          = minErr('ng'),                                                                                  // 249
                                                                                                                       // 250
    /** @name angular */                                                                                               // 251
    angular           = window.angular || (window.angular = {}),                                                       // 252
    angularModule,                                                                                                     // 253
    uid               = 0;                                                                                             // 254
                                                                                                                       // 255
/**                                                                                                                    // 256
 * documentMode is an IE-only property                                                                                 // 257
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx                                                   // 258
 */                                                                                                                    // 259
msie = document.documentMode;                                                                                          // 260
                                                                                                                       // 261
                                                                                                                       // 262
/**                                                                                                                    // 263
 * @private                                                                                                            // 264
 * @param {*} obj                                                                                                      // 265
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,                      // 266
 *                   String ...)                                                                                       // 267
 */                                                                                                                    // 268
function isArrayLike(obj) {                                                                                            // 269
  if (obj == null || isWindow(obj)) {                                                                                  // 270
    return false;                                                                                                      // 271
  }                                                                                                                    // 272
                                                                                                                       // 273
  // Support: iOS 8.2 (not reproducible in simulator)                                                                  // 274
  // "length" in obj used to prevent JIT error (gh-11508)                                                              // 275
  var length = "length" in Object(obj) && obj.length;                                                                  // 276
                                                                                                                       // 277
  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {                                                                  // 278
    return true;                                                                                                       // 279
  }                                                                                                                    // 280
                                                                                                                       // 281
  return isString(obj) || isArray(obj) || length === 0 ||                                                              // 282
         typeof length === 'number' && length > 0 && (length - 1) in obj;                                              // 283
}                                                                                                                      // 284
                                                                                                                       // 285
/**                                                                                                                    // 286
 * @ngdoc function                                                                                                     // 287
 * @name angular.forEach                                                                                               // 288
 * @module ng                                                                                                          // 289
 * @kind function                                                                                                      // 290
 *                                                                                                                     // 291
 * @description                                                                                                        // 292
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an                      // 293
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`              // 294
 * is the value of an object property or an array element, `key` is the object property key or                         // 295
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.               // 296
 *                                                                                                                     // 297
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters                    // 298
 * using the `hasOwnProperty` method.                                                                                  // 299
 *                                                                                                                     // 300
 * Unlike ES262's                                                                                                      // 301
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),                           // 302
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just                        // 303
 * return the value provided.                                                                                          // 304
 *                                                                                                                     // 305
   ```js                                                                                                               // 306
     var values = {name: 'misko', gender: 'male'};                                                                     // 307
     var log = [];                                                                                                     // 308
     angular.forEach(values, function(value, key) {                                                                    // 309
       this.push(key + ': ' + value);                                                                                  // 310
     }, log);                                                                                                          // 311
     expect(log).toEqual(['name: misko', 'gender: male']);                                                             // 312
   ```                                                                                                                 // 313
 *                                                                                                                     // 314
 * @param {Object|Array} obj Object to iterate over.                                                                   // 315
 * @param {Function} iterator Iterator function.                                                                       // 316
 * @param {Object=} context Object to become context (`this`) for the iterator function.                               // 317
 * @returns {Object|Array} Reference to `obj`.                                                                         // 318
 */                                                                                                                    // 319
                                                                                                                       // 320
function forEach(obj, iterator, context) {                                                                             // 321
  var key, length;                                                                                                     // 322
  if (obj) {                                                                                                           // 323
    if (isFunction(obj)) {                                                                                             // 324
      for (key in obj) {                                                                                               // 325
        // Need to check if hasOwnProperty exists,                                                                     // 326
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function                     // 327
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key, obj);                                                                  // 329
        }                                                                                                              // 330
      }                                                                                                                // 331
    } else if (isArray(obj) || isArrayLike(obj)) {                                                                     // 332
      var isPrimitive = typeof obj !== 'object';                                                                       // 333
      for (key = 0, length = obj.length; key < length; key++) {                                                        // 334
        if (isPrimitive || key in obj) {                                                                               // 335
          iterator.call(context, obj[key], key, obj);                                                                  // 336
        }                                                                                                              // 337
      }                                                                                                                // 338
    } else if (obj.forEach && obj.forEach !== forEach) {                                                               // 339
        obj.forEach(iterator, context, obj);                                                                           // 340
    } else if (isBlankObject(obj)) {                                                                                   // 341
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty                 // 342
      for (key in obj) {                                                                                               // 343
        iterator.call(context, obj[key], key, obj);                                                                    // 344
      }                                                                                                                // 345
    } else if (typeof obj.hasOwnProperty === 'function') {                                                             // 346
      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed                                // 347
      for (key in obj) {                                                                                               // 348
        if (obj.hasOwnProperty(key)) {                                                                                 // 349
          iterator.call(context, obj[key], key, obj);                                                                  // 350
        }                                                                                                              // 351
      }                                                                                                                // 352
    } else {                                                                                                           // 353
      // Slow path for objects which do not have a method `hasOwnProperty`                                             // 354
      for (key in obj) {                                                                                               // 355
        if (hasOwnProperty.call(obj, key)) {                                                                           // 356
          iterator.call(context, obj[key], key, obj);                                                                  // 357
        }                                                                                                              // 358
      }                                                                                                                // 359
    }                                                                                                                  // 360
  }                                                                                                                    // 361
  return obj;                                                                                                          // 362
}                                                                                                                      // 363
                                                                                                                       // 364
function forEachSorted(obj, iterator, context) {                                                                       // 365
  var keys = Object.keys(obj).sort();                                                                                  // 366
  for (var i = 0; i < keys.length; i++) {                                                                              // 367
    iterator.call(context, obj[keys[i]], keys[i]);                                                                     // 368
  }                                                                                                                    // 369
  return keys;                                                                                                         // 370
}                                                                                                                      // 371
                                                                                                                       // 372
                                                                                                                       // 373
/**                                                                                                                    // 374
 * when using forEach the params are value, key, but it is often useful to have key, value.                            // 375
 * @param {function(string, *)} iteratorFn                                                                             // 376
 * @returns {function(*, string)}                                                                                      // 377
 */                                                                                                                    // 378
function reverseParams(iteratorFn) {                                                                                   // 379
  return function(value, key) { iteratorFn(key, value); };                                                             // 380
}                                                                                                                      // 381
                                                                                                                       // 382
/**                                                                                                                    // 383
 * A consistent way of creating unique IDs in angular.                                                                 // 384
 *                                                                                                                     // 385
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before                   // 386
 * we hit number precision issues in JavaScript.                                                                       // 387
 *                                                                                                                     // 388
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M                                                                    // 389
 *                                                                                                                     // 390
 * @returns {number} an unique alpha-numeric string                                                                    // 391
 */                                                                                                                    // 392
function nextUid() {                                                                                                   // 393
  return ++uid;                                                                                                        // 394
}                                                                                                                      // 395
                                                                                                                       // 396
                                                                                                                       // 397
/**                                                                                                                    // 398
 * Set or clear the hashkey for an object.                                                                             // 399
 * @param obj object                                                                                                   // 400
 * @param h the hashkey (!truthy to delete the hashkey)                                                                // 401
 */                                                                                                                    // 402
function setHashKey(obj, h) {                                                                                          // 403
  if (h) {                                                                                                             // 404
    obj.$$hashKey = h;                                                                                                 // 405
  } else {                                                                                                             // 406
    delete obj.$$hashKey;                                                                                              // 407
  }                                                                                                                    // 408
}                                                                                                                      // 409
                                                                                                                       // 410
                                                                                                                       // 411
function baseExtend(dst, objs, deep) {                                                                                 // 412
  var h = dst.$$hashKey;                                                                                               // 413
                                                                                                                       // 414
  for (var i = 0, ii = objs.length; i < ii; ++i) {                                                                     // 415
    var obj = objs[i];                                                                                                 // 416
    if (!isObject(obj) && !isFunction(obj)) continue;                                                                  // 417
    var keys = Object.keys(obj);                                                                                       // 418
    for (var j = 0, jj = keys.length; j < jj; j++) {                                                                   // 419
      var key = keys[j];                                                                                               // 420
      var src = obj[key];                                                                                              // 421
                                                                                                                       // 422
      if (deep && isObject(src)) {                                                                                     // 423
        if (isDate(src)) {                                                                                             // 424
          dst[key] = new Date(src.valueOf());                                                                          // 425
        } else if (isRegExp(src)) {                                                                                    // 426
          dst[key] = new RegExp(src);                                                                                  // 427
        } else {                                                                                                       // 428
          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};                                                  // 429
          baseExtend(dst[key], [src], true);                                                                           // 430
        }                                                                                                              // 431
      } else {                                                                                                         // 432
        dst[key] = src;                                                                                                // 433
      }                                                                                                                // 434
    }                                                                                                                  // 435
  }                                                                                                                    // 436
                                                                                                                       // 437
  setHashKey(dst, h);                                                                                                  // 438
  return dst;                                                                                                          // 439
}                                                                                                                      // 440
                                                                                                                       // 441
/**                                                                                                                    // 442
 * @ngdoc function                                                                                                     // 443
 * @name angular.extend                                                                                                // 444
 * @module ng                                                                                                          // 445
 * @kind function                                                                                                      // 446
 *                                                                                                                     // 447
 * @description                                                                                                        // 448
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)                  // 449
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so           // 450
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.                      // 451
 *                                                                                                                     // 452
 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use                      // 453
 * {@link angular.merge} for this.                                                                                     // 454
 *                                                                                                                     // 455
 * @param {Object} dst Destination object.                                                                             // 456
 * @param {...Object} src Source object(s).                                                                            // 457
 * @returns {Object} Reference to `dst`.                                                                               // 458
 */                                                                                                                    // 459
function extend(dst) {                                                                                                 // 460
  return baseExtend(dst, slice.call(arguments, 1), false);                                                             // 461
}                                                                                                                      // 462
                                                                                                                       // 463
                                                                                                                       // 464
/**                                                                                                                    // 465
* @ngdoc function                                                                                                      // 466
* @name angular.merge                                                                                                  // 467
* @module ng                                                                                                           // 468
* @kind function                                                                                                       // 469
*                                                                                                                      // 470
* @description                                                                                                         // 471
* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)            // 472
* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so            // 473
* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.                        // 474
*                                                                                                                      // 475
* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source              // 476
* objects, performing a deep copy.                                                                                     // 477
*                                                                                                                      // 478
* @param {Object} dst Destination object.                                                                              // 479
* @param {...Object} src Source object(s).                                                                             // 480
* @returns {Object} Reference to `dst`.                                                                                // 481
*/                                                                                                                     // 482
function merge(dst) {                                                                                                  // 483
  return baseExtend(dst, slice.call(arguments, 1), true);                                                              // 484
}                                                                                                                      // 485
                                                                                                                       // 486
                                                                                                                       // 487
                                                                                                                       // 488
function toInt(str) {                                                                                                  // 489
  return parseInt(str, 10);                                                                                            // 490
}                                                                                                                      // 491
                                                                                                                       // 492
                                                                                                                       // 493
function inherit(parent, extra) {                                                                                      // 494
  return extend(Object.create(parent), extra);                                                                         // 495
}                                                                                                                      // 496
                                                                                                                       // 497
/**                                                                                                                    // 498
 * @ngdoc function                                                                                                     // 499
 * @name angular.noop                                                                                                  // 500
 * @module ng                                                                                                          // 501
 * @kind function                                                                                                      // 502
 *                                                                                                                     // 503
 * @description                                                                                                        // 504
 * A function that performs no operations. This function can be useful when writing code in the                        // 505
 * functional style.                                                                                                   // 506
   ```js                                                                                                               // 507
     function foo(callback) {                                                                                          // 508
       var result = calculateResult();                                                                                 // 509
       (callback || angular.noop)(result);                                                                             // 510
     }                                                                                                                 // 511
   ```                                                                                                                 // 512
 */                                                                                                                    // 513
function noop() {}                                                                                                     // 514
noop.$inject = [];                                                                                                     // 515
                                                                                                                       // 516
                                                                                                                       // 517
/**                                                                                                                    // 518
 * @ngdoc function                                                                                                     // 519
 * @name angular.identity                                                                                              // 520
 * @module ng                                                                                                          // 521
 * @kind function                                                                                                      // 522
 *                                                                                                                     // 523
 * @description                                                                                                        // 524
 * A function that returns its first argument. This function is useful when writing code in the                        // 525
 * functional style.                                                                                                   // 526
 *                                                                                                                     // 527
   ```js                                                                                                               // 528
     function transformer(transformationFn, value) {                                                                   // 529
       return (transformationFn || angular.identity)(value);                                                           // 530
     };                                                                                                                // 531
   ```                                                                                                                 // 532
  * @param {*} value to be returned.                                                                                   // 533
  * @returns {*} the value passed in.                                                                                  // 534
 */                                                                                                                    // 535
function identity($) {return $;}                                                                                       // 536
identity.$inject = [];                                                                                                 // 537
                                                                                                                       // 538
                                                                                                                       // 539
function valueFn(value) {return function() {return value;};}                                                           // 540
                                                                                                                       // 541
function hasCustomToString(obj) {                                                                                      // 542
  return isFunction(obj.toString) && obj.toString !== Object.prototype.toString;                                       // 543
}                                                                                                                      // 544
                                                                                                                       // 545
                                                                                                                       // 546
/**                                                                                                                    // 547
 * @ngdoc function                                                                                                     // 548
 * @name angular.isUndefined                                                                                           // 549
 * @module ng                                                                                                          // 550
 * @kind function                                                                                                      // 551
 *                                                                                                                     // 552
 * @description                                                                                                        // 553
 * Determines if a reference is undefined.                                                                             // 554
 *                                                                                                                     // 555
 * @param {*} value Reference to check.                                                                                // 556
 * @returns {boolean} True if `value` is undefined.                                                                    // 557
 */                                                                                                                    // 558
function isUndefined(value) {return typeof value === 'undefined';}                                                     // 559
                                                                                                                       // 560
                                                                                                                       // 561
/**                                                                                                                    // 562
 * @ngdoc function                                                                                                     // 563
 * @name angular.isDefined                                                                                             // 564
 * @module ng                                                                                                          // 565
 * @kind function                                                                                                      // 566
 *                                                                                                                     // 567
 * @description                                                                                                        // 568
 * Determines if a reference is defined.                                                                               // 569
 *                                                                                                                     // 570
 * @param {*} value Reference to check.                                                                                // 571
 * @returns {boolean} True if `value` is defined.                                                                      // 572
 */                                                                                                                    // 573
function isDefined(value) {return typeof value !== 'undefined';}                                                       // 574
                                                                                                                       // 575
                                                                                                                       // 576
/**                                                                                                                    // 577
 * @ngdoc function                                                                                                     // 578
 * @name angular.isObject                                                                                              // 579
 * @module ng                                                                                                          // 580
 * @kind function                                                                                                      // 581
 *                                                                                                                     // 582
 * @description                                                                                                        // 583
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not                            // 584
 * considered to be objects. Note that JavaScript arrays are objects.                                                  // 585
 *                                                                                                                     // 586
 * @param {*} value Reference to check.                                                                                // 587
 * @returns {boolean} True if `value` is an `Object` but not `null`.                                                   // 588
 */                                                                                                                    // 589
function isObject(value) {                                                                                             // 590
  // http://jsperf.com/isobject4                                                                                       // 591
  return value !== null && typeof value === 'object';                                                                  // 592
}                                                                                                                      // 593
                                                                                                                       // 594
                                                                                                                       // 595
/**                                                                                                                    // 596
 * Determine if a value is an object with a null prototype                                                             // 597
 *                                                                                                                     // 598
 * @returns {boolean} True if `value` is an `Object` with a null prototype                                             // 599
 */                                                                                                                    // 600
function isBlankObject(value) {                                                                                        // 601
  return value !== null && typeof value === 'object' && !getPrototypeOf(value);                                        // 602
}                                                                                                                      // 603
                                                                                                                       // 604
                                                                                                                       // 605
/**                                                                                                                    // 606
 * @ngdoc function                                                                                                     // 607
 * @name angular.isString                                                                                              // 608
 * @module ng                                                                                                          // 609
 * @kind function                                                                                                      // 610
 *                                                                                                                     // 611
 * @description                                                                                                        // 612
 * Determines if a reference is a `String`.                                                                            // 613
 *                                                                                                                     // 614
 * @param {*} value Reference to check.                                                                                // 615
 * @returns {boolean} True if `value` is a `String`.                                                                   // 616
 */                                                                                                                    // 617
function isString(value) {return typeof value === 'string';}                                                           // 618
                                                                                                                       // 619
                                                                                                                       // 620
/**                                                                                                                    // 621
 * @ngdoc function                                                                                                     // 622
 * @name angular.isNumber                                                                                              // 623
 * @module ng                                                                                                          // 624
 * @kind function                                                                                                      // 625
 *                                                                                                                     // 626
 * @description                                                                                                        // 627
 * Determines if a reference is a `Number`.                                                                            // 628
 *                                                                                                                     // 629
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.                                             // 630
 *                                                                                                                     // 631
 * If you wish to exclude these then you can use the native                                                            // 632
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)             // 633
 * method.                                                                                                             // 634
 *                                                                                                                     // 635
 * @param {*} value Reference to check.                                                                                // 636
 * @returns {boolean} True if `value` is a `Number`.                                                                   // 637
 */                                                                                                                    // 638
function isNumber(value) {return typeof value === 'number';}                                                           // 639
                                                                                                                       // 640
                                                                                                                       // 641
/**                                                                                                                    // 642
 * @ngdoc function                                                                                                     // 643
 * @name angular.isDate                                                                                                // 644
 * @module ng                                                                                                          // 645
 * @kind function                                                                                                      // 646
 *                                                                                                                     // 647
 * @description                                                                                                        // 648
 * Determines if a value is a date.                                                                                    // 649
 *                                                                                                                     // 650
 * @param {*} value Reference to check.                                                                                // 651
 * @returns {boolean} True if `value` is a `Date`.                                                                     // 652
 */                                                                                                                    // 653
function isDate(value) {                                                                                               // 654
  return toString.call(value) === '[object Date]';                                                                     // 655
}                                                                                                                      // 656
                                                                                                                       // 657
                                                                                                                       // 658
/**                                                                                                                    // 659
 * @ngdoc function                                                                                                     // 660
 * @name angular.isArray                                                                                               // 661
 * @module ng                                                                                                          // 662
 * @kind function                                                                                                      // 663
 *                                                                                                                     // 664
 * @description                                                                                                        // 665
 * Determines if a reference is an `Array`.                                                                            // 666
 *                                                                                                                     // 667
 * @param {*} value Reference to check.                                                                                // 668
 * @returns {boolean} True if `value` is an `Array`.                                                                   // 669
 */                                                                                                                    // 670
var isArray = Array.isArray;                                                                                           // 671
                                                                                                                       // 672
/**                                                                                                                    // 673
 * @ngdoc function                                                                                                     // 674
 * @name angular.isFunction                                                                                            // 675
 * @module ng                                                                                                          // 676
 * @kind function                                                                                                      // 677
 *                                                                                                                     // 678
 * @description                                                                                                        // 679
 * Determines if a reference is a `Function`.                                                                          // 680
 *                                                                                                                     // 681
 * @param {*} value Reference to check.                                                                                // 682
 * @returns {boolean} True if `value` is a `Function`.                                                                 // 683
 */                                                                                                                    // 684
function isFunction(value) {return typeof value === 'function';}                                                       // 685
                                                                                                                       // 686
                                                                                                                       // 687
/**                                                                                                                    // 688
 * Determines if a value is a regular expression object.                                                               // 689
 *                                                                                                                     // 690
 * @private                                                                                                            // 691
 * @param {*} value Reference to check.                                                                                // 692
 * @returns {boolean} True if `value` is a `RegExp`.                                                                   // 693
 */                                                                                                                    // 694
function isRegExp(value) {                                                                                             // 695
  return toString.call(value) === '[object RegExp]';                                                                   // 696
}                                                                                                                      // 697
                                                                                                                       // 698
                                                                                                                       // 699
/**                                                                                                                    // 700
 * Checks if `obj` is a window object.                                                                                 // 701
 *                                                                                                                     // 702
 * @private                                                                                                            // 703
 * @param {*} obj Object to check                                                                                      // 704
 * @returns {boolean} True if `obj` is a window obj.                                                                   // 705
 */                                                                                                                    // 706
function isWindow(obj) {                                                                                               // 707
  return obj && obj.window === obj;                                                                                    // 708
}                                                                                                                      // 709
                                                                                                                       // 710
                                                                                                                       // 711
function isScope(obj) {                                                                                                // 712
  return obj && obj.$evalAsync && obj.$watch;                                                                          // 713
}                                                                                                                      // 714
                                                                                                                       // 715
                                                                                                                       // 716
function isFile(obj) {                                                                                                 // 717
  return toString.call(obj) === '[object File]';                                                                       // 718
}                                                                                                                      // 719
                                                                                                                       // 720
                                                                                                                       // 721
function isFormData(obj) {                                                                                             // 722
  return toString.call(obj) === '[object FormData]';                                                                   // 723
}                                                                                                                      // 724
                                                                                                                       // 725
                                                                                                                       // 726
function isBlob(obj) {                                                                                                 // 727
  return toString.call(obj) === '[object Blob]';                                                                       // 728
}                                                                                                                      // 729
                                                                                                                       // 730
                                                                                                                       // 731
function isBoolean(value) {                                                                                            // 732
  return typeof value === 'boolean';                                                                                   // 733
}                                                                                                                      // 734
                                                                                                                       // 735
                                                                                                                       // 736
function isPromiseLike(obj) {                                                                                          // 737
  return obj && isFunction(obj.then);                                                                                  // 738
}                                                                                                                      // 739
                                                                                                                       // 740
                                                                                                                       // 741
var TYPED_ARRAY_REGEXP = /^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/;
function isTypedArray(value) {                                                                                         // 743
  return TYPED_ARRAY_REGEXP.test(toString.call(value));                                                                // 744
}                                                                                                                      // 745
                                                                                                                       // 746
                                                                                                                       // 747
var trim = function(value) {                                                                                           // 748
  return isString(value) ? value.trim() : value;                                                                       // 749
};                                                                                                                     // 750
                                                                                                                       // 751
// Copied from:                                                                                                        // 752
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021             // 753
// Prereq: s is a string.                                                                                              // 754
var escapeForRegexp = function(s) {                                                                                    // 755
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').                                                           // 756
           replace(/\x08/g, '\\x08');                                                                                  // 757
};                                                                                                                     // 758
                                                                                                                       // 759
                                                                                                                       // 760
/**                                                                                                                    // 761
 * @ngdoc function                                                                                                     // 762
 * @name angular.isElement                                                                                             // 763
 * @module ng                                                                                                          // 764
 * @kind function                                                                                                      // 765
 *                                                                                                                     // 766
 * @description                                                                                                        // 767
 * Determines if a reference is a DOM element (or wrapped jQuery element).                                             // 768
 *                                                                                                                     // 769
 * @param {*} value Reference to check.                                                                                // 770
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).                                    // 771
 */                                                                                                                    // 772
function isElement(node) {                                                                                             // 773
  return !!(node &&                                                                                                    // 774
    (node.nodeName  // we are a direct element                                                                         // 775
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API                   // 776
}                                                                                                                      // 777
                                                                                                                       // 778
/**                                                                                                                    // 779
 * @param str 'key1,key2,...'                                                                                          // 780
 * @returns {object} in the form of {key1:true, key2:true, ...}                                                        // 781
 */                                                                                                                    // 782
function makeMap(str) {                                                                                                // 783
  var obj = {}, items = str.split(","), i;                                                                             // 784
  for (i = 0; i < items.length; i++) {                                                                                 // 785
    obj[items[i]] = true;                                                                                              // 786
  }                                                                                                                    // 787
  return obj;                                                                                                          // 788
}                                                                                                                      // 789
                                                                                                                       // 790
                                                                                                                       // 791
function nodeName_(element) {                                                                                          // 792
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));                                           // 793
}                                                                                                                      // 794
                                                                                                                       // 795
function includes(array, obj) {                                                                                        // 796
  return Array.prototype.indexOf.call(array, obj) != -1;                                                               // 797
}                                                                                                                      // 798
                                                                                                                       // 799
function arrayRemove(array, value) {                                                                                   // 800
  var index = array.indexOf(value);                                                                                    // 801
  if (index >= 0) {                                                                                                    // 802
    array.splice(index, 1);                                                                                            // 803
  }                                                                                                                    // 804
  return index;                                                                                                        // 805
}                                                                                                                      // 806
                                                                                                                       // 807
/**                                                                                                                    // 808
 * @ngdoc function                                                                                                     // 809
 * @name angular.copy                                                                                                  // 810
 * @module ng                                                                                                          // 811
 * @kind function                                                                                                      // 812
 *                                                                                                                     // 813
 * @description                                                                                                        // 814
 * Creates a deep copy of `source`, which should be an object or an array.                                             // 815
 *                                                                                                                     // 816
 * * If no destination is supplied, a copy of the object or array is created.                                          // 817
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)                        // 818
 *   are deleted and then all elements/properties from the source are copied to it.                                    // 819
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.                        // 820
 * * If `source` is identical to 'destination' an exception will be thrown.                                            // 821
 *                                                                                                                     // 822
 * @param {*} source The source that will be used to make a copy.                                                      // 823
 *                   Can be any type, including primitives, `null`, and `undefined`.                                   // 824
 * @param {(Object|Array)=} destination Destination into which the source is copied. If                                // 825
 *     provided, must be of the same type as `source`.                                                                 // 826
 * @returns {*} The copy or updated `destination`, if `destination` was specified.                                     // 827
 *                                                                                                                     // 828
 * @example                                                                                                            // 829
 <example module="copyExample">                                                                                        // 830
 <file name="index.html">                                                                                              // 831
 <div ng-controller="ExampleController">                                                                               // 832
 <form novalidate class="simple-form">                                                                                 // 833
 Name: <input type="text" ng-model="user.name" /><br />                                                                // 834
 E-mail: <input type="email" ng-model="user.email" /><br />                                                            // 835
 Gender: <input type="radio" ng-model="user.gender" value="male" />male                                                // 836
 <input type="radio" ng-model="user.gender" value="female" />female<br />                                              // 837
 <button ng-click="reset()">RESET</button>                                                                             // 838
 <button ng-click="update(user)">SAVE</button>                                                                         // 839
 </form>                                                                                                               // 840
 <pre>form = {{user | json}}</pre>                                                                                     // 841
 <pre>master = {{master | json}}</pre>                                                                                 // 842
 </div>                                                                                                                // 843
                                                                                                                       // 844
 <script>                                                                                                              // 845
  angular.module('copyExample', [])                                                                                    // 846
    .controller('ExampleController', ['$scope', function($scope) {                                                     // 847
      $scope.master= {};                                                                                               // 848
                                                                                                                       // 849
      $scope.update = function(user) {                                                                                 // 850
        // Example with 1 argument                                                                                     // 851
        $scope.master= angular.copy(user);                                                                             // 852
      };                                                                                                               // 853
                                                                                                                       // 854
      $scope.reset = function() {                                                                                      // 855
        // Example with 2 arguments                                                                                    // 856
        angular.copy($scope.master, $scope.user);                                                                      // 857
      };                                                                                                               // 858
                                                                                                                       // 859
      $scope.reset();                                                                                                  // 860
    }]);                                                                                                               // 861
 </script>                                                                                                             // 862
 </file>                                                                                                               // 863
 </example>                                                                                                            // 864
 */                                                                                                                    // 865
function copy(source, destination, stackSource, stackDest) {                                                           // 866
  if (isWindow(source) || isScope(source)) {                                                                           // 867
    throw ngMinErr('cpws',                                                                                             // 868
      "Can't copy! Making copies of Window or Scope instances is not supported.");                                     // 869
  }                                                                                                                    // 870
  if (isTypedArray(destination)) {                                                                                     // 871
    throw ngMinErr('cpta',                                                                                             // 872
      "Can't copy! TypedArray destination cannot be mutated.");                                                        // 873
  }                                                                                                                    // 874
                                                                                                                       // 875
  if (!destination) {                                                                                                  // 876
    destination = source;                                                                                              // 877
    if (isObject(source)) {                                                                                            // 878
      var index;                                                                                                       // 879
      if (stackSource && (index = stackSource.indexOf(source)) !== -1) {                                               // 880
        return stackDest[index];                                                                                       // 881
      }                                                                                                                // 882
                                                                                                                       // 883
      // TypedArray, Date and RegExp have specific copy functionality and must be                                      // 884
      // pushed onto the stack before returning.                                                                       // 885
      // Array and other objects create the base object and recurse to copy child                                      // 886
      // objects. The array/object will be pushed onto the stack when recursed.                                        // 887
      if (isArray(source)) {                                                                                           // 888
        return copy(source, [], stackSource, stackDest);                                                               // 889
      } else if (isTypedArray(source)) {                                                                               // 890
        destination = new source.constructor(source);                                                                  // 891
      } else if (isDate(source)) {                                                                                     // 892
        destination = new Date(source.getTime());                                                                      // 893
      } else if (isRegExp(source)) {                                                                                   // 894
        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);                                // 895
        destination.lastIndex = source.lastIndex;                                                                      // 896
      } else if (isFunction(source.cloneNode)) {                                                                       // 897
          destination = source.cloneNode(true);                                                                        // 898
      } else {                                                                                                         // 899
        var emptyObject = Object.create(getPrototypeOf(source));                                                       // 900
        return copy(source, emptyObject, stackSource, stackDest);                                                      // 901
      }                                                                                                                // 902
                                                                                                                       // 903
      if (stackDest) {                                                                                                 // 904
        stackSource.push(source);                                                                                      // 905
        stackDest.push(destination);                                                                                   // 906
      }                                                                                                                // 907
    }                                                                                                                  // 908
  } else {                                                                                                             // 909
    if (source === destination) throw ngMinErr('cpi',                                                                  // 910
      "Can't copy! Source and destination are identical.");                                                            // 911
                                                                                                                       // 912
    stackSource = stackSource || [];                                                                                   // 913
    stackDest = stackDest || [];                                                                                       // 914
                                                                                                                       // 915
    if (isObject(source)) {                                                                                            // 916
      stackSource.push(source);                                                                                        // 917
      stackDest.push(destination);                                                                                     // 918
    }                                                                                                                  // 919
                                                                                                                       // 920
    var result, key;                                                                                                   // 921
    if (isArray(source)) {                                                                                             // 922
      destination.length = 0;                                                                                          // 923
      for (var i = 0; i < source.length; i++) {                                                                        // 924
        destination.push(copy(source[i], null, stackSource, stackDest));                                               // 925
      }                                                                                                                // 926
    } else {                                                                                                           // 927
      var h = destination.$$hashKey;                                                                                   // 928
      if (isArray(destination)) {                                                                                      // 929
        destination.length = 0;                                                                                        // 930
      } else {                                                                                                         // 931
        forEach(destination, function(value, key) {                                                                    // 932
          delete destination[key];                                                                                     // 933
        });                                                                                                            // 934
      }                                                                                                                // 935
      if (isBlankObject(source)) {                                                                                     // 936
        // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty               // 937
        for (key in source) {                                                                                          // 938
          destination[key] = copy(source[key], null, stackSource, stackDest);                                          // 939
        }                                                                                                              // 940
      } else if (source && typeof source.hasOwnProperty === 'function') {                                              // 941
        // Slow path, which must rely on hasOwnProperty                                                                // 942
        for (key in source) {                                                                                          // 943
          if (source.hasOwnProperty(key)) {                                                                            // 944
            destination[key] = copy(source[key], null, stackSource, stackDest);                                        // 945
          }                                                                                                            // 946
        }                                                                                                              // 947
      } else {                                                                                                         // 948
        // Slowest path --- hasOwnProperty can't be called as a method                                                 // 949
        for (key in source) {                                                                                          // 950
          if (hasOwnProperty.call(source, key)) {                                                                      // 951
            destination[key] = copy(source[key], null, stackSource, stackDest);                                        // 952
          }                                                                                                            // 953
        }                                                                                                              // 954
      }                                                                                                                // 955
      setHashKey(destination,h);                                                                                       // 956
    }                                                                                                                  // 957
  }                                                                                                                    // 958
  return destination;                                                                                                  // 959
}                                                                                                                      // 960
                                                                                                                       // 961
/**                                                                                                                    // 962
 * Creates a shallow copy of an object, an array or a primitive.                                                       // 963
 *                                                                                                                     // 964
 * Assumes that there are no proto properties for objects.                                                             // 965
 */                                                                                                                    // 966
function shallowCopy(src, dst) {                                                                                       // 967
  if (isArray(src)) {                                                                                                  // 968
    dst = dst || [];                                                                                                   // 969
                                                                                                                       // 970
    for (var i = 0, ii = src.length; i < ii; i++) {                                                                    // 971
      dst[i] = src[i];                                                                                                 // 972
    }                                                                                                                  // 973
  } else if (isObject(src)) {                                                                                          // 974
    dst = dst || {};                                                                                                   // 975
                                                                                                                       // 976
    for (var key in src) {                                                                                             // 977
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {                                                         // 978
        dst[key] = src[key];                                                                                           // 979
      }                                                                                                                // 980
    }                                                                                                                  // 981
  }                                                                                                                    // 982
                                                                                                                       // 983
  return dst || src;                                                                                                   // 984
}                                                                                                                      // 985
                                                                                                                       // 986
                                                                                                                       // 987
/**                                                                                                                    // 988
 * @ngdoc function                                                                                                     // 989
 * @name angular.equals                                                                                                // 990
 * @module ng                                                                                                          // 991
 * @kind function                                                                                                      // 992
 *                                                                                                                     // 993
 * @description                                                                                                        // 994
 * Determines if two objects or two values are equivalent. Supports value types, regular                               // 995
 * expressions, arrays and objects.                                                                                    // 996
 *                                                                                                                     // 997
 * Two objects or values are considered equivalent if at least one of the following is true:                           // 998
 *                                                                                                                     // 999
 * * Both objects or values pass `===` comparison.                                                                     // 1000
 * * Both objects or values are of the same type and all of their properties are equal by                              // 1001
 *   comparing them with `angular.equals`.                                                                             // 1002
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)                       // 1003
 * * Both values represent the same regular expression (In JavaScript,                                                 // 1004
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual                      // 1005
 *   representation matches).                                                                                          // 1006
 *                                                                                                                     // 1007
 * During a property comparison, properties of `function` type and properties with names                               // 1008
 * that begin with `$` are ignored.                                                                                    // 1009
 *                                                                                                                     // 1010
 * Scope and DOMWindow objects are being compared only by identify (`===`).                                            // 1011
 *                                                                                                                     // 1012
 * @param {*} o1 Object or value to compare.                                                                           // 1013
 * @param {*} o2 Object or value to compare.                                                                           // 1014
 * @returns {boolean} True if arguments are equal.                                                                     // 1015
 */                                                                                                                    // 1016
function equals(o1, o2) {                                                                                              // 1017
  if (o1 === o2) return true;                                                                                          // 1018
  if (o1 === null || o2 === null) return false;                                                                        // 1019
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN                                                              // 1020
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;                                                             // 1021
  if (t1 == t2) {                                                                                                      // 1022
    if (t1 == 'object') {                                                                                              // 1023
      if (isArray(o1)) {                                                                                               // 1024
        if (!isArray(o2)) return false;                                                                                // 1025
        if ((length = o1.length) == o2.length) {                                                                       // 1026
          for (key = 0; key < length; key++) {                                                                         // 1027
            if (!equals(o1[key], o2[key])) return false;                                                               // 1028
          }                                                                                                            // 1029
          return true;                                                                                                 // 1030
        }                                                                                                              // 1031
      } else if (isDate(o1)) {                                                                                         // 1032
        if (!isDate(o2)) return false;                                                                                 // 1033
        return equals(o1.getTime(), o2.getTime());                                                                     // 1034
      } else if (isRegExp(o1)) {                                                                                       // 1035
        return isRegExp(o2) ? o1.toString() == o2.toString() : false;                                                  // 1036
      } else {                                                                                                         // 1037
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||                                              // 1038
          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;                                                     // 1039
        keySet = createMap();                                                                                          // 1040
        for (key in o1) {                                                                                              // 1041
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;                                                  // 1042
          if (!equals(o1[key], o2[key])) return false;                                                                 // 1043
          keySet[key] = true;                                                                                          // 1044
        }                                                                                                              // 1045
        for (key in o2) {                                                                                              // 1046
          if (!(key in keySet) &&                                                                                      // 1047
              key.charAt(0) !== '$' &&                                                                                 // 1048
              isDefined(o2[key]) &&                                                                                    // 1049
              !isFunction(o2[key])) return false;                                                                      // 1050
        }                                                                                                              // 1051
        return true;                                                                                                   // 1052
      }                                                                                                                // 1053
    }                                                                                                                  // 1054
  }                                                                                                                    // 1055
  return false;                                                                                                        // 1056
}                                                                                                                      // 1057
                                                                                                                       // 1058
var csp = function() {                                                                                                 // 1059
  if (!isDefined(csp.rules)) {                                                                                         // 1060
                                                                                                                       // 1061
                                                                                                                       // 1062
    var ngCspElement = (document.querySelector('[ng-csp]') ||                                                          // 1063
                    document.querySelector('[data-ng-csp]'));                                                          // 1064
                                                                                                                       // 1065
    if (ngCspElement) {                                                                                                // 1066
      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||                                                      // 1067
                    ngCspElement.getAttribute('data-ng-csp');                                                          // 1068
      csp.rules = {                                                                                                    // 1069
        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),                            // 1070
        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)                           // 1071
      };                                                                                                               // 1072
    } else {                                                                                                           // 1073
      csp.rules = {                                                                                                    // 1074
        noUnsafeEval: noUnsafeEval(),                                                                                  // 1075
        noInlineStyle: false                                                                                           // 1076
      };                                                                                                               // 1077
    }                                                                                                                  // 1078
  }                                                                                                                    // 1079
                                                                                                                       // 1080
  return csp.rules;                                                                                                    // 1081
                                                                                                                       // 1082
  function noUnsafeEval() {                                                                                            // 1083
    try {                                                                                                              // 1084
      /* jshint -W031, -W054 */                                                                                        // 1085
      new Function('');                                                                                                // 1086
      /* jshint +W031, +W054 */                                                                                        // 1087
      return false;                                                                                                    // 1088
    } catch (e) {                                                                                                      // 1089
      return true;                                                                                                     // 1090
    }                                                                                                                  // 1091
  }                                                                                                                    // 1092
};                                                                                                                     // 1093
                                                                                                                       // 1094
/**                                                                                                                    // 1095
 * @ngdoc directive                                                                                                    // 1096
 * @module ng                                                                                                          // 1097
 * @name ngJq                                                                                                          // 1098
 *                                                                                                                     // 1099
 * @element ANY                                                                                                        // 1100
 * @param {string=} ngJq the name of the library available under `window`                                              // 1101
 * to be used for angular.element                                                                                      // 1102
 * @description                                                                                                        // 1103
 * Use this directive to force the angular.element library.  This should be                                            // 1104
 * used to force either jqLite by leaving ng-jq blank or setting the name of                                           // 1105
 * the jquery variable under window (eg. jQuery).                                                                      // 1106
 *                                                                                                                     // 1107
 * Since angular looks for this directive when it is loaded (doesn't wait for the                                      // 1108
 * DOMContentLoaded event), it must be placed on an element that comes before the script                               // 1109
 * which loads angular. Also, only the first instance of `ng-jq` will be used and all                                  // 1110
 * others ignored.                                                                                                     // 1111
 *                                                                                                                     // 1112
 * @example                                                                                                            // 1113
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.                                // 1114
 ```html                                                                                                               // 1115
 <!doctype html>                                                                                                       // 1116
 <html ng-app ng-jq>                                                                                                   // 1117
 ...                                                                                                                   // 1118
 ...                                                                                                                   // 1119
 </html>                                                                                                               // 1120
 ```                                                                                                                   // 1121
 * @example                                                                                                            // 1122
 * This example shows how to use a jQuery based library of a different name.                                           // 1123
 * The library name must be available at the top most 'window'.                                                        // 1124
 ```html                                                                                                               // 1125
 <!doctype html>                                                                                                       // 1126
 <html ng-app ng-jq="jQueryLib">                                                                                       // 1127
 ...                                                                                                                   // 1128
 ...                                                                                                                   // 1129
 </html>                                                                                                               // 1130
 ```                                                                                                                   // 1131
 */                                                                                                                    // 1132
var jq = function() {                                                                                                  // 1133
  if (isDefined(jq.name_)) return jq.name_;                                                                            // 1134
  var el;                                                                                                              // 1135
  var i, ii = ngAttrPrefixes.length, prefix, name;                                                                     // 1136
  for (i = 0; i < ii; ++i) {                                                                                           // 1137
    prefix = ngAttrPrefixes[i];                                                                                        // 1138
    if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {                                       // 1139
      name = el.getAttribute(prefix + 'jq');                                                                           // 1140
      break;                                                                                                           // 1141
    }                                                                                                                  // 1142
  }                                                                                                                    // 1143
                                                                                                                       // 1144
  return (jq.name_ = name);                                                                                            // 1145
};                                                                                                                     // 1146
                                                                                                                       // 1147
function concat(array1, array2, index) {                                                                               // 1148
  return array1.concat(slice.call(array2, index));                                                                     // 1149
}                                                                                                                      // 1150
                                                                                                                       // 1151
function sliceArgs(args, startIndex) {                                                                                 // 1152
  return slice.call(args, startIndex || 0);                                                                            // 1153
}                                                                                                                      // 1154
                                                                                                                       // 1155
                                                                                                                       // 1156
/* jshint -W101 */                                                                                                     // 1157
/**                                                                                                                    // 1158
 * @ngdoc function                                                                                                     // 1159
 * @name angular.bind                                                                                                  // 1160
 * @module ng                                                                                                          // 1161
 * @kind function                                                                                                      // 1162
 *                                                                                                                     // 1163
 * @description                                                                                                        // 1164
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for                         // 1165
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also                       // 1166
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as                                // 1167
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *                                                                                                                     // 1169
 * @param {Object} self Context which `fn` should be evaluated in.                                                     // 1170
 * @param {function()} fn Function to be bound.                                                                        // 1171
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.                                     // 1172
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.                                 // 1173
 */                                                                                                                    // 1174
/* jshint +W101 */                                                                                                     // 1175
function bind(self, fn) {                                                                                              // 1176
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];                                                 // 1177
  if (isFunction(fn) && !(fn instanceof RegExp)) {                                                                     // 1178
    return curryArgs.length                                                                                            // 1179
      ? function() {                                                                                                   // 1180
          return arguments.length                                                                                      // 1181
            ? fn.apply(self, concat(curryArgs, arguments, 0))                                                          // 1182
            : fn.apply(self, curryArgs);                                                                               // 1183
        }                                                                                                              // 1184
      : function() {                                                                                                   // 1185
          return arguments.length                                                                                      // 1186
            ? fn.apply(self, arguments)                                                                                // 1187
            : fn.call(self);                                                                                           // 1188
        };                                                                                                             // 1189
  } else {                                                                                                             // 1190
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)                   // 1191
    return fn;                                                                                                         // 1192
  }                                                                                                                    // 1193
}                                                                                                                      // 1194
                                                                                                                       // 1195
                                                                                                                       // 1196
function toJsonReplacer(key, value) {                                                                                  // 1197
  var val = value;                                                                                                     // 1198
                                                                                                                       // 1199
  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {                                     // 1200
    val = undefined;                                                                                                   // 1201
  } else if (isWindow(value)) {                                                                                        // 1202
    val = '$WINDOW';                                                                                                   // 1203
  } else if (value &&  document === value) {                                                                           // 1204
    val = '$DOCUMENT';                                                                                                 // 1205
  } else if (isScope(value)) {                                                                                         // 1206
    val = '$SCOPE';                                                                                                    // 1207
  }                                                                                                                    // 1208
                                                                                                                       // 1209
  return val;                                                                                                          // 1210
}                                                                                                                      // 1211
                                                                                                                       // 1212
                                                                                                                       // 1213
/**                                                                                                                    // 1214
 * @ngdoc function                                                                                                     // 1215
 * @name angular.toJson                                                                                                // 1216
 * @module ng                                                                                                          // 1217
 * @kind function                                                                                                      // 1218
 *                                                                                                                     // 1219
 * @description                                                                                                        // 1220
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be                        // 1221
 * stripped since angular uses this notation internally.                                                               // 1222
 *                                                                                                                     // 1223
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.                                      // 1224
 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.            // 1225
 *    If set to an integer, the JSON output will contain that many spaces per indentation.                             // 1226
 * @returns {string|undefined} JSON-ified string representing `obj`.                                                   // 1227
 */                                                                                                                    // 1228
function toJson(obj, pretty) {                                                                                         // 1229
  if (typeof obj === 'undefined') return undefined;                                                                    // 1230
  if (!isNumber(pretty)) {                                                                                             // 1231
    pretty = pretty ? 2 : null;                                                                                        // 1232
  }                                                                                                                    // 1233
  return JSON.stringify(obj, toJsonReplacer, pretty);                                                                  // 1234
}                                                                                                                      // 1235
                                                                                                                       // 1236
                                                                                                                       // 1237
/**                                                                                                                    // 1238
 * @ngdoc function                                                                                                     // 1239
 * @name angular.fromJson                                                                                              // 1240
 * @module ng                                                                                                          // 1241
 * @kind function                                                                                                      // 1242
 *                                                                                                                     // 1243
 * @description                                                                                                        // 1244
 * Deserializes a JSON string.                                                                                         // 1245
 *                                                                                                                     // 1246
 * @param {string} json JSON string to deserialize.                                                                    // 1247
 * @returns {Object|Array|string|number} Deserialized JSON string.                                                     // 1248
 */                                                                                                                    // 1249
function fromJson(json) {                                                                                              // 1250
  return isString(json)                                                                                                // 1251
      ? JSON.parse(json)                                                                                               // 1252
      : json;                                                                                                          // 1253
}                                                                                                                      // 1254
                                                                                                                       // 1255
                                                                                                                       // 1256
function timezoneToOffset(timezone, fallback) {                                                                        // 1257
  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;                               // 1258
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;                                          // 1259
}                                                                                                                      // 1260
                                                                                                                       // 1261
                                                                                                                       // 1262
function addDateMinutes(date, minutes) {                                                                               // 1263
  date = new Date(date.getTime());                                                                                     // 1264
  date.setMinutes(date.getMinutes() + minutes);                                                                        // 1265
  return date;                                                                                                         // 1266
}                                                                                                                      // 1267
                                                                                                                       // 1268
                                                                                                                       // 1269
function convertTimezoneToLocal(date, timezone, reverse) {                                                             // 1270
  reverse = reverse ? -1 : 1;                                                                                          // 1271
  var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                           // 1272
  return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));                                  // 1273
}                                                                                                                      // 1274
                                                                                                                       // 1275
                                                                                                                       // 1276
/**                                                                                                                    // 1277
 * @returns {string} Returns the string representation of the element.                                                 // 1278
 */                                                                                                                    // 1279
function startingTag(element) {                                                                                        // 1280
  element = jqLite(element).clone();                                                                                   // 1281
  try {                                                                                                                // 1282
    // turns out IE does not let you set .html() on elements which                                                     // 1283
    // are not allowed to have children. So we just ignore it.                                                         // 1284
    element.empty();                                                                                                   // 1285
  } catch (e) {}                                                                                                       // 1286
  var elemHtml = jqLite('<div>').append(element).html();                                                               // 1287
  try {                                                                                                                // 1288
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :                                              // 1289
        elemHtml.                                                                                                      // 1290
          match(/^(<[^>]+>)/)[1].                                                                                      // 1291
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });                     // 1292
  } catch (e) {                                                                                                        // 1293
    return lowercase(elemHtml);                                                                                        // 1294
  }                                                                                                                    // 1295
                                                                                                                       // 1296
}                                                                                                                      // 1297
                                                                                                                       // 1298
                                                                                                                       // 1299
/////////////////////////////////////////////////                                                                      // 1300
                                                                                                                       // 1301
/**                                                                                                                    // 1302
 * Tries to decode the URI component without throwing an exception.                                                    // 1303
 *                                                                                                                     // 1304
 * @private                                                                                                            // 1305
 * @param str value potential URI component to check.                                                                  // 1306
 * @returns {boolean} True if `value` can be decoded                                                                   // 1307
 * with the decodeURIComponent function.                                                                               // 1308
 */                                                                                                                    // 1309
function tryDecodeURIComponent(value) {                                                                                // 1310
  try {                                                                                                                // 1311
    return decodeURIComponent(value);                                                                                  // 1312
  } catch (e) {                                                                                                        // 1313
    // Ignore any invalid uri component                                                                                // 1314
  }                                                                                                                    // 1315
}                                                                                                                      // 1316
                                                                                                                       // 1317
                                                                                                                       // 1318
/**                                                                                                                    // 1319
 * Parses an escaped url query string into key-value pairs.                                                            // 1320
 * @returns {Object.<string,boolean|Array>}                                                                            // 1321
 */                                                                                                                    // 1322
function parseKeyValue(/**string*/keyValue) {                                                                          // 1323
  var obj = {};                                                                                                        // 1324
  forEach((keyValue || "").split('&'), function(keyValue) {                                                            // 1325
    var splitPoint, key, val;                                                                                          // 1326
    if (keyValue) {                                                                                                    // 1327
      key = keyValue = keyValue.replace(/\+/g,'%20');                                                                  // 1328
      splitPoint = keyValue.indexOf('=');                                                                              // 1329
      if (splitPoint !== -1) {                                                                                         // 1330
        key = keyValue.substring(0, splitPoint);                                                                       // 1331
        val = keyValue.substring(splitPoint + 1);                                                                      // 1332
      }                                                                                                                // 1333
      key = tryDecodeURIComponent(key);                                                                                // 1334
      if (isDefined(key)) {                                                                                            // 1335
        val = isDefined(val) ? tryDecodeURIComponent(val) : true;                                                      // 1336
        if (!hasOwnProperty.call(obj, key)) {                                                                          // 1337
          obj[key] = val;                                                                                              // 1338
        } else if (isArray(obj[key])) {                                                                                // 1339
          obj[key].push(val);                                                                                          // 1340
        } else {                                                                                                       // 1341
          obj[key] = [obj[key],val];                                                                                   // 1342
        }                                                                                                              // 1343
      }                                                                                                                // 1344
    }                                                                                                                  // 1345
  });                                                                                                                  // 1346
  return obj;                                                                                                          // 1347
}                                                                                                                      // 1348
                                                                                                                       // 1349
function toKeyValue(obj) {                                                                                             // 1350
  var parts = [];                                                                                                      // 1351
  forEach(obj, function(value, key) {                                                                                  // 1352
    if (isArray(value)) {                                                                                              // 1353
      forEach(value, function(arrayValue) {                                                                            // 1354
        parts.push(encodeUriQuery(key, true) +                                                                         // 1355
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));                               // 1356
      });                                                                                                              // 1357
    } else {                                                                                                           // 1358
    parts.push(encodeUriQuery(key, true) +                                                                             // 1359
               (value === true ? '' : '=' + encodeUriQuery(value, true)));                                             // 1360
    }                                                                                                                  // 1361
  });                                                                                                                  // 1362
  return parts.length ? parts.join('&') : '';                                                                          // 1363
}                                                                                                                      // 1364
                                                                                                                       // 1365
                                                                                                                       // 1366
/**                                                                                                                    // 1367
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow                           // 1368
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path                       // 1369
 * segments:                                                                                                           // 1370
 *    segment       = *pchar                                                                                           // 1371
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                                // 1372
 *    pct-encoded   = "%" HEXDIG HEXDIG                                                                                // 1373
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                            // 1374
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                                // 1375
 *                     / "*" / "+" / "," / ";" / "="                                                                   // 1376
 */                                                                                                                    // 1377
function encodeUriSegment(val) {                                                                                       // 1378
  return encodeUriQuery(val, true).                                                                                    // 1379
             replace(/%26/gi, '&').                                                                                    // 1380
             replace(/%3D/gi, '=').                                                                                    // 1381
             replace(/%2B/gi, '+');                                                                                    // 1382
}                                                                                                                      // 1383
                                                                                                                       // 1384
                                                                                                                       // 1385
/**                                                                                                                    // 1386
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom                    // 1387
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be                       // 1388
 * encoded per http://tools.ietf.org/html/rfc3986:                                                                     // 1389
 *    query       = *( pchar / "/" / "?" )                                                                             // 1390
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                                // 1391
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                            // 1392
 *    pct-encoded   = "%" HEXDIG HEXDIG                                                                                // 1393
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                                // 1394
 *                     / "*" / "+" / "," / ";" / "="                                                                   // 1395
 */                                                                                                                    // 1396
function encodeUriQuery(val, pctEncodeSpaces) {                                                                        // 1397
  return encodeURIComponent(val).                                                                                      // 1398
             replace(/%40/gi, '@').                                                                                    // 1399
             replace(/%3A/gi, ':').                                                                                    // 1400
             replace(/%24/g, '$').                                                                                     // 1401
             replace(/%2C/gi, ',').                                                                                    // 1402
             replace(/%3B/gi, ';').                                                                                    // 1403
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));                                                         // 1404
}                                                                                                                      // 1405
                                                                                                                       // 1406
var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];                                                              // 1407
                                                                                                                       // 1408
function getNgAttribute(element, ngAttr) {                                                                             // 1409
  var attr, i, ii = ngAttrPrefixes.length;                                                                             // 1410
  for (i = 0; i < ii; ++i) {                                                                                           // 1411
    attr = ngAttrPrefixes[i] + ngAttr;                                                                                 // 1412
    if (isString(attr = element.getAttribute(attr))) {                                                                 // 1413
      return attr;                                                                                                     // 1414
    }                                                                                                                  // 1415
  }                                                                                                                    // 1416
  return null;                                                                                                         // 1417
}                                                                                                                      // 1418
                                                                                                                       // 1419
/**                                                                                                                    // 1420
 * @ngdoc directive                                                                                                    // 1421
 * @name ngApp                                                                                                         // 1422
 * @module ng                                                                                                          // 1423
 *                                                                                                                     // 1424
 * @element ANY                                                                                                        // 1425
 * @param {angular.Module} ngApp an optional application                                                               // 1426
 *   {@link angular.module module} name to load.                                                                       // 1427
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be                  // 1428
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which                  // 1429
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described                  // 1430
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in                      // 1431
 *   tracking down the root of these bugs.                                                                             // 1432
 *                                                                                                                     // 1433
 * @description                                                                                                        // 1434
 *                                                                                                                     // 1435
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive                            // 1436
 * designates the **root element** of the application and is typically placed near the root element                    // 1437
 * of the page - e.g. on the `<body>` or `<html>` tags.                                                                // 1438
 *                                                                                                                     // 1439
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`                        // 1440
 * found in the document will be used to define the root element to auto-bootstrap as an                               // 1441
 * application. To run multiple applications in an HTML document you must manually bootstrap them using                // 1442
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.                       // 1443
 *                                                                                                                     // 1444
 * You can specify an **AngularJS module** to be used as the root module for the application.  This                    // 1445
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It                      // 1446
 * should contain the application code needed or have dependencies on other modules that will                          // 1447
 * contain the code. See {@link angular.module} for more information.                                                  // 1448
 *                                                                                                                     // 1449
 * In the example below if the `ngApp` directive were not placed on the `html` element then the                        // 1450
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`                   // 1451
 * would not be resolved to `3`.                                                                                       // 1452
 *                                                                                                                     // 1453
 * `ngApp` is the easiest, and most common way to bootstrap an application.                                            // 1454
 *                                                                                                                     // 1455
 <example module="ngAppDemo">                                                                                          // 1456
   <file name="index.html">                                                                                            // 1457
   <div ng-controller="ngAppDemoController">                                                                           // 1458
     I can add: {{a}} + {{b}} =  {{ a+b }}                                                                             // 1459
   </div>                                                                                                              // 1460
   </file>                                                                                                             // 1461
   <file name="script.js">                                                                                             // 1462
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {                                // 1463
     $scope.a = 1;                                                                                                     // 1464
     $scope.b = 2;                                                                                                     // 1465
   });                                                                                                                 // 1466
   </file>                                                                                                             // 1467
 </example>                                                                                                            // 1468
 *                                                                                                                     // 1469
 * Using `ngStrictDi`, you would see something like this:                                                              // 1470
 *                                                                                                                     // 1471
 <example ng-app-included="true">                                                                                      // 1472
   <file name="index.html">                                                                                            // 1473
   <div ng-app="ngAppStrictDemo" ng-strict-di>                                                                         // 1474
       <div ng-controller="GoodController1">                                                                           // 1475
           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1476
                                                                                                                       // 1477
           <p>This renders because the controller does not fail to                                                     // 1478
              instantiate, by using explicit annotation style (see                                                     // 1479
              script.js for details)                                                                                   // 1480
           </p>                                                                                                        // 1481
       </div>                                                                                                          // 1482
                                                                                                                       // 1483
       <div ng-controller="GoodController2">                                                                           // 1484
           Name: <input ng-model="name"><br />                                                                         // 1485
           Hello, {{name}}!                                                                                            // 1486
                                                                                                                       // 1487
           <p>This renders because the controller does not fail to                                                     // 1488
              instantiate, by using explicit annotation style                                                          // 1489
              (see script.js for details)                                                                              // 1490
           </p>                                                                                                        // 1491
       </div>                                                                                                          // 1492
                                                                                                                       // 1493
       <div ng-controller="BadController">                                                                             // 1494
           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1495
                                                                                                                       // 1496
           <p>The controller could not be instantiated, due to relying                                                 // 1497
              on automatic function annotations (which are disabled in                                                 // 1498
              strict mode). As such, the content of this section is not                                                // 1499
              interpolated, and there should be an error in your web console.                                          // 1500
           </p>                                                                                                        // 1501
       </div>                                                                                                          // 1502
   </div>                                                                                                              // 1503
   </file>                                                                                                             // 1504
   <file name="script.js">                                                                                             // 1505
   angular.module('ngAppStrictDemo', [])                                                                               // 1506
     // BadController will fail to instantiate, due to relying on automatic function annotation,                       // 1507
     // rather than an explicit annotation                                                                             // 1508
     .controller('BadController', function($scope) {                                                                   // 1509
       $scope.a = 1;                                                                                                   // 1510
       $scope.b = 2;                                                                                                   // 1511
     })                                                                                                                // 1512
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,                    // 1513
     // due to using explicit annotations using the array style and $inject property, respectively.                    // 1514
     .controller('GoodController1', ['$scope', function($scope) {                                                      // 1515
       $scope.a = 1;                                                                                                   // 1516
       $scope.b = 2;                                                                                                   // 1517
     }])                                                                                                               // 1518
     .controller('GoodController2', GoodController2);                                                                  // 1519
     function GoodController2($scope) {                                                                                // 1520
       $scope.name = "World";                                                                                          // 1521
     }                                                                                                                 // 1522
     GoodController2.$inject = ['$scope'];                                                                             // 1523
   </file>                                                                                                             // 1524
   <file name="style.css">                                                                                             // 1525
   div[ng-controller] {                                                                                                // 1526
       margin-bottom: 1em;                                                                                             // 1527
       -webkit-border-radius: 4px;                                                                                     // 1528
       border-radius: 4px;                                                                                             // 1529
       border: 1px solid;                                                                                              // 1530
       padding: .5em;                                                                                                  // 1531
   }                                                                                                                   // 1532
   div[ng-controller^=Good] {                                                                                          // 1533
       border-color: #d6e9c6;                                                                                          // 1534
       background-color: #dff0d8;                                                                                      // 1535
       color: #3c763d;                                                                                                 // 1536
   }                                                                                                                   // 1537
   div[ng-controller^=Bad] {                                                                                           // 1538
       border-color: #ebccd1;                                                                                          // 1539
       background-color: #f2dede;                                                                                      // 1540
       color: #a94442;                                                                                                 // 1541
       margin-bottom: 0;                                                                                               // 1542
   }                                                                                                                   // 1543
   </file>                                                                                                             // 1544
 </example>                                                                                                            // 1545
 */                                                                                                                    // 1546
function angularInit(element, bootstrap) {                                                                             // 1547
  var appElement,                                                                                                      // 1548
      module,                                                                                                          // 1549
      config = {};                                                                                                     // 1550
                                                                                                                       // 1551
  // The element `element` has priority over any other element                                                         // 1552
  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1553
    var name = prefix + 'app';                                                                                         // 1554
                                                                                                                       // 1555
    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {                                           // 1556
      appElement = element;                                                                                            // 1557
      module = element.getAttribute(name);                                                                             // 1558
    }                                                                                                                  // 1559
  });                                                                                                                  // 1560
  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1561
    var name = prefix + 'app';                                                                                         // 1562
    var candidate;                                                                                                     // 1563
                                                                                                                       // 1564
    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {                    // 1565
      appElement = candidate;                                                                                          // 1566
      module = candidate.getAttribute(name);                                                                           // 1567
    }                                                                                                                  // 1568
  });                                                                                                                  // 1569
  if (appElement) {                                                                                                    // 1570
    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;                                                // 1571
    bootstrap(appElement, module ? [module] : [], config);                                                             // 1572
  }                                                                                                                    // 1573
}                                                                                                                      // 1574
                                                                                                                       // 1575
/**                                                                                                                    // 1576
 * @ngdoc function                                                                                                     // 1577
 * @name angular.bootstrap                                                                                             // 1578
 * @module ng                                                                                                          // 1579
 * @description                                                                                                        // 1580
 * Use this function to manually start up angular application.                                                         // 1581
 *                                                                                                                     // 1582
 * See: {@link guide/bootstrap Bootstrap}                                                                              // 1583
 *                                                                                                                     // 1584
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.                         // 1585
 * They must use {@link ng.directive:ngApp ngApp}.                                                                     // 1586
 *                                                                                                                     // 1587
 * Angular will detect if it has been loaded into the browser more than once and only allow the                        // 1588
 * first loaded script to be bootstrapped and will report a warning to the browser console for                         // 1589
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise                      // 1590
 * multiple instances of Angular try to work on the DOM.                                                               // 1591
 *                                                                                                                     // 1592
 * ```html                                                                                                             // 1593
 * <!doctype html>                                                                                                     // 1594
 * <html>                                                                                                              // 1595
 * <body>                                                                                                              // 1596
 * <div ng-controller="WelcomeController">                                                                             // 1597
 *   {{greeting}}                                                                                                      // 1598
 * </div>                                                                                                              // 1599
 *                                                                                                                     // 1600
 * <script src="angular.js"></script>                                                                                  // 1601
 * <script>                                                                                                            // 1602
 *   var app = angular.module('demo', [])                                                                              // 1603
 *   .controller('WelcomeController', function($scope) {                                                               // 1604
 *       $scope.greeting = 'Welcome!';                                                                                 // 1605
 *   });                                                                                                               // 1606
 *   angular.bootstrap(document, ['demo']);                                                                            // 1607
 * </script>                                                                                                           // 1608
 * </body>                                                                                                             // 1609
 * </html>                                                                                                             // 1610
 * ```                                                                                                                 // 1611
 *                                                                                                                     // 1612
 * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1613
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.                    // 1614
 *     Each item in the array should be the name of a predefined module or a (DI annotated)                            // 1615
 *     function that will be invoked by the injector as a `config` block.                                              // 1616
 *     See: {@link angular.module modules}                                                                             // 1617
 * @param {Object=} config an object for defining configuration options for the application. The                       // 1618
 *     following keys are supported:                                                                                   // 1619
 *                                                                                                                     // 1620
 * * `strictDi` - disable automatic function annotation for the application. This is meant to                          // 1621
 *   assist in finding bugs which break minified code. Defaults to `false`.                                            // 1622
 *                                                                                                                     // 1623
 * @returns {auto.$injector} Returns the newly created injector for this app.                                          // 1624
 */                                                                                                                    // 1625
function bootstrap(element, modules, config) {                                                                         // 1626
  if (!isObject(config)) config = {};                                                                                  // 1627
  var defaultConfig = {                                                                                                // 1628
    strictDi: false                                                                                                    // 1629
  };                                                                                                                   // 1630
  config = extend(defaultConfig, config);                                                                              // 1631
  var doBootstrap = function() {                                                                                       // 1632
    element = jqLite(element);                                                                                         // 1633
                                                                                                                       // 1634
    if (element.injector()) {                                                                                          // 1635
      var tag = (element[0] === document) ? 'document' : startingTag(element);                                         // 1636
      //Encode angle brackets to prevent input from being sanitized to empty string #8683                              // 1637
      throw ngMinErr(                                                                                                  // 1638
          'btstrpd',                                                                                                   // 1639
          "App Already Bootstrapped with this Element '{0}'",                                                          // 1640
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));                                                                // 1641
    }                                                                                                                  // 1642
                                                                                                                       // 1643
    modules = modules || [];                                                                                           // 1644
    modules.unshift(['$provide', function($provide) {                                                                  // 1645
      $provide.value('$rootElement', element);                                                                         // 1646
    }]);                                                                                                               // 1647
                                                                                                                       // 1648
    if (config.debugInfoEnabled) {                                                                                     // 1649
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.                        // 1650
      modules.push(['$compileProvider', function($compileProvider) {                                                   // 1651
        $compileProvider.debugInfoEnabled(true);                                                                       // 1652
      }]);                                                                                                             // 1653
    }                                                                                                                  // 1654
                                                                                                                       // 1655
    modules.unshift('ng');                                                                                             // 1656
    var injector = createInjector(modules, config.strictDi);                                                           // 1657
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',                                            // 1658
       function bootstrapApply(scope, element, compile, injector) {                                                    // 1659
        scope.$apply(function() {                                                                                      // 1660
          element.data('$injector', injector);                                                                         // 1661
          compile(element)(scope);                                                                                     // 1662
        });                                                                                                            // 1663
      }]                                                                                                               // 1664
    );                                                                                                                 // 1665
    return injector;                                                                                                   // 1666
  };                                                                                                                   // 1667
                                                                                                                       // 1668
  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;                                                                 // 1669
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;                                                                     // 1670
                                                                                                                       // 1671
  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {                                                              // 1672
    config.debugInfoEnabled = true;                                                                                    // 1673
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');                                                       // 1674
  }                                                                                                                    // 1675
                                                                                                                       // 1676
  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {                                                               // 1677
    return doBootstrap();                                                                                              // 1678
  }                                                                                                                    // 1679
                                                                                                                       // 1680
  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');                                                           // 1681
  angular.resumeBootstrap = function(extraModules) {                                                                   // 1682
    forEach(extraModules, function(module) {                                                                           // 1683
      modules.push(module);                                                                                            // 1684
    });                                                                                                                // 1685
    return doBootstrap();                                                                                              // 1686
  };                                                                                                                   // 1687
                                                                                                                       // 1688
  if (isFunction(angular.resumeDeferredBootstrap)) {                                                                   // 1689
    angular.resumeDeferredBootstrap();                                                                                 // 1690
  }                                                                                                                    // 1691
}                                                                                                                      // 1692
                                                                                                                       // 1693
/**                                                                                                                    // 1694
 * @ngdoc function                                                                                                     // 1695
 * @name angular.reloadWithDebugInfo                                                                                   // 1696
 * @module ng                                                                                                          // 1697
 * @description                                                                                                        // 1698
 * Use this function to reload the current application with debug information turned on.                               // 1699
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.                                    // 1700
 *                                                                                                                     // 1701
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.                                                          // 1702
 */                                                                                                                    // 1703
function reloadWithDebugInfo() {                                                                                       // 1704
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;                                                                 // 1705
  window.location.reload();                                                                                            // 1706
}                                                                                                                      // 1707
                                                                                                                       // 1708
/**                                                                                                                    // 1709
 * @name angular.getTestability                                                                                        // 1710
 * @module ng                                                                                                          // 1711
 * @description                                                                                                        // 1712
 * Get the testability service for the instance of Angular on the given                                                // 1713
 * element.                                                                                                            // 1714
 * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1715
 */                                                                                                                    // 1716
function getTestability(rootElement) {                                                                                 // 1717
  var injector = angular.element(rootElement).injector();                                                              // 1718
  if (!injector) {                                                                                                     // 1719
    throw ngMinErr('test',                                                                                             // 1720
      'no injector found for element argument to getTestability');                                                     // 1721
  }                                                                                                                    // 1722
  return injector.get('$$testability');                                                                                // 1723
}                                                                                                                      // 1724
                                                                                                                       // 1725
var SNAKE_CASE_REGEXP = /[A-Z]/g;                                                                                      // 1726
function snake_case(name, separator) {                                                                                 // 1727
  separator = separator || '_';                                                                                        // 1728
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {                                                       // 1729
    return (pos ? separator : '') + letter.toLowerCase();                                                              // 1730
  });                                                                                                                  // 1731
}                                                                                                                      // 1732
                                                                                                                       // 1733
var bindJQueryFired = false;                                                                                           // 1734
var skipDestroyOnNextJQueryCleanData;                                                                                  // 1735
function bindJQuery() {                                                                                                // 1736
  var originalCleanData;                                                                                               // 1737
                                                                                                                       // 1738
  if (bindJQueryFired) {                                                                                               // 1739
    return;                                                                                                            // 1740
  }                                                                                                                    // 1741
                                                                                                                       // 1742
  // bind to jQuery if present;                                                                                        // 1743
  var jqName = jq();                                                                                                   // 1744
  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)                                          // 1745
           !jqName             ? undefined     :   // use jqLite                                                       // 1746
                                 window[jqName];   // use jQuery specified by `ngJq`                                   // 1747
                                                                                                                       // 1748
  // Use jQuery if it exists with proper functionality, otherwise default to us.                                       // 1749
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.                                                         // 1750
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older                                 // 1751
  // versions. It will not work for sure with jQuery <1.7, though.                                                     // 1752
  if (jQuery && jQuery.fn.on) {                                                                                        // 1753
    jqLite = jQuery;                                                                                                   // 1754
    extend(jQuery.fn, {                                                                                                // 1755
      scope: JQLitePrototype.scope,                                                                                    // 1756
      isolateScope: JQLitePrototype.isolateScope,                                                                      // 1757
      controller: JQLitePrototype.controller,                                                                          // 1758
      injector: JQLitePrototype.injector,                                                                              // 1759
      inheritedData: JQLitePrototype.inheritedData                                                                     // 1760
    });                                                                                                                // 1761
                                                                                                                       // 1762
    // All nodes removed from the DOM via various jQuery APIs like .remove()                                           // 1763
    // are passed through jQuery.cleanData. Monkey-patch this method to fire                                           // 1764
    // the $destroy event on all removed nodes.                                                                        // 1765
    originalCleanData = jQuery.cleanData;                                                                              // 1766
    jQuery.cleanData = function(elems) {                                                                               // 1767
      var events;                                                                                                      // 1768
      if (!skipDestroyOnNextJQueryCleanData) {                                                                         // 1769
        for (var i = 0, elem; (elem = elems[i]) != null; i++) {                                                        // 1770
          events = jQuery._data(elem, "events");                                                                       // 1771
          if (events && events.$destroy) {                                                                             // 1772
            jQuery(elem).triggerHandler('$destroy');                                                                   // 1773
          }                                                                                                            // 1774
        }                                                                                                              // 1775
      } else {                                                                                                         // 1776
        skipDestroyOnNextJQueryCleanData = false;                                                                      // 1777
      }                                                                                                                // 1778
      originalCleanData(elems);                                                                                        // 1779
    };                                                                                                                 // 1780
  } else {                                                                                                             // 1781
    jqLite = JQLite;                                                                                                   // 1782
  }                                                                                                                    // 1783
                                                                                                                       // 1784
  angular.element = jqLite;                                                                                            // 1785
                                                                                                                       // 1786
  // Prevent double-proxying.                                                                                          // 1787
  bindJQueryFired = true;                                                                                              // 1788
}                                                                                                                      // 1789
                                                                                                                       // 1790
/**                                                                                                                    // 1791
 * throw error if the argument is falsy.                                                                               // 1792
 */                                                                                                                    // 1793
function assertArg(arg, name, reason) {                                                                                // 1794
  if (!arg) {                                                                                                          // 1795
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));                            // 1796
  }                                                                                                                    // 1797
  return arg;                                                                                                          // 1798
}                                                                                                                      // 1799
                                                                                                                       // 1800
function assertArgFn(arg, name, acceptArrayAnnotation) {                                                               // 1801
  if (acceptArrayAnnotation && isArray(arg)) {                                                                         // 1802
      arg = arg[arg.length - 1];                                                                                       // 1803
  }                                                                                                                    // 1804
                                                                                                                       // 1805
  assertArg(isFunction(arg), name, 'not a function, got ' +                                                            // 1806
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));                               // 1807
  return arg;                                                                                                          // 1808
}                                                                                                                      // 1809
                                                                                                                       // 1810
/**                                                                                                                    // 1811
 * throw error if the name given is hasOwnProperty                                                                     // 1812
 * @param  {String} name    the name to test                                                                           // 1813
 * @param  {String} context the context in which the name is used, such as module or directive                         // 1814
 */                                                                                                                    // 1815
function assertNotHasOwnProperty(name, context) {                                                                      // 1816
  if (name === 'hasOwnProperty') {                                                                                     // 1817
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);                                      // 1818
  }                                                                                                                    // 1819
}                                                                                                                      // 1820
                                                                                                                       // 1821
/**                                                                                                                    // 1822
 * Return the value accessible from the object by path. Any undefined traversals are ignored                           // 1823
 * @param {Object} obj starting object                                                                                 // 1824
 * @param {String} path path to traverse                                                                               // 1825
 * @param {boolean} [bindFnToScope=true]                                                                               // 1826
 * @returns {Object} value as accessible by path                                                                       // 1827
 */                                                                                                                    // 1828
//TODO(misko): this function needs to be removed                                                                       // 1829
function getter(obj, path, bindFnToScope) {                                                                            // 1830
  if (!path) return obj;                                                                                               // 1831
  var keys = path.split('.');                                                                                          // 1832
  var key;                                                                                                             // 1833
  var lastInstance = obj;                                                                                              // 1834
  var len = keys.length;                                                                                               // 1835
                                                                                                                       // 1836
  for (var i = 0; i < len; i++) {                                                                                      // 1837
    key = keys[i];                                                                                                     // 1838
    if (obj) {                                                                                                         // 1839
      obj = (lastInstance = obj)[key];                                                                                 // 1840
    }                                                                                                                  // 1841
  }                                                                                                                    // 1842
  if (!bindFnToScope && isFunction(obj)) {                                                                             // 1843
    return bind(lastInstance, obj);                                                                                    // 1844
  }                                                                                                                    // 1845
  return obj;                                                                                                          // 1846
}                                                                                                                      // 1847
                                                                                                                       // 1848
/**                                                                                                                    // 1849
 * Return the DOM siblings between the first and last node in the given array.                                         // 1850
 * @param {Array} array like object                                                                                    // 1851
 * @returns {Array} the inputted object or a jqLite collection containing the nodes                                    // 1852
 */                                                                                                                    // 1853
function getBlockNodes(nodes) {                                                                                        // 1854
  // TODO(perf): update `nodes` instead of creating a new object?                                                      // 1855
  var node = nodes[0];                                                                                                 // 1856
  var endNode = nodes[nodes.length - 1];                                                                               // 1857
  var blockNodes;                                                                                                      // 1858
                                                                                                                       // 1859
  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {                                                // 1860
    if (blockNodes || nodes[i] !== node) {                                                                             // 1861
      if (!blockNodes) {                                                                                               // 1862
        blockNodes = jqLite(slice.call(nodes, 0, i));                                                                  // 1863
      }                                                                                                                // 1864
      blockNodes.push(node);                                                                                           // 1865
    }                                                                                                                  // 1866
  }                                                                                                                    // 1867
                                                                                                                       // 1868
  return blockNodes || nodes;                                                                                          // 1869
}                                                                                                                      // 1870
                                                                                                                       // 1871
                                                                                                                       // 1872
/**                                                                                                                    // 1873
 * Creates a new object without a prototype. This object is useful for lookup without having to                        // 1874
 * guard against prototypically inherited properties via hasOwnProperty.                                               // 1875
 *                                                                                                                     // 1876
 * Related micro-benchmarks:                                                                                           // 1877
 * - http://jsperf.com/object-create2                                                                                  // 1878
 * - http://jsperf.com/proto-map-lookup/2                                                                              // 1879
 * - http://jsperf.com/for-in-vs-object-keys2                                                                          // 1880
 *                                                                                                                     // 1881
 * @returns {Object}                                                                                                   // 1882
 */                                                                                                                    // 1883
function createMap() {                                                                                                 // 1884
  return Object.create(null);                                                                                          // 1885
}                                                                                                                      // 1886
                                                                                                                       // 1887
var NODE_TYPE_ELEMENT = 1;                                                                                             // 1888
var NODE_TYPE_ATTRIBUTE = 2;                                                                                           // 1889
var NODE_TYPE_TEXT = 3;                                                                                                // 1890
var NODE_TYPE_COMMENT = 8;                                                                                             // 1891
var NODE_TYPE_DOCUMENT = 9;                                                                                            // 1892
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;                                                                                  // 1893
                                                                                                                       // 1894
/**                                                                                                                    // 1895
 * @ngdoc type                                                                                                         // 1896
 * @name angular.Module                                                                                                // 1897
 * @module ng                                                                                                          // 1898
 * @description                                                                                                        // 1899
 *                                                                                                                     // 1900
 * Interface for configuring angular {@link angular.module modules}.                                                   // 1901
 */                                                                                                                    // 1902
                                                                                                                       // 1903
function setupModuleLoader(window) {                                                                                   // 1904
                                                                                                                       // 1905
  var $injectorMinErr = minErr('$injector');                                                                           // 1906
  var ngMinErr = minErr('ng');                                                                                         // 1907
                                                                                                                       // 1908
  function ensure(obj, name, factory) {                                                                                // 1909
    return obj[name] || (obj[name] = factory());                                                                       // 1910
  }                                                                                                                    // 1911
                                                                                                                       // 1912
  var angular = ensure(window, 'angular', Object);                                                                     // 1913
                                                                                                                       // 1914
  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap           // 1915
  angular.$$minErr = angular.$$minErr || minErr;                                                                       // 1916
                                                                                                                       // 1917
  return ensure(angular, 'module', function() {                                                                        // 1918
    /** @type {Object.<string, angular.Module>} */                                                                     // 1919
    var modules = {};                                                                                                  // 1920
                                                                                                                       // 1921
    /**                                                                                                                // 1922
     * @ngdoc function                                                                                                 // 1923
     * @name angular.module                                                                                            // 1924
     * @module ng                                                                                                      // 1925
     * @description                                                                                                    // 1926
     *                                                                                                                 // 1927
     * The `angular.module` is a global place for creating, registering and retrieving Angular                         // 1928
     * modules.                                                                                                        // 1929
     * All modules (angular core or 3rd party) that should be available to an application must be                      // 1930
     * registered using this mechanism.                                                                                // 1931
     *                                                                                                                 // 1932
     * Passing one argument retrieves an existing {@link angular.Module},                                              // 1933
     * whereas passing more than one argument creates a new {@link angular.Module}                                     // 1934
     *                                                                                                                 // 1935
     *                                                                                                                 // 1936
     * # Module                                                                                                        // 1937
     *                                                                                                                 // 1938
     * A module is a collection of services, directives, controllers, filters, and configuration information.          // 1939
     * `angular.module` is used to configure the {@link auto.$injector $injector}.                                     // 1940
     *                                                                                                                 // 1941
     * ```js                                                                                                           // 1942
     * // Create a new module                                                                                          // 1943
     * var myModule = angular.module('myModule', []);                                                                  // 1944
     *                                                                                                                 // 1945
     * // register a new service                                                                                       // 1946
     * myModule.value('appName', 'MyCoolApp');                                                                         // 1947
     *                                                                                                                 // 1948
     * // configure existing services inside initialization blocks.                                                    // 1949
     * myModule.config(['$locationProvider', function($locationProvider) {                                             // 1950
     *   // Configure existing providers                                                                               // 1951
     *   $locationProvider.hashPrefix('!');                                                                            // 1952
     * }]);                                                                                                            // 1953
     * ```                                                                                                             // 1954
     *                                                                                                                 // 1955
     * Then you can create an injector and load your modules like this:                                                // 1956
     *                                                                                                                 // 1957
     * ```js                                                                                                           // 1958
     * var injector = angular.injector(['ng', 'myModule'])                                                             // 1959
     * ```                                                                                                             // 1960
     *                                                                                                                 // 1961
     * However it's more likely that you'll just use                                                                   // 1962
     * {@link ng.directive:ngApp ngApp} or                                                                             // 1963
     * {@link angular.bootstrap} to simplify this process for you.                                                     // 1964
     *                                                                                                                 // 1965
     * @param {!string} name The name of the module to create or retrieve.                                             // 1966
     * @param {!Array.<string>=} requires If specified then new module is being created. If                            // 1967
     *        unspecified then the module is being retrieved for further configuration.                                // 1968
     * @param {Function=} configFn Optional configuration function for the module. Same as                             // 1969
     *        {@link angular.Module#config Module#config()}.                                                           // 1970
     * @returns {module} new module with the {@link angular.Module} api.                                               // 1971
     */                                                                                                                // 1972
    return function module(name, requires, configFn) {                                                                 // 1973
      var assertNotHasOwnProperty = function(name, context) {                                                          // 1974
        if (name === 'hasOwnProperty') {                                                                               // 1975
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);                                // 1976
        }                                                                                                              // 1977
      };                                                                                                               // 1978
                                                                                                                       // 1979
      assertNotHasOwnProperty(name, 'module');                                                                         // 1980
      if (requires && modules.hasOwnProperty(name)) {                                                                  // 1981
        modules[name] = null;                                                                                          // 1982
      }                                                                                                                // 1983
      return ensure(modules, name, function() {                                                                        // 1984
        if (!requires) {                                                                                               // 1985
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +                     // 1986
             "the module name or forgot to load it. If registering a module ensure that you " +                        // 1987
             "specify the dependencies as the second argument.", name);                                                // 1988
        }                                                                                                              // 1989
                                                                                                                       // 1990
        /** @type {!Array.<Array.<*>>} */                                                                              // 1991
        var invokeQueue = [];                                                                                          // 1992
                                                                                                                       // 1993
        /** @type {!Array.<Function>} */                                                                               // 1994
        var configBlocks = [];                                                                                         // 1995
                                                                                                                       // 1996
        /** @type {!Array.<Function>} */                                                                               // 1997
        var runBlocks = [];                                                                                            // 1998
                                                                                                                       // 1999
        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);                                         // 2000
                                                                                                                       // 2001
        /** @type {angular.Module} */                                                                                  // 2002
        var moduleInstance = {                                                                                         // 2003
          // Private state                                                                                             // 2004
          _invokeQueue: invokeQueue,                                                                                   // 2005
          _configBlocks: configBlocks,                                                                                 // 2006
          _runBlocks: runBlocks,                                                                                       // 2007
                                                                                                                       // 2008
          /**                                                                                                          // 2009
           * @ngdoc property                                                                                           // 2010
           * @name angular.Module#requires                                                                             // 2011
           * @module ng                                                                                                // 2012
           *                                                                                                           // 2013
           * @description                                                                                              // 2014
           * Holds the list of modules which the injector will load before the current module is                       // 2015
           * loaded.                                                                                                   // 2016
           */                                                                                                          // 2017
          requires: requires,                                                                                          // 2018
                                                                                                                       // 2019
          /**                                                                                                          // 2020
           * @ngdoc property                                                                                           // 2021
           * @name angular.Module#name                                                                                 // 2022
           * @module ng                                                                                                // 2023
           *                                                                                                           // 2024
           * @description                                                                                              // 2025
           * Name of the module.                                                                                       // 2026
           */                                                                                                          // 2027
          name: name,                                                                                                  // 2028
                                                                                                                       // 2029
                                                                                                                       // 2030
          /**                                                                                                          // 2031
           * @ngdoc method                                                                                             // 2032
           * @name angular.Module#provider                                                                             // 2033
           * @module ng                                                                                                // 2034
           * @param {string} name service name                                                                         // 2035
           * @param {Function} providerType Construction function for creating new instance of the                     // 2036
           *                                service.                                                                   // 2037
           * @description                                                                                              // 2038
           * See {@link auto.$provide#provider $provide.provider()}.                                                   // 2039
           */                                                                                                          // 2040
          provider: invokeLaterAndSetModuleName('$provide', 'provider'),                                               // 2041
                                                                                                                       // 2042
          /**                                                                                                          // 2043
           * @ngdoc method                                                                                             // 2044
           * @name angular.Module#factory                                                                              // 2045
           * @module ng                                                                                                // 2046
           * @param {string} name service name                                                                         // 2047
           * @param {Function} providerFunction Function for creating new instance of the service.                     // 2048
           * @description                                                                                              // 2049
           * See {@link auto.$provide#factory $provide.factory()}.                                                     // 2050
           */                                                                                                          // 2051
          factory: invokeLaterAndSetModuleName('$provide', 'factory'),                                                 // 2052
                                                                                                                       // 2053
          /**                                                                                                          // 2054
           * @ngdoc method                                                                                             // 2055
           * @name angular.Module#service                                                                              // 2056
           * @module ng                                                                                                // 2057
           * @param {string} name service name                                                                         // 2058
           * @param {Function} constructor A constructor function that will be instantiated.                           // 2059
           * @description                                                                                              // 2060
           * See {@link auto.$provide#service $provide.service()}.                                                     // 2061
           */                                                                                                          // 2062
          service: invokeLaterAndSetModuleName('$provide', 'service'),                                                 // 2063
                                                                                                                       // 2064
          /**                                                                                                          // 2065
           * @ngdoc method                                                                                             // 2066
           * @name angular.Module#value                                                                                // 2067
           * @module ng                                                                                                // 2068
           * @param {string} name service name                                                                         // 2069
           * @param {*} object Service instance object.                                                                // 2070
           * @description                                                                                              // 2071
           * See {@link auto.$provide#value $provide.value()}.                                                         // 2072
           */                                                                                                          // 2073
          value: invokeLater('$provide', 'value'),                                                                     // 2074
                                                                                                                       // 2075
          /**                                                                                                          // 2076
           * @ngdoc method                                                                                             // 2077
           * @name angular.Module#constant                                                                             // 2078
           * @module ng                                                                                                // 2079
           * @param {string} name constant name                                                                        // 2080
           * @param {*} object Constant value.                                                                         // 2081
           * @description                                                                                              // 2082
           * Because the constant are fixed, they get applied before other provide methods.                            // 2083
           * See {@link auto.$provide#constant $provide.constant()}.                                                   // 2084
           */                                                                                                          // 2085
          constant: invokeLater('$provide', 'constant', 'unshift'),                                                    // 2086
                                                                                                                       // 2087
           /**                                                                                                         // 2088
           * @ngdoc method                                                                                             // 2089
           * @name angular.Module#decorator                                                                            // 2090
           * @module ng                                                                                                // 2091
           * @param {string} The name of the service to decorate.                                                      // 2092
           * @param {Function} This function will be invoked when the service needs to be                              // 2093
           *                                    instantiated and should return the decorated service instance.         // 2094
           * @description                                                                                              // 2095
           * See {@link auto.$provide#decorator $provide.decorator()}.                                                 // 2096
           */                                                                                                          // 2097
          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),                                             // 2098
                                                                                                                       // 2099
          /**                                                                                                          // 2100
           * @ngdoc method                                                                                             // 2101
           * @name angular.Module#animation                                                                            // 2102
           * @module ng                                                                                                // 2103
           * @param {string} name animation name                                                                       // 2104
           * @param {Function} animationFactory Factory function for creating new instance of an                       // 2105
           *                                    animation.                                                             // 2106
           * @description                                                                                              // 2107
           *                                                                                                           // 2108
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.                              // 2109
           *                                                                                                           // 2110
           *                                                                                                           // 2111
           * Defines an animation hook that can be later used with                                                     // 2112
           * {@link $animate $animate} service and directives that use this service.                                   // 2113
           *                                                                                                           // 2114
           * ```js                                                                                                     // 2115
           * module.animation('.animation-name', function($inject1, $inject2) {                                        // 2116
           *   return {                                                                                                // 2117
           *     eventName : function(element, done) {                                                                 // 2118
           *       //code to run the animation                                                                         // 2119
           *       //once complete, then run done()                                                                    // 2120
           *       return function cancellationFunction(element) {                                                     // 2121
           *         //code to cancel the animation                                                                    // 2122
           *       }                                                                                                   // 2123
           *     }                                                                                                     // 2124
           *   }                                                                                                       // 2125
           * })                                                                                                        // 2126
           * ```                                                                                                       // 2127
           *                                                                                                           // 2128
           * See {@link ng.$animateProvider#register $animateProvider.register()} and                                  // 2129
           * {@link ngAnimate ngAnimate module} for more information.                                                  // 2130
           */                                                                                                          // 2131
          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),                                      // 2132
                                                                                                                       // 2133
          /**                                                                                                          // 2134
           * @ngdoc method                                                                                             // 2135
           * @name angular.Module#filter                                                                               // 2136
           * @module ng                                                                                                // 2137
           * @param {string} name Filter name - this must be a valid angular expression identifier                     // 2138
           * @param {Function} filterFactory Factory function for creating new instance of filter.                     // 2139
           * @description                                                                                              // 2140
           * See {@link ng.$filterProvider#register $filterProvider.register()}.                                       // 2141
           *                                                                                                           // 2142
           * <div class="alert alert-warning">                                                                         // 2143
           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace        // 2145
           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                   // 2146
           * (`myapp_subsection_filterx`).                                                                             // 2147
           * </div>                                                                                                    // 2148
           */                                                                                                          // 2149
          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),                                          // 2150
                                                                                                                       // 2151
          /**                                                                                                          // 2152
           * @ngdoc method                                                                                             // 2153
           * @name angular.Module#controller                                                                           // 2154
           * @module ng                                                                                                // 2155
           * @param {string|Object} name Controller name, or an object map of controllers where the                    // 2156
           *    keys are the names and the values are the constructors.                                                // 2157
           * @param {Function} constructor Controller constructor function.                                            // 2158
           * @description                                                                                              // 2159
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.                               // 2160
           */                                                                                                          // 2161
          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),                                  // 2162
                                                                                                                       // 2163
          /**                                                                                                          // 2164
           * @ngdoc method                                                                                             // 2165
           * @name angular.Module#directive                                                                            // 2166
           * @module ng                                                                                                // 2167
           * @param {string|Object} name Directive name, or an object map of directives where the                      // 2168
           *    keys are the names and the values are the factories.                                                   // 2169
           * @param {Function} directiveFactory Factory function for creating new instance of                          // 2170
           * directives.                                                                                               // 2171
           * @description                                                                                              // 2172
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.                                   // 2173
           */                                                                                                          // 2174
          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),                                     // 2175
                                                                                                                       // 2176
          /**                                                                                                          // 2177
           * @ngdoc method                                                                                             // 2178
           * @name angular.Module#config                                                                               // 2179
           * @module ng                                                                                                // 2180
           * @param {Function} configFn Execute this function on module load. Useful for service                       // 2181
           *    configuration.                                                                                         // 2182
           * @description                                                                                              // 2183
           * Use this method to register work which needs to be performed on module loading.                           // 2184
           * For more about how to configure services, see                                                             // 2185
           * {@link providers#provider-recipe Provider Recipe}.                                                        // 2186
           */                                                                                                          // 2187
          config: config,                                                                                              // 2188
                                                                                                                       // 2189
          /**                                                                                                          // 2190
           * @ngdoc method                                                                                             // 2191
           * @name angular.Module#run                                                                                  // 2192
           * @module ng                                                                                                // 2193
           * @param {Function} initializationFn Execute this function after injector creation.                         // 2194
           *    Useful for application initialization.                                                                 // 2195
           * @description                                                                                              // 2196
           * Use this method to register work which should be performed when the injector is done                      // 2197
           * loading all modules.                                                                                      // 2198
           */                                                                                                          // 2199
          run: function(block) {                                                                                       // 2200
            runBlocks.push(block);                                                                                     // 2201
            return this;                                                                                               // 2202
          }                                                                                                            // 2203
        };                                                                                                             // 2204
                                                                                                                       // 2205
        if (configFn) {                                                                                                // 2206
          config(configFn);                                                                                            // 2207
        }                                                                                                              // 2208
                                                                                                                       // 2209
        return moduleInstance;                                                                                         // 2210
                                                                                                                       // 2211
        /**                                                                                                            // 2212
         * @param {string} provider                                                                                    // 2213
         * @param {string} method                                                                                      // 2214
         * @param {String=} insertMethod                                                                               // 2215
         * @returns {angular.Module}                                                                                   // 2216
         */                                                                                                            // 2217
        function invokeLater(provider, method, insertMethod, queue) {                                                  // 2218
          if (!queue) queue = invokeQueue;                                                                             // 2219
          return function() {                                                                                          // 2220
            queue[insertMethod || 'push']([provider, method, arguments]);                                              // 2221
            return moduleInstance;                                                                                     // 2222
          };                                                                                                           // 2223
        }                                                                                                              // 2224
                                                                                                                       // 2225
        /**                                                                                                            // 2226
         * @param {string} provider                                                                                    // 2227
         * @param {string} method                                                                                      // 2228
         * @returns {angular.Module}                                                                                   // 2229
         */                                                                                                            // 2230
        function invokeLaterAndSetModuleName(provider, method) {                                                       // 2231
          return function(recipeName, factoryFunction) {                                                               // 2232
            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;                   // 2233
            invokeQueue.push([provider, method, arguments]);                                                           // 2234
            return moduleInstance;                                                                                     // 2235
          };                                                                                                           // 2236
        }                                                                                                              // 2237
      });                                                                                                              // 2238
    };                                                                                                                 // 2239
  });                                                                                                                  // 2240
                                                                                                                       // 2241
}                                                                                                                      // 2242
                                                                                                                       // 2243
/* global: toDebugString: true */                                                                                      // 2244
                                                                                                                       // 2245
function serializeObject(obj) {                                                                                        // 2246
  var seen = [];                                                                                                       // 2247
                                                                                                                       // 2248
  return JSON.stringify(obj, function(key, val) {                                                                      // 2249
    val = toJsonReplacer(key, val);                                                                                    // 2250
    if (isObject(val)) {                                                                                               // 2251
                                                                                                                       // 2252
      if (seen.indexOf(val) >= 0) return '...';                                                                        // 2253
                                                                                                                       // 2254
      seen.push(val);                                                                                                  // 2255
    }                                                                                                                  // 2256
    return val;                                                                                                        // 2257
  });                                                                                                                  // 2258
}                                                                                                                      // 2259
                                                                                                                       // 2260
function toDebugString(obj) {                                                                                          // 2261
  if (typeof obj === 'function') {                                                                                     // 2262
    return obj.toString().replace(/ \{[\s\S]*$/, '');                                                                  // 2263
  } else if (isUndefined(obj)) {                                                                                       // 2264
    return 'undefined';                                                                                                // 2265
  } else if (typeof obj !== 'string') {                                                                                // 2266
    return serializeObject(obj);                                                                                       // 2267
  }                                                                                                                    // 2268
  return obj;                                                                                                          // 2269
}                                                                                                                      // 2270
                                                                                                                       // 2271
/* global angularModule: true,                                                                                         // 2272
  version: true,                                                                                                       // 2273
                                                                                                                       // 2274
  $CompileProvider,                                                                                                    // 2275
                                                                                                                       // 2276
  htmlAnchorDirective,                                                                                                 // 2277
  inputDirective,                                                                                                      // 2278
  inputDirective,                                                                                                      // 2279
  formDirective,                                                                                                       // 2280
  scriptDirective,                                                                                                     // 2281
  selectDirective,                                                                                                     // 2282
  styleDirective,                                                                                                      // 2283
  optionDirective,                                                                                                     // 2284
  ngBindDirective,                                                                                                     // 2285
  ngBindHtmlDirective,                                                                                                 // 2286
  ngBindTemplateDirective,                                                                                             // 2287
  ngClassDirective,                                                                                                    // 2288
  ngClassEvenDirective,                                                                                                // 2289
  ngClassOddDirective,                                                                                                 // 2290
  ngCloakDirective,                                                                                                    // 2291
  ngControllerDirective,                                                                                               // 2292
  ngFormDirective,                                                                                                     // 2293
  ngHideDirective,                                                                                                     // 2294
  ngIfDirective,                                                                                                       // 2295
  ngIncludeDirective,                                                                                                  // 2296
  ngIncludeFillContentDirective,                                                                                       // 2297
  ngInitDirective,                                                                                                     // 2298
  ngNonBindableDirective,                                                                                              // 2299
  ngPluralizeDirective,                                                                                                // 2300
  ngRepeatDirective,                                                                                                   // 2301
  ngShowDirective,                                                                                                     // 2302
  ngStyleDirective,                                                                                                    // 2303
  ngSwitchDirective,                                                                                                   // 2304
  ngSwitchWhenDirective,                                                                                               // 2305
  ngSwitchDefaultDirective,                                                                                            // 2306
  ngOptionsDirective,                                                                                                  // 2307
  ngTranscludeDirective,                                                                                               // 2308
  ngModelDirective,                                                                                                    // 2309
  ngListDirective,                                                                                                     // 2310
  ngChangeDirective,                                                                                                   // 2311
  patternDirective,                                                                                                    // 2312
  patternDirective,                                                                                                    // 2313
  requiredDirective,                                                                                                   // 2314
  requiredDirective,                                                                                                   // 2315
  minlengthDirective,                                                                                                  // 2316
  minlengthDirective,                                                                                                  // 2317
  maxlengthDirective,                                                                                                  // 2318
  maxlengthDirective,                                                                                                  // 2319
  ngValueDirective,                                                                                                    // 2320
  ngModelOptionsDirective,                                                                                             // 2321
  ngAttributeAliasDirectives,                                                                                          // 2322
  ngEventDirectives,                                                                                                   // 2323
                                                                                                                       // 2324
  $AnchorScrollProvider,                                                                                               // 2325
  $AnimateProvider,                                                                                                    // 2326
  $CoreAnimateCssProvider,                                                                                             // 2327
  $$CoreAnimateQueueProvider,                                                                                          // 2328
  $$CoreAnimateRunnerProvider,                                                                                         // 2329
  $BrowserProvider,                                                                                                    // 2330
  $CacheFactoryProvider,                                                                                               // 2331
  $ControllerProvider,                                                                                                 // 2332
  $DocumentProvider,                                                                                                   // 2333
  $ExceptionHandlerProvider,                                                                                           // 2334
  $FilterProvider,                                                                                                     // 2335
  $$ForceReflowProvider,                                                                                               // 2336
  $InterpolateProvider,                                                                                                // 2337
  $IntervalProvider,                                                                                                   // 2338
  $$HashMapProvider,                                                                                                   // 2339
  $HttpProvider,                                                                                                       // 2340
  $HttpParamSerializerProvider,                                                                                        // 2341
  $HttpParamSerializerJQLikeProvider,                                                                                  // 2342
  $HttpBackendProvider,                                                                                                // 2343
  $LocationProvider,                                                                                                   // 2344
  $LogProvider,                                                                                                        // 2345
  $ParseProvider,                                                                                                      // 2346
  $RootScopeProvider,                                                                                                  // 2347
  $QProvider,                                                                                                          // 2348
  $$QProvider,                                                                                                         // 2349
  $$SanitizeUriProvider,                                                                                               // 2350
  $SceProvider,                                                                                                        // 2351
  $SceDelegateProvider,                                                                                                // 2352
  $SnifferProvider,                                                                                                    // 2353
  $TemplateCacheProvider,                                                                                              // 2354
  $TemplateRequestProvider,                                                                                            // 2355
  $$TestabilityProvider,                                                                                               // 2356
  $TimeoutProvider,                                                                                                    // 2357
  $$RAFProvider,                                                                                                       // 2358
  $WindowProvider,                                                                                                     // 2359
  $$jqLiteProvider,                                                                                                    // 2360
  $$CookieReaderProvider                                                                                               // 2361
*/                                                                                                                     // 2362
                                                                                                                       // 2363
                                                                                                                       // 2364
/**                                                                                                                    // 2365
 * @ngdoc object                                                                                                       // 2366
 * @name angular.version                                                                                               // 2367
 * @module ng                                                                                                          // 2368
 * @description                                                                                                        // 2369
 * An object that contains information about the current AngularJS version.                                            // 2370
 *                                                                                                                     // 2371
 * This object has the following properties:                                                                           // 2372
 *                                                                                                                     // 2373
 * - `full` – `{string}` – Full version string, such as "0.9.18".                                                      // 2374
 * - `major` – `{number}` – Major version number, such as "0".                                                         // 2375
 * - `minor` – `{number}` – Minor version number, such as "9".                                                         // 2376
 * - `dot` – `{number}` – Dot version number, such as "18".                                                            // 2377
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".                                    // 2378
 */                                                                                                                    // 2379
var version = {                                                                                                        // 2380
  full: '1.4.6',    // all of these placeholder strings will be replaced by grunt's                                    // 2381
  major: 1,    // package task                                                                                         // 2382
  minor: 4,                                                                                                            // 2383
  dot: 6,                                                                                                              // 2384
  codeName: 'multiplicative-elevation'                                                                                 // 2385
};                                                                                                                     // 2386
                                                                                                                       // 2387
                                                                                                                       // 2388
function publishExternalAPI(angular) {                                                                                 // 2389
  extend(angular, {                                                                                                    // 2390
    'bootstrap': bootstrap,                                                                                            // 2391
    'copy': copy,                                                                                                      // 2392
    'extend': extend,                                                                                                  // 2393
    'merge': merge,                                                                                                    // 2394
    'equals': equals,                                                                                                  // 2395
    'element': jqLite,                                                                                                 // 2396
    'forEach': forEach,                                                                                                // 2397
    'injector': createInjector,                                                                                        // 2398
    'noop': noop,                                                                                                      // 2399
    'bind': bind,                                                                                                      // 2400
    'toJson': toJson,                                                                                                  // 2401
    'fromJson': fromJson,                                                                                              // 2402
    'identity': identity,                                                                                              // 2403
    'isUndefined': isUndefined,                                                                                        // 2404
    'isDefined': isDefined,                                                                                            // 2405
    'isString': isString,                                                                                              // 2406
    'isFunction': isFunction,                                                                                          // 2407
    'isObject': isObject,                                                                                              // 2408
    'isNumber': isNumber,                                                                                              // 2409
    'isElement': isElement,                                                                                            // 2410
    'isArray': isArray,                                                                                                // 2411
    'version': version,                                                                                                // 2412
    'isDate': isDate,                                                                                                  // 2413
    'lowercase': lowercase,                                                                                            // 2414
    'uppercase': uppercase,                                                                                            // 2415
    'callbacks': {counter: 0},                                                                                         // 2416
    'getTestability': getTestability,                                                                                  // 2417
    '$$minErr': minErr,                                                                                                // 2418
    '$$csp': csp,                                                                                                      // 2419
    'reloadWithDebugInfo': reloadWithDebugInfo                                                                         // 2420
  });                                                                                                                  // 2421
                                                                                                                       // 2422
  angularModule = setupModuleLoader(window);                                                                           // 2423
                                                                                                                       // 2424
  angularModule('ng', ['ngLocale'], ['$provide',                                                                       // 2425
    function ngModule($provide) {                                                                                      // 2426
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.                                // 2427
      $provide.provider({                                                                                              // 2428
        $$sanitizeUri: $$SanitizeUriProvider                                                                           // 2429
      });                                                                                                              // 2430
      $provide.provider('$compile', $CompileProvider).                                                                 // 2431
        directive({                                                                                                    // 2432
            a: htmlAnchorDirective,                                                                                    // 2433
            input: inputDirective,                                                                                     // 2434
            textarea: inputDirective,                                                                                  // 2435
            form: formDirective,                                                                                       // 2436
            script: scriptDirective,                                                                                   // 2437
            select: selectDirective,                                                                                   // 2438
            style: styleDirective,                                                                                     // 2439
            option: optionDirective,                                                                                   // 2440
            ngBind: ngBindDirective,                                                                                   // 2441
            ngBindHtml: ngBindHtmlDirective,                                                                           // 2442
            ngBindTemplate: ngBindTemplateDirective,                                                                   // 2443
            ngClass: ngClassDirective,                                                                                 // 2444
            ngClassEven: ngClassEvenDirective,                                                                         // 2445
            ngClassOdd: ngClassOddDirective,                                                                           // 2446
            ngCloak: ngCloakDirective,                                                                                 // 2447
            ngController: ngControllerDirective,                                                                       // 2448
            ngForm: ngFormDirective,                                                                                   // 2449
            ngHide: ngHideDirective,                                                                                   // 2450
            ngIf: ngIfDirective,                                                                                       // 2451
            ngInclude: ngIncludeDirective,                                                                             // 2452
            ngInit: ngInitDirective,                                                                                   // 2453
            ngNonBindable: ngNonBindableDirective,                                                                     // 2454
            ngPluralize: ngPluralizeDirective,                                                                         // 2455
            ngRepeat: ngRepeatDirective,                                                                               // 2456
            ngShow: ngShowDirective,                                                                                   // 2457
            ngStyle: ngStyleDirective,                                                                                 // 2458
            ngSwitch: ngSwitchDirective,                                                                               // 2459
            ngSwitchWhen: ngSwitchWhenDirective,                                                                       // 2460
            ngSwitchDefault: ngSwitchDefaultDirective,                                                                 // 2461
            ngOptions: ngOptionsDirective,                                                                             // 2462
            ngTransclude: ngTranscludeDirective,                                                                       // 2463
            ngModel: ngModelDirective,                                                                                 // 2464
            ngList: ngListDirective,                                                                                   // 2465
            ngChange: ngChangeDirective,                                                                               // 2466
            pattern: patternDirective,                                                                                 // 2467
            ngPattern: patternDirective,                                                                               // 2468
            required: requiredDirective,                                                                               // 2469
            ngRequired: requiredDirective,                                                                             // 2470
            minlength: minlengthDirective,                                                                             // 2471
            ngMinlength: minlengthDirective,                                                                           // 2472
            maxlength: maxlengthDirective,                                                                             // 2473
            ngMaxlength: maxlengthDirective,                                                                           // 2474
            ngValue: ngValueDirective,                                                                                 // 2475
            ngModelOptions: ngModelOptionsDirective                                                                    // 2476
        }).                                                                                                            // 2477
        directive({                                                                                                    // 2478
          ngInclude: ngIncludeFillContentDirective                                                                     // 2479
        }).                                                                                                            // 2480
        directive(ngAttributeAliasDirectives).                                                                         // 2481
        directive(ngEventDirectives);                                                                                  // 2482
      $provide.provider({                                                                                              // 2483
        $anchorScroll: $AnchorScrollProvider,                                                                          // 2484
        $animate: $AnimateProvider,                                                                                    // 2485
        $animateCss: $CoreAnimateCssProvider,                                                                          // 2486
        $$animateQueue: $$CoreAnimateQueueProvider,                                                                    // 2487
        $$AnimateRunner: $$CoreAnimateRunnerProvider,                                                                  // 2488
        $browser: $BrowserProvider,                                                                                    // 2489
        $cacheFactory: $CacheFactoryProvider,                                                                          // 2490
        $controller: $ControllerProvider,                                                                              // 2491
        $document: $DocumentProvider,                                                                                  // 2492
        $exceptionHandler: $ExceptionHandlerProvider,                                                                  // 2493
        $filter: $FilterProvider,                                                                                      // 2494
        $$forceReflow: $$ForceReflowProvider,                                                                          // 2495
        $interpolate: $InterpolateProvider,                                                                            // 2496
        $interval: $IntervalProvider,                                                                                  // 2497
        $http: $HttpProvider,                                                                                          // 2498
        $httpParamSerializer: $HttpParamSerializerProvider,                                                            // 2499
        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,                                                // 2500
        $httpBackend: $HttpBackendProvider,                                                                            // 2501
        $location: $LocationProvider,                                                                                  // 2502
        $log: $LogProvider,                                                                                            // 2503
        $parse: $ParseProvider,                                                                                        // 2504
        $rootScope: $RootScopeProvider,                                                                                // 2505
        $q: $QProvider,                                                                                                // 2506
        $$q: $$QProvider,                                                                                              // 2507
        $sce: $SceProvider,                                                                                            // 2508
        $sceDelegate: $SceDelegateProvider,                                                                            // 2509
        $sniffer: $SnifferProvider,                                                                                    // 2510
        $templateCache: $TemplateCacheProvider,                                                                        // 2511
        $templateRequest: $TemplateRequestProvider,                                                                    // 2512
        $$testability: $$TestabilityProvider,                                                                          // 2513
        $timeout: $TimeoutProvider,                                                                                    // 2514
        $window: $WindowProvider,                                                                                      // 2515
        $$rAF: $$RAFProvider,                                                                                          // 2516
        $$jqLite: $$jqLiteProvider,                                                                                    // 2517
        $$HashMap: $$HashMapProvider,                                                                                  // 2518
        $$cookieReader: $$CookieReaderProvider                                                                         // 2519
      });                                                                                                              // 2520
    }                                                                                                                  // 2521
  ]);                                                                                                                  // 2522
}                                                                                                                      // 2523
                                                                                                                       // 2524
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 2525
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 2526
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 2527
 *          An approval from 2 Core members with history of modifying      *                                           // 2528
 *                         this file is required.                          *                                           // 2529
 *                                                                         *                                           // 2530
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 2531
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 2532
 *     Or gives undesired access to variables likes document or window?    *                                           // 2533
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 2534
                                                                                                                       // 2535
/* global JQLitePrototype: true,                                                                                       // 2536
  addEventListenerFn: true,                                                                                            // 2537
  removeEventListenerFn: true,                                                                                         // 2538
  BOOLEAN_ATTR: true,                                                                                                  // 2539
  ALIASED_ATTR: true,                                                                                                  // 2540
*/                                                                                                                     // 2541
                                                                                                                       // 2542
//////////////////////////////////                                                                                     // 2543
//JQLite                                                                                                               // 2544
//////////////////////////////////                                                                                     // 2545
                                                                                                                       // 2546
/**                                                                                                                    // 2547
 * @ngdoc function                                                                                                     // 2548
 * @name angular.element                                                                                               // 2549
 * @module ng                                                                                                          // 2550
 * @kind function                                                                                                      // 2551
 *                                                                                                                     // 2552
 * @description                                                                                                        // 2553
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.                                    // 2554
 *                                                                                                                     // 2555
 * If jQuery is available, `angular.element` is an alias for the                                                       // 2556
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`                     // 2557
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."                                 // 2558
 *                                                                                                                     // 2559
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows                      // 2560
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most                // 2561
 * commonly needed functionality with the goal of having a very small footprint.</div>                                 // 2562
 *                                                                                                                     // 2563
 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.                                           // 2564
 *                                                                                                                     // 2565
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or                    // 2566
 * jqLite; they are never raw DOM references.</div>                                                                    // 2567
 *                                                                                                                     // 2568
 * ## Angular's jqLite                                                                                                 // 2569
 * jqLite provides only the following jQuery methods:                                                                  // 2570
 *                                                                                                                     // 2571
 * - [`addClass()`](http://api.jquery.com/addClass/)                                                                   // 2572
 * - [`after()`](http://api.jquery.com/after/)                                                                         // 2573
 * - [`append()`](http://api.jquery.com/append/)                                                                       // 2574
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters                                // 2575
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData                     // 2576
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors                                      // 2577
 * - [`clone()`](http://api.jquery.com/clone/)                                                                         // 2578
 * - [`contents()`](http://api.jquery.com/contents/)                                                                   // 2579
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
 * - [`data()`](http://api.jquery.com/data/)                                                                           // 2581
 * - [`detach()`](http://api.jquery.com/detach/)                                                                       // 2582
 * - [`empty()`](http://api.jquery.com/empty/)                                                                         // 2583
 * - [`eq()`](http://api.jquery.com/eq/)                                                                               // 2584
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name                                          // 2585
 * - [`hasClass()`](http://api.jquery.com/hasClass/)                                                                   // 2586
 * - [`html()`](http://api.jquery.com/html/)                                                                           // 2587
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors                                              // 2588
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData                         // 2589
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter       // 2590
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors                                  // 2591
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors                                          // 2592
 * - [`prepend()`](http://api.jquery.com/prepend/)                                                                     // 2593
 * - [`prop()`](http://api.jquery.com/prop/)                                                                           // 2594
 * - [`ready()`](http://api.jquery.com/ready/)                                                                         // 2595
 * - [`remove()`](http://api.jquery.com/remove/)                                                                       // 2596
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)                                                               // 2597
 * - [`removeClass()`](http://api.jquery.com/removeClass/)                                                             // 2598
 * - [`removeData()`](http://api.jquery.com/removeData/)                                                               // 2599
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)                                                             // 2600
 * - [`text()`](http://api.jquery.com/text/)                                                                           // 2601
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)                                                             // 2602
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.            // 2603
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter            // 2604
 * - [`val()`](http://api.jquery.com/val/)                                                                             // 2605
 * - [`wrap()`](http://api.jquery.com/wrap/)                                                                           // 2606
 *                                                                                                                     // 2607
 * ## jQuery/jqLite Extras                                                                                             // 2608
 * Angular also provides the following additional methods and events to both jQuery and jqLite:                        // 2609
 *                                                                                                                     // 2610
 * ### Events                                                                                                          // 2611
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event                   // 2612
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM                  // 2613
 *    element before it is removed.                                                                                    // 2614
 *                                                                                                                     // 2615
 * ### Methods                                                                                                         // 2616
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default                    // 2617
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as                       // 2618
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.                          // 2619
 *   `'ngModel'`).                                                                                                     // 2620
 * - `injector()` - retrieves the injector of the current element or its parent.                                       // 2621
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current                                        // 2622
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to                       // 2623
 *   be enabled.                                                                                                       // 2624
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the      // 2625
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate  // 2626
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.                           // 2627
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.                                  // 2628
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top                      // 2629
 *   parent element is reached.                                                                                        // 2630
 *                                                                                                                     // 2631
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.                             // 2632
 * @returns {Object} jQuery object.                                                                                    // 2633
 */                                                                                                                    // 2634
                                                                                                                       // 2635
JQLite.expando = 'ng339';                                                                                              // 2636
                                                                                                                       // 2637
var jqCache = JQLite.cache = {},                                                                                       // 2638
    jqId = 1,                                                                                                          // 2639
    addEventListenerFn = function(element, type, fn) {                                                                 // 2640
      element.addEventListener(type, fn, false);                                                                       // 2641
    },                                                                                                                 // 2642
    removeEventListenerFn = function(element, type, fn) {                                                              // 2643
      element.removeEventListener(type, fn, false);                                                                    // 2644
    };                                                                                                                 // 2645
                                                                                                                       // 2646
/*                                                                                                                     // 2647
 * !!! This is an undocumented "private" function !!!                                                                  // 2648
 */                                                                                                                    // 2649
JQLite._data = function(node) {                                                                                        // 2650
  //jQuery always returns an object on cache miss                                                                      // 2651
  return this.cache[node[this.expando]] || {};                                                                         // 2652
};                                                                                                                     // 2653
                                                                                                                       // 2654
function jqNextId() { return ++jqId; }                                                                                 // 2655
                                                                                                                       // 2656
                                                                                                                       // 2657
var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;                                                                          // 2658
var MOZ_HACK_REGEXP = /^moz([A-Z])/;                                                                                   // 2659
var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};                                               // 2660
var jqLiteMinErr = minErr('jqLite');                                                                                   // 2661
                                                                                                                       // 2662
/**                                                                                                                    // 2663
 * Converts snake_case to camelCase.                                                                                   // 2664
 * Also there is special case for Moz prefix starting with upper case letter.                                          // 2665
 * @param name Name to normalize                                                                                       // 2666
 */                                                                                                                    // 2667
function camelCase(name) {                                                                                             // 2668
  return name.                                                                                                         // 2669
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {                                             // 2670
      return offset ? letter.toUpperCase() : letter;                                                                   // 2671
    }).                                                                                                                // 2672
    replace(MOZ_HACK_REGEXP, 'Moz$1');                                                                                 // 2673
}                                                                                                                      // 2674
                                                                                                                       // 2675
var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;                                                                  // 2676
var HTML_REGEXP = /<|&#?\w+;/;                                                                                         // 2677
var TAG_NAME_REGEXP = /<([\w:]+)/;                                                                                     // 2678
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;                      // 2679
                                                                                                                       // 2680
var wrapMap = {                                                                                                        // 2681
  'option': [1, '<select multiple="multiple">', '</select>'],                                                          // 2682
                                                                                                                       // 2683
  'thead': [1, '<table>', '</table>'],                                                                                 // 2684
  'col': [2, '<table><colgroup>', '</colgroup></table>'],                                                              // 2685
  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 2686
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],                                                            // 2687
  '_default': [0, "", ""]                                                                                              // 2688
};                                                                                                                     // 2689
                                                                                                                       // 2690
wrapMap.optgroup = wrapMap.option;                                                                                     // 2691
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                    // 2692
wrapMap.th = wrapMap.td;                                                                                               // 2693
                                                                                                                       // 2694
                                                                                                                       // 2695
function jqLiteIsTextNode(html) {                                                                                      // 2696
  return !HTML_REGEXP.test(html);                                                                                      // 2697
}                                                                                                                      // 2698
                                                                                                                       // 2699
function jqLiteAcceptsData(node) {                                                                                     // 2700
  // The window object can accept data but has no nodeType                                                             // 2701
  // Otherwise we are only interested in elements (1) and documents (9)                                                // 2702
  var nodeType = node.nodeType;                                                                                        // 2703
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;                               // 2704
}                                                                                                                      // 2705
                                                                                                                       // 2706
function jqLiteHasData(node) {                                                                                         // 2707
  for (var key in jqCache[node.ng339]) {                                                                               // 2708
    return true;                                                                                                       // 2709
  }                                                                                                                    // 2710
  return false;                                                                                                        // 2711
}                                                                                                                      // 2712
                                                                                                                       // 2713
function jqLiteBuildFragment(html, context) {                                                                          // 2714
  var tmp, tag, wrap,                                                                                                  // 2715
      fragment = context.createDocumentFragment(),                                                                     // 2716
      nodes = [], i;                                                                                                   // 2717
                                                                                                                       // 2718
  if (jqLiteIsTextNode(html)) {                                                                                        // 2719
    // Convert non-html into a text node                                                                               // 2720
    nodes.push(context.createTextNode(html));                                                                          // 2721
  } else {                                                                                                             // 2722
    // Convert html into DOM nodes                                                                                     // 2723
    tmp = tmp || fragment.appendChild(context.createElement("div"));                                                   // 2724
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();                                                   // 2725
    wrap = wrapMap[tag] || wrapMap._default;                                                                           // 2726
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];                                   // 2727
                                                                                                                       // 2728
    // Descend through wrappers to the right content                                                                   // 2729
    i = wrap[0];                                                                                                       // 2730
    while (i--) {                                                                                                      // 2731
      tmp = tmp.lastChild;                                                                                             // 2732
    }                                                                                                                  // 2733
                                                                                                                       // 2734
    nodes = concat(nodes, tmp.childNodes);                                                                             // 2735
                                                                                                                       // 2736
    tmp = fragment.firstChild;                                                                                         // 2737
    tmp.textContent = "";                                                                                              // 2738
  }                                                                                                                    // 2739
                                                                                                                       // 2740
  // Remove wrapper from fragment                                                                                      // 2741
  fragment.textContent = "";                                                                                           // 2742
  fragment.innerHTML = ""; // Clear inner HTML                                                                         // 2743
  forEach(nodes, function(node) {                                                                                      // 2744
    fragment.appendChild(node);                                                                                        // 2745
  });                                                                                                                  // 2746
                                                                                                                       // 2747
  return fragment;                                                                                                     // 2748
}                                                                                                                      // 2749
                                                                                                                       // 2750
function jqLiteParseHTML(html, context) {                                                                              // 2751
  context = context || document;                                                                                       // 2752
  var parsed;                                                                                                          // 2753
                                                                                                                       // 2754
  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {                                                                       // 2755
    return [context.createElement(parsed[1])];                                                                         // 2756
  }                                                                                                                    // 2757
                                                                                                                       // 2758
  if ((parsed = jqLiteBuildFragment(html, context))) {                                                                 // 2759
    return parsed.childNodes;                                                                                          // 2760
  }                                                                                                                    // 2761
                                                                                                                       // 2762
  return [];                                                                                                           // 2763
}                                                                                                                      // 2764
                                                                                                                       // 2765
/////////////////////////////////////////////                                                                          // 2766
function JQLite(element) {                                                                                             // 2767
  if (element instanceof JQLite) {                                                                                     // 2768
    return element;                                                                                                    // 2769
  }                                                                                                                    // 2770
                                                                                                                       // 2771
  var argIsString;                                                                                                     // 2772
                                                                                                                       // 2773
  if (isString(element)) {                                                                                             // 2774
    element = trim(element);                                                                                           // 2775
    argIsString = true;                                                                                                // 2776
  }                                                                                                                    // 2777
  if (!(this instanceof JQLite)) {                                                                                     // 2778
    if (argIsString && element.charAt(0) != '<') {                                                                     // 2779
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }                                                                                                                  // 2781
    return new JQLite(element);                                                                                        // 2782
  }                                                                                                                    // 2783
                                                                                                                       // 2784
  if (argIsString) {                                                                                                   // 2785
    jqLiteAddNodes(this, jqLiteParseHTML(element));                                                                    // 2786
  } else {                                                                                                             // 2787
    jqLiteAddNodes(this, element);                                                                                     // 2788
  }                                                                                                                    // 2789
}                                                                                                                      // 2790
                                                                                                                       // 2791
function jqLiteClone(element) {                                                                                        // 2792
  return element.cloneNode(true);                                                                                      // 2793
}                                                                                                                      // 2794
                                                                                                                       // 2795
function jqLiteDealoc(element, onlyDescendants) {                                                                      // 2796
  if (!onlyDescendants) jqLiteRemoveData(element);                                                                     // 2797
                                                                                                                       // 2798
  if (element.querySelectorAll) {                                                                                      // 2799
    var descendants = element.querySelectorAll('*');                                                                   // 2800
    for (var i = 0, l = descendants.length; i < l; i++) {                                                              // 2801
      jqLiteRemoveData(descendants[i]);                                                                                // 2802
    }                                                                                                                  // 2803
  }                                                                                                                    // 2804
}                                                                                                                      // 2805
                                                                                                                       // 2806
function jqLiteOff(element, type, fn, unsupported) {                                                                   // 2807
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');  // 2808
                                                                                                                       // 2809
  var expandoStore = jqLiteExpandoStore(element);                                                                      // 2810
  var events = expandoStore && expandoStore.events;                                                                    // 2811
  var handle = expandoStore && expandoStore.handle;                                                                    // 2812
                                                                                                                       // 2813
  if (!handle) return; //no listeners registered                                                                       // 2814
                                                                                                                       // 2815
  if (!type) {                                                                                                         // 2816
    for (type in events) {                                                                                             // 2817
      if (type !== '$destroy') {                                                                                       // 2818
        removeEventListenerFn(element, type, handle);                                                                  // 2819
      }                                                                                                                // 2820
      delete events[type];                                                                                             // 2821
    }                                                                                                                  // 2822
  } else {                                                                                                             // 2823
    forEach(type.split(' '), function(type) {                                                                          // 2824
      if (isDefined(fn)) {                                                                                             // 2825
        var listenerFns = events[type];                                                                                // 2826
        arrayRemove(listenerFns || [], fn);                                                                            // 2827
        if (listenerFns && listenerFns.length > 0) {                                                                   // 2828
          return;                                                                                                      // 2829
        }                                                                                                              // 2830
      }                                                                                                                // 2831
                                                                                                                       // 2832
      removeEventListenerFn(element, type, handle);                                                                    // 2833
      delete events[type];                                                                                             // 2834
    });                                                                                                                // 2835
  }                                                                                                                    // 2836
}                                                                                                                      // 2837
                                                                                                                       // 2838
function jqLiteRemoveData(element, name) {                                                                             // 2839
  var expandoId = element.ng339;                                                                                       // 2840
  var expandoStore = expandoId && jqCache[expandoId];                                                                  // 2841
                                                                                                                       // 2842
  if (expandoStore) {                                                                                                  // 2843
    if (name) {                                                                                                        // 2844
      delete expandoStore.data[name];                                                                                  // 2845
      return;                                                                                                          // 2846
    }                                                                                                                  // 2847
                                                                                                                       // 2848
    if (expandoStore.handle) {                                                                                         // 2849
      if (expandoStore.events.$destroy) {                                                                              // 2850
        expandoStore.handle({}, '$destroy');                                                                           // 2851
      }                                                                                                                // 2852
      jqLiteOff(element);                                                                                              // 2853
    }                                                                                                                  // 2854
    delete jqCache[expandoId];                                                                                         // 2855
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it                               // 2856
  }                                                                                                                    // 2857
}                                                                                                                      // 2858
                                                                                                                       // 2859
                                                                                                                       // 2860
function jqLiteExpandoStore(element, createIfNecessary) {                                                              // 2861
  var expandoId = element.ng339,                                                                                       // 2862
      expandoStore = expandoId && jqCache[expandoId];                                                                  // 2863
                                                                                                                       // 2864
  if (createIfNecessary && !expandoStore) {                                                                            // 2865
    element.ng339 = expandoId = jqNextId();                                                                            // 2866
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};                                     // 2867
  }                                                                                                                    // 2868
                                                                                                                       // 2869
  return expandoStore;                                                                                                 // 2870
}                                                                                                                      // 2871
                                                                                                                       // 2872
                                                                                                                       // 2873
function jqLiteData(element, key, value) {                                                                             // 2874
  if (jqLiteAcceptsData(element)) {                                                                                    // 2875
                                                                                                                       // 2876
    var isSimpleSetter = isDefined(value);                                                                             // 2877
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);                                                     // 2878
    var massGetter = !key;                                                                                             // 2879
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);                                                   // 2880
    var data = expandoStore && expandoStore.data;                                                                      // 2881
                                                                                                                       // 2882
    if (isSimpleSetter) { // data('key', value)                                                                        // 2883
      data[key] = value;                                                                                               // 2884
    } else {                                                                                                           // 2885
      if (massGetter) {  // data()                                                                                     // 2886
        return data;                                                                                                   // 2887
      } else {                                                                                                         // 2888
        if (isSimpleGetter) { // data('key')                                                                           // 2889
          // don't force creation of expandoStore if it doesn't exist yet                                              // 2890
          return data && data[key];                                                                                    // 2891
        } else { // mass-setter: data({key1: val1, key2: val2})                                                        // 2892
          extend(data, key);                                                                                           // 2893
        }                                                                                                              // 2894
      }                                                                                                                // 2895
    }                                                                                                                  // 2896
  }                                                                                                                    // 2897
}                                                                                                                      // 2898
                                                                                                                       // 2899
function jqLiteHasClass(element, selector) {                                                                           // 2900
  if (!element.getAttribute) return false;                                                                             // 2901
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").                                 // 2902
      indexOf(" " + selector + " ") > -1);                                                                             // 2903
}                                                                                                                      // 2904
                                                                                                                       // 2905
function jqLiteRemoveClass(element, cssClasses) {                                                                      // 2906
  if (cssClasses && element.setAttribute) {                                                                            // 2907
    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2908
      element.setAttribute('class', trim(                                                                              // 2909
          (" " + (element.getAttribute('class') || '') + " ")                                                          // 2910
          .replace(/[\n\t]/g, " ")                                                                                     // 2911
          .replace(" " + trim(cssClass) + " ", " "))                                                                   // 2912
      );                                                                                                               // 2913
    });                                                                                                                // 2914
  }                                                                                                                    // 2915
}                                                                                                                      // 2916
                                                                                                                       // 2917
function jqLiteAddClass(element, cssClasses) {                                                                         // 2918
  if (cssClasses && element.setAttribute) {                                                                            // 2919
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')                                          // 2920
                            .replace(/[\n\t]/g, " ");                                                                  // 2921
                                                                                                                       // 2922
    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2923
      cssClass = trim(cssClass);                                                                                       // 2924
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {                                                      // 2925
        existingClasses += cssClass + ' ';                                                                             // 2926
      }                                                                                                                // 2927
    });                                                                                                                // 2928
                                                                                                                       // 2929
    element.setAttribute('class', trim(existingClasses));                                                              // 2930
  }                                                                                                                    // 2931
}                                                                                                                      // 2932
                                                                                                                       // 2933
                                                                                                                       // 2934
function jqLiteAddNodes(root, elements) {                                                                              // 2935
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.                                                   // 2936
                                                                                                                       // 2937
  if (elements) {                                                                                                      // 2938
                                                                                                                       // 2939
    // if a Node (the most common case)                                                                                // 2940
    if (elements.nodeType) {                                                                                           // 2941
      root[root.length++] = elements;                                                                                  // 2942
    } else {                                                                                                           // 2943
      var length = elements.length;                                                                                    // 2944
                                                                                                                       // 2945
      // if an Array or NodeList and not a Window                                                                      // 2946
      if (typeof length === 'number' && elements.window !== elements) {                                                // 2947
        if (length) {                                                                                                  // 2948
          for (var i = 0; i < length; i++) {                                                                           // 2949
            root[root.length++] = elements[i];                                                                         // 2950
          }                                                                                                            // 2951
        }                                                                                                              // 2952
      } else {                                                                                                         // 2953
        root[root.length++] = elements;                                                                                // 2954
      }                                                                                                                // 2955
    }                                                                                                                  // 2956
  }                                                                                                                    // 2957
}                                                                                                                      // 2958
                                                                                                                       // 2959
                                                                                                                       // 2960
function jqLiteController(element, name) {                                                                             // 2961
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');                                  // 2962
}                                                                                                                      // 2963
                                                                                                                       // 2964
function jqLiteInheritedData(element, name, value) {                                                                   // 2965
  // if element is the document object work with the html element instead                                              // 2966
  // this makes $(document).scope() possible                                                                           // 2967
  if (element.nodeType == NODE_TYPE_DOCUMENT) {                                                                        // 2968
    element = element.documentElement;                                                                                 // 2969
  }                                                                                                                    // 2970
  var names = isArray(name) ? name : [name];                                                                           // 2971
                                                                                                                       // 2972
  while (element) {                                                                                                    // 2973
    for (var i = 0, ii = names.length; i < ii; i++) {                                                                  // 2974
      if (isDefined(value = jqLite.data(element, names[i]))) return value;                                             // 2975
    }                                                                                                                  // 2976
                                                                                                                       // 2977
    // If dealing with a document fragment node with a host element, and no parent, use the host                       // 2978
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM                     // 2979
    // to lookup parent controllers.                                                                                   // 2980
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);                // 2981
  }                                                                                                                    // 2982
}                                                                                                                      // 2983
                                                                                                                       // 2984
function jqLiteEmpty(element) {                                                                                        // 2985
  jqLiteDealoc(element, true);                                                                                         // 2986
  while (element.firstChild) {                                                                                         // 2987
    element.removeChild(element.firstChild);                                                                           // 2988
  }                                                                                                                    // 2989
}                                                                                                                      // 2990
                                                                                                                       // 2991
function jqLiteRemove(element, keepData) {                                                                             // 2992
  if (!keepData) jqLiteDealoc(element);                                                                                // 2993
  var parent = element.parentNode;                                                                                     // 2994
  if (parent) parent.removeChild(element);                                                                             // 2995
}                                                                                                                      // 2996
                                                                                                                       // 2997
                                                                                                                       // 2998
function jqLiteDocumentLoaded(action, win) {                                                                           // 2999
  win = win || window;                                                                                                 // 3000
  if (win.document.readyState === 'complete') {                                                                        // 3001
    // Force the action to be run async for consistent behaviour                                                       // 3002
    // from the action's point of view                                                                                 // 3003
    // i.e. it will definitely not be in a $apply                                                                      // 3004
    win.setTimeout(action);                                                                                            // 3005
  } else {                                                                                                             // 3006
    // No need to unbind this handler as load is only ever called once                                                 // 3007
    jqLite(win).on('load', action);                                                                                    // 3008
  }                                                                                                                    // 3009
}                                                                                                                      // 3010
                                                                                                                       // 3011
//////////////////////////////////////////                                                                             // 3012
// Functions which are declared directly.                                                                              // 3013
//////////////////////////////////////////                                                                             // 3014
var JQLitePrototype = JQLite.prototype = {                                                                             // 3015
  ready: function(fn) {                                                                                                // 3016
    var fired = false;                                                                                                 // 3017
                                                                                                                       // 3018
    function trigger() {                                                                                               // 3019
      if (fired) return;                                                                                               // 3020
      fired = true;                                                                                                    // 3021
      fn();                                                                                                            // 3022
    }                                                                                                                  // 3023
                                                                                                                       // 3024
    // check if document is already loaded                                                                             // 3025
    if (document.readyState === 'complete') {                                                                          // 3026
      setTimeout(trigger);                                                                                             // 3027
    } else {                                                                                                           // 3028
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9                                       // 3029
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.                         // 3030
      // jshint -W064                                                                                                  // 3031
      JQLite(window).on('load', trigger); // fallback to window.onload for others                                      // 3032
      // jshint +W064                                                                                                  // 3033
    }                                                                                                                  // 3034
  },                                                                                                                   // 3035
  toString: function() {                                                                                               // 3036
    var value = [];                                                                                                    // 3037
    forEach(this, function(e) { value.push('' + e);});                                                                 // 3038
    return '[' + value.join(', ') + ']';                                                                               // 3039
  },                                                                                                                   // 3040
                                                                                                                       // 3041
  eq: function(index) {                                                                                                // 3042
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);                                   // 3043
  },                                                                                                                   // 3044
                                                                                                                       // 3045
  length: 0,                                                                                                           // 3046
  push: push,                                                                                                          // 3047
  sort: [].sort,                                                                                                       // 3048
  splice: [].splice                                                                                                    // 3049
};                                                                                                                     // 3050
                                                                                                                       // 3051
//////////////////////////////////////////                                                                             // 3052
// Functions iterating getter/setters.                                                                                 // 3053
// these functions return self on setter and                                                                           // 3054
// value on get.                                                                                                       // 3055
//////////////////////////////////////////                                                                             // 3056
var BOOLEAN_ATTR = {};                                                                                                 // 3057
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {                      // 3058
  BOOLEAN_ATTR[lowercase(value)] = value;                                                                              // 3059
});                                                                                                                    // 3060
var BOOLEAN_ELEMENTS = {};                                                                                             // 3061
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {                               // 3062
  BOOLEAN_ELEMENTS[value] = true;                                                                                      // 3063
});                                                                                                                    // 3064
var ALIASED_ATTR = {                                                                                                   // 3065
  'ngMinlength': 'minlength',                                                                                          // 3066
  'ngMaxlength': 'maxlength',                                                                                          // 3067
  'ngMin': 'min',                                                                                                      // 3068
  'ngMax': 'max',                                                                                                      // 3069
  'ngPattern': 'pattern'                                                                                               // 3070
};                                                                                                                     // 3071
                                                                                                                       // 3072
function getBooleanAttrName(element, name) {                                                                           // 3073
  // check dom last since we will most likely fail on name                                                             // 3074
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];                                                                  // 3075
                                                                                                                       // 3076
  // booleanAttr is here twice to minimize DOM access                                                                  // 3077
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;                                           // 3078
}                                                                                                                      // 3079
                                                                                                                       // 3080
function getAliasedAttrName(name) {                                                                                    // 3081
  return ALIASED_ATTR[name];                                                                                           // 3082
}                                                                                                                      // 3083
                                                                                                                       // 3084
forEach({                                                                                                              // 3085
  data: jqLiteData,                                                                                                    // 3086
  removeData: jqLiteRemoveData,                                                                                        // 3087
  hasData: jqLiteHasData                                                                                               // 3088
}, function(fn, name) {                                                                                                // 3089
  JQLite[name] = fn;                                                                                                   // 3090
});                                                                                                                    // 3091
                                                                                                                       // 3092
forEach({                                                                                                              // 3093
  data: jqLiteData,                                                                                                    // 3094
  inheritedData: jqLiteInheritedData,                                                                                  // 3095
                                                                                                                       // 3096
  scope: function(element) {                                                                                           // 3097
    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3098
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },                                                                                                                   // 3100
                                                                                                                       // 3101
  isolateScope: function(element) {                                                                                    // 3102
    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3103
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');                   // 3104
  },                                                                                                                   // 3105
                                                                                                                       // 3106
  controller: jqLiteController,                                                                                        // 3107
                                                                                                                       // 3108
  injector: function(element) {                                                                                        // 3109
    return jqLiteInheritedData(element, '$injector');                                                                  // 3110
  },                                                                                                                   // 3111
                                                                                                                       // 3112
  removeAttr: function(element, name) {                                                                                // 3113
    element.removeAttribute(name);                                                                                     // 3114
  },                                                                                                                   // 3115
                                                                                                                       // 3116
  hasClass: jqLiteHasClass,                                                                                            // 3117
                                                                                                                       // 3118
  css: function(element, name, value) {                                                                                // 3119
    name = camelCase(name);                                                                                            // 3120
                                                                                                                       // 3121
    if (isDefined(value)) {                                                                                            // 3122
      element.style[name] = value;                                                                                     // 3123
    } else {                                                                                                           // 3124
      return element.style[name];                                                                                      // 3125
    }                                                                                                                  // 3126
  },                                                                                                                   // 3127
                                                                                                                       // 3128
  attr: function(element, name, value) {                                                                               // 3129
    var nodeType = element.nodeType;                                                                                   // 3130
    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {           // 3131
      return;                                                                                                          // 3132
    }                                                                                                                  // 3133
    var lowercasedName = lowercase(name);                                                                              // 3134
    if (BOOLEAN_ATTR[lowercasedName]) {                                                                                // 3135
      if (isDefined(value)) {                                                                                          // 3136
        if (!!value) {                                                                                                 // 3137
          element[name] = true;                                                                                        // 3138
          element.setAttribute(name, lowercasedName);                                                                  // 3139
        } else {                                                                                                       // 3140
          element[name] = false;                                                                                       // 3141
          element.removeAttribute(lowercasedName);                                                                     // 3142
        }                                                                                                              // 3143
      } else {                                                                                                         // 3144
        return (element[name] ||                                                                                       // 3145
                 (element.attributes.getNamedItem(name) || noop).specified)                                            // 3146
               ? lowercasedName                                                                                        // 3147
               : undefined;                                                                                            // 3148
      }                                                                                                                // 3149
    } else if (isDefined(value)) {                                                                                     // 3150
      element.setAttribute(name, value);                                                                               // 3151
    } else if (element.getAttribute) {                                                                                 // 3152
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code                            // 3153
      // some elements (e.g. Document) don't have get attribute, so return undefined                                   // 3154
      var ret = element.getAttribute(name, 2);                                                                         // 3155
      // normalize non-existing attributes to undefined (as jQuery)                                                    // 3156
      return ret === null ? undefined : ret;                                                                           // 3157
    }                                                                                                                  // 3158
  },                                                                                                                   // 3159
                                                                                                                       // 3160
  prop: function(element, name, value) {                                                                               // 3161
    if (isDefined(value)) {                                                                                            // 3162
      element[name] = value;                                                                                           // 3163
    } else {                                                                                                           // 3164
      return element[name];                                                                                            // 3165
    }                                                                                                                  // 3166
  },                                                                                                                   // 3167
                                                                                                                       // 3168
  text: (function() {                                                                                                  // 3169
    getText.$dv = '';                                                                                                  // 3170
    return getText;                                                                                                    // 3171
                                                                                                                       // 3172
    function getText(element, value) {                                                                                 // 3173
      if (isUndefined(value)) {                                                                                        // 3174
        var nodeType = element.nodeType;                                                                               // 3175
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';             // 3176
      }                                                                                                                // 3177
      element.textContent = value;                                                                                     // 3178
    }                                                                                                                  // 3179
  })(),                                                                                                                // 3180
                                                                                                                       // 3181
  val: function(element, value) {                                                                                      // 3182
    if (isUndefined(value)) {                                                                                          // 3183
      if (element.multiple && nodeName_(element) === 'select') {                                                       // 3184
        var result = [];                                                                                               // 3185
        forEach(element.options, function(option) {                                                                    // 3186
          if (option.selected) {                                                                                       // 3187
            result.push(option.value || option.text);                                                                  // 3188
          }                                                                                                            // 3189
        });                                                                                                            // 3190
        return result.length === 0 ? null : result;                                                                    // 3191
      }                                                                                                                // 3192
      return element.value;                                                                                            // 3193
    }                                                                                                                  // 3194
    element.value = value;                                                                                             // 3195
  },                                                                                                                   // 3196
                                                                                                                       // 3197
  html: function(element, value) {                                                                                     // 3198
    if (isUndefined(value)) {                                                                                          // 3199
      return element.innerHTML;                                                                                        // 3200
    }                                                                                                                  // 3201
    jqLiteDealoc(element, true);                                                                                       // 3202
    element.innerHTML = value;                                                                                         // 3203
  },                                                                                                                   // 3204
                                                                                                                       // 3205
  empty: jqLiteEmpty                                                                                                   // 3206
}, function(fn, name) {                                                                                                // 3207
  /**                                                                                                                  // 3208
   * Properties: writes return selection, reads return first value                                                     // 3209
   */                                                                                                                  // 3210
  JQLite.prototype[name] = function(arg1, arg2) {                                                                      // 3211
    var i, key;                                                                                                        // 3212
    var nodeCount = this.length;                                                                                       // 3213
                                                                                                                       // 3214
    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it                   // 3215
    // in a way that survives minification.                                                                            // 3216
    // jqLiteEmpty takes no arguments but is a setter.                                                                 // 3217
    if (fn !== jqLiteEmpty &&                                                                                          // 3218
        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {         // 3219
      if (isObject(arg1)) {                                                                                            // 3220
                                                                                                                       // 3221
        // we are a write, but the object properties are the key/values                                                // 3222
        for (i = 0; i < nodeCount; i++) {                                                                              // 3223
          if (fn === jqLiteData) {                                                                                     // 3224
            // data() takes the whole object in jQuery                                                                 // 3225
            fn(this[i], arg1);                                                                                         // 3226
          } else {                                                                                                     // 3227
            for (key in arg1) {                                                                                        // 3228
              fn(this[i], key, arg1[key]);                                                                             // 3229
            }                                                                                                          // 3230
          }                                                                                                            // 3231
        }                                                                                                              // 3232
        // return self for chaining                                                                                    // 3233
        return this;                                                                                                   // 3234
      } else {                                                                                                         // 3235
        // we are a read, so read the first child.                                                                     // 3236
        // TODO: do we still need this?                                                                                // 3237
        var value = fn.$dv;                                                                                            // 3238
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.                         // 3239
        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;                                            // 3240
        for (var j = 0; j < jj; j++) {                                                                                 // 3241
          var nodeValue = fn(this[j], arg1, arg2);                                                                     // 3242
          value = value ? value + nodeValue : nodeValue;                                                               // 3243
        }                                                                                                              // 3244
        return value;                                                                                                  // 3245
      }                                                                                                                // 3246
    } else {                                                                                                           // 3247
      // we are a write, so apply to all children                                                                      // 3248
      for (i = 0; i < nodeCount; i++) {                                                                                // 3249
        fn(this[i], arg1, arg2);                                                                                       // 3250
      }                                                                                                                // 3251
      // return self for chaining                                                                                      // 3252
      return this;                                                                                                     // 3253
    }                                                                                                                  // 3254
  };                                                                                                                   // 3255
});                                                                                                                    // 3256
                                                                                                                       // 3257
function createEventHandler(element, events) {                                                                         // 3258
  var eventHandler = function(event, type) {                                                                           // 3259
    // jQuery specific api                                                                                             // 3260
    event.isDefaultPrevented = function() {                                                                            // 3261
      return event.defaultPrevented;                                                                                   // 3262
    };                                                                                                                 // 3263
                                                                                                                       // 3264
    var eventFns = events[type || event.type];                                                                         // 3265
    var eventFnsLength = eventFns ? eventFns.length : 0;                                                               // 3266
                                                                                                                       // 3267
    if (!eventFnsLength) return;                                                                                       // 3268
                                                                                                                       // 3269
    if (isUndefined(event.immediatePropagationStopped)) {                                                              // 3270
      var originalStopImmediatePropagation = event.stopImmediatePropagation;                                           // 3271
      event.stopImmediatePropagation = function() {                                                                    // 3272
        event.immediatePropagationStopped = true;                                                                      // 3273
                                                                                                                       // 3274
        if (event.stopPropagation) {                                                                                   // 3275
          event.stopPropagation();                                                                                     // 3276
        }                                                                                                              // 3277
                                                                                                                       // 3278
        if (originalStopImmediatePropagation) {                                                                        // 3279
          originalStopImmediatePropagation.call(event);                                                                // 3280
        }                                                                                                              // 3281
      };                                                                                                               // 3282
    }                                                                                                                  // 3283
                                                                                                                       // 3284
    event.isImmediatePropagationStopped = function() {                                                                 // 3285
      return event.immediatePropagationStopped === true;                                                               // 3286
    };                                                                                                                 // 3287
                                                                                                                       // 3288
    // Copy event handlers in case event handlers array is modified during execution.                                  // 3289
    if ((eventFnsLength > 1)) {                                                                                        // 3290
      eventFns = shallowCopy(eventFns);                                                                                // 3291
    }                                                                                                                  // 3292
                                                                                                                       // 3293
    for (var i = 0; i < eventFnsLength; i++) {                                                                         // 3294
      if (!event.isImmediatePropagationStopped()) {                                                                    // 3295
        eventFns[i].call(element, event);                                                                              // 3296
      }                                                                                                                // 3297
    }                                                                                                                  // 3298
  };                                                                                                                   // 3299
                                                                                                                       // 3300
  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all                     // 3301
  //       events on `element`                                                                                         // 3302
  eventHandler.elem = element;                                                                                         // 3303
  return eventHandler;                                                                                                 // 3304
}                                                                                                                      // 3305
                                                                                                                       // 3306
//////////////////////////////////////////                                                                             // 3307
// Functions iterating traversal.                                                                                      // 3308
// These functions chain results into a single                                                                         // 3309
// selector.                                                                                                           // 3310
//////////////////////////////////////////                                                                             // 3311
forEach({                                                                                                              // 3312
  removeData: jqLiteRemoveData,                                                                                        // 3313
                                                                                                                       // 3314
  on: function jqLiteOn(element, type, fn, unsupported) {                                                              // 3315
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
                                                                                                                       // 3317
    // Do not add event handlers to non-elements because they will not be cleaned up.                                  // 3318
    if (!jqLiteAcceptsData(element)) {                                                                                 // 3319
      return;                                                                                                          // 3320
    }                                                                                                                  // 3321
                                                                                                                       // 3322
    var expandoStore = jqLiteExpandoStore(element, true);                                                              // 3323
    var events = expandoStore.events;                                                                                  // 3324
    var handle = expandoStore.handle;                                                                                  // 3325
                                                                                                                       // 3326
    if (!handle) {                                                                                                     // 3327
      handle = expandoStore.handle = createEventHandler(element, events);                                              // 3328
    }                                                                                                                  // 3329
                                                                                                                       // 3330
    // http://jsperf.com/string-indexof-vs-split                                                                       // 3331
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];                                                     // 3332
    var i = types.length;                                                                                              // 3333
                                                                                                                       // 3334
    while (i--) {                                                                                                      // 3335
      type = types[i];                                                                                                 // 3336
      var eventFns = events[type];                                                                                     // 3337
                                                                                                                       // 3338
      if (!eventFns) {                                                                                                 // 3339
        events[type] = [];                                                                                             // 3340
                                                                                                                       // 3341
        if (type === 'mouseenter' || type === 'mouseleave') {                                                          // 3342
          // Refer to jQuery's implementation of mouseenter & mouseleave                                               // 3343
          // Read about mouseenter and mouseleave:                                                                     // 3344
          // http://www.quirksmode.org/js/events_mouse.html#link8                                                      // 3345
                                                                                                                       // 3346
          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {                                                   // 3347
            var target = this, related = event.relatedTarget;                                                          // 3348
            // For mousenter/leave call the handler if related is outside the target.                                  // 3349
            // NB: No relatedTarget if the mouse left/entered the browser window                                       // 3350
            if (!related || (related !== target && !target.contains(related))) {                                       // 3351
              handle(event, type);                                                                                     // 3352
            }                                                                                                          // 3353
          });                                                                                                          // 3354
                                                                                                                       // 3355
        } else {                                                                                                       // 3356
          if (type !== '$destroy') {                                                                                   // 3357
            addEventListenerFn(element, type, handle);                                                                 // 3358
          }                                                                                                            // 3359
        }                                                                                                              // 3360
        eventFns = events[type];                                                                                       // 3361
      }                                                                                                                // 3362
      eventFns.push(fn);                                                                                               // 3363
    }                                                                                                                  // 3364
  },                                                                                                                   // 3365
                                                                                                                       // 3366
  off: jqLiteOff,                                                                                                      // 3367
                                                                                                                       // 3368
  one: function(element, type, fn) {                                                                                   // 3369
    element = jqLite(element);                                                                                         // 3370
                                                                                                                       // 3371
    //add the listener twice so that when it is called                                                                 // 3372
    //you can remove the original function and still be                                                                // 3373
    //able to call element.off(ev, fn) normally                                                                        // 3374
    element.on(type, function onFn() {                                                                                 // 3375
      element.off(type, fn);                                                                                           // 3376
      element.off(type, onFn);                                                                                         // 3377
    });                                                                                                                // 3378
    element.on(type, fn);                                                                                              // 3379
  },                                                                                                                   // 3380
                                                                                                                       // 3381
  replaceWith: function(element, replaceNode) {                                                                        // 3382
    var index, parent = element.parentNode;                                                                            // 3383
    jqLiteDealoc(element);                                                                                             // 3384
    forEach(new JQLite(replaceNode), function(node) {                                                                  // 3385
      if (index) {                                                                                                     // 3386
        parent.insertBefore(node, index.nextSibling);                                                                  // 3387
      } else {                                                                                                         // 3388
        parent.replaceChild(node, element);                                                                            // 3389
      }                                                                                                                // 3390
      index = node;                                                                                                    // 3391
    });                                                                                                                // 3392
  },                                                                                                                   // 3393
                                                                                                                       // 3394
  children: function(element) {                                                                                        // 3395
    var children = [];                                                                                                 // 3396
    forEach(element.childNodes, function(element) {                                                                    // 3397
      if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                    // 3398
        children.push(element);                                                                                        // 3399
      }                                                                                                                // 3400
    });                                                                                                                // 3401
    return children;                                                                                                   // 3402
  },                                                                                                                   // 3403
                                                                                                                       // 3404
  contents: function(element) {                                                                                        // 3405
    return element.contentDocument || element.childNodes || [];                                                        // 3406
  },                                                                                                                   // 3407
                                                                                                                       // 3408
  append: function(element, node) {                                                                                    // 3409
    var nodeType = element.nodeType;                                                                                   // 3410
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;                            // 3411
                                                                                                                       // 3412
    node = new JQLite(node);                                                                                           // 3413
                                                                                                                       // 3414
    for (var i = 0, ii = node.length; i < ii; i++) {                                                                   // 3415
      var child = node[i];                                                                                             // 3416
      element.appendChild(child);                                                                                      // 3417
    }                                                                                                                  // 3418
  },                                                                                                                   // 3419
                                                                                                                       // 3420
  prepend: function(element, node) {                                                                                   // 3421
    if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                      // 3422
      var index = element.firstChild;                                                                                  // 3423
      forEach(new JQLite(node), function(child) {                                                                      // 3424
        element.insertBefore(child, index);                                                                            // 3425
      });                                                                                                              // 3426
    }                                                                                                                  // 3427
  },                                                                                                                   // 3428
                                                                                                                       // 3429
  wrap: function(element, wrapNode) {                                                                                  // 3430
    wrapNode = jqLite(wrapNode).eq(0).clone()[0];                                                                      // 3431
    var parent = element.parentNode;                                                                                   // 3432
    if (parent) {                                                                                                      // 3433
      parent.replaceChild(wrapNode, element);                                                                          // 3434
    }                                                                                                                  // 3435
    wrapNode.appendChild(element);                                                                                     // 3436
  },                                                                                                                   // 3437
                                                                                                                       // 3438
  remove: jqLiteRemove,                                                                                                // 3439
                                                                                                                       // 3440
  detach: function(element) {                                                                                          // 3441
    jqLiteRemove(element, true);                                                                                       // 3442
  },                                                                                                                   // 3443
                                                                                                                       // 3444
  after: function(element, newElement) {                                                                               // 3445
    var index = element, parent = element.parentNode;                                                                  // 3446
    newElement = new JQLite(newElement);                                                                               // 3447
                                                                                                                       // 3448
    for (var i = 0, ii = newElement.length; i < ii; i++) {                                                             // 3449
      var node = newElement[i];                                                                                        // 3450
      parent.insertBefore(node, index.nextSibling);                                                                    // 3451
      index = node;                                                                                                    // 3452
    }                                                                                                                  // 3453
  },                                                                                                                   // 3454
                                                                                                                       // 3455
  addClass: jqLiteAddClass,                                                                                            // 3456
  removeClass: jqLiteRemoveClass,                                                                                      // 3457
                                                                                                                       // 3458
  toggleClass: function(element, selector, condition) {                                                                // 3459
    if (selector) {                                                                                                    // 3460
      forEach(selector.split(' '), function(className) {                                                               // 3461
        var classCondition = condition;                                                                                // 3462
        if (isUndefined(classCondition)) {                                                                             // 3463
          classCondition = !jqLiteHasClass(element, className);                                                        // 3464
        }                                                                                                              // 3465
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);                                     // 3466
      });                                                                                                              // 3467
    }                                                                                                                  // 3468
  },                                                                                                                   // 3469
                                                                                                                       // 3470
  parent: function(element) {                                                                                          // 3471
    var parent = element.parentNode;                                                                                   // 3472
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;                                  // 3473
  },                                                                                                                   // 3474
                                                                                                                       // 3475
  next: function(element) {                                                                                            // 3476
    return element.nextElementSibling;                                                                                 // 3477
  },                                                                                                                   // 3478
                                                                                                                       // 3479
  find: function(element, selector) {                                                                                  // 3480
    if (element.getElementsByTagName) {                                                                                // 3481
      return element.getElementsByTagName(selector);                                                                   // 3482
    } else {                                                                                                           // 3483
      return [];                                                                                                       // 3484
    }                                                                                                                  // 3485
  },                                                                                                                   // 3486
                                                                                                                       // 3487
  clone: jqLiteClone,                                                                                                  // 3488
                                                                                                                       // 3489
  triggerHandler: function(element, event, extraParameters) {                                                          // 3490
                                                                                                                       // 3491
    var dummyEvent, eventFnsCopy, handlerArgs;                                                                         // 3492
    var eventName = event.type || event;                                                                               // 3493
    var expandoStore = jqLiteExpandoStore(element);                                                                    // 3494
    var events = expandoStore && expandoStore.events;                                                                  // 3495
    var eventFns = events && events[eventName];                                                                        // 3496
                                                                                                                       // 3497
    if (eventFns) {                                                                                                    // 3498
      // Create a dummy event to pass to the handlers                                                                  // 3499
      dummyEvent = {                                                                                                   // 3500
        preventDefault: function() { this.defaultPrevented = true; },                                                  // 3501
        isDefaultPrevented: function() { return this.defaultPrevented === true; },                                     // 3502
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },                             // 3503
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },               // 3504
        stopPropagation: noop,                                                                                         // 3505
        type: eventName,                                                                                               // 3506
        target: element                                                                                                // 3507
      };                                                                                                               // 3508
                                                                                                                       // 3509
      // If a custom event was provided then extend our dummy event with it                                            // 3510
      if (event.type) {                                                                                                // 3511
        dummyEvent = extend(dummyEvent, event);                                                                        // 3512
      }                                                                                                                // 3513
                                                                                                                       // 3514
      // Copy event handlers in case event handlers array is modified during execution.                                // 3515
      eventFnsCopy = shallowCopy(eventFns);                                                                            // 3516
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];                             // 3517
                                                                                                                       // 3518
      forEach(eventFnsCopy, function(fn) {                                                                             // 3519
        if (!dummyEvent.isImmediatePropagationStopped()) {                                                             // 3520
          fn.apply(element, handlerArgs);                                                                              // 3521
        }                                                                                                              // 3522
      });                                                                                                              // 3523
    }                                                                                                                  // 3524
  }                                                                                                                    // 3525
}, function(fn, name) {                                                                                                // 3526
  /**                                                                                                                  // 3527
   * chaining functions                                                                                                // 3528
   */                                                                                                                  // 3529
  JQLite.prototype[name] = function(arg1, arg2, arg3) {                                                                // 3530
    var value;                                                                                                         // 3531
                                                                                                                       // 3532
    for (var i = 0, ii = this.length; i < ii; i++) {                                                                   // 3533
      if (isUndefined(value)) {                                                                                        // 3534
        value = fn(this[i], arg1, arg2, arg3);                                                                         // 3535
        if (isDefined(value)) {                                                                                        // 3536
          // any function which returns a value needs to be wrapped                                                    // 3537
          value = jqLite(value);                                                                                       // 3538
        }                                                                                                              // 3539
      } else {                                                                                                         // 3540
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));                                                          // 3541
      }                                                                                                                // 3542
    }                                                                                                                  // 3543
    return isDefined(value) ? value : this;                                                                            // 3544
  };                                                                                                                   // 3545
                                                                                                                       // 3546
  // bind legacy bind/unbind to on/off                                                                                 // 3547
  JQLite.prototype.bind = JQLite.prototype.on;                                                                         // 3548
  JQLite.prototype.unbind = JQLite.prototype.off;                                                                      // 3549
});                                                                                                                    // 3550
                                                                                                                       // 3551
                                                                                                                       // 3552
// Provider for private $$jqLite service                                                                               // 3553
function $$jqLiteProvider() {                                                                                          // 3554
  this.$get = function $$jqLite() {                                                                                    // 3555
    return extend(JQLite, {                                                                                            // 3556
      hasClass: function(node, classes) {                                                                              // 3557
        if (node.attr) node = node[0];                                                                                 // 3558
        return jqLiteHasClass(node, classes);                                                                          // 3559
      },                                                                                                               // 3560
      addClass: function(node, classes) {                                                                              // 3561
        if (node.attr) node = node[0];                                                                                 // 3562
        return jqLiteAddClass(node, classes);                                                                          // 3563
      },                                                                                                               // 3564
      removeClass: function(node, classes) {                                                                           // 3565
        if (node.attr) node = node[0];                                                                                 // 3566
        return jqLiteRemoveClass(node, classes);                                                                       // 3567
      }                                                                                                                // 3568
    });                                                                                                                // 3569
  };                                                                                                                   // 3570
}                                                                                                                      // 3571
                                                                                                                       // 3572
/**                                                                                                                    // 3573
 * Computes a hash of an 'obj'.                                                                                        // 3574
 * Hash of a:                                                                                                          // 3575
 *  string is string                                                                                                   // 3576
 *  number is number as string                                                                                         // 3577
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,                      // 3578
 *         that is also assigned to the $$hashKey property of the object.                                              // 3579
 *                                                                                                                     // 3580
 * @param obj                                                                                                          // 3581
 * @returns {string} hash string such that the same input will have the same hash string.                              // 3582
 *         The resulting string key is in 'type:hashKey' format.                                                       // 3583
 */                                                                                                                    // 3584
function hashKey(obj, nextUidFn) {                                                                                     // 3585
  var key = obj && obj.$$hashKey;                                                                                      // 3586
                                                                                                                       // 3587
  if (key) {                                                                                                           // 3588
    if (typeof key === 'function') {                                                                                   // 3589
      key = obj.$$hashKey();                                                                                           // 3590
    }                                                                                                                  // 3591
    return key;                                                                                                        // 3592
  }                                                                                                                    // 3593
                                                                                                                       // 3594
  var objType = typeof obj;                                                                                            // 3595
  if (objType == 'function' || (objType == 'object' && obj !== null)) {                                                // 3596
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();                                                    // 3597
  } else {                                                                                                             // 3598
    key = objType + ':' + obj;                                                                                         // 3599
  }                                                                                                                    // 3600
                                                                                                                       // 3601
  return key;                                                                                                          // 3602
}                                                                                                                      // 3603
                                                                                                                       // 3604
/**                                                                                                                    // 3605
 * HashMap which can use objects as keys                                                                               // 3606
 */                                                                                                                    // 3607
function HashMap(array, isolatedUid) {                                                                                 // 3608
  if (isolatedUid) {                                                                                                   // 3609
    var uid = 0;                                                                                                       // 3610
    this.nextUid = function() {                                                                                        // 3611
      return ++uid;                                                                                                    // 3612
    };                                                                                                                 // 3613
  }                                                                                                                    // 3614
  forEach(array, this.put, this);                                                                                      // 3615
}                                                                                                                      // 3616
HashMap.prototype = {                                                                                                  // 3617
  /**                                                                                                                  // 3618
   * Store key value pair                                                                                              // 3619
   * @param key key to store can be any type                                                                           // 3620
   * @param value value to store can be any type                                                                       // 3621
   */                                                                                                                  // 3622
  put: function(key, value) {                                                                                          // 3623
    this[hashKey(key, this.nextUid)] = value;                                                                          // 3624
  },                                                                                                                   // 3625
                                                                                                                       // 3626
  /**                                                                                                                  // 3627
   * @param key                                                                                                        // 3628
   * @returns {Object} the value for the key                                                                           // 3629
   */                                                                                                                  // 3630
  get: function(key) {                                                                                                 // 3631
    return this[hashKey(key, this.nextUid)];                                                                           // 3632
  },                                                                                                                   // 3633
                                                                                                                       // 3634
  /**                                                                                                                  // 3635
   * Remove the key/value pair                                                                                         // 3636
   * @param key                                                                                                        // 3637
   */                                                                                                                  // 3638
  remove: function(key) {                                                                                              // 3639
    var value = this[key = hashKey(key, this.nextUid)];                                                                // 3640
    delete this[key];                                                                                                  // 3641
    return value;                                                                                                      // 3642
  }                                                                                                                    // 3643
};                                                                                                                     // 3644
                                                                                                                       // 3645
var $$HashMapProvider = [function() {                                                                                  // 3646
  this.$get = [function() {                                                                                            // 3647
    return HashMap;                                                                                                    // 3648
  }];                                                                                                                  // 3649
}];                                                                                                                    // 3650
                                                                                                                       // 3651
/**                                                                                                                    // 3652
 * @ngdoc function                                                                                                     // 3653
 * @module ng                                                                                                          // 3654
 * @name angular.injector                                                                                              // 3655
 * @kind function                                                                                                      // 3656
 *                                                                                                                     // 3657
 * @description                                                                                                        // 3658
 * Creates an injector object that can be used for retrieving services as well as for                                  // 3659
 * dependency injection (see {@link guide/di dependency injection}).                                                   // 3660
 *                                                                                                                     // 3661
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See                           // 3662
 *     {@link angular.module}. The `ng` module must be explicitly added.                                               // 3663
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which                             // 3664
 *     disallows argument name annotation inference.                                                                   // 3665
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.                                          // 3666
 *                                                                                                                     // 3667
 * @example                                                                                                            // 3668
 * Typical usage                                                                                                       // 3669
 * ```js                                                                                                               // 3670
 *   // create an injector                                                                                             // 3671
 *   var $injector = angular.injector(['ng']);                                                                         // 3672
 *                                                                                                                     // 3673
 *   // use the injector to kick off your application                                                                  // 3674
 *   // use the type inference to auto inject arguments, or use implicit injection                                     // 3675
 *   $injector.invoke(function($rootScope, $compile, $document) {                                                      // 3676
 *     $compile($document)($rootScope);                                                                                // 3677
 *     $rootScope.$digest();                                                                                           // 3678
 *   });                                                                                                               // 3679
 * ```                                                                                                                 // 3680
 *                                                                                                                     // 3681
 * Sometimes you want to get access to the injector of a currently running Angular app                                 // 3682
 * from outside Angular. Perhaps, you want to inject and compile some markup after the                                 // 3683
 * application has been bootstrapped. You can do this using the extra `injector()` added                               // 3684
 * to JQuery/jqLite elements. See {@link angular.element}.                                                             // 3685
 *                                                                                                                     // 3686
 * *This is fairly rare but could be the case if a third party library is injecting the                                // 3687
 * markup.*                                                                                                            // 3688
 *                                                                                                                     // 3689
 * In the following example a new block of HTML containing a `ng-controller`                                           // 3690
 * directive is added to the end of the document body by JQuery. We then compile and link                              // 3691
 * it into the current AngularJS scope.                                                                                // 3692
 *                                                                                                                     // 3693
 * ```js                                                                                                               // 3694
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');                                                // 3695
 * $(document.body).append($div);                                                                                      // 3696
 *                                                                                                                     // 3697
 * angular.element(document).injector().invoke(function($compile) {                                                    // 3698
 *   var scope = angular.element($div).scope();                                                                        // 3699
 *   $compile($div)(scope);                                                                                            // 3700
 * });                                                                                                                 // 3701
 * ```                                                                                                                 // 3702
 */                                                                                                                    // 3703
                                                                                                                       // 3704
                                                                                                                       // 3705
/**                                                                                                                    // 3706
 * @ngdoc module                                                                                                       // 3707
 * @name auto                                                                                                          // 3708
 * @description                                                                                                        // 3709
 *                                                                                                                     // 3710
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.                            // 3711
 */                                                                                                                    // 3712
                                                                                                                       // 3713
var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;                                                                               // 3714
var FN_ARG_SPLIT = /,/;                                                                                                // 3715
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;                                                                                   // 3716
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;                                                               // 3717
var $injectorMinErr = minErr('$injector');                                                                             // 3718
                                                                                                                       // 3719
function anonFn(fn) {                                                                                                  // 3720
  // For anonymous functions, showing at the very least the function signature can help in                             // 3721
  // debugging.                                                                                                        // 3722
  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),                                                              // 3723
      args = fnText.match(FN_ARGS);                                                                                    // 3724
  if (args) {                                                                                                          // 3725
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';                                              // 3726
  }                                                                                                                    // 3727
  return 'fn';                                                                                                         // 3728
}                                                                                                                      // 3729
                                                                                                                       // 3730
function annotate(fn, strictDi, name) {                                                                                // 3731
  var $inject,                                                                                                         // 3732
      fnText,                                                                                                          // 3733
      argDecl,                                                                                                         // 3734
      last;                                                                                                            // 3735
                                                                                                                       // 3736
  if (typeof fn === 'function') {                                                                                      // 3737
    if (!($inject = fn.$inject)) {                                                                                     // 3738
      $inject = [];                                                                                                    // 3739
      if (fn.length) {                                                                                                 // 3740
        if (strictDi) {                                                                                                // 3741
          if (!isString(name) || !name) {                                                                              // 3742
            name = fn.name || anonFn(fn);                                                                              // 3743
          }                                                                                                            // 3744
          throw $injectorMinErr('strictdi',                                                                            // 3745
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);                        // 3746
        }                                                                                                              // 3747
        fnText = fn.toString().replace(STRIP_COMMENTS, '');                                                            // 3748
        argDecl = fnText.match(FN_ARGS);                                                                               // 3749
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {                                                        // 3750
          arg.replace(FN_ARG, function(all, underscore, name) {                                                        // 3751
            $inject.push(name);                                                                                        // 3752
          });                                                                                                          // 3753
        });                                                                                                            // 3754
      }                                                                                                                // 3755
      fn.$inject = $inject;                                                                                            // 3756
    }                                                                                                                  // 3757
  } else if (isArray(fn)) {                                                                                            // 3758
    last = fn.length - 1;                                                                                              // 3759
    assertArgFn(fn[last], 'fn');                                                                                       // 3760
    $inject = fn.slice(0, last);                                                                                       // 3761
  } else {                                                                                                             // 3762
    assertArgFn(fn, 'fn', true);                                                                                       // 3763
  }                                                                                                                    // 3764
  return $inject;                                                                                                      // 3765
}                                                                                                                      // 3766
                                                                                                                       // 3767
///////////////////////////////////////                                                                                // 3768
                                                                                                                       // 3769
/**                                                                                                                    // 3770
 * @ngdoc service                                                                                                      // 3771
 * @name $injector                                                                                                     // 3772
 *                                                                                                                     // 3773
 * @description                                                                                                        // 3774
 *                                                                                                                     // 3775
 * `$injector` is used to retrieve object instances as defined by                                                      // 3776
 * {@link auto.$provide provider}, instantiate types, invoke methods,                                                  // 3777
 * and load modules.                                                                                                   // 3778
 *                                                                                                                     // 3779
 * The following always holds true:                                                                                    // 3780
 *                                                                                                                     // 3781
 * ```js                                                                                                               // 3782
 *   var $injector = angular.injector();                                                                               // 3783
 *   expect($injector.get('$injector')).toBe($injector);                                                               // 3784
 *   expect($injector.invoke(function($injector) {                                                                     // 3785
 *     return $injector;                                                                                               // 3786
 *   })).toBe($injector);                                                                                              // 3787
 * ```                                                                                                                 // 3788
 *                                                                                                                     // 3789
 * # Injection Function Annotation                                                                                     // 3790
 *                                                                                                                     // 3791
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The                      // 3792
 * following are all valid ways of annotating function with injection arguments and are equivalent.                    // 3793
 *                                                                                                                     // 3794
 * ```js                                                                                                               // 3795
 *   // inferred (only works if code not minified/obfuscated)                                                          // 3796
 *   $injector.invoke(function(serviceA){});                                                                           // 3797
 *                                                                                                                     // 3798
 *   // annotated                                                                                                      // 3799
 *   function explicit(serviceA) {};                                                                                   // 3800
 *   explicit.$inject = ['serviceA'];                                                                                  // 3801
 *   $injector.invoke(explicit);                                                                                       // 3802
 *                                                                                                                     // 3803
 *   // inline                                                                                                         // 3804
 *   $injector.invoke(['serviceA', function(serviceA){}]);                                                             // 3805
 * ```                                                                                                                 // 3806
 *                                                                                                                     // 3807
 * ## Inference                                                                                                        // 3808
 *                                                                                                                     // 3809
 * In JavaScript calling `toString()` on a function returns the function definition. The definition                    // 3810
 * can then be parsed and the function arguments can be extracted. This method of discovering                          // 3811
 * annotations is disallowed when the injector is in strict mode.                                                      // 3812
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the                    // 3813
 * argument names.                                                                                                     // 3814
 *                                                                                                                     // 3815
 * ## `$inject` Annotation                                                                                             // 3816
 * By adding an `$inject` property onto a function the injection parameters can be specified.                          // 3817
 *                                                                                                                     // 3818
 * ## Inline                                                                                                           // 3819
 * As an array of injection names, where the last item in the array is the function to call.                           // 3820
 */                                                                                                                    // 3821
                                                                                                                       // 3822
/**                                                                                                                    // 3823
 * @ngdoc method                                                                                                       // 3824
 * @name $injector#get                                                                                                 // 3825
 *                                                                                                                     // 3826
 * @description                                                                                                        // 3827
 * Return an instance of the service.                                                                                  // 3828
 *                                                                                                                     // 3829
 * @param {string} name The name of the instance to retrieve.                                                          // 3830
 * @param {string=} caller An optional string to provide the origin of the function call for error messages.           // 3831
 * @return {*} The instance.                                                                                           // 3832
 */                                                                                                                    // 3833
                                                                                                                       // 3834
/**                                                                                                                    // 3835
 * @ngdoc method                                                                                                       // 3836
 * @name $injector#invoke                                                                                              // 3837
 *                                                                                                                     // 3838
 * @description                                                                                                        // 3839
 * Invoke the method and supply the method arguments from the `$injector`.                                             // 3840
 *                                                                                                                     // 3841
 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are             // 3842
 *   injected according to the {@link guide/di $inject Annotation} rules.                                              // 3843
 * @param {Object=} self The `this` for the invoked method.                                                            // 3844
 * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3845
 *                         object first, before the `$injector` is consulted.                                          // 3846
 * @returns {*} the value returned by the invoked `fn` function.                                                       // 3847
 */                                                                                                                    // 3848
                                                                                                                       // 3849
/**                                                                                                                    // 3850
 * @ngdoc method                                                                                                       // 3851
 * @name $injector#has                                                                                                 // 3852
 *                                                                                                                     // 3853
 * @description                                                                                                        // 3854
 * Allows the user to query if the particular service exists.                                                          // 3855
 *                                                                                                                     // 3856
 * @param {string} name Name of the service to query.                                                                  // 3857
 * @returns {boolean} `true` if injector has given service.                                                            // 3858
 */                                                                                                                    // 3859
                                                                                                                       // 3860
/**                                                                                                                    // 3861
 * @ngdoc method                                                                                                       // 3862
 * @name $injector#instantiate                                                                                         // 3863
 * @description                                                                                                        // 3864
 * Create a new instance of JS type. The method takes a constructor function, invokes the new                          // 3865
 * operator, and supplies all of the arguments to the constructor function as specified by the                         // 3866
 * constructor annotation.                                                                                             // 3867
 *                                                                                                                     // 3868
 * @param {Function} Type Annotated constructor function.                                                              // 3869
 * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3870
 * object first, before the `$injector` is consulted.                                                                  // 3871
 * @returns {Object} new instance of `Type`.                                                                           // 3872
 */                                                                                                                    // 3873
                                                                                                                       // 3874
/**                                                                                                                    // 3875
 * @ngdoc method                                                                                                       // 3876
 * @name $injector#annotate                                                                                            // 3877
 *                                                                                                                     // 3878
 * @description                                                                                                        // 3879
 * Returns an array of service names which the function is requesting for injection. This API is                       // 3880
 * used by the injector to determine which services need to be injected into the function when the                     // 3881
 * function is invoked. There are three ways in which the function can be annotated with the needed                    // 3882
 * dependencies.                                                                                                       // 3883
 *                                                                                                                     // 3884
 * # Argument names                                                                                                    // 3885
 *                                                                                                                     // 3886
 * The simplest form is to extract the dependencies from the arguments of the function. This is done                   // 3887
 * by converting the function into a string using `toString()` method and extracting the argument                      // 3888
 * names.                                                                                                              // 3889
 * ```js                                                                                                               // 3890
 *   // Given                                                                                                          // 3891
 *   function MyController($scope, $route) {                                                                           // 3892
 *     // ...                                                                                                          // 3893
 *   }                                                                                                                 // 3894
 *                                                                                                                     // 3895
 *   // Then                                                                                                           // 3896
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3897
 * ```                                                                                                                 // 3898
 *                                                                                                                     // 3899
 * You can disallow this method by using strict injection mode.                                                        // 3900
 *                                                                                                                     // 3901
 * This method does not work with code minification / obfuscation. For this reason the following                       // 3902
 * annotation strategies are supported.                                                                                // 3903
 *                                                                                                                     // 3904
 * # The `$inject` property                                                                                            // 3905
 *                                                                                                                     // 3906
 * If a function has an `$inject` property and its value is an array of strings, then the strings                      // 3907
 * represent names of services to be injected into the function.                                                       // 3908
 * ```js                                                                                                               // 3909
 *   // Given                                                                                                          // 3910
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {                                                   // 3911
 *     // ...                                                                                                          // 3912
 *   }                                                                                                                 // 3913
 *   // Define function dependencies                                                                                   // 3914
 *   MyController['$inject'] = ['$scope', '$route'];                                                                   // 3915
 *                                                                                                                     // 3916
 *   // Then                                                                                                           // 3917
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3918
 * ```                                                                                                                 // 3919
 *                                                                                                                     // 3920
 * # The array notation                                                                                                // 3921
 *                                                                                                                     // 3922
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property                   // 3923
 * is very inconvenient. In these situations using the array notation to specify the dependencies in                   // 3924
 * a way that survives minification is a better choice:                                                                // 3925
 *                                                                                                                     // 3926
 * ```js                                                                                                               // 3927
 *   // We wish to write this (not minification / obfuscation safe)                                                    // 3928
 *   injector.invoke(function($compile, $rootScope) {                                                                  // 3929
 *     // ...                                                                                                          // 3930
 *   });                                                                                                               // 3931
 *                                                                                                                     // 3932
 *   // We are forced to write break inlining                                                                          // 3933
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {                                                    // 3934
 *     // ...                                                                                                          // 3935
 *   };                                                                                                                // 3936
 *   tmpFn.$inject = ['$compile', '$rootScope'];                                                                       // 3937
 *   injector.invoke(tmpFn);                                                                                           // 3938
 *                                                                                                                     // 3939
 *   // To better support inline function the inline annotation is supported                                           // 3940
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {                                   // 3941
 *     // ...                                                                                                          // 3942
 *   }]);                                                                                                              // 3943
 *                                                                                                                     // 3944
 *   // Therefore                                                                                                      // 3945
 *   expect(injector.annotate(                                                                                         // 3946
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])                                     // 3947
 *    ).toEqual(['$compile', '$rootScope']);                                                                           // 3948
 * ```                                                                                                                 // 3949
 *                                                                                                                     // 3950
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to                     // 3951
 * be retrieved as described above.                                                                                    // 3952
 *                                                                                                                     // 3953
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.                                     // 3954
 *                                                                                                                     // 3955
 * @returns {Array.<string>} The names of the services which the function requires.                                    // 3956
 */                                                                                                                    // 3957
                                                                                                                       // 3958
                                                                                                                       // 3959
                                                                                                                       // 3960
                                                                                                                       // 3961
/**                                                                                                                    // 3962
 * @ngdoc service                                                                                                      // 3963
 * @name $provide                                                                                                      // 3964
 *                                                                                                                     // 3965
 * @description                                                                                                        // 3966
 *                                                                                                                     // 3967
 * The {@link auto.$provide $provide} service has a number of methods for registering components                       // 3968
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on                              // 3969
 * {@link angular.Module}.                                                                                             // 3970
 *                                                                                                                     // 3971
 * An Angular **service** is a singleton object created by a **service factory**.  These **service                     // 3972
 * factories** are functions which, in turn, are created by a **service provider**.                                    // 3973
 * The **service providers** are constructor functions. When instantiated they must contain a                          // 3974
 * property called `$get`, which holds the **service factory** function.                                               // 3975
 *                                                                                                                     // 3976
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the                     // 3977
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**                      // 3978
 * function to get the instance of the **service**.                                                                    // 3979
 *                                                                                                                     // 3980
 * Often services have no configuration options and there is no need to add methods to the service                     // 3981
 * provider.  The provider will be no more than a constructor function with a `$get` property. For                     // 3982
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register                    // 3983
 * services without specifying a provider.                                                                             // 3984
 *                                                                                                                     // 3985
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the                     // 3986
 *     {@link auto.$injector $injector}                                                                                // 3987
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by                   // 3988
 *     providers and services.                                                                                         // 3989
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by                    // 3990
 *     services, not providers.                                                                                        // 3991
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,                       // 3992
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the                   // 3993
 *     given factory function.                                                                                         // 3994
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`                      // 3995
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate                   // 3996
 *      a new object using the given constructor function.                                                             // 3997
 *                                                                                                                     // 3998
 * See the individual methods for more information and examples.                                                       // 3999
 */                                                                                                                    // 4000
                                                                                                                       // 4001
/**                                                                                                                    // 4002
 * @ngdoc method                                                                                                       // 4003
 * @name $provide#provider                                                                                             // 4004
 * @description                                                                                                        // 4005
 *                                                                                                                     // 4006
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions                      // 4007
 * are constructor functions, whose instances are responsible for "providing" a factory for a                          // 4008
 * service.                                                                                                            // 4009
 *                                                                                                                     // 4010
 * Service provider names start with the name of the service they provide followed by `Provider`.                      // 4011
 * For example, the {@link ng.$log $log} service has a provider called                                                 // 4012
 * {@link ng.$logProvider $logProvider}.                                                                               // 4013
 *                                                                                                                     // 4014
 * Service provider objects can have additional methods which allow configuration of the provider                      // 4015
 * and its service. Importantly, you can configure what kind of service is created by the `$get`                       // 4016
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a                   // 4017
 * method {@link ng.$logProvider#debugEnabled debugEnabled}                                                            // 4018
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the                      // 4019
 * console or not.                                                                                                     // 4020
 *                                                                                                                     // 4021
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +                   // 4022
                        'Provider'` key.                                                                               // 4023
 * @param {(Object|function())} provider If the provider is:                                                           // 4024
 *                                                                                                                     // 4025
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using                          // 4026
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.                          // 4027
 *   - `Constructor`: a new instance of the provider will be created using                                             // 4028
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.                           // 4029
 *                                                                                                                     // 4030
 * @returns {Object} registered provider instance                                                                      // 4031
                                                                                                                       // 4032
 * @example                                                                                                            // 4033
 *                                                                                                                     // 4034
 * The following example shows how to create a simple event tracking service and register it using                     // 4035
 * {@link auto.$provide#provider $provide.provider()}.                                                                 // 4036
 *                                                                                                                     // 4037
 * ```js                                                                                                               // 4038
 *  // Define the eventTracker provider                                                                                // 4039
 *  function EventTrackerProvider() {                                                                                  // 4040
 *    var trackingUrl = '/track';                                                                                      // 4041
 *                                                                                                                     // 4042
 *    // A provider method for configuring where the tracked events should been saved                                  // 4043
 *    this.setTrackingUrl = function(url) {                                                                            // 4044
 *      trackingUrl = url;                                                                                             // 4045
 *    };                                                                                                               // 4046
 *                                                                                                                     // 4047
 *    // The service factory function                                                                                  // 4048
 *    this.$get = ['$http', function($http) {                                                                          // 4049
 *      var trackedEvents = {};                                                                                        // 4050
 *      return {                                                                                                       // 4051
 *        // Call this to track an event                                                                               // 4052
 *        event: function(event) {                                                                                     // 4053
 *          var count = trackedEvents[event] || 0;                                                                     // 4054
 *          count += 1;                                                                                                // 4055
 *          trackedEvents[event] = count;                                                                              // 4056
 *          return count;                                                                                              // 4057
 *        },                                                                                                           // 4058
 *        // Call this to save the tracked events to the trackingUrl                                                   // 4059
 *        save: function() {                                                                                           // 4060
 *          $http.post(trackingUrl, trackedEvents);                                                                    // 4061
 *        }                                                                                                            // 4062
 *      };                                                                                                             // 4063
 *    }];                                                                                                              // 4064
 *  }                                                                                                                  // 4065
 *                                                                                                                     // 4066
 *  describe('eventTracker', function() {                                                                              // 4067
 *    var postSpy;                                                                                                     // 4068
 *                                                                                                                     // 4069
 *    beforeEach(module(function($provide) {                                                                           // 4070
 *      // Register the eventTracker provider                                                                          // 4071
 *      $provide.provider('eventTracker', EventTrackerProvider);                                                       // 4072
 *    }));                                                                                                             // 4073
 *                                                                                                                     // 4074
 *    beforeEach(module(function(eventTrackerProvider) {                                                               // 4075
 *      // Configure eventTracker provider                                                                             // 4076
 *      eventTrackerProvider.setTrackingUrl('/custom-track');                                                          // 4077
 *    }));                                                                                                             // 4078
 *                                                                                                                     // 4079
 *    it('tracks events', inject(function(eventTracker) {                                                              // 4080
 *      expect(eventTracker.event('login')).toEqual(1);                                                                // 4081
 *      expect(eventTracker.event('login')).toEqual(2);                                                                // 4082
 *    }));                                                                                                             // 4083
 *                                                                                                                     // 4084
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {                                           // 4085
 *      postSpy = spyOn($http, 'post');                                                                                // 4086
 *      eventTracker.event('login');                                                                                   // 4087
 *      eventTracker.save();                                                                                           // 4088
 *      expect(postSpy).toHaveBeenCalled();                                                                            // 4089
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');                                                  // 4090
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');                                               // 4091
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });                                                // 4092
 *    }));                                                                                                             // 4093
 *  });                                                                                                                // 4094
 * ```                                                                                                                 // 4095
 */                                                                                                                    // 4096
                                                                                                                       // 4097
/**                                                                                                                    // 4098
 * @ngdoc method                                                                                                       // 4099
 * @name $provide#factory                                                                                              // 4100
 * @description                                                                                                        // 4101
 *                                                                                                                     // 4102
 * Register a **service factory**, which will be called to return the service instance.                                // 4103
 * This is short for registering a service where its provider consists of only a `$get` property,                      // 4104
 * which is the given service factory function.                                                                        // 4105
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to                          // 4106
 * configure your service in a provider.                                                                               // 4107
 *                                                                                                                     // 4108
 * @param {string} name The name of the instance.                                                                      // 4109
 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.                   // 4110
 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.                 // 4111
 * @returns {Object} registered provider instance                                                                      // 4112
 *                                                                                                                     // 4113
 * @example                                                                                                            // 4114
 * Here is an example of registering a service                                                                         // 4115
 * ```js                                                                                                               // 4116
 *   $provide.factory('ping', ['$http', function($http) {                                                              // 4117
 *     return function ping() {                                                                                        // 4118
 *       return $http.send('/ping');                                                                                   // 4119
 *     };                                                                                                              // 4120
 *   }]);                                                                                                              // 4121
 * ```                                                                                                                 // 4122
 * You would then inject and use this service like this:                                                               // 4123
 * ```js                                                                                                               // 4124
 *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4125
 *     ping();                                                                                                         // 4126
 *   }]);                                                                                                              // 4127
 * ```                                                                                                                 // 4128
 */                                                                                                                    // 4129
                                                                                                                       // 4130
                                                                                                                       // 4131
/**                                                                                                                    // 4132
 * @ngdoc method                                                                                                       // 4133
 * @name $provide#service                                                                                              // 4134
 * @description                                                                                                        // 4135
 *                                                                                                                     // 4136
 * Register a **service constructor**, which will be invoked with `new` to create the service                          // 4137
 * instance.                                                                                                           // 4138
 * This is short for registering a service where its provider's `$get` property is the service                         // 4139
 * constructor function that will be used to instantiate the service instance.                                         // 4140
 *                                                                                                                     // 4141
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service                     // 4142
 * as a type/class.                                                                                                    // 4143
 *                                                                                                                     // 4144
 * @param {string} name The name of the instance.                                                                      // 4145
 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)                    // 4146
 *     that will be instantiated.                                                                                      // 4147
 * @returns {Object} registered provider instance                                                                      // 4148
 *                                                                                                                     // 4149
 * @example                                                                                                            // 4150
 * Here is an example of registering a service using                                                                   // 4151
 * {@link auto.$provide#service $provide.service(class)}.                                                              // 4152
 * ```js                                                                                                               // 4153
 *   var Ping = function($http) {                                                                                      // 4154
 *     this.$http = $http;                                                                                             // 4155
 *   };                                                                                                                // 4156
 *                                                                                                                     // 4157
 *   Ping.$inject = ['$http'];                                                                                         // 4158
 *                                                                                                                     // 4159
 *   Ping.prototype.send = function() {                                                                                // 4160
 *     return this.$http.get('/ping');                                                                                 // 4161
 *   };                                                                                                                // 4162
 *   $provide.service('ping', Ping);                                                                                   // 4163
 * ```                                                                                                                 // 4164
 * You would then inject and use this service like this:                                                               // 4165
 * ```js                                                                                                               // 4166
 *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4167
 *     ping.send();                                                                                                    // 4168
 *   }]);                                                                                                              // 4169
 * ```                                                                                                                 // 4170
 */                                                                                                                    // 4171
                                                                                                                       // 4172
                                                                                                                       // 4173
/**                                                                                                                    // 4174
 * @ngdoc method                                                                                                       // 4175
 * @name $provide#value                                                                                                // 4176
 * @description                                                                                                        // 4177
 *                                                                                                                     // 4178
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a                         // 4179
 * number, an array, an object or a function.  This is short for registering a service where its                       // 4180
 * provider's `$get` property is a factory function that takes no arguments and returns the **value                    // 4181
 * service**.                                                                                                          // 4182
 *                                                                                                                     // 4183
 * Value services are similar to constant services, except that they cannot be injected into a                         // 4184
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by                     // 4185
 * an Angular                                                                                                          // 4186
 * {@link auto.$provide#decorator decorator}.                                                                          // 4187
 *                                                                                                                     // 4188
 * @param {string} name The name of the instance.                                                                      // 4189
 * @param {*} value The value.                                                                                         // 4190
 * @returns {Object} registered provider instance                                                                      // 4191
 *                                                                                                                     // 4192
 * @example                                                                                                            // 4193
 * Here are some examples of creating value services.                                                                  // 4194
 * ```js                                                                                                               // 4195
 *   $provide.value('ADMIN_USER', 'admin');                                                                            // 4196
 *                                                                                                                     // 4197
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });                                                 // 4198
 *                                                                                                                     // 4199
 *   $provide.value('halfOf', function(value) {                                                                        // 4200
 *     return value / 2;                                                                                               // 4201
 *   });                                                                                                               // 4202
 * ```                                                                                                                 // 4203
 */                                                                                                                    // 4204
                                                                                                                       // 4205
                                                                                                                       // 4206
/**                                                                                                                    // 4207
 * @ngdoc method                                                                                                       // 4208
 * @name $provide#constant                                                                                             // 4209
 * @description                                                                                                        // 4210
 *                                                                                                                     // 4211
 * Register a **constant service**, such as a string, a number, an array, an object or a function,                     // 4212
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be                       // 4213
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot                     // 4214
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.                                              // 4215
 *                                                                                                                     // 4216
 * @param {string} name The name of the constant.                                                                      // 4217
 * @param {*} value The constant value.                                                                                // 4218
 * @returns {Object} registered instance                                                                               // 4219
 *                                                                                                                     // 4220
 * @example                                                                                                            // 4221
 * Here a some examples of creating constants:                                                                         // 4222
 * ```js                                                                                                               // 4223
 *   $provide.constant('SHARD_HEIGHT', 306);                                                                           // 4224
 *                                                                                                                     // 4225
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);                                                         // 4226
 *                                                                                                                     // 4227
 *   $provide.constant('double', function(value) {                                                                     // 4228
 *     return value * 2;                                                                                               // 4229
 *   });                                                                                                               // 4230
 * ```                                                                                                                 // 4231
 */                                                                                                                    // 4232
                                                                                                                       // 4233
                                                                                                                       // 4234
/**                                                                                                                    // 4235
 * @ngdoc method                                                                                                       // 4236
 * @name $provide#decorator                                                                                            // 4237
 * @description                                                                                                        // 4238
 *                                                                                                                     // 4239
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator                     // 4240
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the                        // 4241
 * service. The object returned by the decorator may be the original service, or a new service                         // 4242
 * object which replaces or wraps and delegates to the original service.                                               // 4243
 *                                                                                                                     // 4244
 * @param {string} name The name of the service to decorate.                                                           // 4245
 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be      // 4246
 *    instantiated and should return the decorated service instance. The function is called using                      // 4247
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.                      // 4248
 *    Local injection arguments:                                                                                       // 4249
 *                                                                                                                     // 4250
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,                          // 4251
 *      decorated or delegated to.                                                                                     // 4252
 *                                                                                                                     // 4253
 * @example                                                                                                            // 4254
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting                     // 4255
 * calls to {@link ng.$log#error $log.warn()}.                                                                         // 4256
 * ```js                                                                                                               // 4257
 *   $provide.decorator('$log', ['$delegate', function($delegate) {                                                    // 4258
 *     $delegate.warn = $delegate.error;                                                                               // 4259
 *     return $delegate;                                                                                               // 4260
 *   }]);                                                                                                              // 4261
 * ```                                                                                                                 // 4262
 */                                                                                                                    // 4263
                                                                                                                       // 4264
                                                                                                                       // 4265
function createInjector(modulesToLoad, strictDi) {                                                                     // 4266
  strictDi = (strictDi === true);                                                                                      // 4267
  var INSTANTIATING = {},                                                                                              // 4268
      providerSuffix = 'Provider',                                                                                     // 4269
      path = [],                                                                                                       // 4270
      loadedModules = new HashMap([], true),                                                                           // 4271
      providerCache = {                                                                                                // 4272
        $provide: {                                                                                                    // 4273
            provider: supportObject(provider),                                                                         // 4274
            factory: supportObject(factory),                                                                           // 4275
            service: supportObject(service),                                                                           // 4276
            value: supportObject(value),                                                                               // 4277
            constant: supportObject(constant),                                                                         // 4278
            decorator: decorator                                                                                       // 4279
          }                                                                                                            // 4280
      },                                                                                                               // 4281
      providerInjector = (providerCache.$injector =                                                                    // 4282
          createInternalInjector(providerCache, function(serviceName, caller) {                                        // 4283
            if (angular.isString(caller)) {                                                                            // 4284
              path.push(caller);                                                                                       // 4285
            }                                                                                                          // 4286
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));                                 // 4287
          })),                                                                                                         // 4288
      instanceCache = {},                                                                                              // 4289
      instanceInjector = (instanceCache.$injector =                                                                    // 4290
          createInternalInjector(instanceCache, function(serviceName, caller) {                                        // 4291
            var provider = providerInjector.get(serviceName + providerSuffix, caller);                                 // 4292
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);                           // 4293
          }));                                                                                                         // 4294
                                                                                                                       // 4295
                                                                                                                       // 4296
  forEach(loadModules(modulesToLoad), function(fn) { if (fn) instanceInjector.invoke(fn); });                          // 4297
                                                                                                                       // 4298
  return instanceInjector;                                                                                             // 4299
                                                                                                                       // 4300
  ////////////////////////////////////                                                                                 // 4301
  // $provider                                                                                                         // 4302
  ////////////////////////////////////                                                                                 // 4303
                                                                                                                       // 4304
  function supportObject(delegate) {                                                                                   // 4305
    return function(key, value) {                                                                                      // 4306
      if (isObject(key)) {                                                                                             // 4307
        forEach(key, reverseParams(delegate));                                                                         // 4308
      } else {                                                                                                         // 4309
        return delegate(key, value);                                                                                   // 4310
      }                                                                                                                // 4311
    };                                                                                                                 // 4312
  }                                                                                                                    // 4313
                                                                                                                       // 4314
  function provider(name, provider_) {                                                                                 // 4315
    assertNotHasOwnProperty(name, 'service');                                                                          // 4316
    if (isFunction(provider_) || isArray(provider_)) {                                                                 // 4317
      provider_ = providerInjector.instantiate(provider_);                                                             // 4318
    }                                                                                                                  // 4319
    if (!provider_.$get) {                                                                                             // 4320
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);                          // 4321
    }                                                                                                                  // 4322
    return providerCache[name + providerSuffix] = provider_;                                                           // 4323
  }                                                                                                                    // 4324
                                                                                                                       // 4325
  function enforceReturnValue(name, factory) {                                                                         // 4326
    return function enforcedReturnValue() {                                                                            // 4327
      var result = instanceInjector.invoke(factory, this);                                                             // 4328
      if (isUndefined(result)) {                                                                                       // 4329
        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);          // 4330
      }                                                                                                                // 4331
      return result;                                                                                                   // 4332
    };                                                                                                                 // 4333
  }                                                                                                                    // 4334
                                                                                                                       // 4335
  function factory(name, factoryFn, enforce) {                                                                         // 4336
    return provider(name, {                                                                                            // 4337
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn                                        // 4338
    });                                                                                                                // 4339
  }                                                                                                                    // 4340
                                                                                                                       // 4341
  function service(name, constructor) {                                                                                // 4342
    return factory(name, ['$injector', function($injector) {                                                           // 4343
      return $injector.instantiate(constructor);                                                                       // 4344
    }]);                                                                                                               // 4345
  }                                                                                                                    // 4346
                                                                                                                       // 4347
  function value(name, val) { return factory(name, valueFn(val), false); }                                             // 4348
                                                                                                                       // 4349
  function constant(name, value) {                                                                                     // 4350
    assertNotHasOwnProperty(name, 'constant');                                                                         // 4351
    providerCache[name] = value;                                                                                       // 4352
    instanceCache[name] = value;                                                                                       // 4353
  }                                                                                                                    // 4354
                                                                                                                       // 4355
  function decorator(serviceName, decorFn) {                                                                           // 4356
    var origProvider = providerInjector.get(serviceName + providerSuffix),                                             // 4357
        orig$get = origProvider.$get;                                                                                  // 4358
                                                                                                                       // 4359
    origProvider.$get = function() {                                                                                   // 4360
      var origInstance = instanceInjector.invoke(orig$get, origProvider);                                              // 4361
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});                                        // 4362
    };                                                                                                                 // 4363
  }                                                                                                                    // 4364
                                                                                                                       // 4365
  ////////////////////////////////////                                                                                 // 4366
  // Module Loading                                                                                                    // 4367
  ////////////////////////////////////                                                                                 // 4368
  function loadModules(modulesToLoad) {                                                                                // 4369
    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');                  // 4370
    var runBlocks = [], moduleFn;                                                                                      // 4371
    forEach(modulesToLoad, function(module) {                                                                          // 4372
      if (loadedModules.get(module)) return;                                                                           // 4373
      loadedModules.put(module, true);                                                                                 // 4374
                                                                                                                       // 4375
      function runInvokeQueue(queue) {                                                                                 // 4376
        var i, ii;                                                                                                     // 4377
        for (i = 0, ii = queue.length; i < ii; i++) {                                                                  // 4378
          var invokeArgs = queue[i],                                                                                   // 4379
              provider = providerInjector.get(invokeArgs[0]);                                                          // 4380
                                                                                                                       // 4381
          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);                                                      // 4382
        }                                                                                                              // 4383
      }                                                                                                                // 4384
                                                                                                                       // 4385
      try {                                                                                                            // 4386
        if (isString(module)) {                                                                                        // 4387
          moduleFn = angularModule(module);                                                                            // 4388
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);                    // 4389
          runInvokeQueue(moduleFn._invokeQueue);                                                                       // 4390
          runInvokeQueue(moduleFn._configBlocks);                                                                      // 4391
        } else if (isFunction(module)) {                                                                               // 4392
            runBlocks.push(providerInjector.invoke(module));                                                           // 4393
        } else if (isArray(module)) {                                                                                  // 4394
            runBlocks.push(providerInjector.invoke(module));                                                           // 4395
        } else {                                                                                                       // 4396
          assertArgFn(module, 'module');                                                                               // 4397
        }                                                                                                              // 4398
      } catch (e) {                                                                                                    // 4399
        if (isArray(module)) {                                                                                         // 4400
          module = module[module.length - 1];                                                                          // 4401
        }                                                                                                              // 4402
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {                                                // 4403
          // Safari & FF's stack traces don't contain error.message content                                            // 4404
          // unlike those of Chrome and IE                                                                             // 4405
          // So if stack doesn't contain message, we create a new string that contains both.                           // 4406
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.                          // 4407
          /* jshint -W022 */                                                                                           // 4408
          e = e.message + '\n' + e.stack;                                                                              // 4409
        }                                                                                                              // 4410
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",                             // 4411
                  module, e.stack || e.message || e);                                                                  // 4412
      }                                                                                                                // 4413
    });                                                                                                                // 4414
    return runBlocks;                                                                                                  // 4415
  }                                                                                                                    // 4416
                                                                                                                       // 4417
  ////////////////////////////////////                                                                                 // 4418
  // internal Injector                                                                                                 // 4419
  ////////////////////////////////////                                                                                 // 4420
                                                                                                                       // 4421
  function createInternalInjector(cache, factory) {                                                                    // 4422
                                                                                                                       // 4423
    function getService(serviceName, caller) {                                                                         // 4424
      if (cache.hasOwnProperty(serviceName)) {                                                                         // 4425
        if (cache[serviceName] === INSTANTIATING) {                                                                    // 4426
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',                                              // 4427
                    serviceName + ' <- ' + path.join(' <- '));                                                         // 4428
        }                                                                                                              // 4429
        return cache[serviceName];                                                                                     // 4430
      } else {                                                                                                         // 4431
        try {                                                                                                          // 4432
          path.unshift(serviceName);                                                                                   // 4433
          cache[serviceName] = INSTANTIATING;                                                                          // 4434
          return cache[serviceName] = factory(serviceName, caller);                                                    // 4435
        } catch (err) {                                                                                                // 4436
          if (cache[serviceName] === INSTANTIATING) {                                                                  // 4437
            delete cache[serviceName];                                                                                 // 4438
          }                                                                                                            // 4439
          throw err;                                                                                                   // 4440
        } finally {                                                                                                    // 4441
          path.shift();                                                                                                // 4442
        }                                                                                                              // 4443
      }                                                                                                                // 4444
    }                                                                                                                  // 4445
                                                                                                                       // 4446
    function invoke(fn, self, locals, serviceName) {                                                                   // 4447
      if (typeof locals === 'string') {                                                                                // 4448
        serviceName = locals;                                                                                          // 4449
        locals = null;                                                                                                 // 4450
      }                                                                                                                // 4451
                                                                                                                       // 4452
      var args = [],                                                                                                   // 4453
          $inject = createInjector.$$annotate(fn, strictDi, serviceName),                                              // 4454
          length, i,                                                                                                   // 4455
          key;                                                                                                         // 4456
                                                                                                                       // 4457
      for (i = 0, length = $inject.length; i < length; i++) {                                                          // 4458
        key = $inject[i];                                                                                              // 4459
        if (typeof key !== 'string') {                                                                                 // 4460
          throw $injectorMinErr('itkn',                                                                                // 4461
                  'Incorrect injection token! Expected service name as string, got {0}', key);                         // 4462
        }                                                                                                              // 4463
        args.push(                                                                                                     // 4464
          locals && locals.hasOwnProperty(key)                                                                         // 4465
          ? locals[key]                                                                                                // 4466
          : getService(key, serviceName)                                                                               // 4467
        );                                                                                                             // 4468
      }                                                                                                                // 4469
      if (isArray(fn)) {                                                                                               // 4470
        fn = fn[length];                                                                                               // 4471
      }                                                                                                                // 4472
                                                                                                                       // 4473
      // http://jsperf.com/angularjs-invoke-apply-vs-switch                                                            // 4474
      // #5388                                                                                                         // 4475
      return fn.apply(self, args);                                                                                     // 4476
    }                                                                                                                  // 4477
                                                                                                                       // 4478
    function instantiate(Type, locals, serviceName) {                                                                  // 4479
      // Check if Type is annotated and use just the given function at n-1 as parameter                                // 4480
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);                                 // 4481
      // Object creation: http://jsperf.com/create-constructor/2                                                       // 4482
      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);                  // 4483
      var returnedValue = invoke(Type, instance, locals, serviceName);                                                 // 4484
                                                                                                                       // 4485
      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;                          // 4486
    }                                                                                                                  // 4487
                                                                                                                       // 4488
    return {                                                                                                           // 4489
      invoke: invoke,                                                                                                  // 4490
      instantiate: instantiate,                                                                                        // 4491
      get: getService,                                                                                                 // 4492
      annotate: createInjector.$$annotate,                                                                             // 4493
      has: function(name) {                                                                                            // 4494
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);                      // 4495
      }                                                                                                                // 4496
    };                                                                                                                 // 4497
  }                                                                                                                    // 4498
}                                                                                                                      // 4499
                                                                                                                       // 4500
createInjector.$$annotate = annotate;                                                                                  // 4501
                                                                                                                       // 4502
/**                                                                                                                    // 4503
 * @ngdoc provider                                                                                                     // 4504
 * @name $anchorScrollProvider                                                                                         // 4505
 *                                                                                                                     // 4506
 * @description                                                                                                        // 4507
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever                                                 // 4508
 * {@link ng.$location#hash $location.hash()} changes.                                                                 // 4509
 */                                                                                                                    // 4510
function $AnchorScrollProvider() {                                                                                     // 4511
                                                                                                                       // 4512
  var autoScrollingEnabled = true;                                                                                     // 4513
                                                                                                                       // 4514
  /**                                                                                                                  // 4515
   * @ngdoc method                                                                                                     // 4516
   * @name $anchorScrollProvider#disableAutoScrolling                                                                  // 4517
   *                                                                                                                   // 4518
   * @description                                                                                                      // 4519
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to                         // 4520
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />                 // 4521
   * Use this method to disable automatic scrolling.                                                                   // 4522
   *                                                                                                                   // 4523
   * If automatic scrolling is disabled, one must explicitly call                                                      // 4524
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the                         // 4525
   * current hash.                                                                                                     // 4526
   */                                                                                                                  // 4527
  this.disableAutoScrolling = function() {                                                                             // 4528
    autoScrollingEnabled = false;                                                                                      // 4529
  };                                                                                                                   // 4530
                                                                                                                       // 4531
  /**                                                                                                                  // 4532
   * @ngdoc service                                                                                                    // 4533
   * @name $anchorScroll                                                                                               // 4534
   * @kind function                                                                                                    // 4535
   * @requires $window                                                                                                 // 4536
   * @requires $location                                                                                               // 4537
   * @requires $rootScope                                                                                              // 4538
   *                                                                                                                   // 4539
   * @description                                                                                                      // 4540
   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the                     // 4541
   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified                     // 4542
   * in the                                                                                                            // 4543
   * [HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).                      // 4544
   *                                                                                                                   // 4545
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to                       // 4546
   * match any anchor whenever it changes. This can be disabled by calling                                             // 4547
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.               // 4548
   *                                                                                                                   // 4549
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a                      // 4550
   * vertical scroll-offset (either fixed or dynamic).                                                                 // 4551
   *                                                                                                                   // 4552
   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of                      // 4553
   *                       {@link ng.$location#hash $location.hash()} will be used.                                    // 4554
   *                                                                                                                   // 4555
   * @property {(number|function|jqLite)} yOffset                                                                      // 4556
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed                             // 4557
   * positioned elements at the top of the page, such as navbars, headers etc.                                         // 4558
   *                                                                                                                   // 4559
   * `yOffset` can be specified in various ways:                                                                       // 4560
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />                                          // 4561
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return                     // 4562
   *   a number representing the offset (in pixels).<br /><br />                                                       // 4563
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from                     // 4564
   *   the top of the page to the element's bottom will be used as offset.<br />                                       // 4565
   *   **Note**: The element will be taken into account only as long as its `position` is set to                       // 4566
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust                        // 4567
   *   their height and/or positioning according to the viewport's size.                                               // 4568
   *                                                                                                                   // 4569
   * <br />                                                                                                            // 4570
   * <div class="alert alert-warning">                                                                                 // 4571
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and                   // 4572
   * not some child element.                                                                                           // 4573
   * </div>                                                                                                            // 4574
   *                                                                                                                   // 4575
   * @example                                                                                                          // 4576
     <example module="anchorScrollExample">                                                                            // 4577
       <file name="index.html">                                                                                        // 4578
         <div id="scrollArea" ng-controller="ScrollController">                                                        // 4579
           <a ng-click="gotoBottom()">Go to bottom</a>                                                                 // 4580
           <a id="bottom"></a> You're at the bottom!                                                                   // 4581
         </div>                                                                                                        // 4582
       </file>                                                                                                         // 4583
       <file name="script.js">                                                                                         // 4584
         angular.module('anchorScrollExample', [])                                                                     // 4585
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',                                    // 4586
             function ($scope, $location, $anchorScroll) {                                                             // 4587
               $scope.gotoBottom = function() {                                                                        // 4588
                 // set the location.hash to the id of                                                                 // 4589
                 // the element you wish to scroll to.                                                                 // 4590
                 $location.hash('bottom');                                                                             // 4591
                                                                                                                       // 4592
                 // call $anchorScroll()                                                                               // 4593
                 $anchorScroll();                                                                                      // 4594
               };                                                                                                      // 4595
             }]);                                                                                                      // 4596
       </file>                                                                                                         // 4597
       <file name="style.css">                                                                                         // 4598
         #scrollArea {                                                                                                 // 4599
           height: 280px;                                                                                              // 4600
           overflow: auto;                                                                                             // 4601
         }                                                                                                             // 4602
                                                                                                                       // 4603
         #bottom {                                                                                                     // 4604
           display: block;                                                                                             // 4605
           margin-top: 2000px;                                                                                         // 4606
         }                                                                                                             // 4607
       </file>                                                                                                         // 4608
     </example>                                                                                                        // 4609
   *                                                                                                                   // 4610
   * <hr />                                                                                                            // 4611
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).                   // 4612
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.                                      // 4613
   *                                                                                                                   // 4614
   * @example                                                                                                          // 4615
     <example module="anchorScrollOffsetExample">                                                                      // 4616
       <file name="index.html">                                                                                        // 4617
         <div class="fixed-header" ng-controller="headerCtrl">                                                         // 4618
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">                                           // 4619
             Go to anchor {{x}}                                                                                        // 4620
           </a>                                                                                                        // 4621
         </div>                                                                                                        // 4622
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">                                            // 4623
           Anchor {{x}} of 5                                                                                           // 4624
         </div>                                                                                                        // 4625
       </file>                                                                                                         // 4626
       <file name="script.js">                                                                                         // 4627
         angular.module('anchorScrollOffsetExample', [])                                                               // 4628
           .run(['$anchorScroll', function($anchorScroll) {                                                            // 4629
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels                                         // 4630
           }])                                                                                                         // 4631
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',                                          // 4632
             function ($anchorScroll, $location, $scope) {                                                             // 4633
               $scope.gotoAnchor = function(x) {                                                                       // 4634
                 var newHash = 'anchor' + x;                                                                           // 4635
                 if ($location.hash() !== newHash) {                                                                   // 4636
                   // set the $location.hash to `newHash` and                                                          // 4637
                   // $anchorScroll will automatically scroll to it                                                    // 4638
                   $location.hash('anchor' + x);                                                                       // 4639
                 } else {                                                                                              // 4640
                   // call $anchorScroll() explicitly,                                                                 // 4641
                   // since $location.hash hasn't changed                                                              // 4642
                   $anchorScroll();                                                                                    // 4643
                 }                                                                                                     // 4644
               };                                                                                                      // 4645
             }                                                                                                         // 4646
           ]);                                                                                                         // 4647
       </file>                                                                                                         // 4648
       <file name="style.css">                                                                                         // 4649
         body {                                                                                                        // 4650
           padding-top: 50px;                                                                                          // 4651
         }                                                                                                             // 4652
                                                                                                                       // 4653
         .anchor {                                                                                                     // 4654
           border: 2px dashed DarkOrchid;                                                                              // 4655
           padding: 10px 10px 200px 10px;                                                                              // 4656
         }                                                                                                             // 4657
                                                                                                                       // 4658
         .fixed-header {                                                                                               // 4659
           background-color: rgba(0, 0, 0, 0.2);                                                                       // 4660
           height: 50px;                                                                                               // 4661
           position: fixed;                                                                                            // 4662
           top: 0; left: 0; right: 0;                                                                                  // 4663
         }                                                                                                             // 4664
                                                                                                                       // 4665
         .fixed-header > a {                                                                                           // 4666
           display: inline-block;                                                                                      // 4667
           margin: 5px 15px;                                                                                           // 4668
         }                                                                                                             // 4669
       </file>                                                                                                         // 4670
     </example>                                                                                                        // 4671
   */                                                                                                                  // 4672
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {                        // 4673
    var document = $window.document;                                                                                   // 4674
                                                                                                                       // 4675
    // Helper function to get first anchor from a NodeList                                                             // 4676
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant                                 // 4677
    //  and working in all supported browsers.)                                                                        // 4678
    function getFirstAnchor(list) {                                                                                    // 4679
      var result = null;                                                                                               // 4680
      Array.prototype.some.call(list, function(element) {                                                              // 4681
        if (nodeName_(element) === 'a') {                                                                              // 4682
          result = element;                                                                                            // 4683
          return true;                                                                                                 // 4684
        }                                                                                                              // 4685
      });                                                                                                              // 4686
      return result;                                                                                                   // 4687
    }                                                                                                                  // 4688
                                                                                                                       // 4689
    function getYOffset() {                                                                                            // 4690
                                                                                                                       // 4691
      var offset = scroll.yOffset;                                                                                     // 4692
                                                                                                                       // 4693
      if (isFunction(offset)) {                                                                                        // 4694
        offset = offset();                                                                                             // 4695
      } else if (isElement(offset)) {                                                                                  // 4696
        var elem = offset[0];                                                                                          // 4697
        var style = $window.getComputedStyle(elem);                                                                    // 4698
        if (style.position !== 'fixed') {                                                                              // 4699
          offset = 0;                                                                                                  // 4700
        } else {                                                                                                       // 4701
          offset = elem.getBoundingClientRect().bottom;                                                                // 4702
        }                                                                                                              // 4703
      } else if (!isNumber(offset)) {                                                                                  // 4704
        offset = 0;                                                                                                    // 4705
      }                                                                                                                // 4706
                                                                                                                       // 4707
      return offset;                                                                                                   // 4708
    }                                                                                                                  // 4709
                                                                                                                       // 4710
    function scrollTo(elem) {                                                                                          // 4711
      if (elem) {                                                                                                      // 4712
        elem.scrollIntoView();                                                                                         // 4713
                                                                                                                       // 4714
        var offset = getYOffset();                                                                                     // 4715
                                                                                                                       // 4716
        if (offset) {                                                                                                  // 4717
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.                   // 4718
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the                   // 4719
          // top of the viewport.                                                                                      // 4720
          //                                                                                                           // 4721
          // IF the number of pixels from the top of `elem` to the end of the page's content is less                   // 4722
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some                  // 4723
          // way down the page.                                                                                        // 4724
          //                                                                                                           // 4725
          // This is often the case for elements near the bottom of the page.                                          // 4726
          //                                                                                                           // 4727
          // In such cases we do not need to scroll the whole `offset` up, just the difference between                 // 4728
          // the top of the element and the offset, which is enough to align the top of `elem` at the                  // 4729
          // desired position.                                                                                         // 4730
          var elemTop = elem.getBoundingClientRect().top;                                                              // 4731
          $window.scrollBy(0, elemTop - offset);                                                                       // 4732
        }                                                                                                              // 4733
      } else {                                                                                                         // 4734
        $window.scrollTo(0, 0);                                                                                        // 4735
      }                                                                                                                // 4736
    }                                                                                                                  // 4737
                                                                                                                       // 4738
    function scroll(hash) {                                                                                            // 4739
      hash = isString(hash) ? hash : $location.hash();                                                                 // 4740
      var elm;                                                                                                         // 4741
                                                                                                                       // 4742
      // empty hash, scroll to the top of the page                                                                     // 4743
      if (!hash) scrollTo(null);                                                                                       // 4744
                                                                                                                       // 4745
      // element with given id                                                                                         // 4746
      else if ((elm = document.getElementById(hash))) scrollTo(elm);                                                   // 4747
                                                                                                                       // 4748
      // first anchor with given name :-D                                                                              // 4749
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);                                // 4750
                                                                                                                       // 4751
      // no element and hash == 'top', scroll to the top of the page                                                   // 4752
      else if (hash === 'top') scrollTo(null);                                                                         // 4753
    }                                                                                                                  // 4754
                                                                                                                       // 4755
    // does not scroll when user clicks on anchor link that is currently on                                            // 4756
    // (no url change, no $location.hash() change), browser native does scroll                                         // 4757
    if (autoScrollingEnabled) {                                                                                        // 4758
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},                                         // 4759
        function autoScrollWatchAction(newVal, oldVal) {                                                               // 4760
          // skip the initial scroll if $location.hash is empty                                                        // 4761
          if (newVal === oldVal && newVal === '') return;                                                              // 4762
                                                                                                                       // 4763
          jqLiteDocumentLoaded(function() {                                                                            // 4764
            $rootScope.$evalAsync(scroll);                                                                             // 4765
          });                                                                                                          // 4766
        });                                                                                                            // 4767
    }                                                                                                                  // 4768
                                                                                                                       // 4769
    return scroll;                                                                                                     // 4770
  }];                                                                                                                  // 4771
}                                                                                                                      // 4772
                                                                                                                       // 4773
var $animateMinErr = minErr('$animate');                                                                               // 4774
var ELEMENT_NODE = 1;                                                                                                  // 4775
var NG_ANIMATE_CLASSNAME = 'ng-animate';                                                                               // 4776
                                                                                                                       // 4777
function mergeClasses(a,b) {                                                                                           // 4778
  if (!a && !b) return '';                                                                                             // 4779
  if (!a) return b;                                                                                                    // 4780
  if (!b) return a;                                                                                                    // 4781
  if (isArray(a)) a = a.join(' ');                                                                                     // 4782
  if (isArray(b)) b = b.join(' ');                                                                                     // 4783
  return a + ' ' + b;                                                                                                  // 4784
}                                                                                                                      // 4785
                                                                                                                       // 4786
function extractElementNode(element) {                                                                                 // 4787
  for (var i = 0; i < element.length; i++) {                                                                           // 4788
    var elm = element[i];                                                                                              // 4789
    if (elm.nodeType === ELEMENT_NODE) {                                                                               // 4790
      return elm;                                                                                                      // 4791
    }                                                                                                                  // 4792
  }                                                                                                                    // 4793
}                                                                                                                      // 4794
                                                                                                                       // 4795
function splitClasses(classes) {                                                                                       // 4796
  if (isString(classes)) {                                                                                             // 4797
    classes = classes.split(' ');                                                                                      // 4798
  }                                                                                                                    // 4799
                                                                                                                       // 4800
  // Use createMap() to prevent class assumptions involving property names in                                          // 4801
  // Object.prototype                                                                                                  // 4802
  var obj = createMap();                                                                                               // 4803
  forEach(classes, function(klass) {                                                                                   // 4804
    // sometimes the split leaves empty string values                                                                  // 4805
    // incase extra spaces were applied to the options                                                                 // 4806
    if (klass.length) {                                                                                                // 4807
      obj[klass] = true;                                                                                               // 4808
    }                                                                                                                  // 4809
  });                                                                                                                  // 4810
  return obj;                                                                                                          // 4811
}                                                                                                                      // 4812
                                                                                                                       // 4813
// if any other type of options value besides an Object value is                                                       // 4814
// passed into the $animate.method() animation then this helper code                                                   // 4815
// will be run which will ignore it. While this patch is not the                                                       // 4816
// greatest solution to this, a lot of existing plugins depend on                                                      // 4817
// $animate to either call the callback (< 1.2) or return a promise                                                    // 4818
// that can be changed. This helper function ensures that the options                                                  // 4819
// are wiped clean incase a callback function is provided.                                                             // 4820
function prepareAnimateOptions(options) {                                                                              // 4821
  return isObject(options)                                                                                             // 4822
      ? options                                                                                                        // 4823
      : {};                                                                                                            // 4824
}                                                                                                                      // 4825
                                                                                                                       // 4826
var $$CoreAnimateRunnerProvider = function() {                                                                         // 4827
  this.$get = ['$q', '$$rAF', function($q, $$rAF) {                                                                    // 4828
    function AnimateRunner() {}                                                                                        // 4829
    AnimateRunner.all = noop;                                                                                          // 4830
    AnimateRunner.chain = noop;                                                                                        // 4831
    AnimateRunner.prototype = {                                                                                        // 4832
      end: noop,                                                                                                       // 4833
      cancel: noop,                                                                                                    // 4834
      resume: noop,                                                                                                    // 4835
      pause: noop,                                                                                                     // 4836
      complete: noop,                                                                                                  // 4837
      then: function(pass, fail) {                                                                                     // 4838
        return $q(function(resolve) {                                                                                  // 4839
          $$rAF(function() {                                                                                           // 4840
            resolve();                                                                                                 // 4841
          });                                                                                                          // 4842
        }).then(pass, fail);                                                                                           // 4843
      }                                                                                                                // 4844
    };                                                                                                                 // 4845
    return AnimateRunner;                                                                                              // 4846
  }];                                                                                                                  // 4847
};                                                                                                                     // 4848
                                                                                                                       // 4849
// this is prefixed with Core since it conflicts with                                                                  // 4850
// the animateQueueProvider defined in ngAnimate/animateQueue.js                                                       // 4851
var $$CoreAnimateQueueProvider = function() {                                                                          // 4852
  var postDigestQueue = new HashMap();                                                                                 // 4853
  var postDigestElements = [];                                                                                         // 4854
                                                                                                                       // 4855
  this.$get = ['$$AnimateRunner', '$rootScope',                                                                        // 4856
       function($$AnimateRunner,   $rootScope) {                                                                       // 4857
    return {                                                                                                           // 4858
      enabled: noop,                                                                                                   // 4859
      on: noop,                                                                                                        // 4860
      off: noop,                                                                                                       // 4861
      pin: noop,                                                                                                       // 4862
                                                                                                                       // 4863
      push: function(element, event, options, domOperation) {                                                          // 4864
        domOperation        && domOperation();                                                                         // 4865
                                                                                                                       // 4866
        options = options || {};                                                                                       // 4867
        options.from        && element.css(options.from);                                                              // 4868
        options.to          && element.css(options.to);                                                                // 4869
                                                                                                                       // 4870
        if (options.addClass || options.removeClass) {                                                                 // 4871
          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);                                  // 4872
        }                                                                                                              // 4873
                                                                                                                       // 4874
        return new $$AnimateRunner(); // jshint ignore:line                                                            // 4875
      }                                                                                                                // 4876
    };                                                                                                                 // 4877
                                                                                                                       // 4878
                                                                                                                       // 4879
    function updateData(data, classes, value) {                                                                        // 4880
      var changed = false;                                                                                             // 4881
      if (classes) {                                                                                                   // 4882
        classes = isString(classes) ? classes.split(' ') :                                                             // 4883
                  isArray(classes) ? classes : [];                                                                     // 4884
        forEach(classes, function(className) {                                                                         // 4885
          if (className) {                                                                                             // 4886
            changed = true;                                                                                            // 4887
            data[className] = value;                                                                                   // 4888
          }                                                                                                            // 4889
        });                                                                                                            // 4890
      }                                                                                                                // 4891
      return changed;                                                                                                  // 4892
    }                                                                                                                  // 4893
                                                                                                                       // 4894
    function handleCSSClassChanges() {                                                                                 // 4895
      forEach(postDigestElements, function(element) {                                                                  // 4896
        var data = postDigestQueue.get(element);                                                                       // 4897
        if (data) {                                                                                                    // 4898
          var existing = splitClasses(element.attr('class'));                                                          // 4899
          var toAdd = '';                                                                                              // 4900
          var toRemove = '';                                                                                           // 4901
          forEach(data, function(status, className) {                                                                  // 4902
            var hasClass = !!existing[className];                                                                      // 4903
            if (status !== hasClass) {                                                                                 // 4904
              if (status) {                                                                                            // 4905
                toAdd += (toAdd.length ? ' ' : '') + className;                                                        // 4906
              } else {                                                                                                 // 4907
                toRemove += (toRemove.length ? ' ' : '') + className;                                                  // 4908
              }                                                                                                        // 4909
            }                                                                                                          // 4910
          });                                                                                                          // 4911
                                                                                                                       // 4912
          forEach(element, function(elm) {                                                                             // 4913
            toAdd    && jqLiteAddClass(elm, toAdd);                                                                    // 4914
            toRemove && jqLiteRemoveClass(elm, toRemove);                                                              // 4915
          });                                                                                                          // 4916
          postDigestQueue.remove(element);                                                                             // 4917
        }                                                                                                              // 4918
      });                                                                                                              // 4919
      postDigestElements.length = 0;                                                                                   // 4920
    }                                                                                                                  // 4921
                                                                                                                       // 4922
                                                                                                                       // 4923
    function addRemoveClassesPostDigest(element, add, remove) {                                                        // 4924
      var data = postDigestQueue.get(element) || {};                                                                   // 4925
                                                                                                                       // 4926
      var classesAdded = updateData(data, add, true);                                                                  // 4927
      var classesRemoved = updateData(data, remove, false);                                                            // 4928
                                                                                                                       // 4929
      if (classesAdded || classesRemoved) {                                                                            // 4930
                                                                                                                       // 4931
        postDigestQueue.put(element, data);                                                                            // 4932
        postDigestElements.push(element);                                                                              // 4933
                                                                                                                       // 4934
        if (postDigestElements.length === 1) {                                                                         // 4935
          $rootScope.$$postDigest(handleCSSClassChanges);                                                              // 4936
        }                                                                                                              // 4937
      }                                                                                                                // 4938
    }                                                                                                                  // 4939
  }];                                                                                                                  // 4940
};                                                                                                                     // 4941
                                                                                                                       // 4942
/**                                                                                                                    // 4943
 * @ngdoc provider                                                                                                     // 4944
 * @name $animateProvider                                                                                              // 4945
 *                                                                                                                     // 4946
 * @description                                                                                                        // 4947
 * Default implementation of $animate that doesn't perform any animations, instead just                                // 4948
 * synchronously performs DOM updates and resolves the returned runner promise.                                        // 4949
 *                                                                                                                     // 4950
 * In order to enable animations the `ngAnimate` module has to be loaded.                                              // 4951
 *                                                                                                                     // 4952
 * To see the functional implementation check out `src/ngAnimate/animate.js`.                                          // 4953
 */                                                                                                                    // 4954
var $AnimateProvider = ['$provide', function($provide) {                                                               // 4955
  var provider = this;                                                                                                 // 4956
                                                                                                                       // 4957
  this.$$registeredAnimations = Object.create(null);                                                                   // 4958
                                                                                                                       // 4959
   /**                                                                                                                 // 4960
   * @ngdoc method                                                                                                     // 4961
   * @name $animateProvider#register                                                                                   // 4962
   *                                                                                                                   // 4963
   * @description                                                                                                      // 4964
   * Registers a new injectable animation factory function. The factory function produces the                          // 4965
   * animation object which contains callback functions for each event that is expected to be                          // 4966
   * animated.                                                                                                         // 4967
   *                                                                                                                   // 4968
   *   * `eventFn`: `function(element, ... , doneFunction, options)`                                                   // 4969
   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending                    // 4970
   *   on the type of animation additional arguments will be injected into the animation function. The                 // 4971
   *   list below explains the function signatures for the different animation methods:                                // 4972
   *                                                                                                                   // 4973
   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)                              // 4974
   *   - addClass: function(element, addedClasses, doneFunction, options)                                              // 4975
   *   - removeClass: function(element, removedClasses, doneFunction, options)                                         // 4976
   *   - enter, leave, move: function(element, doneFunction, options)                                                  // 4977
   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)                                       // 4978
   *                                                                                                                   // 4979
   *   Make sure to trigger the `doneFunction` once the animation is fully complete.                                   // 4980
   *                                                                                                                   // 4981
   * ```js                                                                                                             // 4982
   *   return {                                                                                                        // 4983
   *     //enter, leave, move signature                                                                                // 4984
   *     eventFn : function(element, done, options) {                                                                  // 4985
   *       //code to run the animation                                                                                 // 4986
   *       //once complete, then run done()                                                                            // 4987
   *       return function endFunction(wasCancelled) {                                                                 // 4988
   *         //code to cancel the animation                                                                            // 4989
   *       }                                                                                                           // 4990
   *     }                                                                                                             // 4991
   *   }                                                                                                               // 4992
   * ```                                                                                                               // 4993
   *                                                                                                                   // 4994
   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).      // 4995
   * @param {Function} factory The factory function that will be executed to return the animation                      // 4996
   *                           object.                                                                                 // 4997
   */                                                                                                                  // 4998
  this.register = function(name, factory) {                                                                            // 4999
    if (name && name.charAt(0) !== '.') {                                                                              // 5000
      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);                  // 5001
    }                                                                                                                  // 5002
                                                                                                                       // 5003
    var key = name + '-animation';                                                                                     // 5004
    provider.$$registeredAnimations[name.substr(1)] = key;                                                             // 5005
    $provide.factory(key, factory);                                                                                    // 5006
  };                                                                                                                   // 5007
                                                                                                                       // 5008
  /**                                                                                                                  // 5009
   * @ngdoc method                                                                                                     // 5010
   * @name $animateProvider#classNameFilter                                                                            // 5011
   *                                                                                                                   // 5012
   * @description                                                                                                      // 5013
   * Sets and/or returns the CSS class regular expression that is checked when performing                              // 5014
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will                                 // 5015
   * therefore enable $animate to attempt to perform an animation on any element that is triggered.                    // 5016
   * When setting the `classNameFilter` value, animations will only be performed on elements                           // 5017
   * that successfully match the filter expression. This in turn can boost performance                                 // 5018
   * for low-powered devices as well as applications containing a lot of structural operations.                        // 5019
   * @param {RegExp=} expression The className expression which will be checked against all animations                 // 5020
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value            // 5021
   */                                                                                                                  // 5022
  this.classNameFilter = function(expression) {                                                                        // 5023
    if (arguments.length === 1) {                                                                                      // 5024
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;                                     // 5025
      if (this.$$classNameFilter) {                                                                                    // 5026
        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");                            // 5027
        if (reservedRegex.test(this.$$classNameFilter.toString())) {                                                   // 5028
          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
                                                                                                                       // 5030
        }                                                                                                              // 5031
      }                                                                                                                // 5032
    }                                                                                                                  // 5033
    return this.$$classNameFilter;                                                                                     // 5034
  };                                                                                                                   // 5035
                                                                                                                       // 5036
  this.$get = ['$$animateQueue', function($$animateQueue) {                                                            // 5037
    function domInsert(element, parentElement, afterElement) {                                                         // 5038
      // if for some reason the previous element was removed                                                           // 5039
      // from the dom sometime before this code runs then let's                                                        // 5040
      // just stick to using the parent element as the anchor                                                          // 5041
      if (afterElement) {                                                                                              // 5042
        var afterNode = extractElementNode(afterElement);                                                              // 5043
        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {                                 // 5044
          afterElement = null;                                                                                         // 5045
        }                                                                                                              // 5046
      }                                                                                                                // 5047
      afterElement ? afterElement.after(element) : parentElement.prepend(element);                                     // 5048
    }                                                                                                                  // 5049
                                                                                                                       // 5050
    /**                                                                                                                // 5051
     * @ngdoc service                                                                                                  // 5052
     * @name $animate                                                                                                  // 5053
     * @description The $animate service exposes a series of DOM utility methods that provide support                  // 5054
     * for animation hooks. The default behavior is the application of DOM operations, however,                        // 5055
     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting                  // 5056
     * to ensure that animation runs with the triggered DOM operation.                                                 // 5057
     *                                                                                                                 // 5058
     * By default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't                 // 5059
     * included and only when it is active then the animation hooks that `$animate` triggers will be                   // 5060
     * functional. Once active then all structural `ng-` directives will trigger animations as they perform            // 5061
     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,                       // 5062
     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.                                        // 5063
     *                                                                                                                 // 5064
     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
     *                                                                                                                 // 5066
     * To learn more about enabling animation support, click here to visit the                                         // 5067
     * {@link ngAnimate ngAnimate module page}.                                                                        // 5068
     */                                                                                                                // 5069
    return {                                                                                                           // 5070
      // we don't call it directly since non-existant arguments may                                                    // 5071
      // be interpreted as null within the sub enabled function                                                        // 5072
                                                                                                                       // 5073
      /**                                                                                                              // 5074
       *                                                                                                               // 5075
       * @ngdoc method                                                                                                 // 5076
       * @name $animate#on                                                                                             // 5077
       * @kind function                                                                                                // 5078
       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)      // 5079
       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
       *    is fired with the following params:                                                                        // 5081
       *                                                                                                               // 5082
       * ```js                                                                                                         // 5083
       * $animate.on('enter', container,                                                                               // 5084
       *    function callback(element, phase) {                                                                        // 5085
       *      // cool we detected an enter animation within the container                                              // 5086
       *    }                                                                                                          // 5087
       * );                                                                                                            // 5088
       * ```                                                                                                           // 5089
       *                                                                                                               // 5090
       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
       *     as well as among its children                                                                             // 5093
       * @param {Function} callback the callback function that will be fired when the listener is triggered            // 5094
       *                                                                                                               // 5095
       * The arguments present in the callback function are:                                                           // 5096
       * * `element` - The captured DOM element that the animation was fired on.                                       // 5097
       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
       */                                                                                                              // 5099
      on: $$animateQueue.on,                                                                                           // 5100
                                                                                                                       // 5101
      /**                                                                                                              // 5102
       *                                                                                                               // 5103
       * @ngdoc method                                                                                                 // 5104
       * @name $animate#off                                                                                            // 5105
       * @kind function                                                                                                // 5106
       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
       * can be used in three different ways depending on the arguments:                                               // 5108
       *                                                                                                               // 5109
       * ```js                                                                                                         // 5110
       * // remove all the animation event listeners listening for `enter`                                             // 5111
       * $animate.off('enter');                                                                                        // 5112
       *                                                                                                               // 5113
       * // remove all the animation event listeners listening for `enter` on the given element and its children       // 5114
       * $animate.off('enter', container);                                                                             // 5115
       *                                                                                                               // 5116
       * // remove the event listener function provided by `listenerFn` that is set                                    // 5117
       * // to listen for `enter` on the given `element` as well as its children                                       // 5118
       * $animate.off('enter', container, callback);                                                                   // 5119
       * ```                                                                                                           // 5120
       *                                                                                                               // 5121
       * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)            // 5122
       * @param {DOMElement=} container the container element the event listener was placed on                         // 5123
       * @param {Function=} callback the callback function that was registered as the listener                         // 5124
       */                                                                                                              // 5125
      off: $$animateQueue.off,                                                                                         // 5126
                                                                                                                       // 5127
      /**                                                                                                              // 5128
       * @ngdoc method                                                                                                 // 5129
       * @name $animate#pin                                                                                            // 5130
       * @kind function                                                                                                // 5131
       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
       *    element despite being outside the realm of the application or within another application. Say for example if the application
       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
       *                                                                                                               // 5138
       *    Note that this feature is only active when the `ngAnimate` module is used.                                 // 5139
       *                                                                                                               // 5140
       * @param {DOMElement} element the external element that will be pinned                                          // 5141
       * @param {DOMElement} parentElement the host parent element that will be associated with the external element   // 5142
       */                                                                                                              // 5143
      pin: $$animateQueue.pin,                                                                                         // 5144
                                                                                                                       // 5145
      /**                                                                                                              // 5146
       *                                                                                                               // 5147
       * @ngdoc method                                                                                                 // 5148
       * @name $animate#enabled                                                                                        // 5149
       * @kind function                                                                                                // 5150
       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
       * function can be called in four ways:                                                                          // 5152
       *                                                                                                               // 5153
       * ```js                                                                                                         // 5154
       * // returns true or false                                                                                      // 5155
       * $animate.enabled();                                                                                           // 5156
       *                                                                                                               // 5157
       * // changes the enabled state for all animations                                                               // 5158
       * $animate.enabled(false);                                                                                      // 5159
       * $animate.enabled(true);                                                                                       // 5160
       *                                                                                                               // 5161
       * // returns true or false if animations are enabled for an element                                             // 5162
       * $animate.enabled(element);                                                                                    // 5163
       *                                                                                                               // 5164
       * // changes the enabled state for an element and its children                                                  // 5165
       * $animate.enabled(element, true);                                                                              // 5166
       * $animate.enabled(element, false);                                                                             // 5167
       * ```                                                                                                           // 5168
       *                                                                                                               // 5169
       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state       // 5170
       * @param {boolean=} enabled whether or not the animations will be enabled for the element                       // 5171
       *                                                                                                               // 5172
       * @return {boolean} whether or not animations are enabled                                                       // 5173
       */                                                                                                              // 5174
      enabled: $$animateQueue.enabled,                                                                                 // 5175
                                                                                                                       // 5176
      /**                                                                                                              // 5177
       * @ngdoc method                                                                                                 // 5178
       * @name $animate#cancel                                                                                         // 5179
       * @kind function                                                                                                // 5180
       * @description Cancels the provided animation.                                                                  // 5181
       *                                                                                                               // 5182
       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.        // 5183
       */                                                                                                              // 5184
      cancel: function(runner) {                                                                                       // 5185
        runner.end && runner.end();                                                                                    // 5186
      },                                                                                                               // 5187
                                                                                                                       // 5188
      /**                                                                                                              // 5189
       *                                                                                                               // 5190
       * @ngdoc method                                                                                                 // 5191
       * @name $animate#enter                                                                                          // 5192
       * @kind function                                                                                                // 5193
       * @description Inserts the element into the DOM either after the `after` element (if provided) or               // 5194
       *   as the first child within the `parent` element and then triggers an animation.                              // 5195
       *   A promise is returned that will be resolved during the next digest once the animation                       // 5196
       *   has completed.                                                                                              // 5197
       *                                                                                                               // 5198
       * @param {DOMElement} element the element which will be inserted into the DOM                                   // 5199
       * @param {DOMElement} parent the parent element which will append the element as                                // 5200
       *   a child (so long as the after element is not present)                                                       // 5201
       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5202
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5203
       *                                                                                                               // 5204
       * @return {Promise} the animation callback promise                                                              // 5205
       */                                                                                                              // 5206
      enter: function(element, parent, after, options) {                                                               // 5207
        parent = parent && jqLite(parent);                                                                             // 5208
        after = after && jqLite(after);                                                                                // 5209
        parent = parent || after.parent();                                                                             // 5210
        domInsert(element, parent, after);                                                                             // 5211
        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));                                  // 5212
      },                                                                                                               // 5213
                                                                                                                       // 5214
      /**                                                                                                              // 5215
       *                                                                                                               // 5216
       * @ngdoc method                                                                                                 // 5217
       * @name $animate#move                                                                                           // 5218
       * @kind function                                                                                                // 5219
       * @description Inserts (moves) the element into its new position in the DOM either after                        // 5220
       *   the `after` element (if provided) or as the first child within the `parent` element                         // 5221
       *   and then triggers an animation. A promise is returned that will be resolved                                 // 5222
       *   during the next digest once the animation has completed.                                                    // 5223
       *                                                                                                               // 5224
       * @param {DOMElement} element the element which will be moved into the new DOM position                         // 5225
       * @param {DOMElement} parent the parent element which will append the element as                                // 5226
       *   a child (so long as the after element is not present)                                                       // 5227
       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5228
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5229
       *                                                                                                               // 5230
       * @return {Promise} the animation callback promise                                                              // 5231
       */                                                                                                              // 5232
      move: function(element, parent, after, options) {                                                                // 5233
        parent = parent && jqLite(parent);                                                                             // 5234
        after = after && jqLite(after);                                                                                // 5235
        parent = parent || after.parent();                                                                             // 5236
        domInsert(element, parent, after);                                                                             // 5237
        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));                                   // 5238
      },                                                                                                               // 5239
                                                                                                                       // 5240
      /**                                                                                                              // 5241
       * @ngdoc method                                                                                                 // 5242
       * @name $animate#leave                                                                                          // 5243
       * @kind function                                                                                                // 5244
       * @description Triggers an animation and then removes the element from the DOM.                                 // 5245
       * When the function is called a promise is returned that will be resolved during the next                       // 5246
       * digest once the animation has completed.                                                                      // 5247
       *                                                                                                               // 5248
       * @param {DOMElement} element the element which will be removed from the DOM                                    // 5249
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5250
       *                                                                                                               // 5251
       * @return {Promise} the animation callback promise                                                              // 5252
       */                                                                                                              // 5253
      leave: function(element, options) {                                                                              // 5254
        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {                      // 5255
          element.remove();                                                                                            // 5256
        });                                                                                                            // 5257
      },                                                                                                               // 5258
                                                                                                                       // 5259
      /**                                                                                                              // 5260
       * @ngdoc method                                                                                                 // 5261
       * @name $animate#addClass                                                                                       // 5262
       * @kind function                                                                                                // 5263
       *                                                                                                               // 5264
       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon      // 5265
       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an     // 5266
       *   animation if element already contains the CSS class or if the class is removed at a later step.             // 5267
       *   Note that class-based animations are treated differently compared to structural animations                  // 5268
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5269
       *   depending if CSS or JavaScript animations are used.                                                         // 5270
       *                                                                                                               // 5271
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5272
       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)    // 5273
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5274
       *                                                                                                               // 5275
       * @return {Promise} the animation callback promise                                                              // 5276
       */                                                                                                              // 5277
      addClass: function(element, className, options) {                                                                // 5278
        options = prepareAnimateOptions(options);                                                                      // 5279
        options.addClass = mergeClasses(options.addclass, className);                                                  // 5280
        return $$animateQueue.push(element, 'addClass', options);                                                      // 5281
      },                                                                                                               // 5282
                                                                                                                       // 5283
      /**                                                                                                              // 5284
       * @ngdoc method                                                                                                 // 5285
       * @name $animate#removeClass                                                                                    // 5286
       * @kind function                                                                                                // 5287
       *                                                                                                               // 5288
       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon     // 5289
       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an  // 5290
       *   animation if element does not contain the CSS class or if the class is added at a later step.               // 5291
       *   Note that class-based animations are treated differently compared to structural animations                  // 5292
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5293
       *   depending if CSS or JavaScript animations are used.                                                         // 5294
       *                                                                                                               // 5295
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5296
       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)  // 5297
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5298
       *                                                                                                               // 5299
       * @return {Promise} the animation callback promise                                                              // 5300
       */                                                                                                              // 5301
      removeClass: function(element, className, options) {                                                             // 5302
        options = prepareAnimateOptions(options);                                                                      // 5303
        options.removeClass = mergeClasses(options.removeClass, className);                                            // 5304
        return $$animateQueue.push(element, 'removeClass', options);                                                   // 5305
      },                                                                                                               // 5306
                                                                                                                       // 5307
      /**                                                                                                              // 5308
       * @ngdoc method                                                                                                 // 5309
       * @name $animate#setClass                                                                                       // 5310
       * @kind function                                                                                                // 5311
       *                                                                                                               // 5312
       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)   // 5313
       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and            // 5314
       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has    // 5315
       *    passed. Note that class-based animations are treated differently compared to structural animations         // 5316
       *    (like enter, move and leave) since the CSS classes may be added/removed at different points                // 5317
       *    depending if CSS or JavaScript animations are used.                                                        // 5318
       *                                                                                                               // 5319
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5320
       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)          // 5321
       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)     // 5322
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5323
       *                                                                                                               // 5324
       * @return {Promise} the animation callback promise                                                              // 5325
       */                                                                                                              // 5326
      setClass: function(element, add, remove, options) {                                                              // 5327
        options = prepareAnimateOptions(options);                                                                      // 5328
        options.addClass = mergeClasses(options.addClass, add);                                                        // 5329
        options.removeClass = mergeClasses(options.removeClass, remove);                                               // 5330
        return $$animateQueue.push(element, 'setClass', options);                                                      // 5331
      },                                                                                                               // 5332
                                                                                                                       // 5333
      /**                                                                                                              // 5334
       * @ngdoc method                                                                                                 // 5335
       * @name $animate#animate                                                                                        // 5336
       * @kind function                                                                                                // 5337
       *                                                                                                               // 5338
       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
       * If any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take
       * on the provided styles. For example, if a transition animation is set for the given className then the provided from and
       * to styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles
       * will be given in as function paramters into the `animate` method (or as apart of the `options` parameter).    // 5343
       *                                                                                                               // 5344
       * @param {DOMElement} element the element which the CSS styles will be applied to                               // 5345
       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.        // 5349
       *    (Note that if no animation is detected then this value will not be appplied to the element.)               // 5350
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5351
       *                                                                                                               // 5352
       * @return {Promise} the animation callback promise                                                              // 5353
       */                                                                                                              // 5354
      animate: function(element, from, to, className, options) {                                                       // 5355
        options = prepareAnimateOptions(options);                                                                      // 5356
        options.from = options.from ? extend(options.from, from) : from;                                               // 5357
        options.to   = options.to   ? extend(options.to, to)     : to;                                                 // 5358
                                                                                                                       // 5359
        className = className || 'ng-inline-animate';                                                                  // 5360
        options.tempClasses = mergeClasses(options.tempClasses, className);                                            // 5361
        return $$animateQueue.push(element, 'animate', options);                                                       // 5362
      }                                                                                                                // 5363
    };                                                                                                                 // 5364
  }];                                                                                                                  // 5365
}];                                                                                                                    // 5366
                                                                                                                       // 5367
/**                                                                                                                    // 5368
 * @ngdoc service                                                                                                      // 5369
 * @name $animateCss                                                                                                   // 5370
 * @kind object                                                                                                        // 5371
 *                                                                                                                     // 5372
 * @description                                                                                                        // 5373
 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,                       // 5374
 * then the `$animateCss` service will actually perform animations.                                                    // 5375
 *                                                                                                                     // 5376
 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.                                 // 5377
 */                                                                                                                    // 5378
var $CoreAnimateCssProvider = function() {                                                                             // 5379
  this.$get = ['$$rAF', '$q', function($$rAF, $q) {                                                                    // 5380
                                                                                                                       // 5381
    var RAFPromise = function() {};                                                                                    // 5382
    RAFPromise.prototype = {                                                                                           // 5383
      done: function(cancel) {                                                                                         // 5384
        this.defer && this.defer[cancel === true ? 'reject' : 'resolve']();                                            // 5385
      },                                                                                                               // 5386
      end: function() {                                                                                                // 5387
        this.done();                                                                                                   // 5388
      },                                                                                                               // 5389
      cancel: function() {                                                                                             // 5390
        this.done(true);                                                                                               // 5391
      },                                                                                                               // 5392
      getPromise: function() {                                                                                         // 5393
        if (!this.defer) {                                                                                             // 5394
          this.defer = $q.defer();                                                                                     // 5395
        }                                                                                                              // 5396
        return this.defer.promise;                                                                                     // 5397
      },                                                                                                               // 5398
      then: function(f1,f2) {                                                                                          // 5399
        return this.getPromise().then(f1,f2);                                                                          // 5400
      },                                                                                                               // 5401
      'catch': function(f1) {                                                                                          // 5402
        return this.getPromise()['catch'](f1);                                                                         // 5403
      },                                                                                                               // 5404
      'finally': function(f1) {                                                                                        // 5405
        return this.getPromise()['finally'](f1);                                                                       // 5406
      }                                                                                                                // 5407
    };                                                                                                                 // 5408
                                                                                                                       // 5409
    return function(element, options) {                                                                                // 5410
      if (options.from) {                                                                                              // 5411
        element.css(options.from);                                                                                     // 5412
        options.from = null;                                                                                           // 5413
      }                                                                                                                // 5414
                                                                                                                       // 5415
      var closed, runner = new RAFPromise();                                                                           // 5416
      return {                                                                                                         // 5417
        start: run,                                                                                                    // 5418
        end: run                                                                                                       // 5419
      };                                                                                                               // 5420
                                                                                                                       // 5421
      function run() {                                                                                                 // 5422
        $$rAF(function() {                                                                                             // 5423
          close();                                                                                                     // 5424
          if (!closed) {                                                                                               // 5425
            runner.done();                                                                                             // 5426
          }                                                                                                            // 5427
          closed = true;                                                                                               // 5428
        });                                                                                                            // 5429
        return runner;                                                                                                 // 5430
      }                                                                                                                // 5431
                                                                                                                       // 5432
      function close() {                                                                                               // 5433
        if (options.addClass) {                                                                                        // 5434
          element.addClass(options.addClass);                                                                          // 5435
          options.addClass = null;                                                                                     // 5436
        }                                                                                                              // 5437
        if (options.removeClass) {                                                                                     // 5438
          element.removeClass(options.removeClass);                                                                    // 5439
          options.removeClass = null;                                                                                  // 5440
        }                                                                                                              // 5441
        if (options.to) {                                                                                              // 5442
          element.css(options.to);                                                                                     // 5443
          options.to = null;                                                                                           // 5444
        }                                                                                                              // 5445
      }                                                                                                                // 5446
    };                                                                                                                 // 5447
  }];                                                                                                                  // 5448
};                                                                                                                     // 5449
                                                                                                                       // 5450
/* global stripHash: true */                                                                                           // 5451
                                                                                                                       // 5452
/**                                                                                                                    // 5453
 * ! This is a private undocumented service !                                                                          // 5454
 *                                                                                                                     // 5455
 * @name $browser                                                                                                      // 5456
 * @requires $log                                                                                                      // 5457
 * @description                                                                                                        // 5458
 * This object has two goals:                                                                                          // 5459
 *                                                                                                                     // 5460
 * - hide all the global state in the browser caused by the window object                                              // 5461
 * - abstract away all the browser specific features and inconsistencies                                               // 5462
 *                                                                                                                     // 5463
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`                                  // 5464
 * service, which can be used for convenient testing of the application without the interaction with                   // 5465
 * the real browser apis.                                                                                              // 5466
 */                                                                                                                    // 5467
/**                                                                                                                    // 5468
 * @param {object} window The global window object.                                                                    // 5469
 * @param {object} document jQuery wrapped document.                                                                   // 5470
 * @param {object} $log window.console or an object with the same interface.                                           // 5471
 * @param {object} $sniffer $sniffer service                                                                           // 5472
 */                                                                                                                    // 5473
function Browser(window, document, $log, $sniffer) {                                                                   // 5474
  var self = this,                                                                                                     // 5475
      rawDocument = document[0],                                                                                       // 5476
      location = window.location,                                                                                      // 5477
      history = window.history,                                                                                        // 5478
      setTimeout = window.setTimeout,                                                                                  // 5479
      clearTimeout = window.clearTimeout,                                                                              // 5480
      pendingDeferIds = {};                                                                                            // 5481
                                                                                                                       // 5482
  self.isMock = false;                                                                                                 // 5483
                                                                                                                       // 5484
  var outstandingRequestCount = 0;                                                                                     // 5485
  var outstandingRequestCallbacks = [];                                                                                // 5486
                                                                                                                       // 5487
  // TODO(vojta): remove this temporary api                                                                            // 5488
  self.$$completeOutstandingRequest = completeOutstandingRequest;                                                      // 5489
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };                                       // 5490
                                                                                                                       // 5491
  /**                                                                                                                  // 5492
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`                    // 5493
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.                            // 5494
   */                                                                                                                  // 5495
  function completeOutstandingRequest(fn) {                                                                            // 5496
    try {                                                                                                              // 5497
      fn.apply(null, sliceArgs(arguments, 1));                                                                         // 5498
    } finally {                                                                                                        // 5499
      outstandingRequestCount--;                                                                                       // 5500
      if (outstandingRequestCount === 0) {                                                                             // 5501
        while (outstandingRequestCallbacks.length) {                                                                   // 5502
          try {                                                                                                        // 5503
            outstandingRequestCallbacks.pop()();                                                                       // 5504
          } catch (e) {                                                                                                // 5505
            $log.error(e);                                                                                             // 5506
          }                                                                                                            // 5507
        }                                                                                                              // 5508
      }                                                                                                                // 5509
    }                                                                                                                  // 5510
  }                                                                                                                    // 5511
                                                                                                                       // 5512
  function getHash(url) {                                                                                              // 5513
    var index = url.indexOf('#');                                                                                      // 5514
    return index === -1 ? '' : url.substr(index);                                                                      // 5515
  }                                                                                                                    // 5516
                                                                                                                       // 5517
  /**                                                                                                                  // 5518
   * @private                                                                                                          // 5519
   * Note: this method is used only by scenario runner                                                                 // 5520
   * TODO(vojta): prefix this method with $$ ?                                                                         // 5521
   * @param {function()} callback Function that will be called when no outstanding request                             // 5522
   */                                                                                                                  // 5523
  self.notifyWhenNoOutstandingRequests = function(callback) {                                                          // 5524
    if (outstandingRequestCount === 0) {                                                                               // 5525
      callback();                                                                                                      // 5526
    } else {                                                                                                           // 5527
      outstandingRequestCallbacks.push(callback);                                                                      // 5528
    }                                                                                                                  // 5529
  };                                                                                                                   // 5530
                                                                                                                       // 5531
  //////////////////////////////////////////////////////////////                                                       // 5532
  // URL API                                                                                                           // 5533
  //////////////////////////////////////////////////////////////                                                       // 5534
                                                                                                                       // 5535
  var cachedState, lastHistoryState,                                                                                   // 5536
      lastBrowserUrl = location.href,                                                                                  // 5537
      baseElement = document.find('base'),                                                                             // 5538
      pendingLocation = null;                                                                                          // 5539
                                                                                                                       // 5540
  cacheState();                                                                                                        // 5541
  lastHistoryState = cachedState;                                                                                      // 5542
                                                                                                                       // 5543
  /**                                                                                                                  // 5544
   * @name $browser#url                                                                                                // 5545
   *                                                                                                                   // 5546
   * @description                                                                                                      // 5547
   * GETTER:                                                                                                           // 5548
   * Without any argument, this method just returns current value of location.href.                                    // 5549
   *                                                                                                                   // 5550
   * SETTER:                                                                                                           // 5551
   * With at least one argument, this method sets url to new value.                                                    // 5552
   * If html5 history api supported, pushState/replaceState is used, otherwise                                         // 5553
   * location.href/location.replace is used.                                                                           // 5554
   * Returns its own instance to allow chaining                                                                        // 5555
   *                                                                                                                   // 5556
   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5557
   * {@link ng.$location $location service} to change url.                                                             // 5558
   *                                                                                                                   // 5559
   * @param {string} url New url (when used as setter)                                                                 // 5560
   * @param {boolean=} replace Should new url replace current history record?                                          // 5561
   * @param {object=} state object to use with pushState/replaceState                                                  // 5562
   */                                                                                                                  // 5563
  self.url = function(url, replace, state) {                                                                           // 5564
    // In modern browsers `history.state` is `null` by default; treating it separately                                 // 5565
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`                                   // 5566
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.                                 // 5567
    if (isUndefined(state)) {                                                                                          // 5568
      state = null;                                                                                                    // 5569
    }                                                                                                                  // 5570
                                                                                                                       // 5571
    // Android Browser BFCache causes location, history reference to become stale.                                     // 5572
    if (location !== window.location) location = window.location;                                                      // 5573
    if (history !== window.history) history = window.history;                                                          // 5574
                                                                                                                       // 5575
    // setter                                                                                                          // 5576
    if (url) {                                                                                                         // 5577
      var sameState = lastHistoryState === state;                                                                      // 5578
                                                                                                                       // 5579
      // Don't change anything if previous and current URLs and states match. This also prevents                       // 5580
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.                                // 5581
      // See https://github.com/angular/angular.js/commit/ffb2701                                                      // 5582
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {                                                // 5583
        return self;                                                                                                   // 5584
      }                                                                                                                // 5585
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);                                   // 5586
      lastBrowserUrl = url;                                                                                            // 5587
      lastHistoryState = state;                                                                                        // 5588
      // Don't use history API if only the hash changed                                                                // 5589
      // due to a bug in IE10/IE11 which leads                                                                         // 5590
      // to not firing a `hashchange` nor `popstate` event                                                             // 5591
      // in some cases (see #9143).                                                                                    // 5592
      if ($sniffer.history && (!sameBase || !sameState)) {                                                             // 5593
        history[replace ? 'replaceState' : 'pushState'](state, '', url);                                               // 5594
        cacheState();                                                                                                  // 5595
        // Do the assignment again so that those two variables are referentially identical.                            // 5596
        lastHistoryState = cachedState;                                                                                // 5597
      } else {                                                                                                         // 5598
        if (!sameBase || pendingLocation) {                                                                            // 5599
          pendingLocation = url;                                                                                       // 5600
        }                                                                                                              // 5601
        if (replace) {                                                                                                 // 5602
          location.replace(url);                                                                                       // 5603
        } else if (!sameBase) {                                                                                        // 5604
          location.href = url;                                                                                         // 5605
        } else {                                                                                                       // 5606
          location.hash = getHash(url);                                                                                // 5607
        }                                                                                                              // 5608
        if (location.href !== url) {                                                                                   // 5609
          pendingLocation = url;                                                                                       // 5610
        }                                                                                                              // 5611
      }                                                                                                                // 5612
      return self;                                                                                                     // 5613
    // getter                                                                                                          // 5614
    } else {                                                                                                           // 5615
      // - pendingLocation is needed as browsers don't allow to read out                                               // 5616
      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see                          // 5617
      //   https://openradar.appspot.com/22186109).                                                                    // 5618
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172                     // 5619
      return pendingLocation || location.href.replace(/%27/g,"'");                                                     // 5620
    }                                                                                                                  // 5621
  };                                                                                                                   // 5622
                                                                                                                       // 5623
  /**                                                                                                                  // 5624
   * @name $browser#state                                                                                              // 5625
   *                                                                                                                   // 5626
   * @description                                                                                                      // 5627
   * This method is a getter.                                                                                          // 5628
   *                                                                                                                   // 5629
   * Return history.state or null if history.state is undefined.                                                       // 5630
   *                                                                                                                   // 5631
   * @returns {object} state                                                                                           // 5632
   */                                                                                                                  // 5633
  self.state = function() {                                                                                            // 5634
    return cachedState;                                                                                                // 5635
  };                                                                                                                   // 5636
                                                                                                                       // 5637
  var urlChangeListeners = [],                                                                                         // 5638
      urlChangeInit = false;                                                                                           // 5639
                                                                                                                       // 5640
  function cacheStateAndFireUrlChange() {                                                                              // 5641
    pendingLocation = null;                                                                                            // 5642
    cacheState();                                                                                                      // 5643
    fireUrlChange();                                                                                                   // 5644
  }                                                                                                                    // 5645
                                                                                                                       // 5646
  function getCurrentState() {                                                                                         // 5647
    try {                                                                                                              // 5648
      return history.state;                                                                                            // 5649
    } catch (e) {                                                                                                      // 5650
      // MSIE can reportedly throw when there is no state (UNCONFIRMED).                                               // 5651
    }                                                                                                                  // 5652
  }                                                                                                                    // 5653
                                                                                                                       // 5654
  // This variable should be used *only* inside the cacheState function.                                               // 5655
  var lastCachedState = null;                                                                                          // 5656
  function cacheState() {                                                                                              // 5657
    // This should be the only place in $browser where `history.state` is read.                                        // 5658
    cachedState = getCurrentState();                                                                                   // 5659
    cachedState = isUndefined(cachedState) ? null : cachedState;                                                       // 5660
                                                                                                                       // 5661
    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.                                       // 5662
    if (equals(cachedState, lastCachedState)) {                                                                        // 5663
      cachedState = lastCachedState;                                                                                   // 5664
    }                                                                                                                  // 5665
    lastCachedState = cachedState;                                                                                     // 5666
  }                                                                                                                    // 5667
                                                                                                                       // 5668
  function fireUrlChange() {                                                                                           // 5669
    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {                                           // 5670
      return;                                                                                                          // 5671
    }                                                                                                                  // 5672
                                                                                                                       // 5673
    lastBrowserUrl = self.url();                                                                                       // 5674
    lastHistoryState = cachedState;                                                                                    // 5675
    forEach(urlChangeListeners, function(listener) {                                                                   // 5676
      listener(self.url(), cachedState);                                                                               // 5677
    });                                                                                                                // 5678
  }                                                                                                                    // 5679
                                                                                                                       // 5680
  /**                                                                                                                  // 5681
   * @name $browser#onUrlChange                                                                                        // 5682
   *                                                                                                                   // 5683
   * @description                                                                                                      // 5684
   * Register callback function that will be called, when url changes.                                                 // 5685
   *                                                                                                                   // 5686
   * It's only called when the url is changed from outside of angular:                                                 // 5687
   * - user types different url into address bar                                                                       // 5688
   * - user clicks on history (forward/back) button                                                                    // 5689
   * - user clicks on a link                                                                                           // 5690
   *                                                                                                                   // 5691
   * It's not called when url is changed by $browser.url() method                                                      // 5692
   *                                                                                                                   // 5693
   * The listener gets called with new url as parameter.                                                               // 5694
   *                                                                                                                   // 5695
   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5696
   * {@link ng.$location $location service} to monitor url changes in angular apps.                                    // 5697
   *                                                                                                                   // 5698
   * @param {function(string)} listener Listener function to be called when url changes.                               // 5699
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.                     // 5700
   */                                                                                                                  // 5701
  self.onUrlChange = function(callback) {                                                                              // 5702
    // TODO(vojta): refactor to use node's syntax for events                                                           // 5703
    if (!urlChangeInit) {                                                                                              // 5704
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)                         // 5705
      // don't fire popstate when user change the address bar and don't fire hashchange when url                       // 5706
      // changed by push/replaceState                                                                                  // 5707
                                                                                                                       // 5708
      // html5 history api - popstate event                                                                            // 5709
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);                                 // 5710
      // hashchange event                                                                                              // 5711
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);                                                     // 5712
                                                                                                                       // 5713
      urlChangeInit = true;                                                                                            // 5714
    }                                                                                                                  // 5715
                                                                                                                       // 5716
    urlChangeListeners.push(callback);                                                                                 // 5717
    return callback;                                                                                                   // 5718
  };                                                                                                                   // 5719
                                                                                                                       // 5720
  /**                                                                                                                  // 5721
   * @private                                                                                                          // 5722
   * Remove popstate and hashchange handler from window.                                                               // 5723
   *                                                                                                                   // 5724
   * NOTE: this api is intended for use only by $rootScope.                                                            // 5725
   */                                                                                                                  // 5726
  self.$$applicationDestroyed = function() {                                                                           // 5727
    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);                                             // 5728
  };                                                                                                                   // 5729
                                                                                                                       // 5730
  /**                                                                                                                  // 5731
   * Checks whether the url has changed outside of Angular.                                                            // 5732
   * Needs to be exported to be able to check for changes that have been done in sync,                                 // 5733
   * as hashchange/popstate events fire in async.                                                                      // 5734
   */                                                                                                                  // 5735
  self.$$checkUrlChange = fireUrlChange;                                                                               // 5736
                                                                                                                       // 5737
  //////////////////////////////////////////////////////////////                                                       // 5738
  // Misc API                                                                                                          // 5739
  //////////////////////////////////////////////////////////////                                                       // 5740
                                                                                                                       // 5741
  /**                                                                                                                  // 5742
   * @name $browser#baseHref                                                                                           // 5743
   *                                                                                                                   // 5744
   * @description                                                                                                      // 5745
   * Returns current <base href>                                                                                       // 5746
   * (always relative - without domain)                                                                                // 5747
   *                                                                                                                   // 5748
   * @returns {string} The current base href                                                                           // 5749
   */                                                                                                                  // 5750
  self.baseHref = function() {                                                                                         // 5751
    var href = baseElement.attr('href');                                                                               // 5752
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';                                                     // 5753
  };                                                                                                                   // 5754
                                                                                                                       // 5755
  /**                                                                                                                  // 5756
   * @name $browser#defer                                                                                              // 5757
   * @param {function()} fn A function, who's execution should be deferred.                                            // 5758
   * @param {number=} [delay=0] of milliseconds to defer the function execution.                                       // 5759
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.                           // 5760
   *                                                                                                                   // 5761
   * @description                                                                                                      // 5762
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.                                                         // 5763
   *                                                                                                                   // 5764
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using                   // 5765
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed                      // 5766
   * via `$browser.defer.flush()`.                                                                                     // 5767
   *                                                                                                                   // 5768
   */                                                                                                                  // 5769
  self.defer = function(fn, delay) {                                                                                   // 5770
    var timeoutId;                                                                                                     // 5771
    outstandingRequestCount++;                                                                                         // 5772
    timeoutId = setTimeout(function() {                                                                                // 5773
      delete pendingDeferIds[timeoutId];                                                                               // 5774
      completeOutstandingRequest(fn);                                                                                  // 5775
    }, delay || 0);                                                                                                    // 5776
    pendingDeferIds[timeoutId] = true;                                                                                 // 5777
    return timeoutId;                                                                                                  // 5778
  };                                                                                                                   // 5779
                                                                                                                       // 5780
                                                                                                                       // 5781
  /**                                                                                                                  // 5782
   * @name $browser#defer.cancel                                                                                       // 5783
   *                                                                                                                   // 5784
   * @description                                                                                                      // 5785
   * Cancels a deferred task identified with `deferId`.                                                                // 5786
   *                                                                                                                   // 5787
   * @param {*} deferId Token returned by the `$browser.defer` function.                                               // 5788
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                            // 5789
   *                    canceled.                                                                                      // 5790
   */                                                                                                                  // 5791
  self.defer.cancel = function(deferId) {                                                                              // 5792
    if (pendingDeferIds[deferId]) {                                                                                    // 5793
      delete pendingDeferIds[deferId];                                                                                 // 5794
      clearTimeout(deferId);                                                                                           // 5795
      completeOutstandingRequest(noop);                                                                                // 5796
      return true;                                                                                                     // 5797
    }                                                                                                                  // 5798
    return false;                                                                                                      // 5799
  };                                                                                                                   // 5800
                                                                                                                       // 5801
}                                                                                                                      // 5802
                                                                                                                       // 5803
function $BrowserProvider() {                                                                                          // 5804
  this.$get = ['$window', '$log', '$sniffer', '$document',                                                             // 5805
      function($window, $log, $sniffer, $document) {                                                                   // 5806
        return new Browser($window, $document, $log, $sniffer);                                                        // 5807
      }];                                                                                                              // 5808
}                                                                                                                      // 5809
                                                                                                                       // 5810
/**                                                                                                                    // 5811
 * @ngdoc service                                                                                                      // 5812
 * @name $cacheFactory                                                                                                 // 5813
 *                                                                                                                     // 5814
 * @description                                                                                                        // 5815
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to                               // 5816
 * them.                                                                                                               // 5817
 *                                                                                                                     // 5818
 * ```js                                                                                                               // 5819
 *                                                                                                                     // 5820
 *  var cache = $cacheFactory('cacheId');                                                                              // 5821
 *  expect($cacheFactory.get('cacheId')).toBe(cache);                                                                  // 5822
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();                                                      // 5823
 *                                                                                                                     // 5824
 *  cache.put("key", "value");                                                                                         // 5825
 *  cache.put("another key", "another value");                                                                         // 5826
 *                                                                                                                     // 5827
 *  // We've specified no options on creation                                                                          // 5828
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});                                                            // 5829
 *                                                                                                                     // 5830
 * ```                                                                                                                 // 5831
 *                                                                                                                     // 5832
 *                                                                                                                     // 5833
 * @param {string} cacheId Name or id of the newly created cache.                                                      // 5834
 * @param {object=} options Options object that specifies the cache behavior. Properties:                              // 5835
 *                                                                                                                     // 5836
 *   - `{number=}` `capacity` — turns the cache into LRU cache.                                                        // 5837
 *                                                                                                                     // 5838
 * @returns {object} Newly created cache object with the following set of methods:                                     // 5839
 *                                                                                                                     // 5840
 * - `{object}` `info()` — Returns id, size, and options of cache.                                                     // 5841
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns                     // 5842
 *   it.                                                                                                               // 5843
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.                         // 5844
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.                                        // 5845
 * - `{void}` `removeAll()` — Removes all cached values.                                                               // 5846
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.                                       // 5847
 *                                                                                                                     // 5848
 * @example                                                                                                            // 5849
   <example module="cacheExampleApp">                                                                                  // 5850
     <file name="index.html">                                                                                          // 5851
       <div ng-controller="CacheController">                                                                           // 5852
         <input ng-model="newCacheKey" placeholder="Key">                                                              // 5853
         <input ng-model="newCacheValue" placeholder="Value">                                                          // 5854
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>                                             // 5855
                                                                                                                       // 5856
         <p ng-if="keys.length">Cached Values</p>                                                                      // 5857
         <div ng-repeat="key in keys">                                                                                 // 5858
           <span ng-bind="key"></span>                                                                                 // 5859
           <span>: </span>                                                                                             // 5860
           <b ng-bind="cache.get(key)"></b>                                                                            // 5861
         </div>                                                                                                        // 5862
                                                                                                                       // 5863
         <p>Cache Info</p>                                                                                             // 5864
         <div ng-repeat="(key, value) in cache.info()">                                                                // 5865
           <span ng-bind="key"></span>                                                                                 // 5866
           <span>: </span>                                                                                             // 5867
           <b ng-bind="value"></b>                                                                                     // 5868
         </div>                                                                                                        // 5869
       </div>                                                                                                          // 5870
     </file>                                                                                                           // 5871
     <file name="script.js">                                                                                           // 5872
       angular.module('cacheExampleApp', []).                                                                          // 5873
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {                   // 5874
           $scope.keys = [];                                                                                           // 5875
           $scope.cache = $cacheFactory('cacheId');                                                                    // 5876
           $scope.put = function(key, value) {                                                                         // 5877
             if (isUndefined($scope.cache.get(key))) {                                                                 // 5878
               $scope.keys.push(key);                                                                                  // 5879
             }                                                                                                         // 5880
             $scope.cache.put(key, isUndefined(value) ? null : value);                                                 // 5881
           };                                                                                                          // 5882
         }]);                                                                                                          // 5883
     </file>                                                                                                           // 5884
     <file name="style.css">                                                                                           // 5885
       p {                                                                                                             // 5886
         margin: 10px 0 3px;                                                                                           // 5887
       }                                                                                                               // 5888
     </file>                                                                                                           // 5889
   </example>                                                                                                          // 5890
 */                                                                                                                    // 5891
function $CacheFactoryProvider() {                                                                                     // 5892
                                                                                                                       // 5893
  this.$get = function() {                                                                                             // 5894
    var caches = {};                                                                                                   // 5895
                                                                                                                       // 5896
    function cacheFactory(cacheId, options) {                                                                          // 5897
      if (cacheId in caches) {                                                                                         // 5898
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);                              // 5899
      }                                                                                                                // 5900
                                                                                                                       // 5901
      var size = 0,                                                                                                    // 5902
          stats = extend({}, options, {id: cacheId}),                                                                  // 5903
          data = {},                                                                                                   // 5904
          capacity = (options && options.capacity) || Number.MAX_VALUE,                                                // 5905
          lruHash = {},                                                                                                // 5906
          freshEnd = null,                                                                                             // 5907
          staleEnd = null;                                                                                             // 5908
                                                                                                                       // 5909
      /**                                                                                                              // 5910
       * @ngdoc type                                                                                                   // 5911
       * @name $cacheFactory.Cache                                                                                     // 5912
       *                                                                                                               // 5913
       * @description                                                                                                  // 5914
       * A cache object used to store and retrieve data, primarily used by                                             // 5915
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache                             // 5916
       * templates and other data.                                                                                     // 5917
       *                                                                                                               // 5918
       * ```js                                                                                                         // 5919
       *  angular.module('superCache')                                                                                 // 5920
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {                                         // 5921
       *      return $cacheFactory('super-cache');                                                                     // 5922
       *    }]);                                                                                                       // 5923
       * ```                                                                                                           // 5924
       *                                                                                                               // 5925
       * Example test:                                                                                                 // 5926
       *                                                                                                               // 5927
       * ```js                                                                                                         // 5928
       *  it('should behave like a cache', inject(function(superCache) {                                               // 5929
       *    superCache.put('key', 'value');                                                                            // 5930
       *    superCache.put('another key', 'another value');                                                            // 5931
       *                                                                                                               // 5932
       *    expect(superCache.info()).toEqual({                                                                        // 5933
       *      id: 'super-cache',                                                                                       // 5934
       *      size: 2                                                                                                  // 5935
       *    });                                                                                                        // 5936
       *                                                                                                               // 5937
       *    superCache.remove('another key');                                                                          // 5938
       *    expect(superCache.get('another key')).toBeUndefined();                                                     // 5939
       *                                                                                                               // 5940
       *    superCache.removeAll();                                                                                    // 5941
       *    expect(superCache.info()).toEqual({                                                                        // 5942
       *      id: 'super-cache',                                                                                       // 5943
       *      size: 0                                                                                                  // 5944
       *    });                                                                                                        // 5945
       *  }));                                                                                                         // 5946
       * ```                                                                                                           // 5947
       */                                                                                                              // 5948
      return caches[cacheId] = {                                                                                       // 5949
                                                                                                                       // 5950
        /**                                                                                                            // 5951
         * @ngdoc method                                                                                               // 5952
         * @name $cacheFactory.Cache#put                                                                               // 5953
         * @kind function                                                                                              // 5954
         *                                                                                                             // 5955
         * @description                                                                                                // 5956
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be                               // 5957
         * retrieved later, and incrementing the size of the cache if the key was not already                          // 5958
         * present in the cache. If behaving like an LRU cache, it will also remove stale                              // 5959
         * entries from the set.                                                                                       // 5960
         *                                                                                                             // 5961
         * It will not insert undefined values into the cache.                                                         // 5962
         *                                                                                                             // 5963
         * @param {string} key the key under which the cached data is stored.                                          // 5964
         * @param {*} value the value to store alongside the key. If it is undefined, the key                          // 5965
         *    will not be stored.                                                                                      // 5966
         * @returns {*} the value stored.                                                                              // 5967
         */                                                                                                            // 5968
        put: function(key, value) {                                                                                    // 5969
          if (isUndefined(value)) return;                                                                              // 5970
          if (capacity < Number.MAX_VALUE) {                                                                           // 5971
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});                                                // 5972
                                                                                                                       // 5973
            refresh(lruEntry);                                                                                         // 5974
          }                                                                                                            // 5975
                                                                                                                       // 5976
          if (!(key in data)) size++;                                                                                  // 5977
          data[key] = value;                                                                                           // 5978
                                                                                                                       // 5979
          if (size > capacity) {                                                                                       // 5980
            this.remove(staleEnd.key);                                                                                 // 5981
          }                                                                                                            // 5982
                                                                                                                       // 5983
          return value;                                                                                                // 5984
        },                                                                                                             // 5985
                                                                                                                       // 5986
        /**                                                                                                            // 5987
         * @ngdoc method                                                                                               // 5988
         * @name $cacheFactory.Cache#get                                                                               // 5989
         * @kind function                                                                                              // 5990
         *                                                                                                             // 5991
         * @description                                                                                                // 5992
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.                                // 5993
         *                                                                                                             // 5994
         * @param {string} key the key of the data to be retrieved                                                     // 5995
         * @returns {*} the value stored.                                                                              // 5996
         */                                                                                                            // 5997
        get: function(key) {                                                                                           // 5998
          if (capacity < Number.MAX_VALUE) {                                                                           // 5999
            var lruEntry = lruHash[key];                                                                               // 6000
                                                                                                                       // 6001
            if (!lruEntry) return;                                                                                     // 6002
                                                                                                                       // 6003
            refresh(lruEntry);                                                                                         // 6004
          }                                                                                                            // 6005
                                                                                                                       // 6006
          return data[key];                                                                                            // 6007
        },                                                                                                             // 6008
                                                                                                                       // 6009
                                                                                                                       // 6010
        /**                                                                                                            // 6011
         * @ngdoc method                                                                                               // 6012
         * @name $cacheFactory.Cache#remove                                                                            // 6013
         * @kind function                                                                                              // 6014
         *                                                                                                             // 6015
         * @description                                                                                                // 6016
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.                                         // 6017
         *                                                                                                             // 6018
         * @param {string} key the key of the entry to be removed                                                      // 6019
         */                                                                                                            // 6020
        remove: function(key) {                                                                                        // 6021
          if (capacity < Number.MAX_VALUE) {                                                                           // 6022
            var lruEntry = lruHash[key];                                                                               // 6023
                                                                                                                       // 6024
            if (!lruEntry) return;                                                                                     // 6025
                                                                                                                       // 6026
            if (lruEntry == freshEnd) freshEnd = lruEntry.p;                                                           // 6027
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;                                                           // 6028
            link(lruEntry.n,lruEntry.p);                                                                               // 6029
                                                                                                                       // 6030
            delete lruHash[key];                                                                                       // 6031
          }                                                                                                            // 6032
                                                                                                                       // 6033
          delete data[key];                                                                                            // 6034
          size--;                                                                                                      // 6035
        },                                                                                                             // 6036
                                                                                                                       // 6037
                                                                                                                       // 6038
        /**                                                                                                            // 6039
         * @ngdoc method                                                                                               // 6040
         * @name $cacheFactory.Cache#removeAll                                                                         // 6041
         * @kind function                                                                                              // 6042
         *                                                                                                             // 6043
         * @description                                                                                                // 6044
         * Clears the cache object of any entries.                                                                     // 6045
         */                                                                                                            // 6046
        removeAll: function() {                                                                                        // 6047
          data = {};                                                                                                   // 6048
          size = 0;                                                                                                    // 6049
          lruHash = {};                                                                                                // 6050
          freshEnd = staleEnd = null;                                                                                  // 6051
        },                                                                                                             // 6052
                                                                                                                       // 6053
                                                                                                                       // 6054
        /**                                                                                                            // 6055
         * @ngdoc method                                                                                               // 6056
         * @name $cacheFactory.Cache#destroy                                                                           // 6057
         * @kind function                                                                                              // 6058
         *                                                                                                             // 6059
         * @description                                                                                                // 6060
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,                                             // 6061
         * removing it from the {@link $cacheFactory $cacheFactory} set.                                               // 6062
         */                                                                                                            // 6063
        destroy: function() {                                                                                          // 6064
          data = null;                                                                                                 // 6065
          stats = null;                                                                                                // 6066
          lruHash = null;                                                                                              // 6067
          delete caches[cacheId];                                                                                      // 6068
        },                                                                                                             // 6069
                                                                                                                       // 6070
                                                                                                                       // 6071
        /**                                                                                                            // 6072
         * @ngdoc method                                                                                               // 6073
         * @name $cacheFactory.Cache#info                                                                              // 6074
         * @kind function                                                                                              // 6075
         *                                                                                                             // 6076
         * @description                                                                                                // 6077
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.                              // 6078
         *                                                                                                             // 6079
         * @returns {object} an object with the following properties:                                                  // 6080
         *   <ul>                                                                                                      // 6081
         *     <li>**id**: the id of the cache instance</li>                                                           // 6082
         *     <li>**size**: the number of entries kept in the cache instance</li>                                     // 6083
         *     <li>**...**: any additional properties from the options object when creating the                        // 6084
         *       cache.</li>                                                                                           // 6085
         *   </ul>                                                                                                     // 6086
         */                                                                                                            // 6087
        info: function() {                                                                                             // 6088
          return extend({}, stats, {size: size});                                                                      // 6089
        }                                                                                                              // 6090
      };                                                                                                               // 6091
                                                                                                                       // 6092
                                                                                                                       // 6093
      /**                                                                                                              // 6094
       * makes the `entry` the freshEnd of the LRU linked list                                                         // 6095
       */                                                                                                              // 6096
      function refresh(entry) {                                                                                        // 6097
        if (entry != freshEnd) {                                                                                       // 6098
          if (!staleEnd) {                                                                                             // 6099
            staleEnd = entry;                                                                                          // 6100
          } else if (staleEnd == entry) {                                                                              // 6101
            staleEnd = entry.n;                                                                                        // 6102
          }                                                                                                            // 6103
                                                                                                                       // 6104
          link(entry.n, entry.p);                                                                                      // 6105
          link(entry, freshEnd);                                                                                       // 6106
          freshEnd = entry;                                                                                            // 6107
          freshEnd.n = null;                                                                                           // 6108
        }                                                                                                              // 6109
      }                                                                                                                // 6110
                                                                                                                       // 6111
                                                                                                                       // 6112
      /**                                                                                                              // 6113
       * bidirectionally links two entries of the LRU linked list                                                      // 6114
       */                                                                                                              // 6115
      function link(nextEntry, prevEntry) {                                                                            // 6116
        if (nextEntry != prevEntry) {                                                                                  // 6117
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify                        // 6118
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify                            // 6119
        }                                                                                                              // 6120
      }                                                                                                                // 6121
    }                                                                                                                  // 6122
                                                                                                                       // 6123
                                                                                                                       // 6124
  /**                                                                                                                  // 6125
   * @ngdoc method                                                                                                     // 6126
   * @name $cacheFactory#info                                                                                          // 6127
   *                                                                                                                   // 6128
   * @description                                                                                                      // 6129
   * Get information about all the caches that have been created                                                       // 6130
   *                                                                                                                   // 6131
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`                              // 6132
   */                                                                                                                  // 6133
    cacheFactory.info = function() {                                                                                   // 6134
      var info = {};                                                                                                   // 6135
      forEach(caches, function(cache, cacheId) {                                                                       // 6136
        info[cacheId] = cache.info();                                                                                  // 6137
      });                                                                                                              // 6138
      return info;                                                                                                     // 6139
    };                                                                                                                 // 6140
                                                                                                                       // 6141
                                                                                                                       // 6142
  /**                                                                                                                  // 6143
   * @ngdoc method                                                                                                     // 6144
   * @name $cacheFactory#get                                                                                           // 6145
   *                                                                                                                   // 6146
   * @description                                                                                                      // 6147
   * Get access to a cache object by the `cacheId` used when it was created.                                           // 6148
   *                                                                                                                   // 6149
   * @param {string} cacheId Name or id of a cache to access.                                                          // 6150
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.                           // 6151
   */                                                                                                                  // 6152
    cacheFactory.get = function(cacheId) {                                                                             // 6153
      return caches[cacheId];                                                                                          // 6154
    };                                                                                                                 // 6155
                                                                                                                       // 6156
                                                                                                                       // 6157
    return cacheFactory;                                                                                               // 6158
  };                                                                                                                   // 6159
}                                                                                                                      // 6160
                                                                                                                       // 6161
/**                                                                                                                    // 6162
 * @ngdoc service                                                                                                      // 6163
 * @name $templateCache                                                                                                // 6164
 *                                                                                                                     // 6165
 * @description                                                                                                        // 6166
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You                      // 6167
 * can load templates directly into the cache in a `script` tag, or by consuming the                                   // 6168
 * `$templateCache` service directly.                                                                                  // 6169
 *                                                                                                                     // 6170
 * Adding via the `script` tag:                                                                                        // 6171
 *                                                                                                                     // 6172
 * ```html                                                                                                             // 6173
 *   <script type="text/ng-template" id="templateId.html">                                                             // 6174
 *     <p>This is the content of the template</p>                                                                      // 6175
 *   </script>                                                                                                         // 6176
 * ```                                                                                                                 // 6177
 *                                                                                                                     // 6178
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of                    // 6179
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,                          // 6180
 * element with ng-app attribute), otherwise the template will be ignored.                                             // 6181
 *                                                                                                                     // 6182
 * Adding via the `$templateCache` service:                                                                            // 6183
 *                                                                                                                     // 6184
 * ```js                                                                                                               // 6185
 * var myApp = angular.module('myApp', []);                                                                            // 6186
 * myApp.run(function($templateCache) {                                                                                // 6187
 *   $templateCache.put('templateId.html', 'This is the content of the template');                                     // 6188
 * });                                                                                                                 // 6189
 * ```                                                                                                                 // 6190
 *                                                                                                                     // 6191
 * To retrieve the template later, simply use it in your HTML:                                                         // 6192
 * ```html                                                                                                             // 6193
 * <div ng-include=" 'templateId.html' "></div>                                                                        // 6194
 * ```                                                                                                                 // 6195
 *                                                                                                                     // 6196
 * or get it via Javascript:                                                                                           // 6197
 * ```js                                                                                                               // 6198
 * $templateCache.get('templateId.html')                                                                               // 6199
 * ```                                                                                                                 // 6200
 *                                                                                                                     // 6201
 * See {@link ng.$cacheFactory $cacheFactory}.                                                                         // 6202
 *                                                                                                                     // 6203
 */                                                                                                                    // 6204
function $TemplateCacheProvider() {                                                                                    // 6205
  this.$get = ['$cacheFactory', function($cacheFactory) {                                                              // 6206
    return $cacheFactory('templates');                                                                                 // 6207
  }];                                                                                                                  // 6208
}                                                                                                                      // 6209
                                                                                                                       // 6210
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 6211
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 6212
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 6213
 *          An approval from 2 Core members with history of modifying      *                                           // 6214
 *                         this file is required.                          *                                           // 6215
 *                                                                         *                                           // 6216
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 6217
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 6218
 *     Or gives undesired access to variables likes document or window?    *                                           // 6219
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 6220
                                                                                                                       // 6221
/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!                                                     // 6222
 *                                                                                                                     // 6223
 * DOM-related variables:                                                                                              // 6224
 *                                                                                                                     // 6225
 * - "node" - DOM Node                                                                                                 // 6226
 * - "element" - DOM Element or Node                                                                                   // 6227
 * - "$node" or "$element" - jqLite-wrapped node or element                                                            // 6228
 *                                                                                                                     // 6229
 *                                                                                                                     // 6230
 * Compiler related stuff:                                                                                             // 6231
 *                                                                                                                     // 6232
 * - "linkFn" - linking fn of a single directive                                                                       // 6233
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node                                     // 6234
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node                    // 6235
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)                    // 6236
 */                                                                                                                    // 6237
                                                                                                                       // 6238
                                                                                                                       // 6239
/**                                                                                                                    // 6240
 * @ngdoc service                                                                                                      // 6241
 * @name $compile                                                                                                      // 6242
 * @kind function                                                                                                      // 6243
 *                                                                                                                     // 6244
 * @description                                                                                                        // 6245
 * Compiles an HTML string or DOM into a template and produces a template function, which                              // 6246
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.                             // 6247
 *                                                                                                                     // 6248
 * The compilation is a process of walking the DOM tree and matching DOM elements to                                   // 6249
 * {@link ng.$compileProvider#directive directives}.                                                                   // 6250
 *                                                                                                                     // 6251
 * <div class="alert alert-warning">                                                                                   // 6252
 * **Note:** This document is an in-depth reference of all directive options.                                          // 6253
 * For a gentle introduction to directives with examples of common use cases,                                          // 6254
 * see the {@link guide/directive directive guide}.                                                                    // 6255
 * </div>                                                                                                              // 6256
 *                                                                                                                     // 6257
 * ## Comprehensive Directive API                                                                                      // 6258
 *                                                                                                                     // 6259
 * There are many different options for a directive.                                                                   // 6260
 *                                                                                                                     // 6261
 * The difference resides in the return value of the factory function.                                                 // 6262
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,            // 6263
 * or just the `postLink` function (all other properties will have the default values).                                // 6264
 *                                                                                                                     // 6265
 * <div class="alert alert-success">                                                                                   // 6266
 * **Best Practice:** It's recommended to use the "directive definition object" form.                                  // 6267
 * </div>                                                                                                              // 6268
 *                                                                                                                     // 6269
 * Here's an example directive declared with a Directive Definition Object:                                            // 6270
 *                                                                                                                     // 6271
 * ```js                                                                                                               // 6272
 *   var myModule = angular.module(...);                                                                               // 6273
 *                                                                                                                     // 6274
 *   myModule.directive('directiveName', function factory(injectables) {                                               // 6275
 *     var directiveDefinitionObject = {                                                                               // 6276
 *       priority: 0,                                                                                                  // 6277
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },                                         // 6278
 *       // or                                                                                                         // 6279
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },                                // 6280
 *       transclude: false,                                                                                            // 6281
 *       restrict: 'A',                                                                                                // 6282
 *       templateNamespace: 'html',                                                                                    // 6283
 *       scope: false,                                                                                                 // 6284
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },                        // 6285
 *       controllerAs: 'stringIdentifier',                                                                             // 6286
 *       bindToController: false,                                                                                      // 6287
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {                                                     // 6289
 *         return {                                                                                                    // 6290
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6291
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6292
 *         }                                                                                                           // 6293
 *         // or                                                                                                       // 6294
 *         // return function postLink( ... ) { ... }                                                                  // 6295
 *       },                                                                                                            // 6296
 *       // or                                                                                                         // 6297
 *       // link: {                                                                                                    // 6298
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6299
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6300
 *       // }                                                                                                          // 6301
 *       // or                                                                                                         // 6302
 *       // link: function postLink( ... ) { ... }                                                                     // 6303
 *     };                                                                                                              // 6304
 *     return directiveDefinitionObject;                                                                               // 6305
 *   });                                                                                                               // 6306
 * ```                                                                                                                 // 6307
 *                                                                                                                     // 6308
 * <div class="alert alert-warning">                                                                                   // 6309
 * **Note:** Any unspecified options will use the default value. You can see the default values below.                 // 6310
 * </div>                                                                                                              // 6311
 *                                                                                                                     // 6312
 * Therefore the above can be simplified as:                                                                           // 6313
 *                                                                                                                     // 6314
 * ```js                                                                                                               // 6315
 *   var myModule = angular.module(...);                                                                               // 6316
 *                                                                                                                     // 6317
 *   myModule.directive('directiveName', function factory(injectables) {                                               // 6318
 *     var directiveDefinitionObject = {                                                                               // 6319
 *       link: function postLink(scope, iElement, iAttrs) { ... }                                                      // 6320
 *     };                                                                                                              // 6321
 *     return directiveDefinitionObject;                                                                               // 6322
 *     // or                                                                                                           // 6323
 *     // return function postLink(scope, iElement, iAttrs) { ... }                                                    // 6324
 *   });                                                                                                               // 6325
 * ```                                                                                                                 // 6326
 *                                                                                                                     // 6327
 *                                                                                                                     // 6328
 *                                                                                                                     // 6329
 * ### Directive Definition Object                                                                                     // 6330
 *                                                                                                                     // 6331
 * The directive definition object provides instructions to the {@link ng.$compile                                     // 6332
 * compiler}. The attributes are:                                                                                      // 6333
 *                                                                                                                     // 6334
 * #### `multiElement`                                                                                                 // 6335
 * When this property is set to true, the HTML compiler will collect DOM nodes between                                 // 6336
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them                           // 6337
 * together as the directive elements. It is recommended that this feature be used on directives                       // 6338
 * which are not strictly behavioural (such as {@link ngClick}), and which                                             // 6339
 * do not manipulate or replace child nodes (such as {@link ngInclude}).                                               // 6340
 *                                                                                                                     // 6341
 * #### `priority`                                                                                                     // 6342
 * When there are multiple directives defined on a single DOM element, sometimes it                                    // 6343
 * is necessary to specify the order in which the directives are applied. The `priority` is used                       // 6344
 * to sort the directives before their `compile` functions get called. Priority is defined as a                        // 6345
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions                         // 6346
 * are also run in priority order, but post-link functions are run in reverse order. The order                         // 6347
 * of directives with the same priority is undefined. The default priority is `0`.                                     // 6348
 *                                                                                                                     // 6349
 * #### `terminal`                                                                                                     // 6350
 * If set to true then the current `priority` will be the last set of directives                                       // 6351
 * which will execute (any directives at the current priority will still execute                                       // 6352
 * as the order of execution on same `priority` is undefined). Note that expressions                                   // 6353
 * and other directives used in the directive's template will also be excluded from execution.                         // 6354
 *                                                                                                                     // 6355
 * #### `scope`                                                                                                        // 6356
 * The scope property can be `true`, an object or a falsy value:                                                       // 6357
 *                                                                                                                     // 6358
 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.                 // 6359
 *                                                                                                                     // 6360
 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for                    // 6361
 * the directive's element. If multiple directives on the same element request a new scope,                            // 6362
 * only one new scope is created. The new scope rule does not apply for the root of the template                       // 6363
 * since the root of the template always gets a new scope.                                                             // 6364
 *                                                                                                                     // 6365
 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The                   // 6366
 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent                // 6367
 * scope. This is useful when creating reusable components, which should not accidentally read or modify               // 6368
 * data in the parent scope.                                                                                           // 6369
 *                                                                                                                     // 6370
 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the              // 6371
 * directive's element. These local properties are useful for aliasing values for templates. The keys in               // 6372
 * the object hash map to the name of the property on the isolate scope; the values define how the property            // 6373
 * is bound to the parent scope, via matching attributes on the directive's element:                                   // 6374
 *                                                                                                                     // 6375
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is                         // 6376
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the                        // 6377
 *   attribute name is assumed to be the same as the local name.                                                       // 6378
 *   Given `<widget my-attr="hello {{name}}">` and widget definition                                                   // 6379
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect                          // 6380
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the                           // 6381
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not                           // 6382
 *   component scope).                                                                                                 // 6383
 *                                                                                                                     // 6384
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the                             // 6385
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`                         // 6386
 *   name is specified then the attribute name is assumed to be the same as the local name.                            // 6387
 *   Given `<widget my-attr="parentModel">` and widget definition of                                                   // 6388
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the                       // 6389
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected                        // 6390
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent                      // 6391
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You                      // 6392
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If                      // 6393
 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use                       // 6394
 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).                                                // 6395
 *                                                                                                                     // 6396
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.                      // 6397
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the                           // 6398
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of                             // 6399
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to                               // 6400
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to                            // 6401
 *   pass data from the isolated scope via an expression to the parent scope, this can be                              // 6402
 *   done by passing a map of local variable names and values into the expression wrapper fn.                          // 6403
 *   For example, if the expression is `increment(amount)` then we can specify the amount value                        // 6404
 *   by calling the `localFn` as `localFn({amount: 22})`.                                                              // 6405
 *                                                                                                                     // 6406
 * In general it's possible to apply more than one directive to one element, but there might be limitations            // 6407
 * depending on the type of scope required by the directives. The following points will help explain these limitations.
 * For simplicity only two directives are taken into account, but it is also applicable for several directives:        // 6409
 *                                                                                                                     // 6410
 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope   // 6411
 * * **child scope** + **no scope** =>  Both directives will share one single child scope                              // 6412
 * * **child scope** + **child scope** =>  Both directives will share one single child scope                           // 6413
 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
 * its parent's scope                                                                                                  // 6415
 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
 * be applied to the same element.                                                                                     // 6417
 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
 * cannot be applied to the same element.                                                                              // 6419
 *                                                                                                                     // 6420
 *                                                                                                                     // 6421
 * #### `bindToController`                                                                                             // 6422
 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope. When the controller         // 6424
 * is instantiated, the initial values of the isolate scope bindings are already available.                            // 6425
 *                                                                                                                     // 6426
 * #### `controller`                                                                                                   // 6427
 * Controller constructor function. The controller is instantiated before the                                          // 6428
 * pre-linking phase and can be accessed by other directives (see                                                      // 6429
 * `require` attribute). This allows the directives to communicate with each other and augment                         // 6430
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:      // 6431
 *                                                                                                                     // 6432
 * * `$scope` - Current scope associated with the element                                                              // 6433
 * * `$element` - Current element                                                                                      // 6434
 * * `$attrs` - Current attributes object for the element                                                              // 6435
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:                        // 6436
 *   `function([scope], cloneLinkingFn, futureParentElement)`.                                                         // 6437
 *    * `scope`: optional argument to override the scope.                                                              // 6438
 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.                      // 6439
 *    * `futureParentElement`:                                                                                         // 6440
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.                             // 6441
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.          // 6442
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)              // 6443
 *          and when the `cloneLinkinFn` is passed,                                                                    // 6444
 *          as those elements need to created and cloned in a special way when they are defined outside their          // 6445
 *          usual containers (e.g. like `<svg>`).                                                                      // 6446
 *        * See also the `directive.templateNamespace` property.                                                       // 6447
 *                                                                                                                     // 6448
 *                                                                                                                     // 6449
 * #### `require`                                                                                                      // 6450
 * Require another directive and inject its controller as the fourth argument to the linking function. The             // 6451
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the        // 6452
 * injected argument will be an array in corresponding order. If no such directive can be                              // 6453
 * found, or if the directive does not have a controller, then an error is raised (unless no link function             // 6454
 * is specified, in which case error checking is skipped). The name can be prefixed with:                              // 6455
 *                                                                                                                     // 6456
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.                 // 6457
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.                     // 6458
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.       // 6459
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.            // 6460
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass                 // 6461
 *   `null` to the `link` fn if not found.                                                                             // 6462
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass                     // 6463
 *   `null` to the `link` fn if not found.                                                                             // 6464
 *                                                                                                                     // 6465
 *                                                                                                                     // 6466
 * #### `controllerAs`                                                                                                 // 6467
 * Identifier name for a reference to the controller in the directive's scope.                                         // 6468
 * This allows the controller to be referenced from the directive template. This is especially                         // 6469
 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible                      // 6470
 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the                      // 6471
 * `controllerAs` reference might overwrite a property that already exists on the parent scope.                        // 6472
 *                                                                                                                     // 6473
 *                                                                                                                     // 6474
 * #### `restrict`                                                                                                     // 6475
 * String of subset of `EACM` which restricts the directive to a specific directive                                    // 6476
 * declaration style. If omitted, the defaults (elements and attributes) are used.                                     // 6477
 *                                                                                                                     // 6478
 * * `E` - Element name (default): `<my-directive></my-directive>`                                                     // 6479
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`                                                       // 6480
 * * `C` - Class: `<div class="my-directive: exp;"></div>`                                                             // 6481
 * * `M` - Comment: `<!-- directive: my-directive exp -->`                                                             // 6482
 *                                                                                                                     // 6483
 *                                                                                                                     // 6484
 * #### `templateNamespace`                                                                                            // 6485
 * String representing the document type used by the markup in the template.                                           // 6486
 * AngularJS needs this information as those elements need to be created and cloned                                    // 6487
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.                    // 6488
 *                                                                                                                     // 6489
 * * `html` - All root nodes in the template are HTML. Root nodes may also be                                          // 6490
 *   top-level elements such as `<svg>` or `<math>`.                                                                   // 6491
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).                                     // 6492
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).                                  // 6493
 *                                                                                                                     // 6494
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.                              // 6495
 *                                                                                                                     // 6496
 * #### `template`                                                                                                     // 6497
 * HTML markup that may:                                                                                               // 6498
 * * Replace the contents of the directive's element (default).                                                        // 6499
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).                                       // 6500
 * * Wrap the contents of the directive's element (if `transclude` is true).                                           // 6501
 *                                                                                                                     // 6502
 * Value may be:                                                                                                       // 6503
 *                                                                                                                     // 6504
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.                                                   // 6505
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`                          // 6506
 *   function api below) and returns a string value.                                                                   // 6507
 *                                                                                                                     // 6508
 *                                                                                                                     // 6509
 * #### `templateUrl`                                                                                                  // 6510
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.                    // 6511
 *                                                                                                                     // 6512
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element        // 6513
 * for later when the template has been resolved.  In the meantime it will continue to compile and link                // 6514
 * sibling and parent elements as though this element had not contained any directives.                                // 6515
 *                                                                                                                     // 6516
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this                // 6517
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the                // 6518
 * case when only one deeply nested directive has `templateUrl`.                                                       // 6519
 *                                                                                                                     // 6520
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}            // 6521
 *                                                                                                                     // 6522
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two                     // 6523
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns                       // 6524
 * a string value representing the url.  In either case, the template URL is passed through {@link                     // 6525
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.                                                             // 6526
 *                                                                                                                     // 6527
 *                                                                                                                     // 6528
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)                                 // 6529
 * specify what the template should replace. Defaults to `false`.                                                      // 6530
 *                                                                                                                     // 6531
 * * `true` - the template will replace the directive's element.                                                       // 6532
 * * `false` - the template will replace the contents of the directive's element.                                      // 6533
 *                                                                                                                     // 6534
 * The replacement process migrates all of the attributes / classes from the old element to the new                    // 6535
 * one. See the {@link guide/directive#template-expanding-directive                                                    // 6536
 * Directives Guide} for an example.                                                                                   // 6537
 *                                                                                                                     // 6538
 * There are very few scenarios where element replacement is required for the application function,                    // 6539
 * the main one being reusable custom components that are used within SVG contexts                                     // 6540
 * (because SVG doesn't work with custom elements in the DOM tree).                                                    // 6541
 *                                                                                                                     // 6542
 * #### `transclude`                                                                                                   // 6543
 * Extract the contents of the element where the directive appears and make it available to the directive.             // 6544
 * The contents are compiled and provided to the directive as a **transclusion function**. See the                     // 6545
 * {@link $compile#transclusion Transclusion} section below.                                                           // 6546
 *                                                                                                                     // 6547
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the          // 6548
 * directive's element or the entire element:                                                                          // 6549
 *                                                                                                                     // 6550
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.                                // 6551
 * * `'element'` - transclude the whole of the directive's element including any directives on this                    // 6552
 *   element that defined at a lower priority than this directive. When used, the `template`                           // 6553
 *   property is ignored.                                                                                              // 6554
 *                                                                                                                     // 6555
 *                                                                                                                     // 6556
 * #### `compile`                                                                                                      // 6557
 *                                                                                                                     // 6558
 * ```js                                                                                                               // 6559
 *   function compile(tElement, tAttrs, transclude) { ... }                                                            // 6560
 * ```                                                                                                                 // 6561
 *                                                                                                                     // 6562
 * The compile function deals with transforming the template DOM. Since most directives do not do                      // 6563
 * template transformation, it is not used often. The compile function takes the following arguments:                  // 6564
 *                                                                                                                     // 6565
 *   * `tElement` - template element - The element where the directive has been declared. It is                        // 6566
 *     safe to do template transformation on the element and child elements only.                                      // 6567
 *                                                                                                                     // 6568
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared                  // 6569
 *     between all directive compile functions.                                                                        // 6570
 *                                                                                                                     // 6571
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`                // 6572
 *                                                                                                                     // 6573
 * <div class="alert alert-warning">                                                                                   // 6574
 * **Note:** The template instance and the link instance may be different objects if the template has                  // 6575
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that                  // 6576
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration                  // 6577
 * should be done in a linking function rather than in a compile function.                                             // 6578
 * </div>                                                                                                              // 6579
                                                                                                                       // 6580
 * <div class="alert alert-warning">                                                                                   // 6581
 * **Note:** The compile function cannot handle directives that recursively use themselves in their                    // 6582
 * own templates or compile functions. Compiling these directives results in an infinite loop and a                    // 6583
 * stack overflow errors.                                                                                              // 6584
 *                                                                                                                     // 6585
 * This can be avoided by manually using $compile in the postLink function to imperatively compile                     // 6586
 * a directive's template instead of relying on automatic template compilation via `template` or                       // 6587
 * `templateUrl` declaration or manual compilation inside the compile function.                                        // 6588
 * </div>                                                                                                              // 6589
 *                                                                                                                     // 6590
 * <div class="alert alert-danger">                                                                                    // 6591
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it                     // 6592
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed                 // 6593
 *   to the link function instead.                                                                                     // 6594
 * </div>                                                                                                              // 6595
                                                                                                                       // 6596
 * A compile function can have a return value which can be either a function or an object.                             // 6597
 *                                                                                                                     // 6598
 * * returning a (post-link) function - is equivalent to registering the linking function via the                      // 6599
 *   `link` property of the config object when the compile function is empty.                                          // 6600
 *                                                                                                                     // 6601
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to                   // 6602
 *   control when a linking function should be called during the linking phase. See info about                         // 6603
 *   pre-linking and post-linking functions below.                                                                     // 6604
 *                                                                                                                     // 6605
 *                                                                                                                     // 6606
 * #### `link`                                                                                                         // 6607
 * This property is used only if the `compile` property is not defined.                                                // 6608
 *                                                                                                                     // 6609
 * ```js                                                                                                               // 6610
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }                                          // 6611
 * ```                                                                                                                 // 6612
 *                                                                                                                     // 6613
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is                   // 6614
 * executed after the template has been cloned. This is where most of the directive logic will be                      // 6615
 * put.                                                                                                                // 6616
 *                                                                                                                     // 6617
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the                                       // 6618
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.                                           // 6619
 *                                                                                                                     // 6620
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to                    // 6621
 *     manipulate the children of the element only in `postLink` function since the children have                      // 6622
 *     already been linked.                                                                                            // 6623
 *                                                                                                                     // 6624
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared                  // 6625
 *     between all directive linking functions.                                                                        // 6626
 *                                                                                                                     // 6627
 *   * `controller` - the directive's required controller instance(s) - Instances are shared                           // 6628
 *     among all directives, which allows the directives to use the controllers as a communication                     // 6629
 *     channel. The exact value depends on the directive's `require` property:                                         // 6630
 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one            // 6631
 *       * `string`: the controller instance                                                                           // 6632
 *       * `array`: array of controller instances                                                                      // 6633
 *                                                                                                                     // 6634
 *     If a required controller cannot be found, and it is optional, the instance is `null`,                           // 6635
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.                         // 6636
 *                                                                                                                     // 6637
 *     Note that you can also require the directive's own controller - it will be made available like                  // 6638
 *     any other controller.                                                                                           // 6639
 *                                                                                                                     // 6640
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.                     // 6641
 *     This is the same as the `$transclude`                                                                           // 6642
 *     parameter of directive controllers, see there for details.                                                      // 6643
 *     `function([scope], cloneLinkingFn, futureParentElement)`.                                                       // 6644
 *                                                                                                                     // 6645
 * #### Pre-linking function                                                                                           // 6646
 *                                                                                                                     // 6647
 * Executed before the child elements are linked. Not safe to do DOM transformation since the                          // 6648
 * compiler linking function will fail to locate the correct elements for linking.                                     // 6649
 *                                                                                                                     // 6650
 * #### Post-linking function                                                                                          // 6651
 *                                                                                                                     // 6652
 * Executed after the child elements are linked.                                                                       // 6653
 *                                                                                                                     // 6654
 * Note that child elements that contain `templateUrl` directives will not have been compiled                          // 6655
 * and linked since they are waiting for their template to load asynchronously and their own                           // 6656
 * compilation and linking has been suspended until that occurs.                                                       // 6657
 *                                                                                                                     // 6658
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting                   // 6659
 * for their async templates to be resolved.                                                                           // 6660
 *                                                                                                                     // 6661
 *                                                                                                                     // 6662
 * ### Transclusion                                                                                                    // 6663
 *                                                                                                                     // 6664
 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and                 // 6665
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS               // 6666
 * scope from where they were taken.                                                                                   // 6667
 *                                                                                                                     // 6668
 * Transclusion is used (often with {@link ngTransclude}) to insert the                                                // 6669
 * original contents of a directive's element into a specified place in the template of the directive.                 // 6670
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded                  // 6671
 * content has access to the properties on the scope from which it was taken, even if the directive                    // 6672
 * has isolated scope.                                                                                                 // 6673
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.                    // 6674
 *                                                                                                                     // 6675
 * This makes it possible for the widget to have private state for its template, while the transcluded                 // 6676
 * content has access to its originating scope.                                                                        // 6677
 *                                                                                                                     // 6678
 * <div class="alert alert-warning">                                                                                   // 6679
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the          // 6680
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives                  // 6681
 * Testing Transclusion Directives}.                                                                                   // 6682
 * </div>                                                                                                              // 6683
 *                                                                                                                     // 6684
 * #### Transclusion Functions                                                                                         // 6685
 *                                                                                                                     // 6686
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion            // 6687
 * function** to the directive's `link` function and `controller`. This transclusion function is a special             // 6688
 * **linking function** that will return the compiled contents linked to a new transclusion scope.                     // 6689
 *                                                                                                                     // 6690
 * <div class="alert alert-info">                                                                                      // 6691
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since                  // 6692
 * ngTransclude will deal with it for us.                                                                              // 6693
 * </div>                                                                                                              // 6694
 *                                                                                                                     // 6695
 * If you want to manually control the insertion and removal of the transcluded content in your directive              // 6696
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery        // 6697
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.                           // 6698
 *                                                                                                                     // 6699
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts            // 6700
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded    // 6701
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.                       // 6702
 *                                                                                                                     // 6703
 * <div class="alert alert-info">                                                                                      // 6704
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function            // 6705
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.            // 6706
 * </div>                                                                                                              // 6707
 *                                                                                                                     // 6708
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone                   // 6709
 * attach function**:                                                                                                  // 6710
 *                                                                                                                     // 6711
 * ```js                                                                                                               // 6712
 * var transcludedContent, transclusionScope;                                                                          // 6713
 *                                                                                                                     // 6714
 * $transclude(function(clone, scope) {                                                                                // 6715
 *   element.append(clone);                                                                                            // 6716
 *   transcludedContent = clone;                                                                                       // 6717
 *   transclusionScope = scope;                                                                                        // 6718
 * });                                                                                                                 // 6719
 * ```                                                                                                                 // 6720
 *                                                                                                                     // 6721
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the                 // 6722
 * associated transclusion scope:                                                                                      // 6723
 *                                                                                                                     // 6724
 * ```js                                                                                                               // 6725
 * transcludedContent.remove();                                                                                        // 6726
 * transclusionScope.$destroy();                                                                                       // 6727
 * ```                                                                                                                 // 6728
 *                                                                                                                     // 6729
 * <div class="alert alert-info">                                                                                      // 6730
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive                   // 6731
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),                    // 6732
 * then you are also responsible for calling `$destroy` on the transclusion scope.                                     // 6733
 * </div>                                                                                                              // 6734
 *                                                                                                                     // 6735
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}               // 6736
 * automatically destroy their transluded clones as necessary so you do not need to worry about this if                // 6737
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.                           // 6738
 *                                                                                                                     // 6739
 *                                                                                                                     // 6740
 * #### Transclusion Scopes                                                                                            // 6741
 *                                                                                                                     // 6742
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion                 // 6743
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed               // 6744
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it                // 6745
 * was taken.                                                                                                          // 6746
 *                                                                                                                     // 6747
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look            // 6748
 * like this:                                                                                                          // 6749
 *                                                                                                                     // 6750
 * ```html                                                                                                             // 6751
 * <div ng-app>                                                                                                        // 6752
 *   <div isolate>                                                                                                     // 6753
 *     <div transclusion>                                                                                              // 6754
 *     </div>                                                                                                          // 6755
 *   </div>                                                                                                            // 6756
 * </div>                                                                                                              // 6757
 * ```                                                                                                                 // 6758
 *                                                                                                                     // 6759
 * The `$parent` scope hierarchy will look like this:                                                                  // 6760
 *                                                                                                                     // 6761
 * ```                                                                                                                 // 6762
 * - $rootScope                                                                                                        // 6763
 *   - isolate                                                                                                         // 6764
 *     - transclusion                                                                                                  // 6765
 * ```                                                                                                                 // 6766
 *                                                                                                                     // 6767
 * but the scopes will inherit prototypically from different scopes to their `$parent`.                                // 6768
 *                                                                                                                     // 6769
 * ```                                                                                                                 // 6770
 * - $rootScope                                                                                                        // 6771
 *   - transclusion                                                                                                    // 6772
 * - isolate                                                                                                           // 6773
 * ```                                                                                                                 // 6774
 *                                                                                                                     // 6775
 *                                                                                                                     // 6776
 * ### Attributes                                                                                                      // 6777
 *                                                                                                                     // 6778
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the                       // 6779
 * `link()` or `compile()` functions. It has a variety of uses.                                                        // 6780
 *                                                                                                                     // 6781
 * accessing *Normalized attribute names:*                                                                             // 6782
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.                  // 6783
 * the attributes object allows for normalized access to                                                               // 6784
 *   the attributes.                                                                                                   // 6785
 *                                                                                                                     // 6786
 * * *Directive inter-communication:* All directives share the same instance of the attributes                         // 6787
 *   object which allows the directives to use the attributes object as inter directive                                // 6788
 *   communication.                                                                                                    // 6789
 *                                                                                                                     // 6790
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object                           // 6791
 *   allowing other directives to read the interpolated value.                                                         // 6792
 *                                                                                                                     // 6793
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes                    // 6794
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also                  // 6795
 *   the only way to easily get the actual value because during the linking phase the interpolation                    // 6796
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.                                    // 6797
 *                                                                                                                     // 6798
 * ```js                                                                                                               // 6799
 * function linkingFn(scope, elm, attrs, ctrl) {                                                                       // 6800
 *   // get the attribute value                                                                                        // 6801
 *   console.log(attrs.ngModel);                                                                                       // 6802
 *                                                                                                                     // 6803
 *   // change the attribute                                                                                           // 6804
 *   attrs.$set('ngModel', 'new value');                                                                               // 6805
 *                                                                                                                     // 6806
 *   // observe changes to interpolated attribute                                                                      // 6807
 *   attrs.$observe('ngModel', function(value) {                                                                       // 6808
 *     console.log('ngModel has changed value to ' + value);                                                           // 6809
 *   });                                                                                                               // 6810
 * }                                                                                                                   // 6811
 * ```                                                                                                                 // 6812
 *                                                                                                                     // 6813
 * ## Example                                                                                                          // 6814
 *                                                                                                                     // 6815
 * <div class="alert alert-warning">                                                                                   // 6816
 * **Note**: Typically directives are registered with `module.directive`. The example below is                         // 6817
 * to illustrate how `$compile` works.                                                                                 // 6818
 * </div>                                                                                                              // 6819
 *                                                                                                                     // 6820
 <example module="compileExample">                                                                                     // 6821
   <file name="index.html">                                                                                            // 6822
    <script>                                                                                                           // 6823
      angular.module('compileExample', [], function($compileProvider) {                                                // 6824
        // configure new 'compile' directive by passing a directive                                                    // 6825
        // factory function. The factory function injects the '$compile'                                               // 6826
        $compileProvider.directive('compile', function($compile) {                                                     // 6827
          // directive factory creates a link function                                                                 // 6828
          return function(scope, element, attrs) {                                                                     // 6829
            scope.$watch(                                                                                              // 6830
              function(scope) {                                                                                        // 6831
                 // watch the 'compile' expression for changes                                                         // 6832
                return scope.$eval(attrs.compile);                                                                     // 6833
              },                                                                                                       // 6834
              function(value) {                                                                                        // 6835
                // when the 'compile' expression changes                                                               // 6836
                // assign it into the current DOM                                                                      // 6837
                element.html(value);                                                                                   // 6838
                                                                                                                       // 6839
                // compile the new DOM and link it to the current                                                      // 6840
                // scope.                                                                                              // 6841
                // NOTE: we only compile .childNodes so that                                                           // 6842
                // we don't get into infinite loop compiling ourselves                                                 // 6843
                $compile(element.contents())(scope);                                                                   // 6844
              }                                                                                                        // 6845
            );                                                                                                         // 6846
          };                                                                                                           // 6847
        });                                                                                                            // 6848
      })                                                                                                               // 6849
      .controller('GreeterController', ['$scope', function($scope) {                                                   // 6850
        $scope.name = 'Angular';                                                                                       // 6851
        $scope.html = 'Hello {{name}}';                                                                                // 6852
      }]);                                                                                                             // 6853
    </script>                                                                                                          // 6854
    <div ng-controller="GreeterController">                                                                            // 6855
      <input ng-model="name"> <br/>                                                                                    // 6856
      <textarea ng-model="html"></textarea> <br/>                                                                      // 6857
      <div compile="html"></div>                                                                                       // 6858
    </div>                                                                                                             // 6859
   </file>                                                                                                             // 6860
   <file name="protractor.js" type="protractor">                                                                       // 6861
     it('should auto compile', function() {                                                                            // 6862
       var textarea = $('textarea');                                                                                   // 6863
       var output = $('div[compile]');                                                                                 // 6864
       // The initial state reads 'Hello Angular'.                                                                     // 6865
       expect(output.getText()).toBe('Hello Angular');                                                                 // 6866
       textarea.clear();                                                                                               // 6867
       textarea.sendKeys('{{name}}!');                                                                                 // 6868
       expect(output.getText()).toBe('Angular!');                                                                      // 6869
     });                                                                                                               // 6870
   </file>                                                                                                             // 6871
 </example>                                                                                                            // 6872
                                                                                                                       // 6873
 *                                                                                                                     // 6874
 *                                                                                                                     // 6875
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.                      // 6876
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.          // 6877
 *                                                                                                                     // 6878
 * <div class="alert alert-danger">                                                                                    // 6879
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it                             // 6880
 *   e.g. will not use the right outer scope. Please pass the transclude function as a                                 // 6881
 *   `parentBoundTranscludeFn` to the link function instead.                                                           // 6882
 * </div>                                                                                                              // 6883
 *                                                                                                                     // 6884
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the                       // 6885
 *                 root element(s), not their children)                                                                // 6886
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template                 // 6887
 * (a DOM element/tree) to a scope. Where:                                                                             // 6888
 *                                                                                                                     // 6889
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.                                                        // 6890
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the                          // 6891
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the                                 // 6892
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is                               // 6893
 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:                                                      // 6894
 *                                                                                                                     // 6895
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.                             // 6896
 *      * `scope` - is the current scope with which the linking function is working with.                              // 6897
 *                                                                                                                     // 6898
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following           // 6899
 *  keys may be used to control linking behavior:                                                                      // 6900
 *                                                                                                                     // 6901
 *      * `parentBoundTranscludeFn` - the transclude function made available to                                        // 6902
 *        directives; if given, it will be passed through to the link functions of                                     // 6903
 *        directives found in `element` during compilation.                                                            // 6904
 *      * `transcludeControllers` - an object hash with keys that map controller names                                 // 6905
 *        to controller instances; if given, it will make the controllers                                              // 6906
 *        available to directives.                                                                                     // 6907
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add                             // 6908
 *        the cloned elements; only needed for transcludes that are allowed to contain non html                        // 6909
 *        elements (e.g. SVG elements). See also the directive.controller property.                                    // 6910
 *                                                                                                                     // 6911
 * Calling the linking function returns the element of the template. It is either the original                         // 6912
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.                                  // 6913
 *                                                                                                                     // 6914
 * After linking the view is not updated until after a call to $digest which typically is done by                      // 6915
 * Angular automatically.                                                                                              // 6916
 *                                                                                                                     // 6917
 * If you need access to the bound view, there are two ways to do it:                                                  // 6918
 *                                                                                                                     // 6919
 * - If you are not asking the linking function to clone the template, create the DOM element(s)                       // 6920
 *   before you send them to the compiler and keep this reference around.                                              // 6921
 *   ```js                                                                                                             // 6922
 *     var element = $compile('<p>{{total}}</p>')(scope);                                                              // 6923
 *   ```                                                                                                               // 6924
 *                                                                                                                     // 6925
 * - if on the other hand, you need the element to be cloned, the view reference from the original                     // 6926
 *   example would not point to the clone, but rather to the original template that was cloned. In                     // 6927
 *   this case, you can access the clone via the cloneAttachFn:                                                        // 6928
 *   ```js                                                                                                             // 6929
 *     var templateElement = angular.element('<p>{{total}}</p>'),                                                      // 6930
 *         scope = ....;                                                                                               // 6931
 *                                                                                                                     // 6932
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {                           // 6933
 *       //attach the clone to DOM document at the right place                                                         // 6934
 *     });                                                                                                             // 6935
 *                                                                                                                     // 6936
 *     //now we have reference to the cloned DOM via `clonedElement`                                                   // 6937
 *   ```                                                                                                               // 6938
 *                                                                                                                     // 6939
 *                                                                                                                     // 6940
 * For information on how the compiler works, see the                                                                  // 6941
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.                                        // 6942
 */                                                                                                                    // 6943
                                                                                                                       // 6944
var $compileMinErr = minErr('$compile');                                                                               // 6945
                                                                                                                       // 6946
/**                                                                                                                    // 6947
 * @ngdoc provider                                                                                                     // 6948
 * @name $compileProvider                                                                                              // 6949
 *                                                                                                                     // 6950
 * @description                                                                                                        // 6951
 */                                                                                                                    // 6952
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];                                                      // 6953
function $CompileProvider($provide, $$sanitizeUriProvider) {                                                           // 6954
  var hasDirectives = {},                                                                                              // 6955
      Suffix = 'Directive',                                                                                            // 6956
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,                                                // 6957
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,                                                          // 6958
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),                                                     // 6959
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;                                                           // 6960
                                                                                                                       // 6961
  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes                                    // 6962
  // The assumption is that future DOM event attribute names will begin with                                           // 6963
  // 'on' and be composed of only English letters.                                                                     // 6964
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;                                                           // 6965
                                                                                                                       // 6966
  function parseIsolateBindings(scope, directiveName, isController) {                                                  // 6967
    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;                                                           // 6968
                                                                                                                       // 6969
    var bindings = {};                                                                                                 // 6970
                                                                                                                       // 6971
    forEach(scope, function(definition, scopeName) {                                                                   // 6972
      var match = definition.match(LOCAL_REGEXP);                                                                      // 6973
                                                                                                                       // 6974
      if (!match) {                                                                                                    // 6975
        throw $compileMinErr('iscp',                                                                                   // 6976
            "Invalid {3} for directive '{0}'." +                                                                       // 6977
            " Definition: {... {1}: '{2}' ...}",                                                                       // 6978
            directiveName, scopeName, definition,                                                                      // 6979
            (isController ? "controller bindings definition" :                                                         // 6980
            "isolate scope definition"));                                                                              // 6981
      }                                                                                                                // 6982
                                                                                                                       // 6983
      bindings[scopeName] = {                                                                                          // 6984
        mode: match[1][0],                                                                                             // 6985
        collection: match[2] === '*',                                                                                  // 6986
        optional: match[3] === '?',                                                                                    // 6987
        attrName: match[4] || scopeName                                                                                // 6988
      };                                                                                                               // 6989
    });                                                                                                                // 6990
                                                                                                                       // 6991
    return bindings;                                                                                                   // 6992
  }                                                                                                                    // 6993
                                                                                                                       // 6994
  function parseDirectiveBindings(directive, directiveName) {                                                          // 6995
    var bindings = {                                                                                                   // 6996
      isolateScope: null,                                                                                              // 6997
      bindToController: null                                                                                           // 6998
    };                                                                                                                 // 6999
    if (isObject(directive.scope)) {                                                                                   // 7000
      if (directive.bindToController === true) {                                                                       // 7001
        bindings.bindToController = parseIsolateBindings(directive.scope,                                              // 7002
                                                         directiveName, true);                                         // 7003
        bindings.isolateScope = {};                                                                                    // 7004
      } else {                                                                                                         // 7005
        bindings.isolateScope = parseIsolateBindings(directive.scope,                                                  // 7006
                                                     directiveName, false);                                            // 7007
      }                                                                                                                // 7008
    }                                                                                                                  // 7009
    if (isObject(directive.bindToController)) {                                                                        // 7010
      bindings.bindToController =                                                                                      // 7011
          parseIsolateBindings(directive.bindToController, directiveName, true);                                       // 7012
    }                                                                                                                  // 7013
    if (isObject(bindings.bindToController)) {                                                                         // 7014
      var controller = directive.controller;                                                                           // 7015
      var controllerAs = directive.controllerAs;                                                                       // 7016
      if (!controller) {                                                                                               // 7017
        // There is no controller, there may or may not be a controllerAs property                                     // 7018
        throw $compileMinErr('noctrl',                                                                                 // 7019
              "Cannot bind to controller without directive '{0}'s controller.",                                        // 7020
              directiveName);                                                                                          // 7021
      } else if (!identifierForController(controller, controllerAs)) {                                                 // 7022
        // There is a controller, but no identifier or controllerAs property                                           // 7023
        throw $compileMinErr('noident',                                                                                // 7024
              "Cannot bind to controller without identifier for directive '{0}'.",                                     // 7025
              directiveName);                                                                                          // 7026
      }                                                                                                                // 7027
    }                                                                                                                  // 7028
    return bindings;                                                                                                   // 7029
  }                                                                                                                    // 7030
                                                                                                                       // 7031
  function assertValidDirectiveName(name) {                                                                            // 7032
    var letter = name.charAt(0);                                                                                       // 7033
    if (!letter || letter !== lowercase(letter)) {                                                                     // 7034
      throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
    }                                                                                                                  // 7036
    if (name !== name.trim()) {                                                                                        // 7037
      throw $compileMinErr('baddir',                                                                                   // 7038
            "Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",            // 7039
            name);                                                                                                     // 7040
    }                                                                                                                  // 7041
  }                                                                                                                    // 7042
                                                                                                                       // 7043
  /**                                                                                                                  // 7044
   * @ngdoc method                                                                                                     // 7045
   * @name $compileProvider#directive                                                                                  // 7046
   * @kind function                                                                                                    // 7047
   *                                                                                                                   // 7048
   * @description                                                                                                      // 7049
   * Register a new directive with the compiler.                                                                       // 7050
   *                                                                                                                   // 7051
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which                   // 7052
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the                     // 7053
   *    names and the values are the factories.                                                                        // 7054
   * @param {Function|Array} directiveFactory An injectable directive factory function. See                            // 7055
   *    {@link guide/directive} for more info.                                                                         // 7056
   * @returns {ng.$compileProvider} Self for chaining.                                                                 // 7057
   */                                                                                                                  // 7058
   this.directive = function registerDirective(name, directiveFactory) {                                               // 7059
    assertNotHasOwnProperty(name, 'directive');                                                                        // 7060
    if (isString(name)) {                                                                                              // 7061
      assertValidDirectiveName(name);                                                                                  // 7062
      assertArg(directiveFactory, 'directiveFactory');                                                                 // 7063
      if (!hasDirectives.hasOwnProperty(name)) {                                                                       // 7064
        hasDirectives[name] = [];                                                                                      // 7065
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',                                             // 7066
          function($injector, $exceptionHandler) {                                                                     // 7067
            var directives = [];                                                                                       // 7068
            forEach(hasDirectives[name], function(directiveFactory, index) {                                           // 7069
              try {                                                                                                    // 7070
                var directive = $injector.invoke(directiveFactory);                                                    // 7071
                if (isFunction(directive)) {                                                                           // 7072
                  directive = { compile: valueFn(directive) };                                                         // 7073
                } else if (!directive.compile && directive.link) {                                                     // 7074
                  directive.compile = valueFn(directive.link);                                                         // 7075
                }                                                                                                      // 7076
                directive.priority = directive.priority || 0;                                                          // 7077
                directive.index = index;                                                                               // 7078
                directive.name = directive.name || name;                                                               // 7079
                directive.require = directive.require || (directive.controller && directive.name);                     // 7080
                directive.restrict = directive.restrict || 'EA';                                                       // 7081
                var bindings = directive.$$bindings =                                                                  // 7082
                    parseDirectiveBindings(directive, directive.name);                                                 // 7083
                if (isObject(bindings.isolateScope)) {                                                                 // 7084
                  directive.$$isolateBindings = bindings.isolateScope;                                                 // 7085
                }                                                                                                      // 7086
                directive.$$moduleName = directiveFactory.$$moduleName;                                                // 7087
                directives.push(directive);                                                                            // 7088
              } catch (e) {                                                                                            // 7089
                $exceptionHandler(e);                                                                                  // 7090
              }                                                                                                        // 7091
            });                                                                                                        // 7092
            return directives;                                                                                         // 7093
          }]);                                                                                                         // 7094
      }                                                                                                                // 7095
      hasDirectives[name].push(directiveFactory);                                                                      // 7096
    } else {                                                                                                           // 7097
      forEach(name, reverseParams(registerDirective));                                                                 // 7098
    }                                                                                                                  // 7099
    return this;                                                                                                       // 7100
  };                                                                                                                   // 7101
                                                                                                                       // 7102
                                                                                                                       // 7103
  /**                                                                                                                  // 7104
   * @ngdoc method                                                                                                     // 7105
   * @name $compileProvider#aHrefSanitizationWhitelist                                                                 // 7106
   * @kind function                                                                                                    // 7107
   *                                                                                                                   // 7108
   * @description                                                                                                      // 7109
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7110
   * urls during a[href] sanitization.                                                                                 // 7111
   *                                                                                                                   // 7112
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.                            // 7113
   *                                                                                                                   // 7114
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 7115
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 7116
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7117
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7118
   *                                                                                                                   // 7119
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7120
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7121
   *    chaining otherwise.                                                                                            // 7122
   */                                                                                                                  // 7123
  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 7124
    if (isDefined(regexp)) {                                                                                           // 7125
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);                                                        // 7126
      return this;                                                                                                     // 7127
    } else {                                                                                                           // 7128
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();                                                       // 7129
    }                                                                                                                  // 7130
  };                                                                                                                   // 7131
                                                                                                                       // 7132
                                                                                                                       // 7133
  /**                                                                                                                  // 7134
   * @ngdoc method                                                                                                     // 7135
   * @name $compileProvider#imgSrcSanitizationWhitelist                                                                // 7136
   * @kind function                                                                                                    // 7137
   *                                                                                                                   // 7138
   * @description                                                                                                      // 7139
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7140
   * urls during img[src] sanitization.                                                                                // 7141
   *                                                                                                                   // 7142
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 7143
   *                                                                                                                   // 7144
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 7145
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 7146
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7147
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7148
   *                                                                                                                   // 7149
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7150
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7151
   *    chaining otherwise.                                                                                            // 7152
   */                                                                                                                  // 7153
  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 7154
    if (isDefined(regexp)) {                                                                                           // 7155
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);                                                       // 7156
      return this;                                                                                                     // 7157
    } else {                                                                                                           // 7158
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();                                                      // 7159
    }                                                                                                                  // 7160
  };                                                                                                                   // 7161
                                                                                                                       // 7162
  /**                                                                                                                  // 7163
   * @ngdoc method                                                                                                     // 7164
   * @name  $compileProvider#debugInfoEnabled                                                                          // 7165
   *                                                                                                                   // 7166
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the                // 7167
   * current debugInfoEnabled state                                                                                    // 7168
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 7169
   *                                                                                                                   // 7170
   * @kind function                                                                                                    // 7171
   *                                                                                                                   // 7172
   * @description                                                                                                      // 7173
   * Call this method to enable/disable various debug runtime information in the compiler such as adding               // 7174
   * binding information and a reference to the current scope on to DOM elements.                                      // 7175
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope                 // 7176
   * * `ng-binding` CSS class                                                                                          // 7177
   * * `$binding` data property containing an array of the binding expressions                                         // 7178
   *                                                                                                                   // 7179
   * You may want to disable this in production for a significant performance boost. See                               // 7180
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.                                      // 7181
   *                                                                                                                   // 7182
   * The default value is true.                                                                                        // 7183
   */                                                                                                                  // 7184
  var debugInfoEnabled = true;                                                                                         // 7185
  this.debugInfoEnabled = function(enabled) {                                                                          // 7186
    if (isDefined(enabled)) {                                                                                          // 7187
      debugInfoEnabled = enabled;                                                                                      // 7188
      return this;                                                                                                     // 7189
    }                                                                                                                  // 7190
    return debugInfoEnabled;                                                                                           // 7191
  };                                                                                                                   // 7192
                                                                                                                       // 7193
  this.$get = [                                                                                                        // 7194
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',                            // 7195
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',                             // 7196
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,                             // 7197
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {                            // 7198
                                                                                                                       // 7199
    var Attributes = function(element, attributesToCopy) {                                                             // 7200
      if (attributesToCopy) {                                                                                          // 7201
        var keys = Object.keys(attributesToCopy);                                                                      // 7202
        var i, l, key;                                                                                                 // 7203
                                                                                                                       // 7204
        for (i = 0, l = keys.length; i < l; i++) {                                                                     // 7205
          key = keys[i];                                                                                               // 7206
          this[key] = attributesToCopy[key];                                                                           // 7207
        }                                                                                                              // 7208
      } else {                                                                                                         // 7209
        this.$attr = {};                                                                                               // 7210
      }                                                                                                                // 7211
                                                                                                                       // 7212
      this.$$element = element;                                                                                        // 7213
    };                                                                                                                 // 7214
                                                                                                                       // 7215
    Attributes.prototype = {                                                                                           // 7216
      /**                                                                                                              // 7217
       * @ngdoc method                                                                                                 // 7218
       * @name $compile.directive.Attributes#$normalize                                                                // 7219
       * @kind function                                                                                                // 7220
       *                                                                                                               // 7221
       * @description                                                                                                  // 7222
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or     // 7223
       * `data-`) to its normalized, camelCase form.                                                                   // 7224
       *                                                                                                               // 7225
       * Also there is special case for Moz prefix starting with upper case letter.                                    // 7226
       *                                                                                                               // 7227
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *                                                                                                               // 7229
       * @param {string} name Name to normalize                                                                        // 7230
       */                                                                                                              // 7231
      $normalize: directiveNormalize,                                                                                  // 7232
                                                                                                                       // 7233
                                                                                                                       // 7234
      /**                                                                                                              // 7235
       * @ngdoc method                                                                                                 // 7236
       * @name $compile.directive.Attributes#$addClass                                                                 // 7237
       * @kind function                                                                                                // 7238
       *                                                                                                               // 7239
       * @description                                                                                                  // 7240
       * Adds the CSS class value specified by the classVal parameter to the element. If animations                    // 7241
       * are enabled then an animation will be triggered for the class addition.                                       // 7242
       *                                                                                                               // 7243
       * @param {string} classVal The className value that will be added to the element                                // 7244
       */                                                                                                              // 7245
      $addClass: function(classVal) {                                                                                  // 7246
        if (classVal && classVal.length > 0) {                                                                         // 7247
          $animate.addClass(this.$$element, classVal);                                                                 // 7248
        }                                                                                                              // 7249
      },                                                                                                               // 7250
                                                                                                                       // 7251
      /**                                                                                                              // 7252
       * @ngdoc method                                                                                                 // 7253
       * @name $compile.directive.Attributes#$removeClass                                                              // 7254
       * @kind function                                                                                                // 7255
       *                                                                                                               // 7256
       * @description                                                                                                  // 7257
       * Removes the CSS class value specified by the classVal parameter from the element. If                          // 7258
       * animations are enabled then an animation will be triggered for the class removal.                             // 7259
       *                                                                                                               // 7260
       * @param {string} classVal The className value that will be removed from the element                            // 7261
       */                                                                                                              // 7262
      $removeClass: function(classVal) {                                                                               // 7263
        if (classVal && classVal.length > 0) {                                                                         // 7264
          $animate.removeClass(this.$$element, classVal);                                                              // 7265
        }                                                                                                              // 7266
      },                                                                                                               // 7267
                                                                                                                       // 7268
      /**                                                                                                              // 7269
       * @ngdoc method                                                                                                 // 7270
       * @name $compile.directive.Attributes#$updateClass                                                              // 7271
       * @kind function                                                                                                // 7272
       *                                                                                                               // 7273
       * @description                                                                                                  // 7274
       * Adds and removes the appropriate CSS class values to the element based on the difference                      // 7275
       * between the new and old CSS class values (specified as newClasses and oldClasses).                            // 7276
       *                                                                                                               // 7277
       * @param {string} newClasses The current CSS className value                                                    // 7278
       * @param {string} oldClasses The former CSS className value                                                     // 7279
       */                                                                                                              // 7280
      $updateClass: function(newClasses, oldClasses) {                                                                 // 7281
        var toAdd = tokenDifference(newClasses, oldClasses);                                                           // 7282
        if (toAdd && toAdd.length) {                                                                                   // 7283
          $animate.addClass(this.$$element, toAdd);                                                                    // 7284
        }                                                                                                              // 7285
                                                                                                                       // 7286
        var toRemove = tokenDifference(oldClasses, newClasses);                                                        // 7287
        if (toRemove && toRemove.length) {                                                                             // 7288
          $animate.removeClass(this.$$element, toRemove);                                                              // 7289
        }                                                                                                              // 7290
      },                                                                                                               // 7291
                                                                                                                       // 7292
      /**                                                                                                              // 7293
       * Set a normalized attribute on the element in a way such that all directives                                   // 7294
       * can share the attribute. This function properly handles boolean attributes.                                   // 7295
       * @param {string} key Normalized key. (ie ngAttribute)                                                          // 7296
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.                          // 7297
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.                      // 7298
       *     Defaults to true.                                                                                         // 7299
       * @param {string=} attrName Optional none normalized name. Defaults to key.                                     // 7300
       */                                                                                                              // 7301
      $set: function(key, value, writeAttr, attrName) {                                                                // 7302
        // TODO: decide whether or not to throw an error if "class"                                                    // 7303
        //is set through this function since it may cause $updateClass to                                              // 7304
        //become unstable.                                                                                             // 7305
                                                                                                                       // 7306
        var node = this.$$element[0],                                                                                  // 7307
            booleanKey = getBooleanAttrName(node, key),                                                                // 7308
            aliasedKey = getAliasedAttrName(key),                                                                      // 7309
            observer = key,                                                                                            // 7310
            nodeName;                                                                                                  // 7311
                                                                                                                       // 7312
        if (booleanKey) {                                                                                              // 7313
          this.$$element.prop(key, value);                                                                             // 7314
          attrName = booleanKey;                                                                                       // 7315
        } else if (aliasedKey) {                                                                                       // 7316
          this[aliasedKey] = value;                                                                                    // 7317
          observer = aliasedKey;                                                                                       // 7318
        }                                                                                                              // 7319
                                                                                                                       // 7320
        this[key] = value;                                                                                             // 7321
                                                                                                                       // 7322
        // translate normalized key to actual key                                                                      // 7323
        if (attrName) {                                                                                                // 7324
          this.$attr[key] = attrName;                                                                                  // 7325
        } else {                                                                                                       // 7326
          attrName = this.$attr[key];                                                                                  // 7327
          if (!attrName) {                                                                                             // 7328
            this.$attr[key] = attrName = snake_case(key, '-');                                                         // 7329
          }                                                                                                            // 7330
        }                                                                                                              // 7331
                                                                                                                       // 7332
        nodeName = nodeName_(this.$$element);                                                                          // 7333
                                                                                                                       // 7334
        if ((nodeName === 'a' && key === 'href') ||                                                                    // 7335
            (nodeName === 'img' && key === 'src')) {                                                                   // 7336
          // sanitize a[href] and img[src] values                                                                      // 7337
          this[key] = value = $$sanitizeUri(value, key === 'src');                                                     // 7338
        } else if (nodeName === 'img' && key === 'srcset') {                                                           // 7339
          // sanitize img[srcset] values                                                                               // 7340
          var result = "";                                                                                             // 7341
                                                                                                                       // 7342
          // first check if there are spaces because it's not the same pattern                                         // 7343
          var trimmedSrcset = trim(value);                                                                             // 7344
          //                (   999x   ,|   999w   ,|   ,|,   )                                                        // 7345
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;                                                      // 7346
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;                                                 // 7347
                                                                                                                       // 7348
          // split srcset into tuple of uri and descriptor except for the last item                                    // 7349
          var rawUris = trimmedSrcset.split(pattern);                                                                  // 7350
                                                                                                                       // 7351
          // for each tuples                                                                                           // 7352
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);                                                      // 7353
          for (var i = 0; i < nbrUrisWith2parts; i++) {                                                                // 7354
            var innerIdx = i * 2;                                                                                      // 7355
            // sanitize the uri                                                                                        // 7356
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);                                                    // 7357
            // add the descriptor                                                                                      // 7358
            result += (" " + trim(rawUris[innerIdx + 1]));                                                             // 7359
          }                                                                                                            // 7360
                                                                                                                       // 7361
          // split the last item into uri and descriptor                                                               // 7362
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);                                                            // 7363
                                                                                                                       // 7364
          // sanitize the last uri                                                                                     // 7365
          result += $$sanitizeUri(trim(lastTuple[0]), true);                                                           // 7366
                                                                                                                       // 7367
          // and add the last descriptor if any                                                                        // 7368
          if (lastTuple.length === 2) {                                                                                // 7369
            result += (" " + trim(lastTuple[1]));                                                                      // 7370
          }                                                                                                            // 7371
          this[key] = value = result;                                                                                  // 7372
        }                                                                                                              // 7373
                                                                                                                       // 7374
        if (writeAttr !== false) {                                                                                     // 7375
          if (value === null || isUndefined(value)) {                                                                  // 7376
            this.$$element.removeAttr(attrName);                                                                       // 7377
          } else {                                                                                                     // 7378
            this.$$element.attr(attrName, value);                                                                      // 7379
          }                                                                                                            // 7380
        }                                                                                                              // 7381
                                                                                                                       // 7382
        // fire observers                                                                                              // 7383
        var $$observers = this.$$observers;                                                                            // 7384
        $$observers && forEach($$observers[observer], function(fn) {                                                   // 7385
          try {                                                                                                        // 7386
            fn(value);                                                                                                 // 7387
          } catch (e) {                                                                                                // 7388
            $exceptionHandler(e);                                                                                      // 7389
          }                                                                                                            // 7390
        });                                                                                                            // 7391
      },                                                                                                               // 7392
                                                                                                                       // 7393
                                                                                                                       // 7394
      /**                                                                                                              // 7395
       * @ngdoc method                                                                                                 // 7396
       * @name $compile.directive.Attributes#$observe                                                                  // 7397
       * @kind function                                                                                                // 7398
       *                                                                                                               // 7399
       * @description                                                                                                  // 7400
       * Observes an interpolated attribute.                                                                           // 7401
       *                                                                                                               // 7402
       * The observer function will be invoked once during the next `$digest` following                                // 7403
       * compilation. The observer is then invoked whenever the interpolated value                                     // 7404
       * changes.                                                                                                      // 7405
       *                                                                                                               // 7406
       * @param {string} key Normalized key. (ie ngAttribute) .                                                        // 7407
       * @param {function(interpolatedValue)} fn Function that will be called whenever                                 // 7408
                the interpolated value of the attribute changes.                                                       // 7409
       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.            // 7410
       * @returns {function()} Returns a deregistration function for this observer.                                    // 7411
       */                                                                                                              // 7412
      $observe: function(key, fn) {                                                                                    // 7413
        var attrs = this,                                                                                              // 7414
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),                                    // 7415
            listeners = ($$observers[key] || ($$observers[key] = []));                                                 // 7416
                                                                                                                       // 7417
        listeners.push(fn);                                                                                            // 7418
        $rootScope.$evalAsync(function() {                                                                             // 7419
          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {                           // 7420
            // no one registered attribute interpolation function, so lets call it manually                            // 7421
            fn(attrs[key]);                                                                                            // 7422
          }                                                                                                            // 7423
        });                                                                                                            // 7424
                                                                                                                       // 7425
        return function() {                                                                                            // 7426
          arrayRemove(listeners, fn);                                                                                  // 7427
        };                                                                                                             // 7428
      }                                                                                                                // 7429
    };                                                                                                                 // 7430
                                                                                                                       // 7431
                                                                                                                       // 7432
    function safeAddClass($element, className) {                                                                       // 7433
      try {                                                                                                            // 7434
        $element.addClass(className);                                                                                  // 7435
      } catch (e) {                                                                                                    // 7436
        // ignore, since it means that we are trying to set class on                                                   // 7437
        // SVG element, where class name is read-only.                                                                 // 7438
      }                                                                                                                // 7439
    }                                                                                                                  // 7440
                                                                                                                       // 7441
                                                                                                                       // 7442
    var startSymbol = $interpolate.startSymbol(),                                                                      // 7443
        endSymbol = $interpolate.endSymbol(),                                                                          // 7444
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')                                              // 7445
            ? identity                                                                                                 // 7446
            : function denormalizeTemplate(template) {                                                                 // 7447
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);                                 // 7448
        },                                                                                                             // 7449
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;                                                                              // 7450
                                                                                                                       // 7451
    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {                       // 7452
      var bindings = $element.data('$binding') || [];                                                                  // 7453
                                                                                                                       // 7454
      if (isArray(binding)) {                                                                                          // 7455
        bindings = bindings.concat(binding);                                                                           // 7456
      } else {                                                                                                         // 7457
        bindings.push(binding);                                                                                        // 7458
      }                                                                                                                // 7459
                                                                                                                       // 7460
      $element.data('$binding', bindings);                                                                             // 7461
    } : noop;                                                                                                          // 7462
                                                                                                                       // 7463
    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {                              // 7464
      safeAddClass($element, 'ng-binding');                                                                            // 7465
    } : noop;                                                                                                          // 7466
                                                                                                                       // 7467
    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {       // 7468
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';                 // 7469
      $element.data(dataName, scope);                                                                                  // 7470
    } : noop;                                                                                                          // 7471
                                                                                                                       // 7472
    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {                        // 7473
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');                                              // 7474
    } : noop;                                                                                                          // 7475
                                                                                                                       // 7476
    return compile;                                                                                                    // 7477
                                                                                                                       // 7478
    //================================                                                                                 // 7479
                                                                                                                       // 7480
    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,                                        // 7481
                        previousCompileContext) {                                                                      // 7482
      if (!($compileNodes instanceof jqLite)) {                                                                        // 7483
        // jquery always rewraps, whereas we need to preserve the original selector so that we can                     // 7484
        // modify it.                                                                                                  // 7485
        $compileNodes = jqLite($compileNodes);                                                                         // 7486
      }                                                                                                                // 7487
      // We can not compile top level text elements since text nodes can be merged and we will                         // 7488
      // not be able to attach scope data to them, so we will wrap them in <span>                                      // 7489
      forEach($compileNodes, function(node, index) {                                                                   // 7490
        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {                         // 7491
          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];                                       // 7492
        }                                                                                                              // 7493
      });                                                                                                              // 7494
      var compositeLinkFn =                                                                                            // 7495
              compileNodes($compileNodes, transcludeFn, $compileNodes,                                                 // 7496
                           maxPriority, ignoreDirective, previousCompileContext);                                      // 7497
      compile.$$addScopeClass($compileNodes);                                                                          // 7498
      var namespace = null;                                                                                            // 7499
      return function publicLinkFn(scope, cloneConnectFn, options) {                                                   // 7500
        assertArg(scope, 'scope');                                                                                     // 7501
                                                                                                                       // 7502
        options = options || {};                                                                                       // 7503
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,                                                 // 7504
          transcludeControllers = options.transcludeControllers,                                                       // 7505
          futureParentElement = options.futureParentElement;                                                           // 7506
                                                                                                                       // 7507
        // When `parentBoundTranscludeFn` is passed, it is a                                                           // 7508
        // `controllersBoundTransclude` function (it was previously passed                                             // 7509
        // as `transclude` to directive.link) so we must unwrap it to get                                              // 7510
        // its `boundTranscludeFn`                                                                                     // 7511
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {                                    // 7512
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;                                         // 7513
        }                                                                                                              // 7514
                                                                                                                       // 7515
        if (!namespace) {                                                                                              // 7516
          namespace = detectNamespaceForChildElements(futureParentElement);                                            // 7517
        }                                                                                                              // 7518
        var $linkNode;                                                                                                 // 7519
        if (namespace !== 'html') {                                                                                    // 7520
          // When using a directive with replace:true and templateUrl the $compileNodes                                // 7521
          // (or a child element inside of them)                                                                       // 7522
          // might change, so we need to recreate the namespace adapted compileNodes                                   // 7523
          // for call to the link function.                                                                            // 7524
          // Note: This will already clone the nodes...                                                                // 7525
          $linkNode = jqLite(                                                                                          // 7526
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())                                      // 7527
          );                                                                                                           // 7528
        } else if (cloneConnectFn) {                                                                                   // 7529
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart                   // 7530
          // and sometimes changes the structure of the DOM.                                                           // 7531
          $linkNode = JQLitePrototype.clone.call($compileNodes);                                                       // 7532
        } else {                                                                                                       // 7533
          $linkNode = $compileNodes;                                                                                   // 7534
        }                                                                                                              // 7535
                                                                                                                       // 7536
        if (transcludeControllers) {                                                                                   // 7537
          for (var controllerName in transcludeControllers) {                                                          // 7538
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);       // 7539
          }                                                                                                            // 7540
        }                                                                                                              // 7541
                                                                                                                       // 7542
        compile.$$addScopeInfo($linkNode, scope);                                                                      // 7543
                                                                                                                       // 7544
        if (cloneConnectFn) cloneConnectFn($linkNode, scope);                                                          // 7545
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);                    // 7546
        return $linkNode;                                                                                              // 7547
      };                                                                                                               // 7548
    }                                                                                                                  // 7549
                                                                                                                       // 7550
    function detectNamespaceForChildElements(parentElement) {                                                          // 7551
      // TODO: Make this detect MathML as well...                                                                      // 7552
      var node = parentElement && parentElement[0];                                                                    // 7553
      if (!node) {                                                                                                     // 7554
        return 'html';                                                                                                 // 7555
      } else {                                                                                                         // 7556
        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';                   // 7557
      }                                                                                                                // 7558
    }                                                                                                                  // 7559
                                                                                                                       // 7560
    /**                                                                                                                // 7561
     * Compile function matches each node in nodeList against the directives. Once all directives                      // 7562
     * for a particular node are collected their compile functions are executed. The compile                           // 7563
     * functions return values - the linking functions - are combined into a composite linking                         // 7564
     * function, which is the a linking function for the node.                                                         // 7565
     *                                                                                                                 // 7566
     * @param {NodeList} nodeList an array of nodes or NodeList to compile                                             // 7567
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7568
     *        scope argument is auto-generated to the new child of the transcluded parent scope.                       // 7569
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then                      // 7570
     *        the rootElement must be set the jqLite collection of the compile root. This is                           // 7571
     *        needed so that the jqLite collection items can be replaced with widgets.                                 // 7572
     * @param {number=} maxPriority Max directive priority.                                                            // 7573
     * @returns {Function} A composite linking function of all of the matched directives or null.                      // 7574
     */                                                                                                                // 7575
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,                          // 7576
                            previousCompileContext) {                                                                  // 7577
      var linkFns = [],                                                                                                // 7578
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;                        // 7579
                                                                                                                       // 7580
      for (var i = 0; i < nodeList.length; i++) {                                                                      // 7581
        attrs = new Attributes();                                                                                      // 7582
                                                                                                                       // 7583
        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.                          // 7584
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,                      // 7585
                                        ignoreDirective);                                                              // 7586
                                                                                                                       // 7587
        nodeLinkFn = (directives.length)                                                                               // 7588
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,                        // 7589
                                      null, [], [], previousCompileContext)                                            // 7590
            : null;                                                                                                    // 7591
                                                                                                                       // 7592
        if (nodeLinkFn && nodeLinkFn.scope) {                                                                          // 7593
          compile.$$addScopeClass(attrs.$$element);                                                                    // 7594
        }                                                                                                              // 7595
                                                                                                                       // 7596
        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||                                                            // 7597
                      !(childNodes = nodeList[i].childNodes) ||                                                        // 7598
                      !childNodes.length)                                                                              // 7599
            ? null                                                                                                     // 7600
            : compileNodes(childNodes,                                                                                 // 7601
                 nodeLinkFn ? (                                                                                        // 7602
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)                            // 7603
                     && nodeLinkFn.transclude) : transcludeFn);                                                        // 7604
                                                                                                                       // 7605
        if (nodeLinkFn || childLinkFn) {                                                                               // 7606
          linkFns.push(i, nodeLinkFn, childLinkFn);                                                                    // 7607
          linkFnFound = true;                                                                                          // 7608
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;                                                             // 7609
        }                                                                                                              // 7610
                                                                                                                       // 7611
        //use the previous context only for the first element in the virtual group                                     // 7612
        previousCompileContext = null;                                                                                 // 7613
      }                                                                                                                // 7614
                                                                                                                       // 7615
      // return a linking function if we have found anything, null otherwise                                           // 7616
      return linkFnFound ? compositeLinkFn : null;                                                                     // 7617
                                                                                                                       // 7618
      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {                               // 7619
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;                             // 7620
        var stableNodeList;                                                                                            // 7621
                                                                                                                       // 7622
                                                                                                                       // 7623
        if (nodeLinkFnFound) {                                                                                         // 7624
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our                    // 7625
          // offsets don't get screwed up                                                                              // 7626
          var nodeListLength = nodeList.length;                                                                        // 7627
          stableNodeList = new Array(nodeListLength);                                                                  // 7628
                                                                                                                       // 7629
          // create a sparse array by only copying the elements which have a linkFn                                    // 7630
          for (i = 0; i < linkFns.length; i+=3) {                                                                      // 7631
            idx = linkFns[i];                                                                                          // 7632
            stableNodeList[idx] = nodeList[idx];                                                                       // 7633
          }                                                                                                            // 7634
        } else {                                                                                                       // 7635
          stableNodeList = nodeList;                                                                                   // 7636
        }                                                                                                              // 7637
                                                                                                                       // 7638
        for (i = 0, ii = linkFns.length; i < ii;) {                                                                    // 7639
          node = stableNodeList[linkFns[i++]];                                                                         // 7640
          nodeLinkFn = linkFns[i++];                                                                                   // 7641
          childLinkFn = linkFns[i++];                                                                                  // 7642
                                                                                                                       // 7643
          if (nodeLinkFn) {                                                                                            // 7644
            if (nodeLinkFn.scope) {                                                                                    // 7645
              childScope = scope.$new();                                                                               // 7646
              compile.$$addScopeInfo(jqLite(node), childScope);                                                        // 7647
              var destroyBindings = nodeLinkFn.$$destroyBindings;                                                      // 7648
              if (destroyBindings) {                                                                                   // 7649
                nodeLinkFn.$$destroyBindings = null;                                                                   // 7650
                childScope.$on('$destroyed', destroyBindings);                                                         // 7651
              }                                                                                                        // 7652
            } else {                                                                                                   // 7653
              childScope = scope;                                                                                      // 7654
            }                                                                                                          // 7655
                                                                                                                       // 7656
            if (nodeLinkFn.transcludeOnThisElement) {                                                                  // 7657
              childBoundTranscludeFn = createBoundTranscludeFn(                                                        // 7658
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);                                              // 7659
                                                                                                                       // 7660
            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {                                 // 7661
              childBoundTranscludeFn = parentBoundTranscludeFn;                                                        // 7662
                                                                                                                       // 7663
            } else if (!parentBoundTranscludeFn && transcludeFn) {                                                     // 7664
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);                                   // 7665
                                                                                                                       // 7666
            } else {                                                                                                   // 7667
              childBoundTranscludeFn = null;                                                                           // 7668
            }                                                                                                          // 7669
                                                                                                                       // 7670
            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn,                            // 7671
                       nodeLinkFn);                                                                                    // 7672
                                                                                                                       // 7673
          } else if (childLinkFn) {                                                                                    // 7674
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);                                   // 7675
          }                                                                                                            // 7676
        }                                                                                                              // 7677
      }                                                                                                                // 7678
    }                                                                                                                  // 7679
                                                                                                                       // 7680
    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {                                 // 7681
                                                                                                                       // 7682
      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) { // 7683
                                                                                                                       // 7684
        if (!transcludedScope) {                                                                                       // 7685
          transcludedScope = scope.$new(false, containingScope);                                                       // 7686
          transcludedScope.$$transcluded = true;                                                                       // 7687
        }                                                                                                              // 7688
                                                                                                                       // 7689
        return transcludeFn(transcludedScope, cloneFn, {                                                               // 7690
          parentBoundTranscludeFn: previousBoundTranscludeFn,                                                          // 7691
          transcludeControllers: controllers,                                                                          // 7692
          futureParentElement: futureParentElement                                                                     // 7693
        });                                                                                                            // 7694
      };                                                                                                               // 7695
                                                                                                                       // 7696
      return boundTranscludeFn;                                                                                        // 7697
    }                                                                                                                  // 7698
                                                                                                                       // 7699
    /**                                                                                                                // 7700
     * Looks for directives on the given node and adds them to the directive collection which is                       // 7701
     * sorted.                                                                                                         // 7702
     *                                                                                                                 // 7703
     * @param node Node to search.                                                                                     // 7704
     * @param directives An array to which the directives are added to. This array is sorted before                    // 7705
     *        the function returns.                                                                                    // 7706
     * @param attrs The shared attrs object which is used to populate the normalized attributes.                       // 7707
     * @param {number=} maxPriority Max directive priority.                                                            // 7708
     */                                                                                                                // 7709
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {                                // 7710
      var nodeType = node.nodeType,                                                                                    // 7711
          attrsMap = attrs.$attr,                                                                                      // 7712
          match,                                                                                                       // 7713
          className;                                                                                                   // 7714
                                                                                                                       // 7715
      switch (nodeType) {                                                                                              // 7716
        case NODE_TYPE_ELEMENT: /* Element */                                                                          // 7717
          // use the node name: <directive>                                                                            // 7718
          addDirective(directives,                                                                                     // 7719
              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);                                 // 7720
                                                                                                                       // 7721
          // iterate over the attributes                                                                               // 7722
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,                           // 7723
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {                                                 // 7724
            var attrStartName = false;                                                                                 // 7725
            var attrEndName = false;                                                                                   // 7726
                                                                                                                       // 7727
            attr = nAttrs[j];                                                                                          // 7728
            name = attr.name;                                                                                          // 7729
            value = trim(attr.value);                                                                                  // 7730
                                                                                                                       // 7731
            // support ngAttr attribute binding                                                                        // 7732
            ngAttrName = directiveNormalize(name);                                                                     // 7733
            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {                                                         // 7734
              name = name.replace(PREFIX_REGEXP, '')                                                                   // 7735
                .substr(8).replace(/_(.)/g, function(match, letter) {                                                  // 7736
                  return letter.toUpperCase();                                                                         // 7737
                });                                                                                                    // 7738
            }                                                                                                          // 7739
                                                                                                                       // 7740
            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');                                               // 7741
            if (directiveIsMultiElement(directiveNName)) {                                                             // 7742
              if (ngAttrName === directiveNName + 'Start') {                                                           // 7743
                attrStartName = name;                                                                                  // 7744
                attrEndName = name.substr(0, name.length - 5) + 'end';                                                 // 7745
                name = name.substr(0, name.length - 6);                                                                // 7746
              }                                                                                                        // 7747
            }                                                                                                          // 7748
                                                                                                                       // 7749
            nName = directiveNormalize(name.toLowerCase());                                                            // 7750
            attrsMap[nName] = name;                                                                                    // 7751
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {                                                            // 7752
                attrs[nName] = value;                                                                                  // 7753
                if (getBooleanAttrName(node, nName)) {                                                                 // 7754
                  attrs[nName] = true; // presence means true                                                          // 7755
                }                                                                                                      // 7756
            }                                                                                                          // 7757
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);                                     // 7758
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,                          // 7759
                          attrEndName);                                                                                // 7760
          }                                                                                                            // 7761
                                                                                                                       // 7762
          // use class as directive                                                                                    // 7763
          className = node.className;                                                                                  // 7764
          if (isObject(className)) {                                                                                   // 7765
              // Maybe SVGAnimatedString                                                                               // 7766
              className = className.animVal;                                                                           // 7767
          }                                                                                                            // 7768
          if (isString(className) && className !== '') {                                                               // 7769
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {                                                   // 7770
              nName = directiveNormalize(match[2]);                                                                    // 7771
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {                                // 7772
                attrs[nName] = trim(match[3]);                                                                         // 7773
              }                                                                                                        // 7774
              className = className.substr(match.index + match[0].length);                                             // 7775
            }                                                                                                          // 7776
          }                                                                                                            // 7777
          break;                                                                                                       // 7778
        case NODE_TYPE_TEXT: /* Text Node */                                                                           // 7779
          if (msie === 11) {                                                                                           // 7780
            // Workaround for #11781                                                                                   // 7781
            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {              // 7782
              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;                                            // 7783
              node.parentNode.removeChild(node.nextSibling);                                                           // 7784
            }                                                                                                          // 7785
          }                                                                                                            // 7786
          addTextInterpolateDirective(directives, node.nodeValue);                                                     // 7787
          break;                                                                                                       // 7788
        case NODE_TYPE_COMMENT: /* Comment */                                                                          // 7789
          try {                                                                                                        // 7790
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);                                                     // 7791
            if (match) {                                                                                               // 7792
              nName = directiveNormalize(match[1]);                                                                    // 7793
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {                                // 7794
                attrs[nName] = trim(match[2]);                                                                         // 7795
              }                                                                                                        // 7796
            }                                                                                                          // 7797
          } catch (e) {                                                                                                // 7798
            // turns out that under some circumstances IE9 throws errors when one attempts to read                     // 7799
            // comment's node value.                                                                                   // 7800
            // Just ignore it and continue. (Can't seem to reproduce in test case.)                                    // 7801
          }                                                                                                            // 7802
          break;                                                                                                       // 7803
      }                                                                                                                // 7804
                                                                                                                       // 7805
      directives.sort(byPriority);                                                                                     // 7806
      return directives;                                                                                               // 7807
    }                                                                                                                  // 7808
                                                                                                                       // 7809
    /**                                                                                                                // 7810
     * Given a node with an directive-start it collects all of the siblings until it finds                             // 7811
     * directive-end.                                                                                                  // 7812
     * @param node                                                                                                     // 7813
     * @param attrStart                                                                                                // 7814
     * @param attrEnd                                                                                                  // 7815
     * @returns {*}                                                                                                    // 7816
     */                                                                                                                // 7817
    function groupScan(node, attrStart, attrEnd) {                                                                     // 7818
      var nodes = [];                                                                                                  // 7819
      var depth = 0;                                                                                                   // 7820
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {                                            // 7821
        do {                                                                                                           // 7822
          if (!node) {                                                                                                 // 7823
            throw $compileMinErr('uterdir',                                                                            // 7824
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",                              // 7825
                      attrStart, attrEnd);                                                                             // 7826
          }                                                                                                            // 7827
          if (node.nodeType == NODE_TYPE_ELEMENT) {                                                                    // 7828
            if (node.hasAttribute(attrStart)) depth++;                                                                 // 7829
            if (node.hasAttribute(attrEnd)) depth--;                                                                   // 7830
          }                                                                                                            // 7831
          nodes.push(node);                                                                                            // 7832
          node = node.nextSibling;                                                                                     // 7833
        } while (depth > 0);                                                                                           // 7834
      } else {                                                                                                         // 7835
        nodes.push(node);                                                                                              // 7836
      }                                                                                                                // 7837
                                                                                                                       // 7838
      return jqLite(nodes);                                                                                            // 7839
    }                                                                                                                  // 7840
                                                                                                                       // 7841
    /**                                                                                                                // 7842
     * Wrapper for linking function which converts normal linking function into a grouped                              // 7843
     * linking function.                                                                                               // 7844
     * @param linkFn                                                                                                   // 7845
     * @param attrStart                                                                                                // 7846
     * @param attrEnd                                                                                                  // 7847
     * @returns {Function}                                                                                             // 7848
     */                                                                                                                // 7849
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {                                                  // 7850
      return function(scope, element, attrs, controllers, transcludeFn) {                                              // 7851
        element = groupScan(element[0], attrStart, attrEnd);                                                           // 7852
        return linkFn(scope, element, attrs, controllers, transcludeFn);                                               // 7853
      };                                                                                                               // 7854
    }                                                                                                                  // 7855
                                                                                                                       // 7856
    /**                                                                                                                // 7857
     * Once the directives have been collected, their compile functions are executed. This method                      // 7858
     * is responsible for inlining directive templates as well as terminating the application                          // 7859
     * of the directives if the terminal directive has been reached.                                                   // 7860
     *                                                                                                                 // 7861
     * @param {Array} directives Array of collected directives to execute their compile function.                      // 7862
     *        this needs to be pre-sorted by priority order.                                                           // 7863
     * @param {Node} compileNode The raw DOM node to apply the compile functions to                                    // 7864
     * @param {Object} templateAttrs The shared attribute function                                                     // 7865
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7866
     *                                                  scope argument is auto-generated to the new                    // 7867
     *                                                  child of the transcluded parent scope.                         // 7868
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this                        // 7869
     *                              argument has the root jqLite array so that we can replace nodes                    // 7870
     *                              on it.                                                                             // 7871
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when                       // 7872
     *                                           compiling the transclusion.                                           // 7873
     * @param {Array.<Function>} preLinkFns                                                                            // 7874
     * @param {Array.<Function>} postLinkFns                                                                           // 7875
     * @param {Object} previousCompileContext Context used for previous compilation of the current                     // 7876
     *                                        node                                                                     // 7877
     * @returns {Function} linkFn                                                                                      // 7878
     */                                                                                                                // 7879
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,                               // 7880
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,                    // 7881
                                   previousCompileContext) {                                                           // 7882
      previousCompileContext = previousCompileContext || {};                                                           // 7883
                                                                                                                       // 7884
      var terminalPriority = -Number.MAX_VALUE,                                                                        // 7885
          newScopeDirective = previousCompileContext.newScopeDirective,                                                // 7886
          controllerDirectives = previousCompileContext.controllerDirectives,                                          // 7887
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,                                  // 7888
          templateDirective = previousCompileContext.templateDirective,                                                // 7889
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,                                // 7890
          hasTranscludeDirective = false,                                                                              // 7891
          hasTemplate = false,                                                                                         // 7892
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,                        // 7893
          $compileNode = templateAttrs.$$element = jqLite(compileNode),                                                // 7894
          directive,                                                                                                   // 7895
          directiveName,                                                                                               // 7896
          $template,                                                                                                   // 7897
          replaceDirective = originalReplaceDirective,                                                                 // 7898
          childTranscludeFn = transcludeFn,                                                                            // 7899
          linkFn,                                                                                                      // 7900
          directiveValue;                                                                                              // 7901
                                                                                                                       // 7902
      // executes all directives on the current element                                                                // 7903
      for (var i = 0, ii = directives.length; i < ii; i++) {                                                           // 7904
        directive = directives[i];                                                                                     // 7905
        var attrStart = directive.$$start;                                                                             // 7906
        var attrEnd = directive.$$end;                                                                                 // 7907
                                                                                                                       // 7908
        // collect multiblock sections                                                                                 // 7909
        if (attrStart) {                                                                                               // 7910
          $compileNode = groupScan(compileNode, attrStart, attrEnd);                                                   // 7911
        }                                                                                                              // 7912
        $template = undefined;                                                                                         // 7913
                                                                                                                       // 7914
        if (terminalPriority > directive.priority) {                                                                   // 7915
          break; // prevent further processing of directives                                                           // 7916
        }                                                                                                              // 7917
                                                                                                                       // 7918
        if (directiveValue = directive.scope) {                                                                        // 7919
                                                                                                                       // 7920
          // skip the check for directives with async templates, we'll check the derived sync                          // 7921
          // directive when the template arrives                                                                       // 7922
          if (!directive.templateUrl) {                                                                                // 7923
            if (isObject(directiveValue)) {                                                                            // 7924
              // This directive is trying to add an isolated scope.                                                    // 7925
              // Check that there is no scope of any kind already                                                      // 7926
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,                   // 7927
                                directive, $compileNode);                                                              // 7928
              newIsolateScopeDirective = directive;                                                                    // 7929
            } else {                                                                                                   // 7930
              // This directive is trying to add a child scope.                                                        // 7931
              // Check that there is no isolated scope already                                                         // 7932
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,                             // 7933
                                $compileNode);                                                                         // 7934
            }                                                                                                          // 7935
          }                                                                                                            // 7936
                                                                                                                       // 7937
          newScopeDirective = newScopeDirective || directive;                                                          // 7938
        }                                                                                                              // 7939
                                                                                                                       // 7940
        directiveName = directive.name;                                                                                // 7941
                                                                                                                       // 7942
        if (!directive.templateUrl && directive.controller) {                                                          // 7943
          directiveValue = directive.controller;                                                                       // 7944
          controllerDirectives = controllerDirectives || createMap();                                                  // 7945
          assertNoDuplicate("'" + directiveName + "' controller",                                                      // 7946
              controllerDirectives[directiveName], directive, $compileNode);                                           // 7947
          controllerDirectives[directiveName] = directive;                                                             // 7948
        }                                                                                                              // 7949
                                                                                                                       // 7950
        if (directiveValue = directive.transclude) {                                                                   // 7951
          hasTranscludeDirective = true;                                                                               // 7952
                                                                                                                       // 7953
          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.                    // 7954
          // This option should only be used by directives that know how to safely handle element transclusion,        // 7955
          // where the transcluded nodes are added or replaced after linking.                                          // 7956
          if (!directive.$$tlb) {                                                                                      // 7957
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);                     // 7958
            nonTlbTranscludeDirective = directive;                                                                     // 7959
          }                                                                                                            // 7960
                                                                                                                       // 7961
          if (directiveValue == 'element') {                                                                           // 7962
            hasElementTranscludeDirective = true;                                                                      // 7963
            terminalPriority = directive.priority;                                                                     // 7964
            $template = $compileNode;                                                                                  // 7965
            $compileNode = templateAttrs.$$element =                                                                   // 7966
                jqLite(document.createComment(' ' + directiveName + ': ' +                                             // 7967
                                              templateAttrs[directiveName] + ' '));                                    // 7968
            compileNode = $compileNode[0];                                                                             // 7969
            replaceWith(jqCollection, sliceArgs($template), compileNode);                                              // 7970
                                                                                                                       // 7971
            childTranscludeFn = compile($template, transcludeFn, terminalPriority,                                     // 7972
                                        replaceDirective && replaceDirective.name, {                                   // 7973
                                          // Don't pass in:                                                            // 7974
                                          // - controllerDirectives - otherwise we'll create duplicates controllers    // 7975
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.                                // 7977
                                          //                                                                           // 7978
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.                                       // 7980
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective                         // 7981
                                        });                                                                            // 7982
          } else {                                                                                                     // 7983
            $template = jqLite(jqLiteClone(compileNode)).contents();                                                   // 7984
            $compileNode.empty(); // clear contents                                                                    // 7985
            childTranscludeFn = compile($template, transcludeFn);                                                      // 7986
          }                                                                                                            // 7987
        }                                                                                                              // 7988
                                                                                                                       // 7989
        if (directive.template) {                                                                                      // 7990
          hasTemplate = true;                                                                                          // 7991
          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 7992
          templateDirective = directive;                                                                               // 7993
                                                                                                                       // 7994
          directiveValue = (isFunction(directive.template))                                                            // 7995
              ? directive.template($compileNode, templateAttrs)                                                        // 7996
              : directive.template;                                                                                    // 7997
                                                                                                                       // 7998
          directiveValue = denormalizeTemplate(directiveValue);                                                        // 7999
                                                                                                                       // 8000
          if (directive.replace) {                                                                                     // 8001
            replaceDirective = directive;                                                                              // 8002
            if (jqLiteIsTextNode(directiveValue)) {                                                                    // 8003
              $template = [];                                                                                          // 8004
            } else {                                                                                                   // 8005
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));             // 8006
            }                                                                                                          // 8007
            compileNode = $template[0];                                                                                // 8008
                                                                                                                       // 8009
            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 8010
              throw $compileMinErr('tplrt',                                                                            // 8011
                  "Template for directive '{0}' must have exactly one root element. {1}",                              // 8012
                  directiveName, '');                                                                                  // 8013
            }                                                                                                          // 8014
                                                                                                                       // 8015
            replaceWith(jqCollection, $compileNode, compileNode);                                                      // 8016
                                                                                                                       // 8017
            var newTemplateAttrs = {$attr: {}};                                                                        // 8018
                                                                                                                       // 8019
            // combine directives from the original node and from the template:                                        // 8020
            // - take the array of directives for this element                                                         // 8021
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)  // 8022
            // - collect directives from the template and sort them by priority                                        // 8023
            // - combine directives as: processed + template + unprocessed                                             // 8024
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);                             // 8025
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));                         // 8026
                                                                                                                       // 8027
            if (newIsolateScopeDirective) {                                                                            // 8028
              markDirectivesAsIsolate(templateDirectives);                                                             // 8029
            }                                                                                                          // 8030
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);                          // 8031
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);                                                  // 8032
                                                                                                                       // 8033
            ii = directives.length;                                                                                    // 8034
          } else {                                                                                                     // 8035
            $compileNode.html(directiveValue);                                                                         // 8036
          }                                                                                                            // 8037
        }                                                                                                              // 8038
                                                                                                                       // 8039
        if (directive.templateUrl) {                                                                                   // 8040
          hasTemplate = true;                                                                                          // 8041
          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 8042
          templateDirective = directive;                                                                               // 8043
                                                                                                                       // 8044
          if (directive.replace) {                                                                                     // 8045
            replaceDirective = directive;                                                                              // 8046
          }                                                                                                            // 8047
                                                                                                                       // 8048
          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,                   // 8049
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {     // 8050
                controllerDirectives: controllerDirectives,                                                            // 8051
                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,                             // 8052
                newIsolateScopeDirective: newIsolateScopeDirective,                                                    // 8053
                templateDirective: templateDirective,                                                                  // 8054
                nonTlbTranscludeDirective: nonTlbTranscludeDirective                                                   // 8055
              });                                                                                                      // 8056
          ii = directives.length;                                                                                      // 8057
        } else if (directive.compile) {                                                                                // 8058
          try {                                                                                                        // 8059
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);                                // 8060
            if (isFunction(linkFn)) {                                                                                  // 8061
              addLinkFns(null, linkFn, attrStart, attrEnd);                                                            // 8062
            } else if (linkFn) {                                                                                       // 8063
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);                                                 // 8064
            }                                                                                                          // 8065
          } catch (e) {                                                                                                // 8066
            $exceptionHandler(e, startingTag($compileNode));                                                           // 8067
          }                                                                                                            // 8068
        }                                                                                                              // 8069
                                                                                                                       // 8070
        if (directive.terminal) {                                                                                      // 8071
          nodeLinkFn.terminal = true;                                                                                  // 8072
          terminalPriority = Math.max(terminalPriority, directive.priority);                                           // 8073
        }                                                                                                              // 8074
                                                                                                                       // 8075
      }                                                                                                                // 8076
                                                                                                                       // 8077
      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;                                        // 8078
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;                                                     // 8079
      nodeLinkFn.templateOnThisElement = hasTemplate;                                                                  // 8080
      nodeLinkFn.transclude = childTranscludeFn;                                                                       // 8081
                                                                                                                       // 8082
      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;                            // 8083
                                                                                                                       // 8084
      // might be normal or delayed nodeLinkFn depending on if templateUrl is present                                  // 8085
      return nodeLinkFn;                                                                                               // 8086
                                                                                                                       // 8087
      ////////////////////                                                                                             // 8088
                                                                                                                       // 8089
      function addLinkFns(pre, post, attrStart, attrEnd) {                                                             // 8090
        if (pre) {                                                                                                     // 8091
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);                                    // 8092
          pre.require = directive.require;                                                                             // 8093
          pre.directiveName = directiveName;                                                                           // 8094
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 8095
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});                                                       // 8096
          }                                                                                                            // 8097
          preLinkFns.push(pre);                                                                                        // 8098
        }                                                                                                              // 8099
        if (post) {                                                                                                    // 8100
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);                                  // 8101
          post.require = directive.require;                                                                            // 8102
          post.directiveName = directiveName;                                                                          // 8103
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 8104
            post = cloneAndAnnotateFn(post, {isolateScope: true});                                                     // 8105
          }                                                                                                            // 8106
          postLinkFns.push(post);                                                                                      // 8107
        }                                                                                                              // 8108
      }                                                                                                                // 8109
                                                                                                                       // 8110
                                                                                                                       // 8111
      function getControllers(directiveName, require, $element, elementControllers) {                                  // 8112
        var value;                                                                                                     // 8113
                                                                                                                       // 8114
        if (isString(require)) {                                                                                       // 8115
          var match = require.match(REQUIRE_PREFIX_REGEXP);                                                            // 8116
          var name = require.substring(match[0].length);                                                               // 8117
          var inheritType = match[1] || match[3];                                                                      // 8118
          var optional = match[2] === '?';                                                                             // 8119
                                                                                                                       // 8120
          //If only parents then start at the parent element                                                           // 8121
          if (inheritType === '^^') {                                                                                  // 8122
            $element = $element.parent();                                                                              // 8123
          //Otherwise attempt getting the controller from elementControllers in case                                   // 8124
          //the element is transcluded (and has no data) and to avoid .data if possible                                // 8125
          } else {                                                                                                     // 8126
            value = elementControllers && elementControllers[name];                                                    // 8127
            value = value && value.instance;                                                                           // 8128
          }                                                                                                            // 8129
                                                                                                                       // 8130
          if (!value) {                                                                                                // 8131
            var dataName = '$' + name + 'Controller';                                                                  // 8132
            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);                          // 8133
          }                                                                                                            // 8134
                                                                                                                       // 8135
          if (!value && !optional) {                                                                                   // 8136
            throw $compileMinErr('ctreq',                                                                              // 8137
                "Controller '{0}', required by directive '{1}', can't be found!",                                      // 8138
                name, directiveName);                                                                                  // 8139
          }                                                                                                            // 8140
        } else if (isArray(require)) {                                                                                 // 8141
          value = [];                                                                                                  // 8142
          for (var i = 0, ii = require.length; i < ii; i++) {                                                          // 8143
            value[i] = getControllers(directiveName, require[i], $element, elementControllers);                        // 8144
          }                                                                                                            // 8145
        }                                                                                                              // 8146
                                                                                                                       // 8147
        return value || null;                                                                                          // 8148
      }                                                                                                                // 8149
                                                                                                                       // 8150
      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {            // 8151
        var elementControllers = createMap();                                                                          // 8152
        for (var controllerKey in controllerDirectives) {                                                              // 8153
          var directive = controllerDirectives[controllerKey];                                                         // 8154
          var locals = {                                                                                               // 8155
            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,         // 8156
            $element: $element,                                                                                        // 8157
            $attrs: attrs,                                                                                             // 8158
            $transclude: transcludeFn                                                                                  // 8159
          };                                                                                                           // 8160
                                                                                                                       // 8161
          var controller = directive.controller;                                                                       // 8162
          if (controller == '@') {                                                                                     // 8163
            controller = attrs[directive.name];                                                                        // 8164
          }                                                                                                            // 8165
                                                                                                                       // 8166
          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);                      // 8167
                                                                                                                       // 8168
          // For directives with element transclusion the element is a comment,                                        // 8169
          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to                          // 8170
          // clean up (http://bugs.jquery.com/ticket/8335).                                                            // 8171
          // Instead, we save the controllers for the element in a local hash and attach to .data                      // 8172
          // later, once we have the actual element.                                                                   // 8173
          elementControllers[directive.name] = controllerInstance;                                                     // 8174
          if (!hasElementTranscludeDirective) {                                                                        // 8175
            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);                           // 8176
          }                                                                                                            // 8177
        }                                                                                                              // 8178
        return elementControllers;                                                                                     // 8179
      }                                                                                                                // 8180
                                                                                                                       // 8181
      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn,                               // 8182
                          thisLinkFn) {                                                                                // 8183
        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,                       // 8184
            attrs;                                                                                                     // 8185
                                                                                                                       // 8186
        if (compileNode === linkNode) {                                                                                // 8187
          attrs = templateAttrs;                                                                                       // 8188
          $element = templateAttrs.$$element;                                                                          // 8189
        } else {                                                                                                       // 8190
          $element = jqLite(linkNode);                                                                                 // 8191
          attrs = new Attributes($element, templateAttrs);                                                             // 8192
        }                                                                                                              // 8193
                                                                                                                       // 8194
        if (newIsolateScopeDirective) {                                                                                // 8195
          isolateScope = scope.$new(true);                                                                             // 8196
        }                                                                                                              // 8197
                                                                                                                       // 8198
        if (boundTranscludeFn) {                                                                                       // 8199
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`                                        // 8200
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`                                            // 8201
          transcludeFn = controllersBoundTransclude;                                                                   // 8202
          transcludeFn.$$boundTransclude = boundTranscludeFn;                                                          // 8203
        }                                                                                                              // 8204
                                                                                                                       // 8205
        if (controllerDirectives) {                                                                                    // 8206
          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
        }                                                                                                              // 8208
                                                                                                                       // 8209
        if (newIsolateScopeDirective) {                                                                                // 8210
          // Initialize isolate scope bindings for new isolate scope directive.                                        // 8211
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));                                   // 8213
          compile.$$addScopeClass($element, true);                                                                     // 8214
          isolateScope.$$isolateBindings =                                                                             // 8215
              newIsolateScopeDirective.$$isolateBindings;                                                              // 8216
          initializeDirectiveBindings(scope, attrs, isolateScope,                                                      // 8217
                                      isolateScope.$$isolateBindings,                                                  // 8218
                                      newIsolateScopeDirective, isolateScope);                                         // 8219
        }                                                                                                              // 8220
        if (elementControllers) {                                                                                      // 8221
          // Initialize bindToController bindings for new/isolate scopes                                               // 8222
          var scopeDirective = newIsolateScopeDirective || newScopeDirective;                                          // 8223
          var bindings;                                                                                                // 8224
          var controllerForBindings;                                                                                   // 8225
          if (scopeDirective && elementControllers[scopeDirective.name]) {                                             // 8226
            bindings = scopeDirective.$$bindings.bindToController;                                                     // 8227
            controller = elementControllers[scopeDirective.name];                                                      // 8228
                                                                                                                       // 8229
            if (controller && controller.identifier && bindings) {                                                     // 8230
              controllerForBindings = controller;                                                                      // 8231
              thisLinkFn.$$destroyBindings =                                                                           // 8232
                  initializeDirectiveBindings(scope, attrs, controller.instance,                                       // 8233
                                              bindings, scopeDirective);                                               // 8234
            }                                                                                                          // 8235
          }                                                                                                            // 8236
          for (i in elementControllers) {                                                                              // 8237
            controller = elementControllers[i];                                                                        // 8238
            var controllerResult = controller();                                                                       // 8239
                                                                                                                       // 8240
            if (controllerResult !== controller.instance) {                                                            // 8241
              // If the controller constructor has a return value, overwrite the instance                              // 8242
              // from setupControllers and update the element data                                                     // 8243
              controller.instance = controllerResult;                                                                  // 8244
              $element.data('$' + i + 'Controller', controllerResult);                                                 // 8245
              if (controller === controllerForBindings) {                                                              // 8246
                // Remove and re-install bindToController bindings                                                     // 8247
                thisLinkFn.$$destroyBindings();                                                                        // 8248
                thisLinkFn.$$destroyBindings =                                                                         // 8249
                  initializeDirectiveBindings(scope, attrs, controllerResult, bindings, scopeDirective);               // 8250
              }                                                                                                        // 8251
            }                                                                                                          // 8252
          }                                                                                                            // 8253
        }                                                                                                              // 8254
                                                                                                                       // 8255
        // PRELINKING                                                                                                  // 8256
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {                                                             // 8257
          linkFn = preLinkFns[i];                                                                                      // 8258
          invokeLinkFn(linkFn,                                                                                         // 8259
              linkFn.isolateScope ? isolateScope : scope,                                                              // 8260
              $element,                                                                                                // 8261
              attrs,                                                                                                   // 8262
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8263
              transcludeFn                                                                                             // 8264
          );                                                                                                           // 8265
        }                                                                                                              // 8266
                                                                                                                       // 8267
        // RECURSION                                                                                                   // 8268
        // We only pass the isolate scope, if the isolate directive has a template,                                    // 8269
        // otherwise the child elements do not belong to the isolate directive.                                        // 8270
        var scopeToChild = scope;                                                                                      // 8271
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;                                                                                 // 8273
        }                                                                                                              // 8274
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);                   // 8275
                                                                                                                       // 8276
        // POSTLINKING                                                                                                 // 8277
        for (i = postLinkFns.length - 1; i >= 0; i--) {                                                                // 8278
          linkFn = postLinkFns[i];                                                                                     // 8279
          invokeLinkFn(linkFn,                                                                                         // 8280
              linkFn.isolateScope ? isolateScope : scope,                                                              // 8281
              $element,                                                                                                // 8282
              attrs,                                                                                                   // 8283
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8284
              transcludeFn                                                                                             // 8285
          );                                                                                                           // 8286
        }                                                                                                              // 8287
                                                                                                                       // 8288
        // This is the function that is injected as `$transclude`.                                                     // 8289
        // Note: all arguments are optional!                                                                           // 8290
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {                               // 8291
          var transcludeControllers;                                                                                   // 8292
                                                                                                                       // 8293
          // No scope passed in:                                                                                       // 8294
          if (!isScope(scope)) {                                                                                       // 8295
            futureParentElement = cloneAttachFn;                                                                       // 8296
            cloneAttachFn = scope;                                                                                     // 8297
            scope = undefined;                                                                                         // 8298
          }                                                                                                            // 8299
                                                                                                                       // 8300
          if (hasElementTranscludeDirective) {                                                                         // 8301
            transcludeControllers = elementControllers;                                                                // 8302
          }                                                                                                            // 8303
          if (!futureParentElement) {                                                                                  // 8304
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;                        // 8305
          }                                                                                                            // 8306
          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);    // 8307
        }                                                                                                              // 8308
      }                                                                                                                // 8309
    }                                                                                                                  // 8310
                                                                                                                       // 8311
    function markDirectivesAsIsolate(directives) {                                                                     // 8312
      // mark all directives as needing isolate scope.                                                                 // 8313
      for (var j = 0, jj = directives.length; j < jj; j++) {                                                           // 8314
        directives[j] = inherit(directives[j], {$$isolateScope: true});                                                // 8315
      }                                                                                                                // 8316
    }                                                                                                                  // 8317
                                                                                                                       // 8318
    /**                                                                                                                // 8319
     * looks up the directive and decorates it with exception handling and proper parameters. We                       // 8320
     * call this the boundDirective.                                                                                   // 8321
     *                                                                                                                 // 8322
     * @param {string} name name of the directive to look up.                                                          // 8323
     * @param {string} location The directive must be found in specific format.                                        // 8324
     *   String containing any of theses characters:                                                                   // 8325
     *                                                                                                                 // 8326
     *   * `E`: element name                                                                                           // 8327
     *   * `A': attribute                                                                                              // 8328
     *   * `C`: class                                                                                                  // 8329
     *   * `M`: comment                                                                                                // 8330
     * @returns {boolean} true if directive was added.                                                                 // 8331
     */                                                                                                                // 8332
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,                    // 8333
                          endAttrName) {                                                                               // 8334
      if (name === ignoreDirective) return null;                                                                       // 8335
      var match = null;                                                                                                // 8336
      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8337
        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8338
            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8339
          try {                                                                                                        // 8340
            directive = directives[i];                                                                                 // 8341
            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&                                      // 8342
                 directive.restrict.indexOf(location) != -1) {                                                         // 8343
              if (startAttrName) {                                                                                     // 8344
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});                          // 8345
              }                                                                                                        // 8346
              tDirectives.push(directive);                                                                             // 8347
              match = directive;                                                                                       // 8348
            }                                                                                                          // 8349
          } catch (e) { $exceptionHandler(e); }                                                                        // 8350
        }                                                                                                              // 8351
      }                                                                                                                // 8352
      return match;                                                                                                    // 8353
    }                                                                                                                  // 8354
                                                                                                                       // 8355
                                                                                                                       // 8356
    /**                                                                                                                // 8357
     * looks up the directive and returns true if it is a multi-element directive,                                     // 8358
     * and therefore requires DOM nodes between -start and -end markers to be grouped                                  // 8359
     * together.                                                                                                       // 8360
     *                                                                                                                 // 8361
     * @param {string} name name of the directive to look up.                                                          // 8362
     * @returns true if directive was registered as multi-element.                                                     // 8363
     */                                                                                                                // 8364
    function directiveIsMultiElement(name) {                                                                           // 8365
      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8366
        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8367
            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8368
          directive = directives[i];                                                                                   // 8369
          if (directive.multiElement) {                                                                                // 8370
            return true;                                                                                               // 8371
          }                                                                                                            // 8372
        }                                                                                                              // 8373
      }                                                                                                                // 8374
      return false;                                                                                                    // 8375
    }                                                                                                                  // 8376
                                                                                                                       // 8377
    /**                                                                                                                // 8378
     * When the element is replaced with HTML template then the new attributes                                         // 8379
     * on the template need to be merged with the existing attributes in the DOM.                                      // 8380
     * The desired effect is to have both of the attributes present.                                                   // 8381
     *                                                                                                                 // 8382
     * @param {object} dst destination attributes (original DOM)                                                       // 8383
     * @param {object} src source attributes (from the directive template)                                             // 8384
     */                                                                                                                // 8385
    function mergeTemplateAttributes(dst, src) {                                                                       // 8386
      var srcAttr = src.$attr,                                                                                         // 8387
          dstAttr = dst.$attr,                                                                                         // 8388
          $element = dst.$$element;                                                                                    // 8389
                                                                                                                       // 8390
      // reapply the old attributes to the new element                                                                 // 8391
      forEach(dst, function(value, key) {                                                                              // 8392
        if (key.charAt(0) != '$') {                                                                                    // 8393
          if (src[key] && src[key] !== value) {                                                                        // 8394
            value += (key === 'style' ? ';' : ' ') + src[key];                                                         // 8395
          }                                                                                                            // 8396
          dst.$set(key, value, true, srcAttr[key]);                                                                    // 8397
        }                                                                                                              // 8398
      });                                                                                                              // 8399
                                                                                                                       // 8400
      // copy the new attributes on the old attrs object                                                               // 8401
      forEach(src, function(value, key) {                                                                              // 8402
        if (key == 'class') {                                                                                          // 8403
          safeAddClass($element, value);                                                                               // 8404
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;                                             // 8405
        } else if (key == 'style') {                                                                                   // 8406
          $element.attr('style', $element.attr('style') + ';' + value);                                                // 8407
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;                                             // 8408
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.                                       // 8409
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you                                     // 8410
          // have an attribute like "has-own-property" or "data-has-own-property", etc.                                // 8411
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {                                                 // 8412
          dst[key] = value;                                                                                            // 8413
          dstAttr[key] = srcAttr[key];                                                                                 // 8414
        }                                                                                                              // 8415
      });                                                                                                              // 8416
    }                                                                                                                  // 8417
                                                                                                                       // 8418
                                                                                                                       // 8419
    function compileTemplateUrl(directives, $compileNode, tAttrs,                                                      // 8420
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {                            // 8421
      var linkQueue = [],                                                                                              // 8422
          afterTemplateNodeLinkFn,                                                                                     // 8423
          afterTemplateChildLinkFn,                                                                                    // 8424
          beforeTemplateCompileNode = $compileNode[0],                                                                 // 8425
          origAsyncDirective = directives.shift(),                                                                     // 8426
          derivedSyncDirective = inherit(origAsyncDirective, {                                                         // 8427
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective                // 8428
          }),                                                                                                          // 8429
          templateUrl = (isFunction(origAsyncDirective.templateUrl))                                                   // 8430
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)                                                   // 8431
              : origAsyncDirective.templateUrl,                                                                        // 8432
          templateNamespace = origAsyncDirective.templateNamespace;                                                    // 8433
                                                                                                                       // 8434
      $compileNode.empty();                                                                                            // 8435
                                                                                                                       // 8436
      $templateRequest(templateUrl)                                                                                    // 8437
        .then(function(content) {                                                                                      // 8438
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;                                       // 8439
                                                                                                                       // 8440
          content = denormalizeTemplate(content);                                                                      // 8441
                                                                                                                       // 8442
          if (origAsyncDirective.replace) {                                                                            // 8443
            if (jqLiteIsTextNode(content)) {                                                                           // 8444
              $template = [];                                                                                          // 8445
            } else {                                                                                                   // 8446
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));                              // 8447
            }                                                                                                          // 8448
            compileNode = $template[0];                                                                                // 8449
                                                                                                                       // 8450
            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 8451
              throw $compileMinErr('tplrt',                                                                            // 8452
                  "Template for directive '{0}' must have exactly one root element. {1}",                              // 8453
                  origAsyncDirective.name, templateUrl);                                                               // 8454
            }                                                                                                          // 8455
                                                                                                                       // 8456
            tempTemplateAttrs = {$attr: {}};                                                                           // 8457
            replaceWith($rootElement, $compileNode, compileNode);                                                      // 8458
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);                            // 8459
                                                                                                                       // 8460
            if (isObject(origAsyncDirective.scope)) {                                                                  // 8461
              markDirectivesAsIsolate(templateDirectives);                                                             // 8462
            }                                                                                                          // 8463
            directives = templateDirectives.concat(directives);                                                        // 8464
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);                                                        // 8465
          } else {                                                                                                     // 8466
            compileNode = beforeTemplateCompileNode;                                                                   // 8467
            $compileNode.html(content);                                                                                // 8468
          }                                                                                                            // 8469
                                                                                                                       // 8470
          directives.unshift(derivedSyncDirective);                                                                    // 8471
                                                                                                                       // 8472
          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,                             // 8473
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,                            // 8474
              previousCompileContext);                                                                                 // 8475
          forEach($rootElement, function(node, i) {                                                                    // 8476
            if (node == compileNode) {                                                                                 // 8477
              $rootElement[i] = $compileNode[0];                                                                       // 8478
            }                                                                                                          // 8479
          });                                                                                                          // 8480
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);                      // 8481
                                                                                                                       // 8482
          while (linkQueue.length) {                                                                                   // 8483
            var scope = linkQueue.shift(),                                                                             // 8484
                beforeTemplateLinkNode = linkQueue.shift(),                                                            // 8485
                linkRootElement = linkQueue.shift(),                                                                   // 8486
                boundTranscludeFn = linkQueue.shift(),                                                                 // 8487
                linkNode = $compileNode[0];                                                                            // 8488
                                                                                                                       // 8489
            if (scope.$$destroyed) continue;                                                                           // 8490
                                                                                                                       // 8491
            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {                                                // 8492
              var oldClasses = beforeTemplateLinkNode.className;                                                       // 8493
                                                                                                                       // 8494
              if (!(previousCompileContext.hasElementTranscludeDirective &&                                            // 8495
                  origAsyncDirective.replace)) {                                                                       // 8496
                // it was cloned therefore we have to clone as well.                                                   // 8497
                linkNode = jqLiteClone(compileNode);                                                                   // 8498
              }                                                                                                        // 8499
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);                                  // 8500
                                                                                                                       // 8501
              // Copy in CSS classes from original node                                                                // 8502
              safeAddClass(jqLite(linkNode), oldClasses);                                                              // 8503
            }                                                                                                          // 8504
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                     // 8505
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {                                                                                                   // 8507
              childBoundTranscludeFn = boundTranscludeFn;                                                              // 8508
            }                                                                                                          // 8509
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,                           // 8510
              childBoundTranscludeFn, afterTemplateNodeLinkFn);                                                        // 8511
          }                                                                                                            // 8512
          linkQueue = null;                                                                                            // 8513
        });                                                                                                            // 8514
                                                                                                                       // 8515
      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {              // 8516
        var childBoundTranscludeFn = boundTranscludeFn;                                                                // 8517
        if (scope.$$destroyed) return;                                                                                 // 8518
        if (linkQueue) {                                                                                               // 8519
          linkQueue.push(scope,                                                                                        // 8520
                         node,                                                                                         // 8521
                         rootElement,                                                                                  // 8522
                         childBoundTranscludeFn);                                                                      // 8523
        } else {                                                                                                       // 8524
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                       // 8525
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }                                                                                                            // 8527
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn,          // 8528
                                  afterTemplateNodeLinkFn);                                                            // 8529
        }                                                                                                              // 8530
      };                                                                                                               // 8531
    }                                                                                                                  // 8532
                                                                                                                       // 8533
                                                                                                                       // 8534
    /**                                                                                                                // 8535
     * Sorting function for bound directives.                                                                          // 8536
     */                                                                                                                // 8537
    function byPriority(a, b) {                                                                                        // 8538
      var diff = b.priority - a.priority;                                                                              // 8539
      if (diff !== 0) return diff;                                                                                     // 8540
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;                                                        // 8541
      return a.index - b.index;                                                                                        // 8542
    }                                                                                                                  // 8543
                                                                                                                       // 8544
    function assertNoDuplicate(what, previousDirective, directive, element) {                                          // 8545
                                                                                                                       // 8546
      function wrapModuleNameIfDefined(moduleName) {                                                                   // 8547
        return moduleName ?                                                                                            // 8548
          (' (module: ' + moduleName + ')') :                                                                          // 8549
          '';                                                                                                          // 8550
      }                                                                                                                // 8551
                                                                                                                       // 8552
      if (previousDirective) {                                                                                         // 8553
        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',                // 8554
            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),                           // 8555
            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));              // 8556
      }                                                                                                                // 8557
    }                                                                                                                  // 8558
                                                                                                                       // 8559
                                                                                                                       // 8560
    function addTextInterpolateDirective(directives, text) {                                                           // 8561
      var interpolateFn = $interpolate(text, true);                                                                    // 8562
      if (interpolateFn) {                                                                                             // 8563
        directives.push({                                                                                              // 8564
          priority: 0,                                                                                                 // 8565
          compile: function textInterpolateCompileFn(templateNode) {                                                   // 8566
            var templateNodeParent = templateNode.parent(),                                                            // 8567
                hasCompileParent = !!templateNodeParent.length;                                                        // 8568
                                                                                                                       // 8569
            // When transcluding a template that has bindings in the root                                              // 8570
            // we don't have a parent and thus need to add the class during linking fn.                                // 8571
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);                                       // 8572
                                                                                                                       // 8573
            return function textInterpolateLinkFn(scope, node) {                                                       // 8574
              var parent = node.parent();                                                                              // 8575
              if (!hasCompileParent) compile.$$addBindingClass(parent);                                                // 8576
              compile.$$addBindingInfo(parent, interpolateFn.expressions);                                             // 8577
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {                                   // 8578
                node[0].nodeValue = value;                                                                             // 8579
              });                                                                                                      // 8580
            };                                                                                                         // 8581
          }                                                                                                            // 8582
        });                                                                                                            // 8583
      }                                                                                                                // 8584
    }                                                                                                                  // 8585
                                                                                                                       // 8586
                                                                                                                       // 8587
    function wrapTemplate(type, template) {                                                                            // 8588
      type = lowercase(type || 'html');                                                                                // 8589
      switch (type) {                                                                                                  // 8590
      case 'svg':                                                                                                      // 8591
      case 'math':                                                                                                     // 8592
        var wrapper = document.createElement('div');                                                                   // 8593
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';                                           // 8594
        return wrapper.childNodes[0].childNodes;                                                                       // 8595
      default:                                                                                                         // 8596
        return template;                                                                                               // 8597
      }                                                                                                                // 8598
    }                                                                                                                  // 8599
                                                                                                                       // 8600
                                                                                                                       // 8601
    function getTrustedContext(node, attrNormalizedName) {                                                             // 8602
      if (attrNormalizedName == "srcdoc") {                                                                            // 8603
        return $sce.HTML;                                                                                              // 8604
      }                                                                                                                // 8605
      var tag = nodeName_(node);                                                                                       // 8606
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.                                           // 8607
      if (attrNormalizedName == "xlinkHref" ||                                                                         // 8608
          (tag == "form" && attrNormalizedName == "action") ||                                                         // 8609
          (tag != "img" && (attrNormalizedName == "src" ||                                                             // 8610
                            attrNormalizedName == "ngSrc"))) {                                                         // 8611
        return $sce.RESOURCE_URL;                                                                                      // 8612
      }                                                                                                                // 8613
    }                                                                                                                  // 8614
                                                                                                                       // 8615
                                                                                                                       // 8616
    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {                                // 8617
      var trustedContext = getTrustedContext(node, name);                                                              // 8618
      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;                                                       // 8619
                                                                                                                       // 8620
      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);                                     // 8621
                                                                                                                       // 8622
      // no interpolation found -> ignore                                                                              // 8623
      if (!interpolateFn) return;                                                                                      // 8624
                                                                                                                       // 8625
                                                                                                                       // 8626
      if (name === "multiple" && nodeName_(node) === "select") {                                                       // 8627
        throw $compileMinErr("selmulti",                                                                               // 8628
            "Binding to the 'multiple' attribute is not supported. Element: {0}",                                      // 8629
            startingTag(node));                                                                                        // 8630
      }                                                                                                                // 8631
                                                                                                                       // 8632
      directives.push({                                                                                                // 8633
        priority: 100,                                                                                                 // 8634
        compile: function() {                                                                                          // 8635
            return {                                                                                                   // 8636
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {                                           // 8637
                var $$observers = (attr.$$observers || (attr.$$observers = {}));                                       // 8638
                                                                                                                       // 8639
                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {                                                            // 8640
                  throw $compileMinErr('nodomevents',                                                                  // 8641
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +                // 8642
                          "ng- versions (such as ng-click instead of onclick) instead.");                              // 8643
                }                                                                                                      // 8644
                                                                                                                       // 8645
                // If the attribute has changed since last $interpolate()ed                                            // 8646
                var newValue = attr[name];                                                                             // 8647
                if (newValue !== value) {                                                                              // 8648
                  // we need to interpolate again since the attribute value has been updated                           // 8649
                  // (e.g. by another directive's compile function)                                                    // 8650
                  // ensure unset/empty values make interpolateFn falsy                                                // 8651
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);              // 8652
                  value = newValue;                                                                                    // 8653
                }                                                                                                      // 8654
                                                                                                                       // 8655
                // if attribute was updated so that there is no interpolation going on we don't want to                // 8656
                // register any observers                                                                              // 8657
                if (!interpolateFn) return;                                                                            // 8658
                                                                                                                       // 8659
                // initialize attr object so that it's ready in case we need the value for isolate                     // 8660
                // scope initialization, otherwise the value would not be available from isolate                       // 8661
                // directive's linking fn during linking phase                                                         // 8662
                attr[name] = interpolateFn(scope);                                                                     // 8663
                                                                                                                       // 8664
                ($$observers[name] || ($$observers[name] = [])).$$inter = true;                                        // 8665
                (attr.$$observers && attr.$$observers[name].$$scope || scope).                                         // 8666
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {                        // 8667
                    //special case for class attribute addition + removal                                              // 8668
                    //so that class changes can tap into the animation                                                 // 8669
                    //hooks provided by the $animate service. Be sure to                                               // 8670
                    //skip animations when the first digest occurs (when                                               // 8671
                    //both the new and the old values are the same) since                                              // 8672
                    //the CSS classes are the non-interpolated values                                                  // 8673
                    if (name === 'class' && newValue != oldValue) {                                                    // 8674
                      attr.$updateClass(newValue, oldValue);                                                           // 8675
                    } else {                                                                                           // 8676
                      attr.$set(name, newValue);                                                                       // 8677
                    }                                                                                                  // 8678
                  });                                                                                                  // 8679
              }                                                                                                        // 8680
            };                                                                                                         // 8681
          }                                                                                                            // 8682
      });                                                                                                              // 8683
    }                                                                                                                  // 8684
                                                                                                                       // 8685
                                                                                                                       // 8686
    /**                                                                                                                // 8687
     * This is a special jqLite.replaceWith, which can replace items which                                             // 8688
     * have no parents, provided that the containing jqLite collection is provided.                                    // 8689
     *                                                                                                                 // 8690
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes                   // 8691
     *                               in the root of the tree.                                                          // 8692
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep                      // 8693
     *                                  the shell, but replace its DOM node reference.                                 // 8694
     * @param {Node} newNode The new DOM node.                                                                         // 8695
     */                                                                                                                // 8696
    function replaceWith($rootElement, elementsToRemove, newNode) {                                                    // 8697
      var firstElementToRemove = elementsToRemove[0],                                                                  // 8698
          removeCount = elementsToRemove.length,                                                                       // 8699
          parent = firstElementToRemove.parentNode,                                                                    // 8700
          i, ii;                                                                                                       // 8701
                                                                                                                       // 8702
      if ($rootElement) {                                                                                              // 8703
        for (i = 0, ii = $rootElement.length; i < ii; i++) {                                                           // 8704
          if ($rootElement[i] == firstElementToRemove) {                                                               // 8705
            $rootElement[i++] = newNode;                                                                               // 8706
            for (var j = i, j2 = j + removeCount - 1,                                                                  // 8707
                     jj = $rootElement.length;                                                                         // 8708
                 j < jj; j++, j2++) {                                                                                  // 8709
              if (j2 < jj) {                                                                                           // 8710
                $rootElement[j] = $rootElement[j2];                                                                    // 8711
              } else {                                                                                                 // 8712
                delete $rootElement[j];                                                                                // 8713
              }                                                                                                        // 8714
            }                                                                                                          // 8715
            $rootElement.length -= removeCount - 1;                                                                    // 8716
                                                                                                                       // 8717
            // If the replaced element is also the jQuery .context then replace it                                     // 8718
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it                        // 8719
            // http://api.jquery.com/context/                                                                          // 8720
            if ($rootElement.context === firstElementToRemove) {                                                       // 8721
              $rootElement.context = newNode;                                                                          // 8722
            }                                                                                                          // 8723
            break;                                                                                                     // 8724
          }                                                                                                            // 8725
        }                                                                                                              // 8726
      }                                                                                                                // 8727
                                                                                                                       // 8728
      if (parent) {                                                                                                    // 8729
        parent.replaceChild(newNode, firstElementToRemove);                                                            // 8730
      }                                                                                                                // 8731
                                                                                                                       // 8732
      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?                        // 8733
      var fragment = document.createDocumentFragment();                                                                // 8734
      fragment.appendChild(firstElementToRemove);                                                                      // 8735
                                                                                                                       // 8736
      if (jqLite.hasData(firstElementToRemove)) {                                                                      // 8737
        // Copy over user data (that includes Angular's $scope etc.). Don't copy private                               // 8738
        // data here because there's no public interface in jQuery to do that and copying over                         // 8739
        // event listeners (which is the main use of private data) wouldn't work anyway.                               // 8740
        jqLite(newNode).data(jqLite(firstElementToRemove).data());                                                     // 8741
                                                                                                                       // 8742
        // Remove data of the replaced element. We cannot just call .remove()                                          // 8743
        // on the element it since that would deallocate scope that is needed                                          // 8744
        // for the new node. Instead, remove the data "manually".                                                      // 8745
        if (!jQuery) {                                                                                                 // 8746
          delete jqLite.cache[firstElementToRemove[jqLite.expando]];                                                   // 8747
        } else {                                                                                                       // 8748
          // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after                        // 8749
          // the replaced element. The cleanData version monkey-patched by Angular would cause                         // 8750
          // the scope to be trashed and we do need the very same scope to work with the new                           // 8751
          // element. However, we cannot just cache the non-patched version and use it here as                         // 8752
          // that would break if another library patches the method after Angular does (one                            // 8753
          // example is jQuery UI). Instead, set a flag indicating scope destroying should be                          // 8754
          // skipped this one time.                                                                                    // 8755
          skipDestroyOnNextJQueryCleanData = true;                                                                     // 8756
          jQuery.cleanData([firstElementToRemove]);                                                                    // 8757
        }                                                                                                              // 8758
      }                                                                                                                // 8759
                                                                                                                       // 8760
      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {                                                     // 8761
        var element = elementsToRemove[k];                                                                             // 8762
        jqLite(element).remove(); // must do this way to clean up expando                                              // 8763
        fragment.appendChild(element);                                                                                 // 8764
        delete elementsToRemove[k];                                                                                    // 8765
      }                                                                                                                // 8766
                                                                                                                       // 8767
      elementsToRemove[0] = newNode;                                                                                   // 8768
      elementsToRemove.length = 1;                                                                                     // 8769
    }                                                                                                                  // 8770
                                                                                                                       // 8771
                                                                                                                       // 8772
    function cloneAndAnnotateFn(fn, annotation) {                                                                      // 8773
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);                                 // 8774
    }                                                                                                                  // 8775
                                                                                                                       // 8776
                                                                                                                       // 8777
    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {                                 // 8778
      try {                                                                                                            // 8779
        linkFn(scope, $element, attrs, controllers, transcludeFn);                                                     // 8780
      } catch (e) {                                                                                                    // 8781
        $exceptionHandler(e, startingTag($element));                                                                   // 8782
      }                                                                                                                // 8783
    }                                                                                                                  // 8784
                                                                                                                       // 8785
                                                                                                                       // 8786
    // Set up $watches for isolate scope and controller bindings. This process                                         // 8787
    // only occurs for isolate scopes and new scopes with controllerAs.                                                // 8788
    function initializeDirectiveBindings(scope, attrs, destination, bindings,                                          // 8789
                                         directive, newScope) {                                                        // 8790
      var onNewScopeDestroyed;                                                                                         // 8791
      forEach(bindings, function(definition, scopeName) {                                                              // 8792
        var attrName = definition.attrName,                                                                            // 8793
        optional = definition.optional,                                                                                // 8794
        mode = definition.mode, // @, =, or &                                                                          // 8795
        lastValue,                                                                                                     // 8796
        parentGet, parentSet, compare;                                                                                 // 8797
                                                                                                                       // 8798
        switch (mode) {                                                                                                // 8799
                                                                                                                       // 8800
          case '@':                                                                                                    // 8801
            if (!optional && !hasOwnProperty.call(attrs, attrName)) {                                                  // 8802
              destination[scopeName] = attrs[attrName] = void 0;                                                       // 8803
            }                                                                                                          // 8804
            attrs.$observe(attrName, function(value) {                                                                 // 8805
              if (isString(value)) {                                                                                   // 8806
                destination[scopeName] = value;                                                                        // 8807
              }                                                                                                        // 8808
            });                                                                                                        // 8809
            attrs.$$observers[attrName].$$scope = scope;                                                               // 8810
            if (isString(attrs[attrName])) {                                                                           // 8811
              // If the attribute has been provided then we trigger an interpolation to ensure                         // 8812
              // the value is there for use in the link fn                                                             // 8813
              destination[scopeName] = $interpolate(attrs[attrName])(scope);                                           // 8814
            }                                                                                                          // 8815
            break;                                                                                                     // 8816
                                                                                                                       // 8817
          case '=':                                                                                                    // 8818
            if (!hasOwnProperty.call(attrs, attrName)) {                                                               // 8819
              if (optional) break;                                                                                     // 8820
              attrs[attrName] = void 0;                                                                                // 8821
            }                                                                                                          // 8822
            if (optional && !attrs[attrName]) break;                                                                   // 8823
                                                                                                                       // 8824
            parentGet = $parse(attrs[attrName]);                                                                       // 8825
            if (parentGet.literal) {                                                                                   // 8826
              compare = equals;                                                                                        // 8827
            } else {                                                                                                   // 8828
              compare = function(a, b) { return a === b || (a !== a && b !== b); };                                    // 8829
            }                                                                                                          // 8830
            parentSet = parentGet.assign || function() {                                                               // 8831
              // reset the change, or we will throw this exception on every $digest                                    // 8832
              lastValue = destination[scopeName] = parentGet(scope);                                                   // 8833
              throw $compileMinErr('nonassign',                                                                        // 8834
                  "Expression '{0}' used with directive '{1}' is non-assignable!",                                     // 8835
                  attrs[attrName], directive.name);                                                                    // 8836
            };                                                                                                         // 8837
            lastValue = destination[scopeName] = parentGet(scope);                                                     // 8838
            var parentValueWatch = function parentValueWatch(parentValue) {                                            // 8839
              if (!compare(parentValue, destination[scopeName])) {                                                     // 8840
                // we are out of sync and need to copy                                                                 // 8841
                if (!compare(parentValue, lastValue)) {                                                                // 8842
                  // parent changed and it has precedence                                                              // 8843
                  destination[scopeName] = parentValue;                                                                // 8844
                } else {                                                                                               // 8845
                  // if the parent can be assigned then do so                                                          // 8846
                  parentSet(scope, parentValue = destination[scopeName]);                                              // 8847
                }                                                                                                      // 8848
              }                                                                                                        // 8849
              return lastValue = parentValue;                                                                          // 8850
            };                                                                                                         // 8851
            parentValueWatch.$stateful = true;                                                                         // 8852
            var unwatch;                                                                                               // 8853
            if (definition.collection) {                                                                               // 8854
              unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);                                     // 8855
            } else {                                                                                                   // 8856
              unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);              // 8857
            }                                                                                                          // 8858
            onNewScopeDestroyed = (onNewScopeDestroyed || []);                                                         // 8859
            onNewScopeDestroyed.push(unwatch);                                                                         // 8860
            break;                                                                                                     // 8861
                                                                                                                       // 8862
          case '&':                                                                                                    // 8863
            // Don't assign Object.prototype method to scope                                                           // 8864
            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;                               // 8865
                                                                                                                       // 8866
            // Don't assign noop to destination if expression is not valid                                             // 8867
            if (parentGet === noop && optional) break;                                                                 // 8868
                                                                                                                       // 8869
            destination[scopeName] = function(locals) {                                                                // 8870
              return parentGet(scope, locals);                                                                         // 8871
            };                                                                                                         // 8872
            break;                                                                                                     // 8873
        }                                                                                                              // 8874
      });                                                                                                              // 8875
      var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {                                         // 8876
        for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {                                                // 8877
          onNewScopeDestroyed[i]();                                                                                    // 8878
        }                                                                                                              // 8879
      } : noop;                                                                                                        // 8880
      if (newScope && destroyBindings !== noop) {                                                                      // 8881
        newScope.$on('$destroy', destroyBindings);                                                                     // 8882
        return noop;                                                                                                   // 8883
      }                                                                                                                // 8884
      return destroyBindings;                                                                                          // 8885
    }                                                                                                                  // 8886
  }];                                                                                                                  // 8887
}                                                                                                                      // 8888
                                                                                                                       // 8889
var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;                                                                           // 8890
/**                                                                                                                    // 8891
 * Converts all accepted directives format into proper directive name.                                                 // 8892
 * @param name Name to normalize                                                                                       // 8893
 */                                                                                                                    // 8894
function directiveNormalize(name) {                                                                                    // 8895
  return camelCase(name.replace(PREFIX_REGEXP, ''));                                                                   // 8896
}                                                                                                                      // 8897
                                                                                                                       // 8898
/**                                                                                                                    // 8899
 * @ngdoc type                                                                                                         // 8900
 * @name $compile.directive.Attributes                                                                                 // 8901
 *                                                                                                                     // 8902
 * @description                                                                                                        // 8903
 * A shared object between directive compile / linking functions which contains normalized DOM                         // 8904
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is                          // 8905
 * needed since all of these are treated as equivalent in Angular:                                                     // 8906
 *                                                                                                                     // 8907
 * ```                                                                                                                 // 8908
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">                                                    // 8909
 * ```                                                                                                                 // 8910
 */                                                                                                                    // 8911
                                                                                                                       // 8912
/**                                                                                                                    // 8913
 * @ngdoc property                                                                                                     // 8914
 * @name $compile.directive.Attributes#$attr                                                                           // 8915
 *                                                                                                                     // 8916
 * @description                                                                                                        // 8917
 * A map of DOM element attribute names to the normalized name. This is                                                // 8918
 * needed to do reverse lookup from normalized name back to actual name.                                               // 8919
 */                                                                                                                    // 8920
                                                                                                                       // 8921
                                                                                                                       // 8922
/**                                                                                                                    // 8923
 * @ngdoc method                                                                                                       // 8924
 * @name $compile.directive.Attributes#$set                                                                            // 8925
 * @kind function                                                                                                      // 8926
 *                                                                                                                     // 8927
 * @description                                                                                                        // 8928
 * Set DOM element attribute value.                                                                                    // 8929
 *                                                                                                                     // 8930
 *                                                                                                                     // 8931
 * @param {string} name Normalized element attribute name of the property to modify. The name is                       // 8932
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}                          // 8933
 *          property to the original name.                                                                             // 8934
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.                       // 8935
 */                                                                                                                    // 8936
                                                                                                                       // 8937
                                                                                                                       // 8938
                                                                                                                       // 8939
/**                                                                                                                    // 8940
 * Closure compiler type information                                                                                   // 8941
 */                                                                                                                    // 8942
                                                                                                                       // 8943
function nodesetLinkingFn(                                                                                             // 8944
  /* angular.Scope */ scope,                                                                                           // 8945
  /* NodeList */ nodeList,                                                                                             // 8946
  /* Element */ rootElement,                                                                                           // 8947
  /* function(Function) */ boundTranscludeFn                                                                           // 8948
) {}                                                                                                                   // 8949
                                                                                                                       // 8950
function directiveLinkingFn(                                                                                           // 8951
  /* nodesetLinkingFn */ nodesetLinkingFn,                                                                             // 8952
  /* angular.Scope */ scope,                                                                                           // 8953
  /* Node */ node,                                                                                                     // 8954
  /* Element */ rootElement,                                                                                           // 8955
  /* function(Function) */ boundTranscludeFn                                                                           // 8956
) {}                                                                                                                   // 8957
                                                                                                                       // 8958
function tokenDifference(str1, str2) {                                                                                 // 8959
  var values = '',                                                                                                     // 8960
      tokens1 = str1.split(/\s+/),                                                                                     // 8961
      tokens2 = str2.split(/\s+/);                                                                                     // 8962
                                                                                                                       // 8963
  outer:                                                                                                               // 8964
  for (var i = 0; i < tokens1.length; i++) {                                                                           // 8965
    var token = tokens1[i];                                                                                            // 8966
    for (var j = 0; j < tokens2.length; j++) {                                                                         // 8967
      if (token == tokens2[j]) continue outer;                                                                         // 8968
    }                                                                                                                  // 8969
    values += (values.length > 0 ? ' ' : '') + token;                                                                  // 8970
  }                                                                                                                    // 8971
  return values;                                                                                                       // 8972
}                                                                                                                      // 8973
                                                                                                                       // 8974
function removeComments(jqNodes) {                                                                                     // 8975
  jqNodes = jqLite(jqNodes);                                                                                           // 8976
  var i = jqNodes.length;                                                                                              // 8977
                                                                                                                       // 8978
  if (i <= 1) {                                                                                                        // 8979
    return jqNodes;                                                                                                    // 8980
  }                                                                                                                    // 8981
                                                                                                                       // 8982
  while (i--) {                                                                                                        // 8983
    var node = jqNodes[i];                                                                                             // 8984
    if (node.nodeType === NODE_TYPE_COMMENT) {                                                                         // 8985
      splice.call(jqNodes, i, 1);                                                                                      // 8986
    }                                                                                                                  // 8987
  }                                                                                                                    // 8988
  return jqNodes;                                                                                                      // 8989
}                                                                                                                      // 8990
                                                                                                                       // 8991
var $controllerMinErr = minErr('$controller');                                                                         // 8992
                                                                                                                       // 8993
                                                                                                                       // 8994
var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;                                                                             // 8995
function identifierForController(controller, ident) {                                                                  // 8996
  if (ident && isString(ident)) return ident;                                                                          // 8997
  if (isString(controller)) {                                                                                          // 8998
    var match = CNTRL_REG.exec(controller);                                                                            // 8999
    if (match) return match[3];                                                                                        // 9000
  }                                                                                                                    // 9001
}                                                                                                                      // 9002
                                                                                                                       // 9003
                                                                                                                       // 9004
/**                                                                                                                    // 9005
 * @ngdoc provider                                                                                                     // 9006
 * @name $controllerProvider                                                                                           // 9007
 * @description                                                                                                        // 9008
 * The {@link ng.$controller $controller service} is used by Angular to create new                                     // 9009
 * controllers.                                                                                                        // 9010
 *                                                                                                                     // 9011
 * This provider allows controller registration via the                                                                // 9012
 * {@link ng.$controllerProvider#register register} method.                                                            // 9013
 */                                                                                                                    // 9014
function $ControllerProvider() {                                                                                       // 9015
  var controllers = {},                                                                                                // 9016
      globals = false;                                                                                                 // 9017
                                                                                                                       // 9018
  /**                                                                                                                  // 9019
   * @ngdoc method                                                                                                     // 9020
   * @name $controllerProvider#register                                                                                // 9021
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are                   // 9022
   *    the names and the values are the constructors.                                                                 // 9023
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI                       // 9024
   *    annotations in the array notation).                                                                            // 9025
   */                                                                                                                  // 9026
  this.register = function(name, constructor) {                                                                        // 9027
    assertNotHasOwnProperty(name, 'controller');                                                                       // 9028
    if (isObject(name)) {                                                                                              // 9029
      extend(controllers, name);                                                                                       // 9030
    } else {                                                                                                           // 9031
      controllers[name] = constructor;                                                                                 // 9032
    }                                                                                                                  // 9033
  };                                                                                                                   // 9034
                                                                                                                       // 9035
  /**                                                                                                                  // 9036
   * @ngdoc method                                                                                                     // 9037
   * @name $controllerProvider#allowGlobals                                                                            // 9038
   * @description If called, allows `$controller` to find controller constructors on `window`                          // 9039
   */                                                                                                                  // 9040
  this.allowGlobals = function() {                                                                                     // 9041
    globals = true;                                                                                                    // 9042
  };                                                                                                                   // 9043
                                                                                                                       // 9044
                                                                                                                       // 9045
  this.$get = ['$injector', '$window', function($injector, $window) {                                                  // 9046
                                                                                                                       // 9047
    /**                                                                                                                // 9048
     * @ngdoc service                                                                                                  // 9049
     * @name $controller                                                                                               // 9050
     * @requires $injector                                                                                             // 9051
     *                                                                                                                 // 9052
     * @param {Function|string} constructor If called with a function then it's considered to be the                   // 9053
     *    controller constructor function. Otherwise it's considered to be a string which is used                      // 9054
     *    to retrieve the controller constructor using the following steps:                                            // 9055
     *                                                                                                                 // 9056
     *    * check if a controller with given name is registered via `$controllerProvider`                              // 9057
     *    * check if evaluating the string on the current scope returns a constructor                                  // 9058
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global                             // 9059
     *      `window` object (not recommended)                                                                          // 9060
     *                                                                                                                 // 9061
     *    The string can use the `controller as property` syntax, where the controller instance is published           // 9062
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this          // 9063
     *    to work correctly.                                                                                           // 9064
     *                                                                                                                 // 9065
     * @param {Object} locals Injection locals for Controller.                                                         // 9066
     * @return {Object} Instance of given controller.                                                                  // 9067
     *                                                                                                                 // 9068
     * @description                                                                                                    // 9069
     * `$controller` service is responsible for instantiating controllers.                                             // 9070
     *                                                                                                                 // 9071
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into                                 // 9072
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).            // 9073
     */                                                                                                                // 9074
    return function(expression, locals, later, ident) {                                                                // 9075
      // PRIVATE API:                                                                                                  // 9076
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.                   // 9077
      //                     If true, $controller will allocate the object with the correct                            // 9078
      //                     prototype chain, but will not invoke the controller until a returned                      // 9079
      //                     callback is invoked.                                                                      // 9080
      //   param `ident` --- An optional label which overrides the label parsed from the controller                    // 9081
      //                     expression, if any.                                                                       // 9082
      var instance, match, constructor, identifier;                                                                    // 9083
      later = later === true;                                                                                          // 9084
      if (ident && isString(ident)) {                                                                                  // 9085
        identifier = ident;                                                                                            // 9086
      }                                                                                                                // 9087
                                                                                                                       // 9088
      if (isString(expression)) {                                                                                      // 9089
        match = expression.match(CNTRL_REG);                                                                           // 9090
        if (!match) {                                                                                                  // 9091
          throw $controllerMinErr('ctrlfmt',                                                                           // 9092
            "Badly formed controller string '{0}'. " +                                                                 // 9093
            "Must match `__name__ as __id__` or `__name__`.", expression);                                             // 9094
        }                                                                                                              // 9095
        constructor = match[1],                                                                                        // 9096
        identifier = identifier || match[3];                                                                           // 9097
        expression = controllers.hasOwnProperty(constructor)                                                           // 9098
            ? controllers[constructor]                                                                                 // 9099
            : getter(locals.$scope, constructor, true) ||                                                              // 9100
                (globals ? getter($window, constructor, true) : undefined);                                            // 9101
                                                                                                                       // 9102
        assertArgFn(expression, constructor, true);                                                                    // 9103
      }                                                                                                                // 9104
                                                                                                                       // 9105
      if (later) {                                                                                                     // 9106
        // Instantiate controller later:                                                                               // 9107
        // This machinery is used to create an instance of the object before calling the                               // 9108
        // controller's constructor itself.                                                                            // 9109
        //                                                                                                             // 9110
        // This allows properties to be added to the controller before the constructor is                              // 9111
        // invoked. Primarily, this is used for isolate scope bindings in $compile.                                    // 9112
        //                                                                                                             // 9113
        // This feature is not intended for use by applications, and is thus not documented                            // 9114
        // publicly.                                                                                                   // 9115
        // Object creation: http://jsperf.com/create-constructor/2                                                     // 9116
        var controllerPrototype = (isArray(expression) ?                                                               // 9117
          expression[expression.length - 1] : expression).prototype;                                                   // 9118
        instance = Object.create(controllerPrototype || null);                                                         // 9119
                                                                                                                       // 9120
        if (identifier) {                                                                                              // 9121
          addIdentifier(locals, identifier, instance, constructor || expression.name);                                 // 9122
        }                                                                                                              // 9123
                                                                                                                       // 9124
        var instantiate;                                                                                               // 9125
        return instantiate = extend(function() {                                                                       // 9126
          var result = $injector.invoke(expression, instance, locals, constructor);                                    // 9127
          if (result !== instance && (isObject(result) || isFunction(result))) {                                       // 9128
            instance = result;                                                                                         // 9129
            if (identifier) {                                                                                          // 9130
              // If result changed, re-assign controllerAs value to scope.                                             // 9131
              addIdentifier(locals, identifier, instance, constructor || expression.name);                             // 9132
            }                                                                                                          // 9133
          }                                                                                                            // 9134
          return instance;                                                                                             // 9135
        }, {                                                                                                           // 9136
          instance: instance,                                                                                          // 9137
          identifier: identifier                                                                                       // 9138
        });                                                                                                            // 9139
      }                                                                                                                // 9140
                                                                                                                       // 9141
      instance = $injector.instantiate(expression, locals, constructor);                                               // 9142
                                                                                                                       // 9143
      if (identifier) {                                                                                                // 9144
        addIdentifier(locals, identifier, instance, constructor || expression.name);                                   // 9145
      }                                                                                                                // 9146
                                                                                                                       // 9147
      return instance;                                                                                                 // 9148
    };                                                                                                                 // 9149
                                                                                                                       // 9150
    function addIdentifier(locals, identifier, instance, name) {                                                       // 9151
      if (!(locals && isObject(locals.$scope))) {                                                                      // 9152
        throw minErr('$controller')('noscp',                                                                           // 9153
          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",                          // 9154
          name, identifier);                                                                                           // 9155
      }                                                                                                                // 9156
                                                                                                                       // 9157
      locals.$scope[identifier] = instance;                                                                            // 9158
    }                                                                                                                  // 9159
  }];                                                                                                                  // 9160
}                                                                                                                      // 9161
                                                                                                                       // 9162
/**                                                                                                                    // 9163
 * @ngdoc service                                                                                                      // 9164
 * @name $document                                                                                                     // 9165
 * @requires $window                                                                                                   // 9166
 *                                                                                                                     // 9167
 * @description                                                                                                        // 9168
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.                      // 9169
 *                                                                                                                     // 9170
 * @example                                                                                                            // 9171
   <example module="documentExample">                                                                                  // 9172
     <file name="index.html">                                                                                          // 9173
       <div ng-controller="ExampleController">                                                                         // 9174
         <p>$document title: <b ng-bind="title"></b></p>                                                               // 9175
         <p>window.document title: <b ng-bind="windowTitle"></b></p>                                                   // 9176
       </div>                                                                                                          // 9177
     </file>                                                                                                           // 9178
     <file name="script.js">                                                                                           // 9179
       angular.module('documentExample', [])                                                                           // 9180
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {                        // 9181
           $scope.title = $document[0].title;                                                                          // 9182
           $scope.windowTitle = angular.element(window.document)[0].title;                                             // 9183
         }]);                                                                                                          // 9184
     </file>                                                                                                           // 9185
   </example>                                                                                                          // 9186
 */                                                                                                                    // 9187
function $DocumentProvider() {                                                                                         // 9188
  this.$get = ['$window', function(window) {                                                                           // 9189
    return jqLite(window.document);                                                                                    // 9190
  }];                                                                                                                  // 9191
}                                                                                                                      // 9192
                                                                                                                       // 9193
/**                                                                                                                    // 9194
 * @ngdoc service                                                                                                      // 9195
 * @name $exceptionHandler                                                                                             // 9196
 * @requires ng.$log                                                                                                   // 9197
 *                                                                                                                     // 9198
 * @description                                                                                                        // 9199
 * Any uncaught exception in angular expressions is delegated to this service.                                         // 9200
 * The default implementation simply delegates to `$log.error` which logs it into                                      // 9201
 * the browser console.                                                                                                // 9202
 *                                                                                                                     // 9203
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by                                       // 9204
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.                                      // 9205
 *                                                                                                                     // 9206
 * ## Example:                                                                                                         // 9207
 *                                                                                                                     // 9208
 * ```js                                                                                                               // 9209
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {                                 // 9210
 *     return function(exception, cause) {                                                                             // 9211
 *       exception.message += ' (caused by "' + cause + '")';                                                          // 9212
 *       throw exception;                                                                                              // 9213
 *     };                                                                                                              // 9214
 *   });                                                                                                               // 9215
 * ```                                                                                                                 // 9216
 *                                                                                                                     // 9217
 * This example will override the normal action of `$exceptionHandler`, to make angular                                // 9218
 * exceptions fail hard when they happen, instead of just logging to the console.                                      // 9219
 *                                                                                                                     // 9220
 * <hr />                                                                                                              // 9221
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`                       // 9222
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}                         // 9223
 * (unless executed during a digest).                                                                                  // 9224
 *                                                                                                                     // 9225
 * If you wish, you can manually delegate exceptions, e.g.                                                             // 9226
 * `try { ... } catch(e) { $exceptionHandler(e); }`                                                                    // 9227
 *                                                                                                                     // 9228
 * @param {Error} exception Exception associated with the error.                                                       // 9229
 * @param {string=} cause optional information about the context in which                                              // 9230
 *       the error was thrown.                                                                                         // 9231
 *                                                                                                                     // 9232
 */                                                                                                                    // 9233
function $ExceptionHandlerProvider() {                                                                                 // 9234
  this.$get = ['$log', function($log) {                                                                                // 9235
    return function(exception, cause) {                                                                                // 9236
      $log.error.apply($log, arguments);                                                                               // 9237
    };                                                                                                                 // 9238
  }];                                                                                                                  // 9239
}                                                                                                                      // 9240
                                                                                                                       // 9241
var $$ForceReflowProvider = function() {                                                                               // 9242
  this.$get = ['$document', function($document) {                                                                      // 9243
    return function(domNode) {                                                                                         // 9244
      //the line below will force the browser to perform a repaint so                                                  // 9245
      //that all the animated elements within the animation frame will                                                 // 9246
      //be properly updated and drawn on screen. This is required to                                                   // 9247
      //ensure that the preparation animation is properly flushed so that                                              // 9248
      //the active state picks up from there. DO NOT REMOVE THIS LINE.                                                 // 9249
      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH                                         // 9250
      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND                                        // 9251
      //WILL TAKE YEARS AWAY FROM YOUR LIFE.                                                                           // 9252
      if (domNode) {                                                                                                   // 9253
        if (!domNode.nodeType && domNode instanceof jqLite) {                                                          // 9254
          domNode = domNode[0];                                                                                        // 9255
        }                                                                                                              // 9256
      } else {                                                                                                         // 9257
        domNode = $document[0].body;                                                                                   // 9258
      }                                                                                                                // 9259
      return domNode.offsetWidth + 1;                                                                                  // 9260
    };                                                                                                                 // 9261
  }];                                                                                                                  // 9262
};                                                                                                                     // 9263
                                                                                                                       // 9264
var APPLICATION_JSON = 'application/json';                                                                             // 9265
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};                             // 9266
var JSON_START = /^\[|^\{(?!\{)/;                                                                                      // 9267
var JSON_ENDS = {                                                                                                      // 9268
  '[': /]$/,                                                                                                           // 9269
  '{': /}$/                                                                                                            // 9270
};                                                                                                                     // 9271
var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;                                                                           // 9272
var $httpMinErr = minErr('$http');                                                                                     // 9273
var $httpMinErrLegacyFn = function(method) {                                                                           // 9274
  return function() {                                                                                                  // 9275
    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);   // 9276
  };                                                                                                                   // 9277
};                                                                                                                     // 9278
                                                                                                                       // 9279
function serializeValue(v) {                                                                                           // 9280
  if (isObject(v)) {                                                                                                   // 9281
    return isDate(v) ? v.toISOString() : toJson(v);                                                                    // 9282
  }                                                                                                                    // 9283
  return v;                                                                                                            // 9284
}                                                                                                                      // 9285
                                                                                                                       // 9286
                                                                                                                       // 9287
function $HttpParamSerializerProvider() {                                                                              // 9288
  /**                                                                                                                  // 9289
   * @ngdoc service                                                                                                    // 9290
   * @name $httpParamSerializer                                                                                        // 9291
   * @description                                                                                                      // 9292
   *                                                                                                                   // 9293
   * Default {@link $http `$http`} params serializer that converts objects to strings                                  // 9294
   * according to the following rules:                                                                                 // 9295
   *                                                                                                                   // 9296
   * * `{'foo': 'bar'}` results in `foo=bar`                                                                           // 9297
   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)                    // 9299
   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
   *                                                                                                                   // 9301
   * Note that serializer will sort the request parameters alphabetically.                                             // 9302
   * */                                                                                                                // 9303
                                                                                                                       // 9304
  this.$get = function() {                                                                                             // 9305
    return function ngParamSerializer(params) {                                                                        // 9306
      if (!params) return '';                                                                                          // 9307
      var parts = [];                                                                                                  // 9308
      forEachSorted(params, function(value, key) {                                                                     // 9309
        if (value === null || isUndefined(value)) return;                                                              // 9310
        if (isArray(value)) {                                                                                          // 9311
          forEach(value, function(v, k) {                                                                              // 9312
            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));                                // 9313
          });                                                                                                          // 9314
        } else {                                                                                                       // 9315
          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));                               // 9316
        }                                                                                                              // 9317
      });                                                                                                              // 9318
                                                                                                                       // 9319
      return parts.join('&');                                                                                          // 9320
    };                                                                                                                 // 9321
  };                                                                                                                   // 9322
}                                                                                                                      // 9323
                                                                                                                       // 9324
function $HttpParamSerializerJQLikeProvider() {                                                                        // 9325
  /**                                                                                                                  // 9326
   * @ngdoc service                                                                                                    // 9327
   * @name $httpParamSerializerJQLike                                                                                  // 9328
   * @description                                                                                                      // 9329
   *                                                                                                                   // 9330
   * Alternative {@link $http `$http`} params serializer that follows                                                  // 9331
   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.                                           // 9332
   * The serializer will also sort the params alphabetically.                                                          // 9333
   *                                                                                                                   // 9334
   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:                   // 9335
   *                                                                                                                   // 9336
   * ```js                                                                                                             // 9337
   * $http({                                                                                                           // 9338
   *   url: myUrl,                                                                                                     // 9339
   *   method: 'GET',                                                                                                  // 9340
   *   params: myParams,                                                                                               // 9341
   *   paramSerializer: '$httpParamSerializerJQLike'                                                                   // 9342
   * });                                                                                                               // 9343
   * ```                                                                                                               // 9344
   *                                                                                                                   // 9345
   * It is also possible to set it as the default `paramSerializer` in the                                             // 9346
   * {@link $httpProvider#defaults `$httpProvider`}.                                                                   // 9347
   *                                                                                                                   // 9348
   * Additionally, you can inject the serializer and use it explicitly, for example to serialize                       // 9349
   * form data for submission:                                                                                         // 9350
   *                                                                                                                   // 9351
   * ```js                                                                                                             // 9352
   * .controller(function($http, $httpParamSerializerJQLike) {                                                         // 9353
   *   //...                                                                                                           // 9354
   *                                                                                                                   // 9355
   *   $http({                                                                                                         // 9356
   *     url: myUrl,                                                                                                   // 9357
   *     method: 'POST',                                                                                               // 9358
   *     data: $httpParamSerializerJQLike(myData),                                                                     // 9359
   *     headers: {                                                                                                    // 9360
   *       'Content-Type': 'application/x-www-form-urlencoded'                                                         // 9361
   *     }                                                                                                             // 9362
   *   });                                                                                                             // 9363
   *                                                                                                                   // 9364
   * });                                                                                                               // 9365
   * ```                                                                                                               // 9366
   *                                                                                                                   // 9367
   * */                                                                                                                // 9368
  this.$get = function() {                                                                                             // 9369
    return function jQueryLikeParamSerializer(params) {                                                                // 9370
      if (!params) return '';                                                                                          // 9371
      var parts = [];                                                                                                  // 9372
      serialize(params, '', true);                                                                                     // 9373
      return parts.join('&');                                                                                          // 9374
                                                                                                                       // 9375
      function serialize(toSerialize, prefix, topLevel) {                                                              // 9376
        if (toSerialize === null || isUndefined(toSerialize)) return;                                                  // 9377
        if (isArray(toSerialize)) {                                                                                    // 9378
          forEach(toSerialize, function(value, index) {                                                                // 9379
            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');                                     // 9380
          });                                                                                                          // 9381
        } else if (isObject(toSerialize) && !isDate(toSerialize)) {                                                    // 9382
          forEachSorted(toSerialize, function(value, key) {                                                            // 9383
            serialize(value, prefix +                                                                                  // 9384
                (topLevel ? '' : '[') +                                                                                // 9385
                key +                                                                                                  // 9386
                (topLevel ? '' : ']'));                                                                                // 9387
          });                                                                                                          // 9388
        } else {                                                                                                       // 9389
          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));                      // 9390
        }                                                                                                              // 9391
      }                                                                                                                // 9392
    };                                                                                                                 // 9393
  };                                                                                                                   // 9394
}                                                                                                                      // 9395
                                                                                                                       // 9396
function defaultHttpResponseTransform(data, headers) {                                                                 // 9397
  if (isString(data)) {                                                                                                // 9398
    // Strip json vulnerability protection prefix and trim whitespace                                                  // 9399
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();                                                    // 9400
                                                                                                                       // 9401
    if (tempData) {                                                                                                    // 9402
      var contentType = headers('Content-Type');                                                                       // 9403
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {                    // 9404
        data = fromJson(tempData);                                                                                     // 9405
      }                                                                                                                // 9406
    }                                                                                                                  // 9407
  }                                                                                                                    // 9408
                                                                                                                       // 9409
  return data;                                                                                                         // 9410
}                                                                                                                      // 9411
                                                                                                                       // 9412
function isJsonLike(str) {                                                                                             // 9413
    var jsonStart = str.match(JSON_START);                                                                             // 9414
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);                                                             // 9415
}                                                                                                                      // 9416
                                                                                                                       // 9417
/**                                                                                                                    // 9418
 * Parse headers into key value object                                                                                 // 9419
 *                                                                                                                     // 9420
 * @param {string} headers Raw headers as a string                                                                     // 9421
 * @returns {Object} Parsed headers as key value object                                                                // 9422
 */                                                                                                                    // 9423
function parseHeaders(headers) {                                                                                       // 9424
  var parsed = createMap(), i;                                                                                         // 9425
                                                                                                                       // 9426
  function fillInParsed(key, val) {                                                                                    // 9427
    if (key) {                                                                                                         // 9428
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;                                                      // 9429
    }                                                                                                                  // 9430
  }                                                                                                                    // 9431
                                                                                                                       // 9432
  if (isString(headers)) {                                                                                             // 9433
    forEach(headers.split('\n'), function(line) {                                                                      // 9434
      i = line.indexOf(':');                                                                                           // 9435
      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));                                      // 9436
    });                                                                                                                // 9437
  } else if (isObject(headers)) {                                                                                      // 9438
    forEach(headers, function(headerVal, headerKey) {                                                                  // 9439
      fillInParsed(lowercase(headerKey), trim(headerVal));                                                             // 9440
    });                                                                                                                // 9441
  }                                                                                                                    // 9442
                                                                                                                       // 9443
  return parsed;                                                                                                       // 9444
}                                                                                                                      // 9445
                                                                                                                       // 9446
                                                                                                                       // 9447
/**                                                                                                                    // 9448
 * Returns a function that provides access to parsed headers.                                                          // 9449
 *                                                                                                                     // 9450
 * Headers are lazy parsed when first requested.                                                                       // 9451
 * @see parseHeaders                                                                                                   // 9452
 *                                                                                                                     // 9453
 * @param {(string|Object)} headers Headers to provide access to.                                                      // 9454
 * @returns {function(string=)} Returns a getter function which if called with:                                        // 9455
 *                                                                                                                     // 9456
 *   - if called with single an argument returns a single header value or null                                         // 9457
 *   - if called with no arguments returns an object containing all headers.                                           // 9458
 */                                                                                                                    // 9459
function headersGetter(headers) {                                                                                      // 9460
  var headersObj;                                                                                                      // 9461
                                                                                                                       // 9462
  return function(name) {                                                                                              // 9463
    if (!headersObj) headersObj =  parseHeaders(headers);                                                              // 9464
                                                                                                                       // 9465
    if (name) {                                                                                                        // 9466
      var value = headersObj[lowercase(name)];                                                                         // 9467
      if (value === void 0) {                                                                                          // 9468
        value = null;                                                                                                  // 9469
      }                                                                                                                // 9470
      return value;                                                                                                    // 9471
    }                                                                                                                  // 9472
                                                                                                                       // 9473
    return headersObj;                                                                                                 // 9474
  };                                                                                                                   // 9475
}                                                                                                                      // 9476
                                                                                                                       // 9477
                                                                                                                       // 9478
/**                                                                                                                    // 9479
 * Chain all given functions                                                                                           // 9480
 *                                                                                                                     // 9481
 * This function is used for both request and response transforming                                                    // 9482
 *                                                                                                                     // 9483
 * @param {*} data Data to transform.                                                                                  // 9484
 * @param {function(string=)} headers HTTP headers getter fn.                                                          // 9485
 * @param {number} status HTTP status code of the response.                                                            // 9486
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.                                         // 9487
 * @returns {*} Transformed data.                                                                                      // 9488
 */                                                                                                                    // 9489
function transformData(data, headers, status, fns) {                                                                   // 9490
  if (isFunction(fns)) {                                                                                               // 9491
    return fns(data, headers, status);                                                                                 // 9492
  }                                                                                                                    // 9493
                                                                                                                       // 9494
  forEach(fns, function(fn) {                                                                                          // 9495
    data = fn(data, headers, status);                                                                                  // 9496
  });                                                                                                                  // 9497
                                                                                                                       // 9498
  return data;                                                                                                         // 9499
}                                                                                                                      // 9500
                                                                                                                       // 9501
                                                                                                                       // 9502
function isSuccess(status) {                                                                                           // 9503
  return 200 <= status && status < 300;                                                                                // 9504
}                                                                                                                      // 9505
                                                                                                                       // 9506
                                                                                                                       // 9507
/**                                                                                                                    // 9508
 * @ngdoc provider                                                                                                     // 9509
 * @name $httpProvider                                                                                                 // 9510
 * @description                                                                                                        // 9511
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.                           // 9512
 * */                                                                                                                  // 9513
function $HttpProvider() {                                                                                             // 9514
  /**                                                                                                                  // 9515
   * @ngdoc property                                                                                                   // 9516
   * @name $httpProvider#defaults                                                                                      // 9517
   * @description                                                                                                      // 9518
   *                                                                                                                   // 9519
   * Object containing default values for all {@link ng.$http $http} requests.                                         // 9520
   *                                                                                                                   // 9521
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}                 // 9522
   * that will provide the cache for all requests who set their `cache` property to `true`.                            // 9523
   * If you set the `defaults.cache = false` then only requests that specify their own custom                          // 9524
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.                        // 9525
   *                                                                                                                   // 9526
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.                            // 9527
   * Defaults value is `'XSRF-TOKEN'`.                                                                                 // 9528
   *                                                                                                                   // 9529
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the                             // 9530
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.                                                                   // 9531
   *                                                                                                                   // 9532
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.                                     // 9533
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on                                         // 9534
   * setting default headers.                                                                                          // 9535
   *     - **`defaults.headers.common`**                                                                               // 9536
   *     - **`defaults.headers.post`**                                                                                 // 9537
   *     - **`defaults.headers.put`**                                                                                  // 9538
   *     - **`defaults.headers.patch`**                                                                                // 9539
   *                                                                                                                   // 9540
   *                                                                                                                   // 9541
   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function                 // 9542
   *  used to the prepare string representation of request parameters (specified as an object).                        // 9543
   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.    // 9544
   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.                                                // 9545
   *                                                                                                                   // 9546
   **/                                                                                                                 // 9547
  var defaults = this.defaults = {                                                                                     // 9548
    // transform incoming response data                                                                                // 9549
    transformResponse: [defaultHttpResponseTransform],                                                                 // 9550
                                                                                                                       // 9551
    // transform outgoing request data                                                                                 // 9552
    transformRequest: [function(d) {                                                                                   // 9553
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;                                // 9554
    }],                                                                                                                // 9555
                                                                                                                       // 9556
    // default headers                                                                                                 // 9557
    headers: {                                                                                                         // 9558
      common: {                                                                                                        // 9559
        'Accept': 'application/json, text/plain, */*'                                                                  // 9560
      },                                                                                                               // 9561
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9562
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9563
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)                                                               // 9564
    },                                                                                                                 // 9565
                                                                                                                       // 9566
    xsrfCookieName: 'XSRF-TOKEN',                                                                                      // 9567
    xsrfHeaderName: 'X-XSRF-TOKEN',                                                                                    // 9568
                                                                                                                       // 9569
    paramSerializer: '$httpParamSerializer'                                                                            // 9570
  };                                                                                                                   // 9571
                                                                                                                       // 9572
  var useApplyAsync = false;                                                                                           // 9573
  /**                                                                                                                  // 9574
   * @ngdoc method                                                                                                     // 9575
   * @name $httpProvider#useApplyAsync                                                                                 // 9576
   * @description                                                                                                      // 9577
   *                                                                                                                   // 9578
   * Configure $http service to combine processing of multiple http responses received at around                       // 9579
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in              // 9580
   * significant performance improvement for bigger applications that make many HTTP requests                          // 9581
   * concurrently (common during application bootstrap).                                                               // 9582
   *                                                                                                                   // 9583
   * Defaults to false. If no value is specified, returns the current configured value.                                // 9584
   *                                                                                                                   // 9585
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred                          // 9586
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window                        // 9587
   *    to load and share the same digest cycle.                                                                       // 9588
   *                                                                                                                   // 9589
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9590
   *    otherwise, returns the current configured value.                                                               // 9591
   **/                                                                                                                 // 9592
  this.useApplyAsync = function(value) {                                                                               // 9593
    if (isDefined(value)) {                                                                                            // 9594
      useApplyAsync = !!value;                                                                                         // 9595
      return this;                                                                                                     // 9596
    }                                                                                                                  // 9597
    return useApplyAsync;                                                                                              // 9598
  };                                                                                                                   // 9599
                                                                                                                       // 9600
  var useLegacyPromise = true;                                                                                         // 9601
  /**                                                                                                                  // 9602
   * @ngdoc method                                                                                                     // 9603
   * @name $httpProvider#useLegacyPromiseExtensions                                                                    // 9604
   * @description                                                                                                      // 9605
   *                                                                                                                   // 9606
   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.                 // 9607
   * This should be used to make sure that applications work without these methods.                                    // 9608
   *                                                                                                                   // 9609
   * Defaults to false. If no value is specified, returns the current configured value.                                // 9610
   *                                                                                                                   // 9611
   * @param {boolean=} value If true, `$http` will return a normal promise without the `success` and `error` methods.  // 9612
   *                                                                                                                   // 9613
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9614
   *    otherwise, returns the current configured value.                                                               // 9615
   **/                                                                                                                 // 9616
  this.useLegacyPromiseExtensions = function(value) {                                                                  // 9617
    if (isDefined(value)) {                                                                                            // 9618
      useLegacyPromise = !!value;                                                                                      // 9619
      return this;                                                                                                     // 9620
    }                                                                                                                  // 9621
    return useLegacyPromise;                                                                                           // 9622
  };                                                                                                                   // 9623
                                                                                                                       // 9624
  /**                                                                                                                  // 9625
   * @ngdoc property                                                                                                   // 9626
   * @name $httpProvider#interceptors                                                                                  // 9627
   * @description                                                                                                      // 9628
   *                                                                                                                   // 9629
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}                     // 9630
   * pre-processing of request or postprocessing of responses.                                                         // 9631
   *                                                                                                                   // 9632
   * These service factories are ordered by request, i.e. they are applied in the same order as the                    // 9633
   * array, on request, but reverse order, on response.                                                                // 9634
   *                                                                                                                   // 9635
   * {@link ng.$http#interceptors Interceptors detailed info}                                                          // 9636
   **/                                                                                                                 // 9637
  var interceptorFactories = this.interceptors = [];                                                                   // 9638
                                                                                                                       // 9639
  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',                     // 9640
      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {                               // 9641
                                                                                                                       // 9642
    var defaultCache = $cacheFactory('$http');                                                                         // 9643
                                                                                                                       // 9644
    /**                                                                                                                // 9645
     * Make sure that default param serializer is exposed as a function                                                // 9646
     */                                                                                                                // 9647
    defaults.paramSerializer = isString(defaults.paramSerializer) ?                                                    // 9648
      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;                                              // 9649
                                                                                                                       // 9650
    /**                                                                                                                // 9651
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.                             // 9652
     * The reversal is needed so that we can build up the interception chain around the                                // 9653
     * server request.                                                                                                 // 9654
     */                                                                                                                // 9655
    var reversedInterceptors = [];                                                                                     // 9656
                                                                                                                       // 9657
    forEach(interceptorFactories, function(interceptorFactory) {                                                       // 9658
      reversedInterceptors.unshift(isString(interceptorFactory)                                                        // 9659
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));                                 // 9660
    });                                                                                                                // 9661
                                                                                                                       // 9662
    /**                                                                                                                // 9663
     * @ngdoc service                                                                                                  // 9664
     * @kind function                                                                                                  // 9665
     * @name $http                                                                                                     // 9666
     * @requires ng.$httpBackend                                                                                       // 9667
     * @requires $cacheFactory                                                                                         // 9668
     * @requires $rootScope                                                                                            // 9669
     * @requires $q                                                                                                    // 9670
     * @requires $injector                                                                                             // 9671
     *                                                                                                                 // 9672
     * @description                                                                                                    // 9673
     * The `$http` service is a core Angular service that facilitates communication with the remote                    // 9674
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)                // 9675
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).                                                      // 9676
     *                                                                                                                 // 9677
     * For unit testing applications that use `$http` service, see                                                     // 9678
     * {@link ngMock.$httpBackend $httpBackend mock}.                                                                  // 9679
     *                                                                                                                 // 9680
     * For a higher level of abstraction, please check out the {@link ngResource.$resource                             // 9681
     * $resource} service.                                                                                             // 9682
     *                                                                                                                 // 9683
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by                                    // 9684
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage                    // 9685
     * it is important to familiarize yourself with these APIs and the guarantees they provide.                        // 9686
     *                                                                                                                 // 9687
     *                                                                                                                 // 9688
     * ## General usage                                                                                                // 9689
     * The `$http` service is a function which takes a single argument — a configuration object —                      // 9690
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.                                  // 9691
     *                                                                                                                 // 9692
     * ```js                                                                                                           // 9693
     *   // Simple GET request example :                                                                               // 9694
     *   $http.get('/someUrl').                                                                                        // 9695
     *     then(function(response) {                                                                                   // 9696
     *       // this callback will be called asynchronously                                                            // 9697
     *       // when the response is available                                                                         // 9698
     *     }, function(response) {                                                                                     // 9699
     *       // called asynchronously if an error occurs                                                               // 9700
     *       // or server returns response with an error status.                                                       // 9701
     *     });                                                                                                         // 9702
     * ```                                                                                                             // 9703
     *                                                                                                                 // 9704
     * ```js                                                                                                           // 9705
     *   // Simple POST request example (passing data) :                                                               // 9706
     *   $http.post('/someUrl', {msg:'hello word!'}).                                                                  // 9707
     *     then(function(response) {                                                                                   // 9708
     *       // this callback will be called asynchronously                                                            // 9709
     *       // when the response is available                                                                         // 9710
     *     }, function(response) {                                                                                     // 9711
     *       // called asynchronously if an error occurs                                                               // 9712
     *       // or server returns response with an error status.                                                       // 9713
     *     });                                                                                                         // 9714
     * ```                                                                                                             // 9715
     *                                                                                                                 // 9716
     * The response object has these properties:                                                                       // 9717
     *                                                                                                                 // 9718
     *   - **data** – `{string|Object}` – The response body transformed with the transform                             // 9719
     *     functions.                                                                                                  // 9720
     *   - **status** – `{number}` – HTTP status code of the response.                                                 // 9721
     *   - **headers** – `{function([headerName])}` – Header getter function.                                          // 9722
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.                   // 9723
     *   - **statusText** – `{string}` – HTTP status text of the response.                                             // 9724
     *                                                                                                                 // 9725
     * A response status code between 200 and 299 is considered a success status and                                   // 9726
     * will result in the success callback being called. Note that if the response is a redirect,                      // 9727
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be                        // 9728
     * called for such responses.                                                                                      // 9729
     *                                                                                                                 // 9730
     * ## Writing Unit Tests that use $http                                                                            // 9731
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call                                        // 9732
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending                                    // 9733
     * request using trained responses.                                                                                // 9734
     *                                                                                                                 // 9735
     * ```                                                                                                             // 9736
     * $httpBackend.expectGET(...);                                                                                    // 9737
     * $http.get(...);                                                                                                 // 9738
     * $httpBackend.flush();                                                                                           // 9739
     * ```                                                                                                             // 9740
     *                                                                                                                 // 9741
     * ## Shortcut methods                                                                                             // 9742
     *                                                                                                                 // 9743
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and                       // 9744
     * request data must be passed in for POST/PUT requests.                                                           // 9745
     *                                                                                                                 // 9746
     * ```js                                                                                                           // 9747
     *   $http.get('/someUrl').then(successCallback);                                                                  // 9748
     *   $http.post('/someUrl', data).then(successCallback);                                                           // 9749
     * ```                                                                                                             // 9750
     *                                                                                                                 // 9751
     * Complete list of shortcut methods:                                                                              // 9752
     *                                                                                                                 // 9753
     * - {@link ng.$http#get $http.get}                                                                                // 9754
     * - {@link ng.$http#head $http.head}                                                                              // 9755
     * - {@link ng.$http#post $http.post}                                                                              // 9756
     * - {@link ng.$http#put $http.put}                                                                                // 9757
     * - {@link ng.$http#delete $http.delete}                                                                          // 9758
     * - {@link ng.$http#jsonp $http.jsonp}                                                                            // 9759
     * - {@link ng.$http#patch $http.patch}                                                                            // 9760
     *                                                                                                                 // 9761
     *                                                                                                                 // 9762
     * ## Deprecation Notice                                                                                           // 9763
     * <div class="alert alert-danger">                                                                                // 9764
     *   The `$http` legacy promise methods `success` and `error` have been deprecated.                                // 9765
     *   Use the standard `then` method instead.                                                                       // 9766
     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to      // 9767
     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.                              // 9768
     * </div>                                                                                                          // 9769
     *                                                                                                                 // 9770
     * ## Setting HTTP Headers                                                                                         // 9771
     *                                                                                                                 // 9772
     * The $http service will automatically add certain HTTP headers to all requests. These defaults                   // 9773
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration                         // 9774
     * object, which currently contains this default configuration:                                                    // 9775
     *                                                                                                                 // 9776
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):                           // 9777
     *   - `Accept: application/json, text/plain, * / *`                                                               // 9778
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)                                    // 9779
     *   - `Content-Type: application/json`                                                                            // 9780
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)                                       // 9781
     *   - `Content-Type: application/json`                                                                            // 9782
     *                                                                                                                 // 9783
     * To add or overwrite these defaults, simply add or remove a property from these configuration                    // 9784
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object                      // 9785
     * with the lowercased HTTP method name as the key, e.g.                                                           // 9786
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.                                               // 9787
     *                                                                                                                 // 9788
     * The defaults can also be set at runtime via the `$http.defaults` object in the same                             // 9789
     * fashion. For example:                                                                                           // 9790
     *                                                                                                                 // 9791
     * ```                                                                                                             // 9792
     * module.run(function($http) {                                                                                    // 9793
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'                                            // 9794
     * });                                                                                                             // 9795
     * ```                                                                                                             // 9796
     *                                                                                                                 // 9797
     * In addition, you can supply a `headers` property in the config object passed when                               // 9798
     * calling `$http(config)`, which overrides the defaults without changing them globally.                           // 9799
     *                                                                                                                 // 9800
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,    // 9801
     * Use the `headers` property, setting the desired header to `undefined`. For example:                             // 9802
     *                                                                                                                 // 9803
     * ```js                                                                                                           // 9804
     * var req = {                                                                                                     // 9805
     *  method: 'POST',                                                                                                // 9806
     *  url: 'http://example.com',                                                                                     // 9807
     *  headers: {                                                                                                     // 9808
     *    'Content-Type': undefined                                                                                    // 9809
     *  },                                                                                                             // 9810
     *  data: { test: 'test' }                                                                                         // 9811
     * }                                                                                                               // 9812
     *                                                                                                                 // 9813
     * $http(req).then(function(){...}, function(){...});                                                              // 9814
     * ```                                                                                                             // 9815
     *                                                                                                                 // 9816
     * ## Transforming Requests and Responses                                                                          // 9817
     *                                                                                                                 // 9818
     * Both requests and responses can be transformed using transformation functions: `transformRequest`               // 9819
     * and `transformResponse`. These properties can be a single function that returns                                 // 9820
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,   // 9821
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.            // 9822
     *                                                                                                                 // 9823
     * ### Default Transformations                                                                                     // 9824
     *                                                                                                                 // 9825
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and                         // 9826
     * `defaults.transformResponse` properties. If a request does not provide its own transformations                  // 9827
     * then these will be applied.                                                                                     // 9828
     *                                                                                                                 // 9829
     * You can augment or replace the default transformations by modifying these properties by adding to or            // 9830
     * replacing the array.                                                                                            // 9831
     *                                                                                                                 // 9832
     * Angular provides the following default transformations:                                                         // 9833
     *                                                                                                                 // 9834
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):      // 9835
     *                                                                                                                 // 9836
     * - If the `data` property of the request configuration object contains an object, serialize it                   // 9837
     *   into JSON format.                                                                                             // 9838
     *                                                                                                                 // 9839
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):   // 9840
     *                                                                                                                 // 9841
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).                            // 9842
     *  - If JSON response is detected, deserialize it using a JSON parser.                                            // 9843
     *                                                                                                                 // 9844
     *                                                                                                                 // 9845
     * ### Overriding the Default Transformations Per Request                                                          // 9846
     *                                                                                                                 // 9847
     * If you wish override the request/response transformations only for a single request then provide                // 9848
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed                     // 9849
     * into `$http`.                                                                                                   // 9850
     *                                                                                                                 // 9851
     * Note that if you provide these properties on the config object the default transformations will be              // 9852
     * overwritten. If you wish to augment the default transformations then you must include them in your              // 9853
     * local transformation array.                                                                                     // 9854
     *                                                                                                                 // 9855
     * The following code demonstrates adding a new response transformation to be run after the default response       // 9856
     * transformations have been run.                                                                                  // 9857
     *                                                                                                                 // 9858
     * ```js                                                                                                           // 9859
     * function appendTransform(defaults, transform) {                                                                 // 9860
     *                                                                                                                 // 9861
     *   // We can't guarantee that the default transformation is an array                                             // 9862
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];                                                 // 9863
     *                                                                                                                 // 9864
     *   // Append the new transformation to the defaults                                                              // 9865
     *   return defaults.concat(transform);                                                                            // 9866
     * }                                                                                                               // 9867
     *                                                                                                                 // 9868
     * $http({                                                                                                         // 9869
     *   url: '...',                                                                                                   // 9870
     *   method: 'GET',                                                                                                // 9871
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {                        // 9872
     *     return doTransform(value);                                                                                  // 9873
     *   })                                                                                                            // 9874
     * });                                                                                                             // 9875
     * ```                                                                                                             // 9876
     *                                                                                                                 // 9877
     *                                                                                                                 // 9878
     * ## Caching                                                                                                      // 9879
     *                                                                                                                 // 9880
     * To enable caching, set the request configuration `cache` property to `true` (to use default                     // 9881
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).                       // 9882
     * When the cache is enabled, `$http` stores the response from the server in the specified                         // 9883
     * cache. The next time the same request is made, the response is served from the cache without                    // 9884
     * sending a request to the server.                                                                                // 9885
     *                                                                                                                 // 9886
     * Note that even if the response is served from cache, delivery of the data is asynchronous in                    // 9887
     * the same way that real requests are.                                                                            // 9888
     *                                                                                                                 // 9889
     * If there are multiple GET requests for the same URL that should be cached using the same                        // 9890
     * cache, but the cache is not populated yet, only one request to the server will be made and                      // 9891
     * the remaining requests will be fulfilled using the response from the first request.                             // 9892
     *                                                                                                                 // 9893
     * You can change the default cache to a new object (built with                                                    // 9894
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the                                                       // 9895
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set                                 // 9896
     * their `cache` property to `true` will now use this cache object.                                                // 9897
     *                                                                                                                 // 9898
     * If you set the default cache to `false` then only requests that specify their own custom                        // 9899
     * cache object will be cached.                                                                                    // 9900
     *                                                                                                                 // 9901
     * ## Interceptors                                                                                                 // 9902
     *                                                                                                                 // 9903
     * Before you start creating interceptors, be sure to understand the                                               // 9904
     * {@link ng.$q $q and deferred/promise APIs}.                                                                     // 9905
     *                                                                                                                 // 9906
     * For purposes of global error handling, authentication, or any kind of synchronous or                            // 9907
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be                    // 9908
     * able to intercept requests before they are handed to the server and                                             // 9909
     * responses before they are handed over to the application code that                                              // 9910
     * initiated these requests. The interceptors leverage the {@link ng.$q                                            // 9911
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.                        // 9912
     *                                                                                                                 // 9913
     * The interceptors are service factories that are registered with the `$httpProvider` by                          // 9914
     * adding them to the `$httpProvider.interceptors` array. The factory is called and                                // 9915
     * injected with dependencies (if specified) and returns the interceptor.                                          // 9916
     *                                                                                                                 // 9917
     * There are two kinds of interceptors (and two kinds of rejection interceptors):                                  // 9918
     *                                                                                                                 // 9919
     *   * `request`: interceptors get called with a http `config` object. The function is free to                     // 9920
     *     modify the `config` object or create a new one. The function needs to return the `config`                   // 9921
     *     object directly, or a promise containing the `config` or a new `config` object.                             // 9922
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or                       // 9923
     *     resolved with a rejection.                                                                                  // 9924
     *   * `response`: interceptors get called with http `response` object. The function is free to                    // 9925
     *     modify the `response` object or create a new one. The function needs to return the `response`               // 9926
     *     object directly, or as a promise containing the `response` or a new `response` object.                      // 9927
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or                      // 9928
     *     resolved with a rejection.                                                                                  // 9929
     *                                                                                                                 // 9930
     *                                                                                                                 // 9931
     * ```js                                                                                                           // 9932
     *   // register the interceptor as a service                                                                      // 9933
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {                                // 9934
     *     return {                                                                                                    // 9935
     *       // optional method                                                                                        // 9936
     *       'request': function(config) {                                                                             // 9937
     *         // do something on success                                                                              // 9938
     *         return config;                                                                                          // 9939
     *       },                                                                                                        // 9940
     *                                                                                                                 // 9941
     *       // optional method                                                                                        // 9942
     *      'requestError': function(rejection) {                                                                      // 9943
     *         // do something on error                                                                                // 9944
     *         if (canRecover(rejection)) {                                                                            // 9945
     *           return responseOrNewPromise                                                                           // 9946
     *         }                                                                                                       // 9947
     *         return $q.reject(rejection);                                                                            // 9948
     *       },                                                                                                        // 9949
     *                                                                                                                 // 9950
     *                                                                                                                 // 9951
     *                                                                                                                 // 9952
     *       // optional method                                                                                        // 9953
     *       'response': function(response) {                                                                          // 9954
     *         // do something on success                                                                              // 9955
     *         return response;                                                                                        // 9956
     *       },                                                                                                        // 9957
     *                                                                                                                 // 9958
     *       // optional method                                                                                        // 9959
     *      'responseError': function(rejection) {                                                                     // 9960
     *         // do something on error                                                                                // 9961
     *         if (canRecover(rejection)) {                                                                            // 9962
     *           return responseOrNewPromise                                                                           // 9963
     *         }                                                                                                       // 9964
     *         return $q.reject(rejection);                                                                            // 9965
     *       }                                                                                                         // 9966
     *     };                                                                                                          // 9967
     *   });                                                                                                           // 9968
     *                                                                                                                 // 9969
     *   $httpProvider.interceptors.push('myHttpInterceptor');                                                         // 9970
     *                                                                                                                 // 9971
     *                                                                                                                 // 9972
     *   // alternatively, register the interceptor via an anonymous factory                                           // 9973
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {                                      // 9974
     *     return {                                                                                                    // 9975
     *      'request': function(config) {                                                                              // 9976
     *          // same as above                                                                                       // 9977
     *       },                                                                                                        // 9978
     *                                                                                                                 // 9979
     *       'response': function(response) {                                                                          // 9980
     *          // same as above                                                                                       // 9981
     *       }                                                                                                         // 9982
     *     };                                                                                                          // 9983
     *   });                                                                                                           // 9984
     * ```                                                                                                             // 9985
     *                                                                                                                 // 9986
     * ## Security Considerations                                                                                      // 9987
     *                                                                                                                 // 9988
     * When designing web applications, consider security threats from:                                                // 9989
     *                                                                                                                 // 9990
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 9991
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)                                               // 9992
     *                                                                                                                 // 9993
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes                    // 9994
     * pre-configured with strategies that address these issues, but for this to work backend server                   // 9995
     * cooperation is required.                                                                                        // 9996
     *                                                                                                                 // 9997
     * ### JSON Vulnerability Protection                                                                               // 9998
     *                                                                                                                 // 9999
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 10000
     * allows third party website to turn your JSON resource URL into                                                  // 10001
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To                                   // 10002
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.                        // 10003
     * Angular will automatically strip the prefix before processing it as JSON.                                       // 10004
     *                                                                                                                 // 10005
     * For example if your server needs to return:                                                                     // 10006
     * ```js                                                                                                           // 10007
     * ['one','two']                                                                                                   // 10008
     * ```                                                                                                             // 10009
     *                                                                                                                 // 10010
     * which is vulnerable to attack, your server can return:                                                          // 10011
     * ```js                                                                                                           // 10012
     * )]}',                                                                                                           // 10013
     * ['one','two']                                                                                                   // 10014
     * ```                                                                                                             // 10015
     *                                                                                                                 // 10016
     * Angular will strip the prefix, before processing the JSON.                                                      // 10017
     *                                                                                                                 // 10018
     *                                                                                                                 // 10019
     * ### Cross Site Request Forgery (XSRF) Protection                                                                // 10020
     *                                                                                                                 // 10021
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which                         // 10022
     * an unauthorized site can gain your user's private data. Angular provides a mechanism                            // 10023
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie                    // 10024
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only                           // 10025
     * JavaScript that runs on your domain could read the cookie, your server can be assured that                      // 10026
     * the XHR came from JavaScript running on your domain. The header will not be set for                             // 10027
     * cross-domain requests.                                                                                          // 10028
     *                                                                                                                 // 10029
     * To take advantage of this, your server needs to set a token in a JavaScript readable session                    // 10030
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the                        // 10031
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure                     // 10032
     * that only JavaScript running on your domain could have sent the request. The token must be                      // 10033
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from                       // 10034
     * making up its own tokens). We recommend that the token is a digest of your site's                               // 10035
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)                      // 10036
     * for added security.                                                                                             // 10037
     *                                                                                                                 // 10038
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName                            // 10039
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,                         // 10040
     * or the per-request config object.                                                                               // 10041
     *                                                                                                                 // 10042
     * In order to prevent collisions in environments where multiple Angular apps share the                            // 10043
     * same domain or subdomain, we recommend that each application uses unique cookie name.                           // 10044
     *                                                                                                                 // 10045
     * @param {object} config Object describing the request to be made and how it should be                            // 10046
     *    processed. The object has following properties:                                                              // 10047
     *                                                                                                                 // 10048
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)                                            // 10049
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.                   // 10050
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized               // 10051
     *      with the `paramSerializer` and appended as GET parameters.                                                 // 10052
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.                                // 10053
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing                   // 10054
     *      HTTP headers to send to the server. If the return value of a function is null, the                         // 10055
     *      header will not be sent. Functions accept a config object as an argument.                                  // 10056
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.                     // 10057
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.                                // 10058
     *    - **transformRequest** –                                                                                     // 10059
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –                                  // 10060
     *      transform function or an array of such functions. The transform function takes the http                    // 10061
     *      request body and headers and returns its transformed (typically serialized) version.                       // 10062
     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 10063
     *      Overriding the Default Transformations}                                                                    // 10064
     *    - **transformResponse** –                                                                                    // 10065
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –                  // 10066
     *      transform function or an array of such functions. The transform function takes the http                    // 10067
     *      response body, headers and status and returns its transformed (typically deserialized) version.            // 10068
     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 10069
     *      Overriding the Default TransformationjqLiks}                                                               // 10070
     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to               // 10071
     *      prepare the string representation of request parameters (specified as an object).                          // 10072
     *      If specified as string, it is interpreted as function registered with the                                  // 10073
     *      {@link $injector $injector}, which means you can create your own serializer                                // 10074
     *      by registering it as a {@link auto.$provide#service service}.                                              // 10075
     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};                           // 10076
     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}               // 10077
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the                   // 10078
     *      GET request, otherwise if a cache instance built with                                                      // 10079
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for                                        // 10080
     *      caching.                                                                                                   // 10081
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}                       // 10082
     *      that should abort the request when resolved.                                                               // 10083
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the                       // 10084
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.                                                                                      // 10086
     *    - **responseType** - `{string}` - see                                                                        // 10087
     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
     *                                                                                                                 // 10089
     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object             // 10090
     *                        when the request succeeds or fails.                                                      // 10091
     *                                                                                                                 // 10092
     *                                                                                                                 // 10093
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending                        // 10094
     *   requests. This is primarily meant to be used for debugging purposes.                                          // 10095
     *                                                                                                                 // 10096
     *                                                                                                                 // 10097
     * @example                                                                                                        // 10098
<example module="httpExample">                                                                                         // 10099
<file name="index.html">                                                                                               // 10100
  <div ng-controller="FetchController">                                                                                // 10101
    <select ng-model="method" aria-label="Request method">                                                             // 10102
      <option>GET</option>                                                                                             // 10103
      <option>JSONP</option>                                                                                           // 10104
    </select>                                                                                                          // 10105
    <input type="text" ng-model="url" size="80" aria-label="URL" />                                                    // 10106
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>                                                        // 10107
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>                     // 10108
    <button id="samplejsonpbtn"                                                                                        // 10109
      ng-click="updateModel('JSONP',                                                                                   // 10110
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">                      // 10111
      Sample JSONP                                                                                                     // 10112
    </button>                                                                                                          // 10113
    <button id="invalidjsonpbtn"                                                                                       // 10114
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">                     // 10115
        Invalid JSONP                                                                                                  // 10116
      </button>                                                                                                        // 10117
    <pre>http status code: {{status}}</pre>                                                                            // 10118
    <pre>http response data: {{data}}</pre>                                                                            // 10119
  </div>                                                                                                               // 10120
</file>                                                                                                                // 10121
<file name="script.js">                                                                                                // 10122
  angular.module('httpExample', [])                                                                                    // 10123
    .controller('FetchController', ['$scope', '$http', '$templateCache',                                               // 10124
      function($scope, $http, $templateCache) {                                                                        // 10125
        $scope.method = 'GET';                                                                                         // 10126
        $scope.url = 'http-hello.html';                                                                                // 10127
                                                                                                                       // 10128
        $scope.fetch = function() {                                                                                    // 10129
          $scope.code = null;                                                                                          // 10130
          $scope.response = null;                                                                                      // 10131
                                                                                                                       // 10132
          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).                                      // 10133
            then(function(response) {                                                                                  // 10134
              $scope.status = response.status;                                                                         // 10135
              $scope.data = response.data;                                                                             // 10136
            }, function(response) {                                                                                    // 10137
              $scope.data = response.data || "Request failed";                                                         // 10138
              $scope.status = response.status;                                                                         // 10139
          });                                                                                                          // 10140
        };                                                                                                             // 10141
                                                                                                                       // 10142
        $scope.updateModel = function(method, url) {                                                                   // 10143
          $scope.method = method;                                                                                      // 10144
          $scope.url = url;                                                                                            // 10145
        };                                                                                                             // 10146
      }]);                                                                                                             // 10147
</file>                                                                                                                // 10148
<file name="http-hello.html">                                                                                          // 10149
  Hello, $http!                                                                                                        // 10150
</file>                                                                                                                // 10151
<file name="protractor.js" type="protractor">                                                                          // 10152
  var status = element(by.binding('status'));                                                                          // 10153
  var data = element(by.binding('data'));                                                                              // 10154
  var fetchBtn = element(by.id('fetchbtn'));                                                                           // 10155
  var sampleGetBtn = element(by.id('samplegetbtn'));                                                                   // 10156
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));                                                               // 10157
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));                                                             // 10158
                                                                                                                       // 10159
  it('should make an xhr GET request', function() {                                                                    // 10160
    sampleGetBtn.click();                                                                                              // 10161
    fetchBtn.click();                                                                                                  // 10162
    expect(status.getText()).toMatch('200');                                                                           // 10163
    expect(data.getText()).toMatch(/Hello, \$http!/);                                                                  // 10164
  });                                                                                                                  // 10165
                                                                                                                       // 10166
// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185                                  // 10167
// it('should make a JSONP request to angularjs.org', function() {                                                     // 10168
//   sampleJsonpBtn.click();                                                                                           // 10169
//   fetchBtn.click();                                                                                                 // 10170
//   expect(status.getText()).toMatch('200');                                                                          // 10171
//   expect(data.getText()).toMatch(/Super Hero!/);                                                                    // 10172
// });                                                                                                                 // 10173
                                                                                                                       // 10174
  it('should make JSONP request to invalid URL and invoke the error handler',                                          // 10175
      function() {                                                                                                     // 10176
    invalidJsonpBtn.click();                                                                                           // 10177
    fetchBtn.click();                                                                                                  // 10178
    expect(status.getText()).toMatch('0');                                                                             // 10179
    expect(data.getText()).toMatch('Request failed');                                                                  // 10180
  });                                                                                                                  // 10181
</file>                                                                                                                // 10182
</example>                                                                                                             // 10183
     */                                                                                                                // 10184
    function $http(requestConfig) {                                                                                    // 10185
                                                                                                                       // 10186
      if (!angular.isObject(requestConfig)) {                                                                          // 10187
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }                                                                                                                // 10189
                                                                                                                       // 10190
      var config = extend({                                                                                            // 10191
        method: 'get',                                                                                                 // 10192
        transformRequest: defaults.transformRequest,                                                                   // 10193
        transformResponse: defaults.transformResponse,                                                                 // 10194
        paramSerializer: defaults.paramSerializer                                                                      // 10195
      }, requestConfig);                                                                                               // 10196
                                                                                                                       // 10197
      config.headers = mergeHeaders(requestConfig);                                                                    // 10198
      config.method = uppercase(config.method);                                                                        // 10199
      config.paramSerializer = isString(config.paramSerializer) ?                                                      // 10200
        $injector.get(config.paramSerializer) : config.paramSerializer;                                                // 10201
                                                                                                                       // 10202
      var serverRequest = function(config) {                                                                           // 10203
        var headers = config.headers;                                                                                  // 10204
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);          // 10205
                                                                                                                       // 10206
        // strip content-type if data is undefined                                                                     // 10207
        if (isUndefined(reqData)) {                                                                                    // 10208
          forEach(headers, function(value, header) {                                                                   // 10209
            if (lowercase(header) === 'content-type') {                                                                // 10210
                delete headers[header];                                                                                // 10211
            }                                                                                                          // 10212
          });                                                                                                          // 10213
        }                                                                                                              // 10214
                                                                                                                       // 10215
        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {                           // 10216
          config.withCredentials = defaults.withCredentials;                                                           // 10217
        }                                                                                                              // 10218
                                                                                                                       // 10219
        // send request                                                                                                // 10220
        return sendReq(config, reqData).then(transformResponse, transformResponse);                                    // 10221
      };                                                                                                               // 10222
                                                                                                                       // 10223
      var chain = [serverRequest, undefined];                                                                          // 10224
      var promise = $q.when(config);                                                                                   // 10225
                                                                                                                       // 10226
      // apply interceptors                                                                                            // 10227
      forEach(reversedInterceptors, function(interceptor) {                                                            // 10228
        if (interceptor.request || interceptor.requestError) {                                                         // 10229
          chain.unshift(interceptor.request, interceptor.requestError);                                                // 10230
        }                                                                                                              // 10231
        if (interceptor.response || interceptor.responseError) {                                                       // 10232
          chain.push(interceptor.response, interceptor.responseError);                                                 // 10233
        }                                                                                                              // 10234
      });                                                                                                              // 10235
                                                                                                                       // 10236
      while (chain.length) {                                                                                           // 10237
        var thenFn = chain.shift();                                                                                    // 10238
        var rejectFn = chain.shift();                                                                                  // 10239
                                                                                                                       // 10240
        promise = promise.then(thenFn, rejectFn);                                                                      // 10241
      }                                                                                                                // 10242
                                                                                                                       // 10243
      if (useLegacyPromise) {                                                                                          // 10244
        promise.success = function(fn) {                                                                               // 10245
          assertArgFn(fn, 'fn');                                                                                       // 10246
                                                                                                                       // 10247
          promise.then(function(response) {                                                                            // 10248
            fn(response.data, response.status, response.headers, config);                                              // 10249
          });                                                                                                          // 10250
          return promise;                                                                                              // 10251
        };                                                                                                             // 10252
                                                                                                                       // 10253
        promise.error = function(fn) {                                                                                 // 10254
          assertArgFn(fn, 'fn');                                                                                       // 10255
                                                                                                                       // 10256
          promise.then(null, function(response) {                                                                      // 10257
            fn(response.data, response.status, response.headers, config);                                              // 10258
          });                                                                                                          // 10259
          return promise;                                                                                              // 10260
        };                                                                                                             // 10261
      } else {                                                                                                         // 10262
        promise.success = $httpMinErrLegacyFn('success');                                                              // 10263
        promise.error = $httpMinErrLegacyFn('error');                                                                  // 10264
      }                                                                                                                // 10265
                                                                                                                       // 10266
      return promise;                                                                                                  // 10267
                                                                                                                       // 10268
      function transformResponse(response) {                                                                           // 10269
        // make a copy since the response must be cacheable                                                            // 10270
        var resp = extend({}, response);                                                                               // 10271
        if (!response.data) {                                                                                          // 10272
          resp.data = response.data;                                                                                   // 10273
        } else {                                                                                                       // 10274
          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);       // 10275
        }                                                                                                              // 10276
        return (isSuccess(response.status))                                                                            // 10277
          ? resp                                                                                                       // 10278
          : $q.reject(resp);                                                                                           // 10279
      }                                                                                                                // 10280
                                                                                                                       // 10281
      function executeHeaderFns(headers, config) {                                                                     // 10282
        var headerContent, processedHeaders = {};                                                                      // 10283
                                                                                                                       // 10284
        forEach(headers, function(headerFn, header) {                                                                  // 10285
          if (isFunction(headerFn)) {                                                                                  // 10286
            headerContent = headerFn(config);                                                                          // 10287
            if (headerContent != null) {                                                                               // 10288
              processedHeaders[header] = headerContent;                                                                // 10289
            }                                                                                                          // 10290
          } else {                                                                                                     // 10291
            processedHeaders[header] = headerFn;                                                                       // 10292
          }                                                                                                            // 10293
        });                                                                                                            // 10294
                                                                                                                       // 10295
        return processedHeaders;                                                                                       // 10296
      }                                                                                                                // 10297
                                                                                                                       // 10298
      function mergeHeaders(config) {                                                                                  // 10299
        var defHeaders = defaults.headers,                                                                             // 10300
            reqHeaders = extend({}, config.headers),                                                                   // 10301
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;                                                      // 10302
                                                                                                                       // 10303
        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);                              // 10304
                                                                                                                       // 10305
        // using for-in instead of forEach to avoid unecessary iteration after header has been found                   // 10306
        defaultHeadersIteration:                                                                                       // 10307
        for (defHeaderName in defHeaders) {                                                                            // 10308
          lowercaseDefHeaderName = lowercase(defHeaderName);                                                           // 10309
                                                                                                                       // 10310
          for (reqHeaderName in reqHeaders) {                                                                          // 10311
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {                                                 // 10312
              continue defaultHeadersIteration;                                                                        // 10313
            }                                                                                                          // 10314
          }                                                                                                            // 10315
                                                                                                                       // 10316
          reqHeaders[defHeaderName] = defHeaders[defHeaderName];                                                       // 10317
        }                                                                                                              // 10318
                                                                                                                       // 10319
        // execute if header value is a function for merged headers                                                    // 10320
        return executeHeaderFns(reqHeaders, shallowCopy(config));                                                      // 10321
      }                                                                                                                // 10322
    }                                                                                                                  // 10323
                                                                                                                       // 10324
    $http.pendingRequests = [];                                                                                        // 10325
                                                                                                                       // 10326
    /**                                                                                                                // 10327
     * @ngdoc method                                                                                                   // 10328
     * @name $http#get                                                                                                 // 10329
     *                                                                                                                 // 10330
     * @description                                                                                                    // 10331
     * Shortcut method to perform `GET` request.                                                                       // 10332
     *                                                                                                                 // 10333
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10334
     * @param {Object=} config Optional configuration object                                                           // 10335
     * @returns {HttpPromise} Future object                                                                            // 10336
     */                                                                                                                // 10337
                                                                                                                       // 10338
    /**                                                                                                                // 10339
     * @ngdoc method                                                                                                   // 10340
     * @name $http#delete                                                                                              // 10341
     *                                                                                                                 // 10342
     * @description                                                                                                    // 10343
     * Shortcut method to perform `DELETE` request.                                                                    // 10344
     *                                                                                                                 // 10345
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10346
     * @param {Object=} config Optional configuration object                                                           // 10347
     * @returns {HttpPromise} Future object                                                                            // 10348
     */                                                                                                                // 10349
                                                                                                                       // 10350
    /**                                                                                                                // 10351
     * @ngdoc method                                                                                                   // 10352
     * @name $http#head                                                                                                // 10353
     *                                                                                                                 // 10354
     * @description                                                                                                    // 10355
     * Shortcut method to perform `HEAD` request.                                                                      // 10356
     *                                                                                                                 // 10357
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10358
     * @param {Object=} config Optional configuration object                                                           // 10359
     * @returns {HttpPromise} Future object                                                                            // 10360
     */                                                                                                                // 10361
                                                                                                                       // 10362
    /**                                                                                                                // 10363
     * @ngdoc method                                                                                                   // 10364
     * @name $http#jsonp                                                                                               // 10365
     *                                                                                                                 // 10366
     * @description                                                                                                    // 10367
     * Shortcut method to perform `JSONP` request.                                                                     // 10368
     *                                                                                                                 // 10369
     * @param {string} url Relative or absolute URL specifying the destination of the request.                         // 10370
     *                     The name of the callback should be the string `JSON_CALLBACK`.                              // 10371
     * @param {Object=} config Optional configuration object                                                           // 10372
     * @returns {HttpPromise} Future object                                                                            // 10373
     */                                                                                                                // 10374
    createShortMethods('get', 'delete', 'head', 'jsonp');                                                              // 10375
                                                                                                                       // 10376
    /**                                                                                                                // 10377
     * @ngdoc method                                                                                                   // 10378
     * @name $http#post                                                                                                // 10379
     *                                                                                                                 // 10380
     * @description                                                                                                    // 10381
     * Shortcut method to perform `POST` request.                                                                      // 10382
     *                                                                                                                 // 10383
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10384
     * @param {*} data Request content                                                                                 // 10385
     * @param {Object=} config Optional configuration object                                                           // 10386
     * @returns {HttpPromise} Future object                                                                            // 10387
     */                                                                                                                // 10388
                                                                                                                       // 10389
    /**                                                                                                                // 10390
     * @ngdoc method                                                                                                   // 10391
     * @name $http#put                                                                                                 // 10392
     *                                                                                                                 // 10393
     * @description                                                                                                    // 10394
     * Shortcut method to perform `PUT` request.                                                                       // 10395
     *                                                                                                                 // 10396
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10397
     * @param {*} data Request content                                                                                 // 10398
     * @param {Object=} config Optional configuration object                                                           // 10399
     * @returns {HttpPromise} Future object                                                                            // 10400
     */                                                                                                                // 10401
                                                                                                                       // 10402
     /**                                                                                                               // 10403
      * @ngdoc method                                                                                                  // 10404
      * @name $http#patch                                                                                              // 10405
      *                                                                                                                // 10406
      * @description                                                                                                   // 10407
      * Shortcut method to perform `PATCH` request.                                                                    // 10408
      *                                                                                                                // 10409
      * @param {string} url Relative or absolute URL specifying the destination of the request                         // 10410
      * @param {*} data Request content                                                                                // 10411
      * @param {Object=} config Optional configuration object                                                          // 10412
      * @returns {HttpPromise} Future object                                                                           // 10413
      */                                                                                                               // 10414
    createShortMethodsWithData('post', 'put', 'patch');                                                                // 10415
                                                                                                                       // 10416
        /**                                                                                                            // 10417
         * @ngdoc property                                                                                             // 10418
         * @name $http#defaults                                                                                        // 10419
         *                                                                                                             // 10420
         * @description                                                                                                // 10421
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of                        // 10422
         * default headers, withCredentials as well as request and response transformations.                           // 10423
         *                                                                                                             // 10424
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.                        // 10425
         */                                                                                                            // 10426
    $http.defaults = defaults;                                                                                         // 10427
                                                                                                                       // 10428
                                                                                                                       // 10429
    return $http;                                                                                                      // 10430
                                                                                                                       // 10431
                                                                                                                       // 10432
    function createShortMethods(names) {                                                                               // 10433
      forEach(arguments, function(name) {                                                                              // 10434
        $http[name] = function(url, config) {                                                                          // 10435
          return $http(extend({}, config || {}, {                                                                      // 10436
            method: name,                                                                                              // 10437
            url: url                                                                                                   // 10438
          }));                                                                                                         // 10439
        };                                                                                                             // 10440
      });                                                                                                              // 10441
    }                                                                                                                  // 10442
                                                                                                                       // 10443
                                                                                                                       // 10444
    function createShortMethodsWithData(name) {                                                                        // 10445
      forEach(arguments, function(name) {                                                                              // 10446
        $http[name] = function(url, data, config) {                                                                    // 10447
          return $http(extend({}, config || {}, {                                                                      // 10448
            method: name,                                                                                              // 10449
            url: url,                                                                                                  // 10450
            data: data                                                                                                 // 10451
          }));                                                                                                         // 10452
        };                                                                                                             // 10453
      });                                                                                                              // 10454
    }                                                                                                                  // 10455
                                                                                                                       // 10456
                                                                                                                       // 10457
    /**                                                                                                                // 10458
     * Makes the request.                                                                                              // 10459
     *                                                                                                                 // 10460
     * !!! ACCESSES CLOSURE VARS:                                                                                      // 10461
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests                                   // 10462
     */                                                                                                                // 10463
    function sendReq(config, reqData) {                                                                                // 10464
      var deferred = $q.defer(),                                                                                       // 10465
          promise = deferred.promise,                                                                                  // 10466
          cache,                                                                                                       // 10467
          cachedResp,                                                                                                  // 10468
          reqHeaders = config.headers,                                                                                 // 10469
          url = buildUrl(config.url, config.paramSerializer(config.params));                                           // 10470
                                                                                                                       // 10471
      $http.pendingRequests.push(config);                                                                              // 10472
      promise.then(removePendingReq, removePendingReq);                                                                // 10473
                                                                                                                       // 10474
                                                                                                                       // 10475
      if ((config.cache || defaults.cache) && config.cache !== false &&                                                // 10476
          (config.method === 'GET' || config.method === 'JSONP')) {                                                    // 10477
        cache = isObject(config.cache) ? config.cache                                                                  // 10478
              : isObject(defaults.cache) ? defaults.cache                                                              // 10479
              : defaultCache;                                                                                          // 10480
      }                                                                                                                // 10481
                                                                                                                       // 10482
      if (cache) {                                                                                                     // 10483
        cachedResp = cache.get(url);                                                                                   // 10484
        if (isDefined(cachedResp)) {                                                                                   // 10485
          if (isPromiseLike(cachedResp)) {                                                                             // 10486
            // cached request has already been sent, but there is no response yet                                      // 10487
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);                                       // 10488
          } else {                                                                                                     // 10489
            // serving from cache                                                                                      // 10490
            if (isArray(cachedResp)) {                                                                                 // 10491
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);                 // 10492
            } else {                                                                                                   // 10493
              resolvePromise(cachedResp, 200, {}, 'OK');                                                               // 10494
            }                                                                                                          // 10495
          }                                                                                                            // 10496
        } else {                                                                                                       // 10497
          // put the promise for the non-transformed response into cache as a placeholder                              // 10498
          cache.put(url, promise);                                                                                     // 10499
        }                                                                                                              // 10500
      }                                                                                                                // 10501
                                                                                                                       // 10502
                                                                                                                       // 10503
      // if we won't have the response in cache, set the xsrf headers and                                              // 10504
      // send the request to the backend                                                                               // 10505
      if (isUndefined(cachedResp)) {                                                                                   // 10506
        var xsrfValue = urlIsSameOrigin(config.url)                                                                    // 10507
            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]                                       // 10508
            : undefined;                                                                                               // 10509
        if (xsrfValue) {                                                                                               // 10510
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;                                  // 10511
        }                                                                                                              // 10512
                                                                                                                       // 10513
        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,                                    // 10514
            config.withCredentials, config.responseType);                                                              // 10515
      }                                                                                                                // 10516
                                                                                                                       // 10517
      return promise;                                                                                                  // 10518
                                                                                                                       // 10519
                                                                                                                       // 10520
      /**                                                                                                              // 10521
       * Callback registered to $httpBackend():                                                                        // 10522
       *  - caches the response if desired                                                                             // 10523
       *  - resolves the raw $http promise                                                                             // 10524
       *  - calls $apply                                                                                               // 10525
       */                                                                                                              // 10526
      function done(status, response, headersString, statusText) {                                                     // 10527
        if (cache) {                                                                                                   // 10528
          if (isSuccess(status)) {                                                                                     // 10529
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);                               // 10530
          } else {                                                                                                     // 10531
            // remove promise from the cache                                                                           // 10532
            cache.remove(url);                                                                                         // 10533
          }                                                                                                            // 10534
        }                                                                                                              // 10535
                                                                                                                       // 10536
        function resolveHttpPromise() {                                                                                // 10537
          resolvePromise(response, status, headersString, statusText);                                                 // 10538
        }                                                                                                              // 10539
                                                                                                                       // 10540
        if (useApplyAsync) {                                                                                           // 10541
          $rootScope.$applyAsync(resolveHttpPromise);                                                                  // 10542
        } else {                                                                                                       // 10543
          resolveHttpPromise();                                                                                        // 10544
          if (!$rootScope.$$phase) $rootScope.$apply();                                                                // 10545
        }                                                                                                              // 10546
      }                                                                                                                // 10547
                                                                                                                       // 10548
                                                                                                                       // 10549
      /**                                                                                                              // 10550
       * Resolves the raw $http promise.                                                                               // 10551
       */                                                                                                              // 10552
      function resolvePromise(response, status, headers, statusText) {                                                 // 10553
        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)                                      // 10554
        status = status >= -1 ? status : 0;                                                                            // 10555
                                                                                                                       // 10556
        (isSuccess(status) ? deferred.resolve : deferred.reject)({                                                     // 10557
          data: response,                                                                                              // 10558
          status: status,                                                                                              // 10559
          headers: headersGetter(headers),                                                                             // 10560
          config: config,                                                                                              // 10561
          statusText: statusText                                                                                       // 10562
        });                                                                                                            // 10563
      }                                                                                                                // 10564
                                                                                                                       // 10565
      function resolvePromiseWithResult(result) {                                                                      // 10566
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);                  // 10567
      }                                                                                                                // 10568
                                                                                                                       // 10569
      function removePendingReq() {                                                                                    // 10570
        var idx = $http.pendingRequests.indexOf(config);                                                               // 10571
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);                                                          // 10572
      }                                                                                                                // 10573
    }                                                                                                                  // 10574
                                                                                                                       // 10575
                                                                                                                       // 10576
    function buildUrl(url, serializedParams) {                                                                         // 10577
      if (serializedParams.length > 0) {                                                                               // 10578
        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;                                              // 10579
      }                                                                                                                // 10580
      return url;                                                                                                      // 10581
    }                                                                                                                  // 10582
  }];                                                                                                                  // 10583
}                                                                                                                      // 10584
                                                                                                                       // 10585
function createXhr() {                                                                                                 // 10586
    return new window.XMLHttpRequest();                                                                                // 10587
}                                                                                                                      // 10588
                                                                                                                       // 10589
/**                                                                                                                    // 10590
 * @ngdoc service                                                                                                      // 10591
 * @name $httpBackend                                                                                                  // 10592
 * @requires $window                                                                                                   // 10593
 * @requires $document                                                                                                 // 10594
 *                                                                                                                     // 10595
 * @description                                                                                                        // 10596
 * HTTP backend used by the {@link ng.$http service} that delegates to                                                 // 10597
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.                                            // 10598
 *                                                                                                                     // 10599
 * You should never need to use this service directly, instead use the higher-level abstractions:                      // 10600
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.                                                   // 10601
 *                                                                                                                     // 10602
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock                                  // 10603
 * $httpBackend} which can be trained with responses.                                                                  // 10604
 */                                                                                                                    // 10605
function $HttpBackendProvider() {                                                                                      // 10606
  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {                            // 10607
    return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);            // 10608
  }];                                                                                                                  // 10609
}                                                                                                                      // 10610
                                                                                                                       // 10611
function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {                               // 10612
  // TODO(vojta): fix the signature                                                                                    // 10613
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {                      // 10614
    $browser.$$incOutstandingRequestCount();                                                                           // 10615
    url = url || $browser.url();                                                                                       // 10616
                                                                                                                       // 10617
    if (lowercase(method) == 'jsonp') {                                                                                // 10618
      var callbackId = '_' + (callbacks.counter++).toString(36);                                                       // 10619
      callbacks[callbackId] = function(data) {                                                                         // 10620
        callbacks[callbackId].data = data;                                                                             // 10621
        callbacks[callbackId].called = true;                                                                           // 10622
      };                                                                                                               // 10623
                                                                                                                       // 10624
      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),                        // 10625
          callbackId, function(status, text) {                                                                         // 10626
        completeRequest(callback, status, callbacks[callbackId].data, "", text);                                       // 10627
        callbacks[callbackId] = noop;                                                                                  // 10628
      });                                                                                                              // 10629
    } else {                                                                                                           // 10630
                                                                                                                       // 10631
      var xhr = createXhr();                                                                                           // 10632
                                                                                                                       // 10633
      xhr.open(method, url, true);                                                                                     // 10634
      forEach(headers, function(value, key) {                                                                          // 10635
        if (isDefined(value)) {                                                                                        // 10636
            xhr.setRequestHeader(key, value);                                                                          // 10637
        }                                                                                                              // 10638
      });                                                                                                              // 10639
                                                                                                                       // 10640
      xhr.onload = function requestLoaded() {                                                                          // 10641
        var statusText = xhr.statusText || '';                                                                         // 10642
                                                                                                                       // 10643
        // responseText is the old-school way of retrieving response (supported by IE9)                                // 10644
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)                     // 10645
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;                                          // 10646
                                                                                                                       // 10647
        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)                                                      // 10648
        var status = xhr.status === 1223 ? 204 : xhr.status;                                                           // 10649
                                                                                                                       // 10650
        // fix status code when it is 0 (0 status is undocumented).                                                    // 10651
        // Occurs when accessing file resources or on Android 4.1 stock browser                                        // 10652
        // while retrieving files from application cache.                                                              // 10653
        if (status === 0) {                                                                                            // 10654
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;                                      // 10655
        }                                                                                                              // 10656
                                                                                                                       // 10657
        completeRequest(callback,                                                                                      // 10658
            status,                                                                                                    // 10659
            response,                                                                                                  // 10660
            xhr.getAllResponseHeaders(),                                                                               // 10661
            statusText);                                                                                               // 10662
      };                                                                                                               // 10663
                                                                                                                       // 10664
      var requestError = function() {                                                                                  // 10665
        // The response is always empty                                                                                // 10666
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');                                                                 // 10668
      };                                                                                                               // 10669
                                                                                                                       // 10670
      xhr.onerror = requestError;                                                                                      // 10671
      xhr.onabort = requestError;                                                                                      // 10672
                                                                                                                       // 10673
      if (withCredentials) {                                                                                           // 10674
        xhr.withCredentials = true;                                                                                    // 10675
      }                                                                                                                // 10676
                                                                                                                       // 10677
      if (responseType) {                                                                                              // 10678
        try {                                                                                                          // 10679
          xhr.responseType = responseType;                                                                             // 10680
        } catch (e) {                                                                                                  // 10681
          // WebKit added support for the json responseType value on 09/03/2013                                        // 10682
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are                          // 10683
          // known to throw when setting the value "json" as the response type. Other older                            // 10684
          // browsers implementing the responseType                                                                    // 10685
          //                                                                                                           // 10686
          // The json response type can be ignored if not supported, because JSON payloads are                         // 10687
          // parsed on the client-side regardless.                                                                     // 10688
          if (responseType !== 'json') {                                                                               // 10689
            throw e;                                                                                                   // 10690
          }                                                                                                            // 10691
        }                                                                                                              // 10692
      }                                                                                                                // 10693
                                                                                                                       // 10694
      xhr.send(isUndefined(post) ? null : post);                                                                       // 10695
    }                                                                                                                  // 10696
                                                                                                                       // 10697
    if (timeout > 0) {                                                                                                 // 10698
      var timeoutId = $browserDefer(timeoutRequest, timeout);                                                          // 10699
    } else if (isPromiseLike(timeout)) {                                                                               // 10700
      timeout.then(timeoutRequest);                                                                                    // 10701
    }                                                                                                                  // 10702
                                                                                                                       // 10703
                                                                                                                       // 10704
    function timeoutRequest() {                                                                                        // 10705
      jsonpDone && jsonpDone();                                                                                        // 10706
      xhr && xhr.abort();                                                                                              // 10707
    }                                                                                                                  // 10708
                                                                                                                       // 10709
    function completeRequest(callback, status, response, headersString, statusText) {                                  // 10710
      // cancel timeout and subsequent timeout promise resolution                                                      // 10711
      if (isDefined(timeoutId)) {                                                                                      // 10712
        $browserDefer.cancel(timeoutId);                                                                               // 10713
      }                                                                                                                // 10714
      jsonpDone = xhr = null;                                                                                          // 10715
                                                                                                                       // 10716
      callback(status, response, headersString, statusText);                                                           // 10717
      $browser.$$completeOutstandingRequest(noop);                                                                     // 10718
    }                                                                                                                  // 10719
  };                                                                                                                   // 10720
                                                                                                                       // 10721
  function jsonpReq(url, callbackId, done) {                                                                           // 10722
    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:                     // 10723
    // - fetches local scripts via XHR and evals them                                                                  // 10724
    // - adds and immediately removes script elements from the document                                                // 10725
    var script = rawDocument.createElement('script'), callback = null;                                                 // 10726
    script.type = "text/javascript";                                                                                   // 10727
    script.src = url;                                                                                                  // 10728
    script.async = true;                                                                                               // 10729
                                                                                                                       // 10730
    callback = function(event) {                                                                                       // 10731
      removeEventListenerFn(script, "load", callback);                                                                 // 10732
      removeEventListenerFn(script, "error", callback);                                                                // 10733
      rawDocument.body.removeChild(script);                                                                            // 10734
      script = null;                                                                                                   // 10735
      var status = -1;                                                                                                 // 10736
      var text = "unknown";                                                                                            // 10737
                                                                                                                       // 10738
      if (event) {                                                                                                     // 10739
        if (event.type === "load" && !callbacks[callbackId].called) {                                                  // 10740
          event = { type: "error" };                                                                                   // 10741
        }                                                                                                              // 10742
        text = event.type;                                                                                             // 10743
        status = event.type === "error" ? 404 : 200;                                                                   // 10744
      }                                                                                                                // 10745
                                                                                                                       // 10746
      if (done) {                                                                                                      // 10747
        done(status, text);                                                                                            // 10748
      }                                                                                                                // 10749
    };                                                                                                                 // 10750
                                                                                                                       // 10751
    addEventListenerFn(script, "load", callback);                                                                      // 10752
    addEventListenerFn(script, "error", callback);                                                                     // 10753
    rawDocument.body.appendChild(script);                                                                              // 10754
    return callback;                                                                                                   // 10755
  }                                                                                                                    // 10756
}                                                                                                                      // 10757
                                                                                                                       // 10758
var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');                                          // 10759
$interpolateMinErr.throwNoconcat = function(text) {                                                                    // 10760
  throw $interpolateMinErr('noconcat',                                                                                 // 10761
      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +                                        // 10762
      "interpolations that concatenate multiple expressions when a trusted value is " +                                // 10763
      "required.  See http://docs.angularjs.org/api/ng.$sce", text);                                                   // 10764
};                                                                                                                     // 10765
                                                                                                                       // 10766
$interpolateMinErr.interr = function(text, err) {                                                                      // 10767
  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());                            // 10768
};                                                                                                                     // 10769
                                                                                                                       // 10770
/**                                                                                                                    // 10771
 * @ngdoc provider                                                                                                     // 10772
 * @name $interpolateProvider                                                                                          // 10773
 *                                                                                                                     // 10774
 * @description                                                                                                        // 10775
 *                                                                                                                     // 10776
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.                                           // 10777
 *                                                                                                                     // 10778
 * @example                                                                                                            // 10779
<example module="customInterpolationApp">                                                                              // 10780
<file name="index.html">                                                                                               // 10781
<script>                                                                                                               // 10782
  var customInterpolationApp = angular.module('customInterpolationApp', []);                                           // 10783
                                                                                                                       // 10784
  customInterpolationApp.config(function($interpolateProvider) {                                                       // 10785
    $interpolateProvider.startSymbol('//');                                                                            // 10786
    $interpolateProvider.endSymbol('//');                                                                              // 10787
  });                                                                                                                  // 10788
                                                                                                                       // 10789
                                                                                                                       // 10790
  customInterpolationApp.controller('DemoController', function() {                                                     // 10791
      this.label = "This binding is brought you by // interpolation symbols.";                                         // 10792
  });                                                                                                                  // 10793
</script>                                                                                                              // 10794
<div ng-app="App" ng-controller="DemoController as demo">                                                              // 10795
    //demo.label//                                                                                                     // 10796
</div>                                                                                                                 // 10797
</file>                                                                                                                // 10798
<file name="protractor.js" type="protractor">                                                                          // 10799
  it('should interpolate binding with custom symbols', function() {                                                    // 10800
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });                                                                                                                  // 10802
</file>                                                                                                                // 10803
</example>                                                                                                             // 10804
 */                                                                                                                    // 10805
function $InterpolateProvider() {                                                                                      // 10806
  var startSymbol = '{{';                                                                                              // 10807
  var endSymbol = '}}';                                                                                                // 10808
                                                                                                                       // 10809
  /**                                                                                                                  // 10810
   * @ngdoc method                                                                                                     // 10811
   * @name $interpolateProvider#startSymbol                                                                            // 10812
   * @description                                                                                                      // 10813
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.                                // 10814
   *                                                                                                                   // 10815
   * @param {string=} value new value to set the starting symbol to.                                                   // 10816
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10817
   */                                                                                                                  // 10818
  this.startSymbol = function(value) {                                                                                 // 10819
    if (value) {                                                                                                       // 10820
      startSymbol = value;                                                                                             // 10821
      return this;                                                                                                     // 10822
    } else {                                                                                                           // 10823
      return startSymbol;                                                                                              // 10824
    }                                                                                                                  // 10825
  };                                                                                                                   // 10826
                                                                                                                       // 10827
  /**                                                                                                                  // 10828
   * @ngdoc method                                                                                                     // 10829
   * @name $interpolateProvider#endSymbol                                                                              // 10830
   * @description                                                                                                      // 10831
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                              // 10832
   *                                                                                                                   // 10833
   * @param {string=} value new value to set the ending symbol to.                                                     // 10834
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10835
   */                                                                                                                  // 10836
  this.endSymbol = function(value) {                                                                                   // 10837
    if (value) {                                                                                                       // 10838
      endSymbol = value;                                                                                               // 10839
      return this;                                                                                                     // 10840
    } else {                                                                                                           // 10841
      return endSymbol;                                                                                                // 10842
    }                                                                                                                  // 10843
  };                                                                                                                   // 10844
                                                                                                                       // 10845
                                                                                                                       // 10846
  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {                      // 10847
    var startSymbolLength = startSymbol.length,                                                                        // 10848
        endSymbolLength = endSymbol.length,                                                                            // 10849
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),                                       // 10850
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');                                           // 10851
                                                                                                                       // 10852
    function escape(ch) {                                                                                              // 10853
      return '\\\\\\' + ch;                                                                                            // 10854
    }                                                                                                                  // 10855
                                                                                                                       // 10856
    function unescapeText(text) {                                                                                      // 10857
      return text.replace(escapedStartRegexp, startSymbol).                                                            // 10858
        replace(escapedEndRegexp, endSymbol);                                                                          // 10859
    }                                                                                                                  // 10860
                                                                                                                       // 10861
    function stringify(value) {                                                                                        // 10862
      if (value == null) { // null || undefined                                                                        // 10863
        return '';                                                                                                     // 10864
      }                                                                                                                // 10865
      switch (typeof value) {                                                                                          // 10866
        case 'string':                                                                                                 // 10867
          break;                                                                                                       // 10868
        case 'number':                                                                                                 // 10869
          value = '' + value;                                                                                          // 10870
          break;                                                                                                       // 10871
        default:                                                                                                       // 10872
          value = toJson(value);                                                                                       // 10873
      }                                                                                                                // 10874
                                                                                                                       // 10875
      return value;                                                                                                    // 10876
    }                                                                                                                  // 10877
                                                                                                                       // 10878
    /**                                                                                                                // 10879
     * @ngdoc service                                                                                                  // 10880
     * @name $interpolate                                                                                              // 10881
     * @kind function                                                                                                  // 10882
     *                                                                                                                 // 10883
     * @requires $parse                                                                                                // 10884
     * @requires $sce                                                                                                  // 10885
     *                                                                                                                 // 10886
     * @description                                                                                                    // 10887
     *                                                                                                                 // 10888
     * Compiles a string with markup into an interpolation function. This service is used by the                       // 10889
     * HTML {@link ng.$compile $compile} service for data binding. See                                                 // 10890
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the                                        // 10891
     * interpolation markup.                                                                                           // 10892
     *                                                                                                                 // 10893
     *                                                                                                                 // 10894
     * ```js                                                                                                           // 10895
     *   var $interpolate = ...; // injected                                                                           // 10896
     *   var exp = $interpolate('Hello {{name | uppercase}}!');                                                        // 10897
     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');                                                      // 10898
     * ```                                                                                                             // 10899
     *                                                                                                                 // 10900
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is                          // 10901
     * `true`, the interpolation function will return `undefined` unless all embedded expressions                      // 10902
     * evaluate to a value other than `undefined`.                                                                     // 10903
     *                                                                                                                 // 10904
     * ```js                                                                                                           // 10905
     *   var $interpolate = ...; // injected                                                                           // 10906
     *   var context = {greeting: 'Hello', name: undefined };                                                          // 10907
     *                                                                                                                 // 10908
     *   // default "forgiving" mode                                                                                   // 10909
     *   var exp = $interpolate('{{greeting}} {{name}}!');                                                             // 10910
     *   expect(exp(context)).toEqual('Hello !');                                                                      // 10911
     *                                                                                                                 // 10912
     *   // "allOrNothing" mode                                                                                        // 10913
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);                                              // 10914
     *   expect(exp(context)).toBeUndefined();                                                                         // 10915
     *   context.name = 'Angular';                                                                                     // 10916
     *   expect(exp(context)).toEqual('Hello Angular!');                                                               // 10917
     * ```                                                                                                             // 10918
     *                                                                                                                 // 10919
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.                      // 10920
     *                                                                                                                 // 10921
     * ####Escaped Interpolation                                                                                       // 10922
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers                     // 10923
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).                 // 10924
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression                 // 10925
     * or binding.                                                                                                     // 10926
     *                                                                                                                 // 10927
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some                      // 10928
     * degree, while also enabling code examples to work without relying on the                                        // 10929
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.                                                     // 10930
     *                                                                                                                 // 10931
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,                  // 10932
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all                // 10933
     * interpolation start/end markers with their escaped counterparts.**                                              // 10934
     *                                                                                                                 // 10935
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered               // 10936
     * output when the $interpolate service processes the text. So, for HTML elements interpolated                     // 10937
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter              // 10938
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,               // 10939
     * this is typically useful only when user-data is used in rendering a template from the server, or                // 10940
     * when otherwise untrusted data is used by a directive.                                                           // 10941
     *                                                                                                                 // 10942
     * <example>                                                                                                       // 10943
     *  <file name="index.html">                                                                                       // 10944
     *    <div ng-init="username='A user'">                                                                            // 10945
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}                  // 10946
     *        </p>                                                                                                     // 10947
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the                             // 10948
     *        application, but fails to accomplish their task, because the server has correctly                        // 10949
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)                      // 10950
     *        characters.</p>                                                                                          // 10951
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed                    // 10952
     *        from the database by an administrator.</p>                                                               // 10953
     *    </div>                                                                                                       // 10954
     *  </file>                                                                                                        // 10955
     * </example>                                                                                                      // 10956
     *                                                                                                                 // 10957
     * @param {string} text The text with markup to interpolate.                                                       // 10958
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have                     // 10959
     *    embedded expression in order to return an interpolation function. Strings with no                            // 10960
     *    embedded expression will return null for the interpolation function.                                         // 10961
     * @param {string=} trustedContext when provided, the returned function passes the interpolated                    // 10962
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,                                 // 10963
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that                        // 10964
     *    provides Strict Contextual Escaping for details.                                                             // 10965
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined                          // 10966
     *    unless all embedded expressions evaluate to a value other than `undefined`.                                  // 10967
     * @returns {function(context)} an interpolation function which is used to compute the                             // 10968
     *    interpolated string. The function has these parameters:                                                      // 10969
     *                                                                                                                 // 10970
     * - `context`: evaluation context for all expressions embedded in the interpolated text                           // 10971
     */                                                                                                                // 10972
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {                                    // 10973
      allOrNothing = !!allOrNothing;                                                                                   // 10974
      var startIndex,                                                                                                  // 10975
          endIndex,                                                                                                    // 10976
          index = 0,                                                                                                   // 10977
          expressions = [],                                                                                            // 10978
          parseFns = [],                                                                                               // 10979
          textLength = text.length,                                                                                    // 10980
          exp,                                                                                                         // 10981
          concat = [],                                                                                                 // 10982
          expressionPositions = [];                                                                                    // 10983
                                                                                                                       // 10984
      while (index < textLength) {                                                                                     // 10985
        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&                                                 // 10986
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {                           // 10987
          if (index !== startIndex) {                                                                                  // 10988
            concat.push(unescapeText(text.substring(index, startIndex)));                                              // 10989
          }                                                                                                            // 10990
          exp = text.substring(startIndex + startSymbolLength, endIndex);                                              // 10991
          expressions.push(exp);                                                                                       // 10992
          parseFns.push($parse(exp, parseStringifyInterceptor));                                                       // 10993
          index = endIndex + endSymbolLength;                                                                          // 10994
          expressionPositions.push(concat.length);                                                                     // 10995
          concat.push('');                                                                                             // 10996
        } else {                                                                                                       // 10997
          // we did not find an interpolation, so we have to add the remainder to the separators array                 // 10998
          if (index !== textLength) {                                                                                  // 10999
            concat.push(unescapeText(text.substring(index)));                                                          // 11000
          }                                                                                                            // 11001
          break;                                                                                                       // 11002
        }                                                                                                              // 11003
      }                                                                                                                // 11004
                                                                                                                       // 11005
      // Concatenating expressions makes it hard to reason about whether some combination of                           // 11006
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a                      // 11007
      // single expression be used for iframe[src], object[src], etc., we ensure that the value                        // 11008
      // that's used is assigned or constructed by some JS code somewhere that is more testable or                     // 11009
      // make it obvious that you bound the value to some user controlled value.  This helps reduce                    // 11010
      // the load when auditing for XSS issues.                                                                        // 11011
      if (trustedContext && concat.length > 1) {                                                                       // 11012
          $interpolateMinErr.throwNoconcat(text);                                                                      // 11013
      }                                                                                                                // 11014
                                                                                                                       // 11015
      if (!mustHaveExpression || expressions.length) {                                                                 // 11016
        var compute = function(values) {                                                                               // 11017
          for (var i = 0, ii = expressions.length; i < ii; i++) {                                                      // 11018
            if (allOrNothing && isUndefined(values[i])) return;                                                        // 11019
            concat[expressionPositions[i]] = values[i];                                                                // 11020
          }                                                                                                            // 11021
          return concat.join('');                                                                                      // 11022
        };                                                                                                             // 11023
                                                                                                                       // 11024
        var getValue = function(value) {                                                                               // 11025
          return trustedContext ?                                                                                      // 11026
            $sce.getTrusted(trustedContext, value) :                                                                   // 11027
            $sce.valueOf(value);                                                                                       // 11028
        };                                                                                                             // 11029
                                                                                                                       // 11030
        return extend(function interpolationFn(context) {                                                              // 11031
            var i = 0;                                                                                                 // 11032
            var ii = expressions.length;                                                                               // 11033
            var values = new Array(ii);                                                                                // 11034
                                                                                                                       // 11035
            try {                                                                                                      // 11036
              for (; i < ii; i++) {                                                                                    // 11037
                values[i] = parseFns[i](context);                                                                      // 11038
              }                                                                                                        // 11039
                                                                                                                       // 11040
              return compute(values);                                                                                  // 11041
            } catch (err) {                                                                                            // 11042
              $exceptionHandler($interpolateMinErr.interr(text, err));                                                 // 11043
            }                                                                                                          // 11044
                                                                                                                       // 11045
          }, {                                                                                                         // 11046
          // all of these properties are undocumented for now                                                          // 11047
          exp: text, //just for compatibility with regular watchers created via $watch                                 // 11048
          expressions: expressions,                                                                                    // 11049
          $$watchDelegate: function(scope, listener) {                                                                 // 11050
            var lastValue;                                                                                             // 11051
            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {                      // 11052
              var currValue = compute(values);                                                                         // 11053
              if (isFunction(listener)) {                                                                              // 11054
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);                   // 11055
              }                                                                                                        // 11056
              lastValue = currValue;                                                                                   // 11057
            });                                                                                                        // 11058
          }                                                                                                            // 11059
        });                                                                                                            // 11060
      }                                                                                                                // 11061
                                                                                                                       // 11062
      function parseStringifyInterceptor(value) {                                                                      // 11063
        try {                                                                                                          // 11064
          value = getValue(value);                                                                                     // 11065
          return allOrNothing && !isDefined(value) ? value : stringify(value);                                         // 11066
        } catch (err) {                                                                                                // 11067
          $exceptionHandler($interpolateMinErr.interr(text, err));                                                     // 11068
        }                                                                                                              // 11069
      }                                                                                                                // 11070
    }                                                                                                                  // 11071
                                                                                                                       // 11072
                                                                                                                       // 11073
    /**                                                                                                                // 11074
     * @ngdoc method                                                                                                   // 11075
     * @name $interpolate#startSymbol                                                                                  // 11076
     * @description                                                                                                    // 11077
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.                          // 11078
     *                                                                                                                 // 11079
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change                    // 11080
     * the symbol.                                                                                                     // 11081
     *                                                                                                                 // 11082
     * @returns {string} start symbol.                                                                                 // 11083
     */                                                                                                                // 11084
    $interpolate.startSymbol = function() {                                                                            // 11085
      return startSymbol;                                                                                              // 11086
    };                                                                                                                 // 11087
                                                                                                                       // 11088
                                                                                                                       // 11089
    /**                                                                                                                // 11090
     * @ngdoc method                                                                                                   // 11091
     * @name $interpolate#endSymbol                                                                                    // 11092
     * @description                                                                                                    // 11093
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                            // 11094
     *                                                                                                                 // 11095
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change                        // 11096
     * the symbol.                                                                                                     // 11097
     *                                                                                                                 // 11098
     * @returns {string} end symbol.                                                                                   // 11099
     */                                                                                                                // 11100
    $interpolate.endSymbol = function() {                                                                              // 11101
      return endSymbol;                                                                                                // 11102
    };                                                                                                                 // 11103
                                                                                                                       // 11104
    return $interpolate;                                                                                               // 11105
  }];                                                                                                                  // 11106
}                                                                                                                      // 11107
                                                                                                                       // 11108
function $IntervalProvider() {                                                                                         // 11109
  this.$get = ['$rootScope', '$window', '$q', '$$q',                                                                   // 11110
       function($rootScope,   $window,   $q,   $$q) {                                                                  // 11111
    var intervals = {};                                                                                                // 11112
                                                                                                                       // 11113
                                                                                                                       // 11114
     /**                                                                                                               // 11115
      * @ngdoc service                                                                                                 // 11116
      * @name $interval                                                                                                // 11117
      *                                                                                                                // 11118
      * @description                                                                                                   // 11119
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`                        // 11120
      * milliseconds.                                                                                                  // 11121
      *                                                                                                                // 11122
      * The return value of registering an interval function is a promise. This promise will be                        // 11123
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or                     // 11124
      * run indefinitely if `count` is not defined. The value of the notification will be the                          // 11125
      * number of iterations that have run.                                                                            // 11126
      * To cancel an interval, call `$interval.cancel(promise)`.                                                       // 11127
      *                                                                                                                // 11128
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to                               // 11129
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that                       // 11130
      * time.                                                                                                          // 11131
      *                                                                                                                // 11132
      * <div class="alert alert-warning">                                                                              // 11133
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished                 // 11134
      * with them.  In particular they are not automatically destroyed when a controller's scope or a                  // 11135
      * directive's element are destroyed.                                                                             // 11136
      * You should take this into consideration and make sure to always cancel the interval at the                     // 11137
      * appropriate moment.  See the example below for more details on how and when to do this.                        // 11138
      * </div>                                                                                                         // 11139
      *                                                                                                                // 11140
      * @param {function()} fn A function that should be called repeatedly.                                            // 11141
      * @param {number} delay Number of milliseconds between each function call.                                       // 11142
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat                            // 11143
      *   indefinitely.                                                                                                // 11144
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 11145
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 11146
      * @param {...*=} Pass additional parameters to the executed function.                                            // 11147
      * @returns {promise} A promise which will be notified on each iteration.                                         // 11148
      *                                                                                                                // 11149
      * @example                                                                                                       // 11150
      * <example module="intervalExample">                                                                             // 11151
      * <file name="index.html">                                                                                       // 11152
      *   <script>                                                                                                     // 11153
      *     angular.module('intervalExample', [])                                                                      // 11154
      *       .controller('ExampleController', ['$scope', '$interval',                                                 // 11155
      *         function($scope, $interval) {                                                                          // 11156
      *           $scope.format = 'M/d/yy h:mm:ss a';                                                                  // 11157
      *           $scope.blood_1 = 100;                                                                                // 11158
      *           $scope.blood_2 = 120;                                                                                // 11159
      *                                                                                                                // 11160
      *           var stop;                                                                                            // 11161
      *           $scope.fight = function() {                                                                          // 11162
      *             // Don't start a new fight if we are already fighting                                              // 11163
      *             if ( angular.isDefined(stop) ) return;                                                             // 11164
      *                                                                                                                // 11165
      *             stop = $interval(function() {                                                                      // 11166
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {                                                  // 11167
      *                 $scope.blood_1 = $scope.blood_1 - 3;                                                           // 11168
      *                 $scope.blood_2 = $scope.blood_2 - 4;                                                           // 11169
      *               } else {                                                                                         // 11170
      *                 $scope.stopFight();                                                                            // 11171
      *               }                                                                                                // 11172
      *             }, 100);                                                                                           // 11173
      *           };                                                                                                   // 11174
      *                                                                                                                // 11175
      *           $scope.stopFight = function() {                                                                      // 11176
      *             if (angular.isDefined(stop)) {                                                                     // 11177
      *               $interval.cancel(stop);                                                                          // 11178
      *               stop = undefined;                                                                                // 11179
      *             }                                                                                                  // 11180
      *           };                                                                                                   // 11181
      *                                                                                                                // 11182
      *           $scope.resetFight = function() {                                                                     // 11183
      *             $scope.blood_1 = 100;                                                                              // 11184
      *             $scope.blood_2 = 120;                                                                              // 11185
      *           };                                                                                                   // 11186
      *                                                                                                                // 11187
      *           $scope.$on('$destroy', function() {                                                                  // 11188
      *             // Make sure that the interval is destroyed too                                                    // 11189
      *             $scope.stopFight();                                                                                // 11190
      *           });                                                                                                  // 11191
      *         }])                                                                                                    // 11192
      *       // Register the 'myCurrentTime' directive factory method.                                                // 11193
      *       // We inject $interval and dateFilter service since the factory method is DI.                            // 11194
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',                                                  // 11195
      *         function($interval, dateFilter) {                                                                      // 11196
      *           // return the directive link function. (compile function not needed)                                 // 11197
      *           return function(scope, element, attrs) {                                                             // 11198
      *             var format,  // date format                                                                        // 11199
      *                 stopTime; // so that we can cancel the time updates                                            // 11200
      *                                                                                                                // 11201
      *             // used to update the UI                                                                           // 11202
      *             function updateTime() {                                                                            // 11203
      *               element.text(dateFilter(new Date(), format));                                                    // 11204
      *             }                                                                                                  // 11205
      *                                                                                                                // 11206
      *             // watch the expression, and update the UI on change.                                              // 11207
      *             scope.$watch(attrs.myCurrentTime, function(value) {                                                // 11208
      *               format = value;                                                                                  // 11209
      *               updateTime();                                                                                    // 11210
      *             });                                                                                                // 11211
      *                                                                                                                // 11212
      *             stopTime = $interval(updateTime, 1000);                                                            // 11213
      *                                                                                                                // 11214
      *             // listen on DOM destroy (removal) event, and cancel the next UI update                            // 11215
      *             // to prevent updating time after the DOM element was removed.                                     // 11216
      *             element.on('$destroy', function() {                                                                // 11217
      *               $interval.cancel(stopTime);                                                                      // 11218
      *             });                                                                                                // 11219
      *           }                                                                                                    // 11220
      *         }]);                                                                                                   // 11221
      *   </script>                                                                                                    // 11222
      *                                                                                                                // 11223
      *   <div>                                                                                                        // 11224
      *     <div ng-controller="ExampleController">                                                                    // 11225
      *       <label>Date format: <input ng-model="format"></label> <hr/>                                              // 11226
      *       Current time is: <span my-current-time="format"></span>                                                  // 11227
      *       <hr/>                                                                                                    // 11228
      *       Blood 1 : <font color='red'>{{blood_1}}</font>                                                           // 11229
      *       Blood 2 : <font color='red'>{{blood_2}}</font>                                                           // 11230
      *       <button type="button" data-ng-click="fight()">Fight</button>                                             // 11231
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>                                     // 11232
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>                                   // 11233
      *     </div>                                                                                                     // 11234
      *   </div>                                                                                                       // 11235
      *                                                                                                                // 11236
      * </file>                                                                                                        // 11237
      * </example>                                                                                                     // 11238
      */                                                                                                               // 11239
    function interval(fn, delay, count, invokeApply) {                                                                 // 11240
      var hasParams = arguments.length > 4,                                                                            // 11241
          args = hasParams ? sliceArgs(arguments, 4) : [],                                                             // 11242
          setInterval = $window.setInterval,                                                                           // 11243
          clearInterval = $window.clearInterval,                                                                       // 11244
          iteration = 0,                                                                                               // 11245
          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 11246
          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 11247
          promise = deferred.promise;                                                                                  // 11248
                                                                                                                       // 11249
      count = isDefined(count) ? count : 0;                                                                            // 11250
                                                                                                                       // 11251
      promise.then(null, null, (!hasParams) ? fn : function() {                                                        // 11252
        fn.apply(null, args);                                                                                          // 11253
      });                                                                                                              // 11254
                                                                                                                       // 11255
      promise.$$intervalId = setInterval(function tick() {                                                             // 11256
        deferred.notify(iteration++);                                                                                  // 11257
                                                                                                                       // 11258
        if (count > 0 && iteration >= count) {                                                                         // 11259
          deferred.resolve(iteration);                                                                                 // 11260
          clearInterval(promise.$$intervalId);                                                                         // 11261
          delete intervals[promise.$$intervalId];                                                                      // 11262
        }                                                                                                              // 11263
                                                                                                                       // 11264
        if (!skipApply) $rootScope.$apply();                                                                           // 11265
                                                                                                                       // 11266
      }, delay);                                                                                                       // 11267
                                                                                                                       // 11268
      intervals[promise.$$intervalId] = deferred;                                                                      // 11269
                                                                                                                       // 11270
      return promise;                                                                                                  // 11271
    }                                                                                                                  // 11272
                                                                                                                       // 11273
                                                                                                                       // 11274
     /**                                                                                                               // 11275
      * @ngdoc method                                                                                                  // 11276
      * @name $interval#cancel                                                                                         // 11277
      *                                                                                                                // 11278
      * @description                                                                                                   // 11279
      * Cancels a task associated with the `promise`.                                                                  // 11280
      *                                                                                                                // 11281
      * @param {Promise=} promise returned by the `$interval` function.                                                // 11282
      * @returns {boolean} Returns `true` if the task was successfully canceled.                                       // 11283
      */                                                                                                               // 11284
    interval.cancel = function(promise) {                                                                              // 11285
      if (promise && promise.$$intervalId in intervals) {                                                              // 11286
        intervals[promise.$$intervalId].reject('canceled');                                                            // 11287
        $window.clearInterval(promise.$$intervalId);                                                                   // 11288
        delete intervals[promise.$$intervalId];                                                                        // 11289
        return true;                                                                                                   // 11290
      }                                                                                                                // 11291
      return false;                                                                                                    // 11292
    };                                                                                                                 // 11293
                                                                                                                       // 11294
    return interval;                                                                                                   // 11295
  }];                                                                                                                  // 11296
}                                                                                                                      // 11297
                                                                                                                       // 11298
/**                                                                                                                    // 11299
 * @ngdoc service                                                                                                      // 11300
 * @name $locale                                                                                                       // 11301
 *                                                                                                                     // 11302
 * @description                                                                                                        // 11303
 * $locale service provides localization rules for various Angular components. As of right now the                     // 11304
 * only public api is:                                                                                                 // 11305
 *                                                                                                                     // 11306
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)                                  // 11307
 */                                                                                                                    // 11308
                                                                                                                       // 11309
var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,                                                                    // 11310
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};                                                             // 11311
var $locationMinErr = minErr('$location');                                                                             // 11312
                                                                                                                       // 11313
                                                                                                                       // 11314
/**                                                                                                                    // 11315
 * Encode path using encodeUriSegment, ignoring forward slashes                                                        // 11316
 *                                                                                                                     // 11317
 * @param {string} path Path to encode                                                                                 // 11318
 * @returns {string}                                                                                                   // 11319
 */                                                                                                                    // 11320
function encodePath(path) {                                                                                            // 11321
  var segments = path.split('/'),                                                                                      // 11322
      i = segments.length;                                                                                             // 11323
                                                                                                                       // 11324
  while (i--) {                                                                                                        // 11325
    segments[i] = encodeUriSegment(segments[i]);                                                                       // 11326
  }                                                                                                                    // 11327
                                                                                                                       // 11328
  return segments.join('/');                                                                                           // 11329
}                                                                                                                      // 11330
                                                                                                                       // 11331
function parseAbsoluteUrl(absoluteUrl, locationObj) {                                                                  // 11332
  var parsedUrl = urlResolve(absoluteUrl);                                                                             // 11333
                                                                                                                       // 11334
  locationObj.$$protocol = parsedUrl.protocol;                                                                         // 11335
  locationObj.$$host = parsedUrl.hostname;                                                                             // 11336
  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;                             // 11337
}                                                                                                                      // 11338
                                                                                                                       // 11339
                                                                                                                       // 11340
function parseAppUrl(relativeUrl, locationObj) {                                                                       // 11341
  var prefixed = (relativeUrl.charAt(0) !== '/');                                                                      // 11342
  if (prefixed) {                                                                                                      // 11343
    relativeUrl = '/' + relativeUrl;                                                                                   // 11344
  }                                                                                                                    // 11345
  var match = urlResolve(relativeUrl);                                                                                 // 11346
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?                               // 11347
      match.pathname.substring(1) : match.pathname);                                                                   // 11348
  locationObj.$$search = parseKeyValue(match.search);                                                                  // 11349
  locationObj.$$hash = decodeURIComponent(match.hash);                                                                 // 11350
                                                                                                                       // 11351
  // make sure path starts with '/';                                                                                   // 11352
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {                                                     // 11353
    locationObj.$$path = '/' + locationObj.$$path;                                                                     // 11354
  }                                                                                                                    // 11355
}                                                                                                                      // 11356
                                                                                                                       // 11357
                                                                                                                       // 11358
/**                                                                                                                    // 11359
 *                                                                                                                     // 11360
 * @param {string} begin                                                                                               // 11361
 * @param {string} whole                                                                                               // 11362
 * @returns {string} returns text from whole after begin or undefined if it does not begin with                        // 11363
 *                   expected string.                                                                                  // 11364
 */                                                                                                                    // 11365
function beginsWith(begin, whole) {                                                                                    // 11366
  if (whole.indexOf(begin) === 0) {                                                                                    // 11367
    return whole.substr(begin.length);                                                                                 // 11368
  }                                                                                                                    // 11369
}                                                                                                                      // 11370
                                                                                                                       // 11371
                                                                                                                       // 11372
function stripHash(url) {                                                                                              // 11373
  var index = url.indexOf('#');                                                                                        // 11374
  return index == -1 ? url : url.substr(0, index);                                                                     // 11375
}                                                                                                                      // 11376
                                                                                                                       // 11377
function trimEmptyHash(url) {                                                                                          // 11378
  return url.replace(/(#.+)|#$/, '$1');                                                                                // 11379
}                                                                                                                      // 11380
                                                                                                                       // 11381
                                                                                                                       // 11382
function stripFile(url) {                                                                                              // 11383
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);                                                           // 11384
}                                                                                                                      // 11385
                                                                                                                       // 11386
/* return the server only (scheme://host:port) */                                                                      // 11387
function serverBase(url) {                                                                                             // 11388
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));                                                    // 11389
}                                                                                                                      // 11390
                                                                                                                       // 11391
                                                                                                                       // 11392
/**                                                                                                                    // 11393
 * LocationHtml5Url represents an url                                                                                  // 11394
 * This object is exposed as $location service when HTML5 mode is enabled and supported                                // 11395
 *                                                                                                                     // 11396
 * @constructor                                                                                                        // 11397
 * @param {string} appBase application base URL                                                                        // 11398
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11399
 * @param {string} basePrefix url path prefix                                                                          // 11400
 */                                                                                                                    // 11401
function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {                                                        // 11402
  this.$$html5 = true;                                                                                                 // 11403
  basePrefix = basePrefix || '';                                                                                       // 11404
  parseAbsoluteUrl(appBase, this);                                                                                     // 11405
                                                                                                                       // 11406
                                                                                                                       // 11407
  /**                                                                                                                  // 11408
   * Parse given html5 (regular) url string into properties                                                            // 11409
   * @param {string} url HTML5 url                                                                                     // 11410
   * @private                                                                                                          // 11411
   */                                                                                                                  // 11412
  this.$$parse = function(url) {                                                                                       // 11413
    var pathUrl = beginsWith(appBaseNoFile, url);                                                                      // 11414
    if (!isString(pathUrl)) {                                                                                          // 11415
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,                          // 11416
          appBaseNoFile);                                                                                              // 11417
    }                                                                                                                  // 11418
                                                                                                                       // 11419
    parseAppUrl(pathUrl, this);                                                                                        // 11420
                                                                                                                       // 11421
    if (!this.$$path) {                                                                                                // 11422
      this.$$path = '/';                                                                                               // 11423
    }                                                                                                                  // 11424
                                                                                                                       // 11425
    this.$$compose();                                                                                                  // 11426
  };                                                                                                                   // 11427
                                                                                                                       // 11428
  /**                                                                                                                  // 11429
   * Compose url and update `absUrl` property                                                                          // 11430
   * @private                                                                                                          // 11431
   */                                                                                                                  // 11432
  this.$$compose = function() {                                                                                        // 11433
    var search = toKeyValue(this.$$search),                                                                            // 11434
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11435
                                                                                                                       // 11436
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11437
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'                                  // 11438
  };                                                                                                                   // 11439
                                                                                                                       // 11440
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11441
    if (relHref && relHref[0] === '#') {                                                                               // 11442
      // special case for links to hash fragments:                                                                     // 11443
      // keep the old url and only replace the hash fragment                                                           // 11444
      this.hash(relHref.slice(1));                                                                                     // 11445
      return true;                                                                                                     // 11446
    }                                                                                                                  // 11447
    var appUrl, prevAppUrl;                                                                                            // 11448
    var rewrittenUrl;                                                                                                  // 11449
                                                                                                                       // 11450
    if (isDefined(appUrl = beginsWith(appBase, url))) {                                                                // 11451
      prevAppUrl = appUrl;                                                                                             // 11452
      if (isDefined(appUrl = beginsWith(basePrefix, appUrl))) {                                                        // 11453
        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);                                            // 11454
      } else {                                                                                                         // 11455
        rewrittenUrl = appBase + prevAppUrl;                                                                           // 11456
      }                                                                                                                // 11457
    } else if (isDefined(appUrl = beginsWith(appBaseNoFile, url))) {                                                   // 11458
      rewrittenUrl = appBaseNoFile + appUrl;                                                                           // 11459
    } else if (appBaseNoFile == url + '/') {                                                                           // 11460
      rewrittenUrl = appBaseNoFile;                                                                                    // 11461
    }                                                                                                                  // 11462
    if (rewrittenUrl) {                                                                                                // 11463
      this.$$parse(rewrittenUrl);                                                                                      // 11464
    }                                                                                                                  // 11465
    return !!rewrittenUrl;                                                                                             // 11466
  };                                                                                                                   // 11467
}                                                                                                                      // 11468
                                                                                                                       // 11469
                                                                                                                       // 11470
/**                                                                                                                    // 11471
 * LocationHashbangUrl represents url                                                                                  // 11472
 * This object is exposed as $location service when developer doesn't opt into html5 mode.                             // 11473
 * It also serves as the base class for html5 mode fallback on legacy browsers.                                        // 11474
 *                                                                                                                     // 11475
 * @constructor                                                                                                        // 11476
 * @param {string} appBase application base URL                                                                        // 11477
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11478
 * @param {string} hashPrefix hashbang prefix                                                                          // 11479
 */                                                                                                                    // 11480
function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {                                                     // 11481
                                                                                                                       // 11482
  parseAbsoluteUrl(appBase, this);                                                                                     // 11483
                                                                                                                       // 11484
                                                                                                                       // 11485
  /**                                                                                                                  // 11486
   * Parse given hashbang url into properties                                                                          // 11487
   * @param {string} url Hashbang url                                                                                  // 11488
   * @private                                                                                                          // 11489
   */                                                                                                                  // 11490
  this.$$parse = function(url) {                                                                                       // 11491
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);                                   // 11492
    var withoutHashUrl;                                                                                                // 11493
                                                                                                                       // 11494
    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {                                            // 11495
                                                                                                                       // 11496
      // The rest of the url starts with a hash so we have                                                             // 11497
      // got either a hashbang path or a plain hash fragment                                                           // 11498
      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);                                                         // 11499
      if (isUndefined(withoutHashUrl)) {                                                                               // 11500
        // There was no hashbang prefix so we just have a hash fragment                                                // 11501
        withoutHashUrl = withoutBaseUrl;                                                                               // 11502
      }                                                                                                                // 11503
                                                                                                                       // 11504
    } else {                                                                                                           // 11505
      // There was no hashbang path nor hash fragment:                                                                 // 11506
      // If we are in HTML5 mode we use what is left as the path;                                                      // 11507
      // Otherwise we ignore what is left                                                                              // 11508
      if (this.$$html5) {                                                                                              // 11509
        withoutHashUrl = withoutBaseUrl;                                                                               // 11510
      } else {                                                                                                         // 11511
        withoutHashUrl = '';                                                                                           // 11512
        if (isUndefined(withoutBaseUrl)) {                                                                             // 11513
          appBase = url;                                                                                               // 11514
          this.replace();                                                                                              // 11515
        }                                                                                                              // 11516
      }                                                                                                                // 11517
    }                                                                                                                  // 11518
                                                                                                                       // 11519
    parseAppUrl(withoutHashUrl, this);                                                                                 // 11520
                                                                                                                       // 11521
    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);                                        // 11522
                                                                                                                       // 11523
    this.$$compose();                                                                                                  // 11524
                                                                                                                       // 11525
    /*                                                                                                                 // 11526
     * In Windows, on an anchor node on documents loaded from                                                          // 11527
     * the filesystem, the browser will return a pathname                                                              // 11528
     * prefixed with the drive name ('/C:/path') when a                                                                // 11529
     * pathname without a drive is set:                                                                                // 11530
     *  * a.setAttribute('href', '/foo')                                                                               // 11531
     *   * a.pathname === '/C:/foo' //true                                                                             // 11532
     *                                                                                                                 // 11533
     * Inside of Angular, we're always using pathnames that                                                            // 11534
     * do not include drive names for routing.                                                                         // 11535
     */                                                                                                                // 11536
    function removeWindowsDriveName(path, url, base) {                                                                 // 11537
      /*                                                                                                               // 11538
      Matches paths for file protocol on windows,                                                                      // 11539
      such as /C:/foo/bar, and captures only /foo/bar.                                                                 // 11540
      */                                                                                                               // 11541
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;                                                                      // 11542
                                                                                                                       // 11543
      var firstPathSegmentMatch;                                                                                       // 11544
                                                                                                                       // 11545
      //Get the relative path from the input URL.                                                                      // 11546
      if (url.indexOf(base) === 0) {                                                                                   // 11547
        url = url.replace(base, '');                                                                                   // 11548
      }                                                                                                                // 11549
                                                                                                                       // 11550
      // The input URL intentionally contains a first path segment that ends with a colon.                             // 11551
      if (windowsFilePathExp.exec(url)) {                                                                              // 11552
        return path;                                                                                                   // 11553
      }                                                                                                                // 11554
                                                                                                                       // 11555
      firstPathSegmentMatch = windowsFilePathExp.exec(path);                                                           // 11556
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;                                                  // 11557
    }                                                                                                                  // 11558
  };                                                                                                                   // 11559
                                                                                                                       // 11560
  /**                                                                                                                  // 11561
   * Compose hashbang url and update `absUrl` property                                                                 // 11562
   * @private                                                                                                          // 11563
   */                                                                                                                  // 11564
  this.$$compose = function() {                                                                                        // 11565
    var search = toKeyValue(this.$$search),                                                                            // 11566
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11567
                                                                                                                       // 11568
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11569
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');                                             // 11570
  };                                                                                                                   // 11571
                                                                                                                       // 11572
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11573
    if (stripHash(appBase) == stripHash(url)) {                                                                        // 11574
      this.$$parse(url);                                                                                               // 11575
      return true;                                                                                                     // 11576
    }                                                                                                                  // 11577
    return false;                                                                                                      // 11578
  };                                                                                                                   // 11579
}                                                                                                                      // 11580
                                                                                                                       // 11581
                                                                                                                       // 11582
/**                                                                                                                    // 11583
 * LocationHashbangUrl represents url                                                                                  // 11584
 * This object is exposed as $location service when html5 history api is enabled but the browser                       // 11585
 * does not support it.                                                                                                // 11586
 *                                                                                                                     // 11587
 * @constructor                                                                                                        // 11588
 * @param {string} appBase application base URL                                                                        // 11589
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11590
 * @param {string} hashPrefix hashbang prefix                                                                          // 11591
 */                                                                                                                    // 11592
function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {                                              // 11593
  this.$$html5 = true;                                                                                                 // 11594
  LocationHashbangUrl.apply(this, arguments);                                                                          // 11595
                                                                                                                       // 11596
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11597
    if (relHref && relHref[0] === '#') {                                                                               // 11598
      // special case for links to hash fragments:                                                                     // 11599
      // keep the old url and only replace the hash fragment                                                           // 11600
      this.hash(relHref.slice(1));                                                                                     // 11601
      return true;                                                                                                     // 11602
    }                                                                                                                  // 11603
                                                                                                                       // 11604
    var rewrittenUrl;                                                                                                  // 11605
    var appUrl;                                                                                                        // 11606
                                                                                                                       // 11607
    if (appBase == stripHash(url)) {                                                                                   // 11608
      rewrittenUrl = url;                                                                                              // 11609
    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {                                                            // 11610
      rewrittenUrl = appBase + hashPrefix + appUrl;                                                                    // 11611
    } else if (appBaseNoFile === url + '/') {                                                                          // 11612
      rewrittenUrl = appBaseNoFile;                                                                                    // 11613
    }                                                                                                                  // 11614
    if (rewrittenUrl) {                                                                                                // 11615
      this.$$parse(rewrittenUrl);                                                                                      // 11616
    }                                                                                                                  // 11617
    return !!rewrittenUrl;                                                                                             // 11618
  };                                                                                                                   // 11619
                                                                                                                       // 11620
  this.$$compose = function() {                                                                                        // 11621
    var search = toKeyValue(this.$$search),                                                                            // 11622
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11623
                                                                                                                       // 11624
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11625
    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'        // 11626
    this.$$absUrl = appBase + hashPrefix + this.$$url;                                                                 // 11627
  };                                                                                                                   // 11628
                                                                                                                       // 11629
}                                                                                                                      // 11630
                                                                                                                       // 11631
                                                                                                                       // 11632
var locationPrototype = {                                                                                              // 11633
                                                                                                                       // 11634
  /**                                                                                                                  // 11635
   * Are we in html5 mode?                                                                                             // 11636
   * @private                                                                                                          // 11637
   */                                                                                                                  // 11638
  $$html5: false,                                                                                                      // 11639
                                                                                                                       // 11640
  /**                                                                                                                  // 11641
   * Has any change been replacing?                                                                                    // 11642
   * @private                                                                                                          // 11643
   */                                                                                                                  // 11644
  $$replace: false,                                                                                                    // 11645
                                                                                                                       // 11646
  /**                                                                                                                  // 11647
   * @ngdoc method                                                                                                     // 11648
   * @name $location#absUrl                                                                                            // 11649
   *                                                                                                                   // 11650
   * @description                                                                                                      // 11651
   * This method is getter only.                                                                                       // 11652
   *                                                                                                                   // 11653
   * Return full url representation with all segments encoded according to rules specified in                          // 11654
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).                                                                  // 11655
   *                                                                                                                   // 11656
   *                                                                                                                   // 11657
   * ```js                                                                                                             // 11658
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11659
   * var absUrl = $location.absUrl();                                                                                  // 11660
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"                                                           // 11661
   * ```                                                                                                               // 11662
   *                                                                                                                   // 11663
   * @return {string} full url                                                                                         // 11664
   */                                                                                                                  // 11665
  absUrl: locationGetter('$$absUrl'),                                                                                  // 11666
                                                                                                                       // 11667
  /**                                                                                                                  // 11668
   * @ngdoc method                                                                                                     // 11669
   * @name $location#url                                                                                               // 11670
   *                                                                                                                   // 11671
   * @description                                                                                                      // 11672
   * This method is getter / setter.                                                                                   // 11673
   *                                                                                                                   // 11674
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.                                             // 11675
   *                                                                                                                   // 11676
   * Change path, search and hash, when called with parameter and return `$location`.                                  // 11677
   *                                                                                                                   // 11678
   *                                                                                                                   // 11679
   * ```js                                                                                                             // 11680
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11681
   * var url = $location.url();                                                                                        // 11682
   * // => "/some/path?foo=bar&baz=xoxo"                                                                               // 11683
   * ```                                                                                                               // 11684
   *                                                                                                                   // 11685
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)                                          // 11686
   * @return {string} url                                                                                              // 11687
   */                                                                                                                  // 11688
  url: function(url) {                                                                                                 // 11689
    if (isUndefined(url)) {                                                                                            // 11690
      return this.$$url;                                                                                               // 11691
    }                                                                                                                  // 11692
                                                                                                                       // 11693
    var match = PATH_MATCH.exec(url);                                                                                  // 11694
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));                                               // 11695
    if (match[2] || match[1] || url === '') this.search(match[3] || '');                                               // 11696
    this.hash(match[5] || '');                                                                                         // 11697
                                                                                                                       // 11698
    return this;                                                                                                       // 11699
  },                                                                                                                   // 11700
                                                                                                                       // 11701
  /**                                                                                                                  // 11702
   * @ngdoc method                                                                                                     // 11703
   * @name $location#protocol                                                                                          // 11704
   *                                                                                                                   // 11705
   * @description                                                                                                      // 11706
   * This method is getter only.                                                                                       // 11707
   *                                                                                                                   // 11708
   * Return protocol of current url.                                                                                   // 11709
   *                                                                                                                   // 11710
   *                                                                                                                   // 11711
   * ```js                                                                                                             // 11712
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11713
   * var protocol = $location.protocol();                                                                              // 11714
   * // => "http"                                                                                                      // 11715
   * ```                                                                                                               // 11716
   *                                                                                                                   // 11717
   * @return {string} protocol of current url                                                                          // 11718
   */                                                                                                                  // 11719
  protocol: locationGetter('$$protocol'),                                                                              // 11720
                                                                                                                       // 11721
  /**                                                                                                                  // 11722
   * @ngdoc method                                                                                                     // 11723
   * @name $location#host                                                                                              // 11724
   *                                                                                                                   // 11725
   * @description                                                                                                      // 11726
   * This method is getter only.                                                                                       // 11727
   *                                                                                                                   // 11728
   * Return host of current url.                                                                                       // 11729
   *                                                                                                                   // 11730
   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
   *                                                                                                                   // 11732
   *                                                                                                                   // 11733
   * ```js                                                                                                             // 11734
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11735
   * var host = $location.host();                                                                                      // 11736
   * // => "example.com"                                                                                               // 11737
   *                                                                                                                   // 11738
   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo                                   // 11739
   * host = $location.host();                                                                                          // 11740
   * // => "example.com"                                                                                               // 11741
   * host = location.host;                                                                                             // 11742
   * // => "example.com:8080"                                                                                          // 11743
   * ```                                                                                                               // 11744
   *                                                                                                                   // 11745
   * @return {string} host of current url.                                                                             // 11746
   */                                                                                                                  // 11747
  host: locationGetter('$$host'),                                                                                      // 11748
                                                                                                                       // 11749
  /**                                                                                                                  // 11750
   * @ngdoc method                                                                                                     // 11751
   * @name $location#port                                                                                              // 11752
   *                                                                                                                   // 11753
   * @description                                                                                                      // 11754
   * This method is getter only.                                                                                       // 11755
   *                                                                                                                   // 11756
   * Return port of current url.                                                                                       // 11757
   *                                                                                                                   // 11758
   *                                                                                                                   // 11759
   * ```js                                                                                                             // 11760
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11761
   * var port = $location.port();                                                                                      // 11762
   * // => 80                                                                                                          // 11763
   * ```                                                                                                               // 11764
   *                                                                                                                   // 11765
   * @return {Number} port                                                                                             // 11766
   */                                                                                                                  // 11767
  port: locationGetter('$$port'),                                                                                      // 11768
                                                                                                                       // 11769
  /**                                                                                                                  // 11770
   * @ngdoc method                                                                                                     // 11771
   * @name $location#path                                                                                              // 11772
   *                                                                                                                   // 11773
   * @description                                                                                                      // 11774
   * This method is getter / setter.                                                                                   // 11775
   *                                                                                                                   // 11776
   * Return path of current url when called without any parameter.                                                     // 11777
   *                                                                                                                   // 11778
   * Change path when called with parameter and return `$location`.                                                    // 11779
   *                                                                                                                   // 11780
   * Note: Path should always begin with forward slash (/), this method will add the forward slash                     // 11781
   * if it is missing.                                                                                                 // 11782
   *                                                                                                                   // 11783
   *                                                                                                                   // 11784
   * ```js                                                                                                             // 11785
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11786
   * var path = $location.path();                                                                                      // 11787
   * // => "/some/path"                                                                                                // 11788
   * ```                                                                                                               // 11789
   *                                                                                                                   // 11790
   * @param {(string|number)=} path New path                                                                           // 11791
   * @return {string} path                                                                                             // 11792
   */                                                                                                                  // 11793
  path: locationGetterSetter('$$path', function(path) {                                                                // 11794
    path = path !== null ? path.toString() : '';                                                                       // 11795
    return path.charAt(0) == '/' ? path : '/' + path;                                                                  // 11796
  }),                                                                                                                  // 11797
                                                                                                                       // 11798
  /**                                                                                                                  // 11799
   * @ngdoc method                                                                                                     // 11800
   * @name $location#search                                                                                            // 11801
   *                                                                                                                   // 11802
   * @description                                                                                                      // 11803
   * This method is getter / setter.                                                                                   // 11804
   *                                                                                                                   // 11805
   * Return search part (as object) of current url when called without any parameter.                                  // 11806
   *                                                                                                                   // 11807
   * Change search part when called with parameter and return `$location`.                                             // 11808
   *                                                                                                                   // 11809
   *                                                                                                                   // 11810
   * ```js                                                                                                             // 11811
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11812
   * var searchObject = $location.search();                                                                            // 11813
   * // => {foo: 'bar', baz: 'xoxo'}                                                                                   // 11814
   *                                                                                                                   // 11815
   * // set foo to 'yipee'                                                                                             // 11816
   * $location.search('foo', 'yipee');                                                                                 // 11817
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}                                                              // 11818
   * ```                                                                                                               // 11819
   *                                                                                                                   // 11820
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or                      // 11821
   * hash object.                                                                                                      // 11822
   *                                                                                                                   // 11823
   * When called with a single argument the method acts as a setter, setting the `search` component                    // 11824
   * of `$location` to the specified value.                                                                            // 11825
   *                                                                                                                   // 11826
   * If the argument is a hash object containing an array of values, these values will be encoded                      // 11827
   * as duplicate search parameters in the url.                                                                        // 11828
   *                                                                                                                   // 11829
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`   // 11830
   * will override only a single search property.                                                                      // 11831
   *                                                                                                                   // 11832
   * If `paramValue` is an array, it will override the property of the `search` component of                           // 11833
   * `$location` specified via the first argument.                                                                     // 11834
   *                                                                                                                   // 11835
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.                         // 11836
   *                                                                                                                   // 11837
   * If `paramValue` is `true`, the property specified via the first argument will be added with no                    // 11838
   * value nor trailing equal sign.                                                                                    // 11839
   *                                                                                                                   // 11840
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with                   // 11841
   * one or more arguments returns `$location` object itself.                                                          // 11842
   */                                                                                                                  // 11843
  search: function(search, paramValue) {                                                                               // 11844
    switch (arguments.length) {                                                                                        // 11845
      case 0:                                                                                                          // 11846
        return this.$$search;                                                                                          // 11847
      case 1:                                                                                                          // 11848
        if (isString(search) || isNumber(search)) {                                                                    // 11849
          search = search.toString();                                                                                  // 11850
          this.$$search = parseKeyValue(search);                                                                       // 11851
        } else if (isObject(search)) {                                                                                 // 11852
          search = copy(search, {});                                                                                   // 11853
          // remove object undefined or null properties                                                                // 11854
          forEach(search, function(value, key) {                                                                       // 11855
            if (value == null) delete search[key];                                                                     // 11856
          });                                                                                                          // 11857
                                                                                                                       // 11858
          this.$$search = search;                                                                                      // 11859
        } else {                                                                                                       // 11860
          throw $locationMinErr('isrcharg',                                                                            // 11861
              'The first argument of the `$location#search()` call must be a string or an object.');                   // 11862
        }                                                                                                              // 11863
        break;                                                                                                         // 11864
      default:                                                                                                         // 11865
        if (isUndefined(paramValue) || paramValue === null) {                                                          // 11866
          delete this.$$search[search];                                                                                // 11867
        } else {                                                                                                       // 11868
          this.$$search[search] = paramValue;                                                                          // 11869
        }                                                                                                              // 11870
    }                                                                                                                  // 11871
                                                                                                                       // 11872
    this.$$compose();                                                                                                  // 11873
    return this;                                                                                                       // 11874
  },                                                                                                                   // 11875
                                                                                                                       // 11876
  /**                                                                                                                  // 11877
   * @ngdoc method                                                                                                     // 11878
   * @name $location#hash                                                                                              // 11879
   *                                                                                                                   // 11880
   * @description                                                                                                      // 11881
   * This method is getter / setter.                                                                                   // 11882
   *                                                                                                                   // 11883
   * Return hash fragment when called without any parameter.                                                           // 11884
   *                                                                                                                   // 11885
   * Change hash fragment when called with parameter and return `$location`.                                           // 11886
   *                                                                                                                   // 11887
   *                                                                                                                   // 11888
   * ```js                                                                                                             // 11889
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue                                            // 11890
   * var hash = $location.hash();                                                                                      // 11891
   * // => "hashValue"                                                                                                 // 11892
   * ```                                                                                                               // 11893
   *                                                                                                                   // 11894
   * @param {(string|number)=} hash New hash fragment                                                                  // 11895
   * @return {string} hash                                                                                             // 11896
   */                                                                                                                  // 11897
  hash: locationGetterSetter('$$hash', function(hash) {                                                                // 11898
    return hash !== null ? hash.toString() : '';                                                                       // 11899
  }),                                                                                                                  // 11900
                                                                                                                       // 11901
  /**                                                                                                                  // 11902
   * @ngdoc method                                                                                                     // 11903
   * @name $location#replace                                                                                           // 11904
   *                                                                                                                   // 11905
   * @description                                                                                                      // 11906
   * If called, all changes to $location during current `$digest` will be replacing current history                    // 11907
   * record, instead of adding new one.                                                                                // 11908
   */                                                                                                                  // 11909
  replace: function() {                                                                                                // 11910
    this.$$replace = true;                                                                                             // 11911
    return this;                                                                                                       // 11912
  }                                                                                                                    // 11913
};                                                                                                                     // 11914
                                                                                                                       // 11915
forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {                      // 11916
  Location.prototype = Object.create(locationPrototype);                                                               // 11917
                                                                                                                       // 11918
  /**                                                                                                                  // 11919
   * @ngdoc method                                                                                                     // 11920
   * @name $location#state                                                                                             // 11921
   *                                                                                                                   // 11922
   * @description                                                                                                      // 11923
   * This method is getter / setter.                                                                                   // 11924
   *                                                                                                                   // 11925
   * Return the history state object when called without any parameter.                                                // 11926
   *                                                                                                                   // 11927
   * Change the history state object when called with one parameter and return `$location`.                            // 11928
   * The state object is later passed to `pushState` or `replaceState`.                                                // 11929
   *                                                                                                                   // 11930
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting                                 // 11931
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support                       // 11932
   * older browsers (like IE9 or Android < 4.0), don't use this method.                                                // 11933
   *                                                                                                                   // 11934
   * @param {object=} state State object for pushState or replaceState                                                 // 11935
   * @return {object} state                                                                                            // 11936
   */                                                                                                                  // 11937
  Location.prototype.state = function(state) {                                                                         // 11938
    if (!arguments.length) {                                                                                           // 11939
      return this.$$state;                                                                                             // 11940
    }                                                                                                                  // 11941
                                                                                                                       // 11942
    if (Location !== LocationHtml5Url || !this.$$html5) {                                                              // 11943
      throw $locationMinErr('nostate', 'History API state support is available only ' +                                // 11944
        'in HTML5 mode and only in browsers supporting HTML5 History API');                                            // 11945
    }                                                                                                                  // 11946
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`                               // 11947
    // but we're changing the $$state reference to $browser.state() during the $digest                                 // 11948
    // so the modification window is narrow.                                                                           // 11949
    this.$$state = isUndefined(state) ? null : state;                                                                  // 11950
                                                                                                                       // 11951
    return this;                                                                                                       // 11952
  };                                                                                                                   // 11953
});                                                                                                                    // 11954
                                                                                                                       // 11955
                                                                                                                       // 11956
function locationGetter(property) {                                                                                    // 11957
  return function() {                                                                                                  // 11958
    return this[property];                                                                                             // 11959
  };                                                                                                                   // 11960
}                                                                                                                      // 11961
                                                                                                                       // 11962
                                                                                                                       // 11963
function locationGetterSetter(property, preprocess) {                                                                  // 11964
  return function(value) {                                                                                             // 11965
    if (isUndefined(value)) {                                                                                          // 11966
      return this[property];                                                                                           // 11967
    }                                                                                                                  // 11968
                                                                                                                       // 11969
    this[property] = preprocess(value);                                                                                // 11970
    this.$$compose();                                                                                                  // 11971
                                                                                                                       // 11972
    return this;                                                                                                       // 11973
  };                                                                                                                   // 11974
}                                                                                                                      // 11975
                                                                                                                       // 11976
                                                                                                                       // 11977
/**                                                                                                                    // 11978
 * @ngdoc service                                                                                                      // 11979
 * @name $location                                                                                                     // 11980
 *                                                                                                                     // 11981
 * @requires $rootElement                                                                                              // 11982
 *                                                                                                                     // 11983
 * @description                                                                                                        // 11984
 * The $location service parses the URL in the browser address bar (based on the                                       // 11985
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL                              // 11986
 * available to your application. Changes to the URL in the address bar are reflected into                             // 11987
 * $location service and changes to $location are reflected into the browser address bar.                              // 11988
 *                                                                                                                     // 11989
 * **The $location service:**                                                                                          // 11990
 *                                                                                                                     // 11991
 * - Exposes the current URL in the browser address bar, so you can                                                    // 11992
 *   - Watch and observe the URL.                                                                                      // 11993
 *   - Change the URL.                                                                                                 // 11994
 * - Synchronizes the URL with the browser when the user                                                               // 11995
 *   - Changes the address bar.                                                                                        // 11996
 *   - Clicks the back or forward button (or clicks a History link).                                                   // 11997
 *   - Clicks on a link.                                                                                               // 11998
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).                         // 11999
 *                                                                                                                     // 12000
 * For more information see {@link guide/$location Developer Guide: Using $location}                                   // 12001
 */                                                                                                                    // 12002
                                                                                                                       // 12003
/**                                                                                                                    // 12004
 * @ngdoc provider                                                                                                     // 12005
 * @name $locationProvider                                                                                             // 12006
 * @description                                                                                                        // 12007
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.                         // 12008
 */                                                                                                                    // 12009
function $LocationProvider() {                                                                                         // 12010
  var hashPrefix = '',                                                                                                 // 12011
      html5Mode = {                                                                                                    // 12012
        enabled: false,                                                                                                // 12013
        requireBase: true,                                                                                             // 12014
        rewriteLinks: true                                                                                             // 12015
      };                                                                                                               // 12016
                                                                                                                       // 12017
  /**                                                                                                                  // 12018
   * @ngdoc method                                                                                                     // 12019
   * @name $locationProvider#hashPrefix                                                                                // 12020
   * @description                                                                                                      // 12021
   * @param {string=} prefix Prefix for hash part (containing path and search)                                         // 12022
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 12023
   */                                                                                                                  // 12024
  this.hashPrefix = function(prefix) {                                                                                 // 12025
    if (isDefined(prefix)) {                                                                                           // 12026
      hashPrefix = prefix;                                                                                             // 12027
      return this;                                                                                                     // 12028
    } else {                                                                                                           // 12029
      return hashPrefix;                                                                                               // 12030
    }                                                                                                                  // 12031
  };                                                                                                                   // 12032
                                                                                                                       // 12033
  /**                                                                                                                  // 12034
   * @ngdoc method                                                                                                     // 12035
   * @name $locationProvider#html5Mode                                                                                 // 12036
   * @description                                                                                                      // 12037
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.                                    // 12038
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported                     // 12039
   *   properties:                                                                                                     // 12040
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to                     // 12041
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not                    // 12042
   *     support `pushState`.                                                                                          // 12043
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies                        // 12044
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are                     // 12045
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.                    // 12046
   *     See the {@link guide/$location $location guide for more information}                                          // 12047
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,                                 // 12048
   *     enables/disables url rewriting for relative links.                                                            // 12049
   *                                                                                                                   // 12050
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter                       // 12051
   */                                                                                                                  // 12052
  this.html5Mode = function(mode) {                                                                                    // 12053
    if (isBoolean(mode)) {                                                                                             // 12054
      html5Mode.enabled = mode;                                                                                        // 12055
      return this;                                                                                                     // 12056
    } else if (isObject(mode)) {                                                                                       // 12057
                                                                                                                       // 12058
      if (isBoolean(mode.enabled)) {                                                                                   // 12059
        html5Mode.enabled = mode.enabled;                                                                              // 12060
      }                                                                                                                // 12061
                                                                                                                       // 12062
      if (isBoolean(mode.requireBase)) {                                                                               // 12063
        html5Mode.requireBase = mode.requireBase;                                                                      // 12064
      }                                                                                                                // 12065
                                                                                                                       // 12066
      if (isBoolean(mode.rewriteLinks)) {                                                                              // 12067
        html5Mode.rewriteLinks = mode.rewriteLinks;                                                                    // 12068
      }                                                                                                                // 12069
                                                                                                                       // 12070
      return this;                                                                                                     // 12071
    } else {                                                                                                           // 12072
      return html5Mode;                                                                                                // 12073
    }                                                                                                                  // 12074
  };                                                                                                                   // 12075
                                                                                                                       // 12076
  /**                                                                                                                  // 12077
   * @ngdoc event                                                                                                      // 12078
   * @name $location#$locationChangeStart                                                                              // 12079
   * @eventType broadcast on root scope                                                                                // 12080
   * @description                                                                                                      // 12081
   * Broadcasted before a URL will change.                                                                             // 12082
   *                                                                                                                   // 12083
   * This change can be prevented by calling                                                                           // 12084
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more                                // 12085
   * details about event object. Upon successful change                                                                // 12086
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.                                      // 12087
   *                                                                                                                   // 12088
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 12089
   * the browser supports the HTML5 History API.                                                                       // 12090
   *                                                                                                                   // 12091
   * @param {Object} angularEvent Synthetic event object.                                                              // 12092
   * @param {string} newUrl New URL                                                                                    // 12093
   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12094
   * @param {string=} newState New history state object                                                                // 12095
   * @param {string=} oldState History state object that was before it was changed.                                    // 12096
   */                                                                                                                  // 12097
                                                                                                                       // 12098
  /**                                                                                                                  // 12099
   * @ngdoc event                                                                                                      // 12100
   * @name $location#$locationChangeSuccess                                                                            // 12101
   * @eventType broadcast on root scope                                                                                // 12102
   * @description                                                                                                      // 12103
   * Broadcasted after a URL was changed.                                                                              // 12104
   *                                                                                                                   // 12105
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 12106
   * the browser supports the HTML5 History API.                                                                       // 12107
   *                                                                                                                   // 12108
   * @param {Object} angularEvent Synthetic event object.                                                              // 12109
   * @param {string} newUrl New URL                                                                                    // 12110
   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12111
   * @param {string=} newState New history state object                                                                // 12112
   * @param {string=} oldState History state object that was before it was changed.                                    // 12113
   */                                                                                                                  // 12114
                                                                                                                       // 12115
  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',                                        // 12116
      function($rootScope, $browser, $sniffer, $rootElement, $window) {                                                // 12117
    var $location,                                                                                                     // 12118
        LocationMode,                                                                                                  // 12119
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''                               // 12120
        initialUrl = $browser.url(),                                                                                   // 12121
        appBase;                                                                                                       // 12122
                                                                                                                       // 12123
    if (html5Mode.enabled) {                                                                                           // 12124
      if (!baseHref && html5Mode.requireBase) {                                                                        // 12125
        throw $locationMinErr('nobase',                                                                                // 12126
          "$location in HTML5 mode requires a <base> tag to be present!");                                             // 12127
      }                                                                                                                // 12128
      appBase = serverBase(initialUrl) + (baseHref || '/');                                                            // 12129
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;                                 // 12130
    } else {                                                                                                           // 12131
      appBase = stripHash(initialUrl);                                                                                 // 12132
      LocationMode = LocationHashbangUrl;                                                                              // 12133
    }                                                                                                                  // 12134
    var appBaseNoFile = stripFile(appBase);                                                                            // 12135
                                                                                                                       // 12136
    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);                                            // 12137
    $location.$$parseLinkUrl(initialUrl, initialUrl);                                                                  // 12138
                                                                                                                       // 12139
    $location.$$state = $browser.state();                                                                              // 12140
                                                                                                                       // 12141
    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;                                                               // 12142
                                                                                                                       // 12143
    function setBrowserUrlWithFallback(url, replace, state) {                                                          // 12144
      var oldUrl = $location.url();                                                                                    // 12145
      var oldState = $location.$$state;                                                                                // 12146
      try {                                                                                                            // 12147
        $browser.url(url, replace, state);                                                                             // 12148
                                                                                                                       // 12149
        // Make sure $location.state() returns referentially identical (not just deeply equal)                         // 12150
        // state object; this makes possible quick checking if the state changed in the digest                         // 12151
        // loop. Checking deep equality would be too expensive.                                                        // 12152
        $location.$$state = $browser.state();                                                                          // 12153
      } catch (e) {                                                                                                    // 12154
        // Restore old values if pushState fails                                                                       // 12155
        $location.url(oldUrl);                                                                                         // 12156
        $location.$$state = oldState;                                                                                  // 12157
                                                                                                                       // 12158
        throw e;                                                                                                       // 12159
      }                                                                                                                // 12160
    }                                                                                                                  // 12161
                                                                                                                       // 12162
    $rootElement.on('click', function(event) {                                                                         // 12163
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)                                  // 12164
      // currently we open nice url link and redirect then                                                             // 12165
                                                                                                                       // 12166
      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;
                                                                                                                       // 12168
      var elm = jqLite(event.target);                                                                                  // 12169
                                                                                                                       // 12170
      // traverse the DOM up to find first A tag                                                                       // 12171
      while (nodeName_(elm[0]) !== 'a') {                                                                              // 12172
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)                   // 12173
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;                                            // 12174
      }                                                                                                                // 12175
                                                                                                                       // 12176
      var absHref = elm.prop('href');                                                                                  // 12177
      // get the actual href attribute - see                                                                           // 12178
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx                                             // 12179
      var relHref = elm.attr('href') || elm.attr('xlink:href');                                                        // 12180
                                                                                                                       // 12181
      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {                                  // 12182
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during                   // 12183
        // an animation.                                                                                               // 12184
        absHref = urlResolve(absHref.animVal).href;                                                                    // 12185
      }                                                                                                                // 12186
                                                                                                                       // 12187
      // Ignore when url is started with javascript: or mailto:                                                        // 12188
      if (IGNORE_URI_REGEXP.test(absHref)) return;                                                                     // 12189
                                                                                                                       // 12190
      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {                                             // 12191
        if ($location.$$parseLinkUrl(absHref, relHref)) {                                                              // 12192
          // We do a preventDefault for all urls that are part of the angular application,                             // 12193
          // in html5mode and also without, so that we are able to abort navigation without                            // 12194
          // getting double entries in the location history.                                                           // 12195
          event.preventDefault();                                                                                      // 12196
          // update location manually                                                                                  // 12197
          if ($location.absUrl() != $browser.url()) {                                                                  // 12198
            $rootScope.$apply();                                                                                       // 12199
            // hack to work around FF6 bug 684208 when scenario runner clicks on links                                 // 12200
            $window.angular['ff-684208-preventDefault'] = true;                                                        // 12201
          }                                                                                                            // 12202
        }                                                                                                              // 12203
      }                                                                                                                // 12204
    });                                                                                                                // 12205
                                                                                                                       // 12206
                                                                                                                       // 12207
    // rewrite hashbang url <> html5 url                                                                               // 12208
    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {                                              // 12209
      $browser.url($location.absUrl(), true);                                                                          // 12210
    }                                                                                                                  // 12211
                                                                                                                       // 12212
    var initializing = true;                                                                                           // 12213
                                                                                                                       // 12214
    // update $location when $browser url changes                                                                      // 12215
    $browser.onUrlChange(function(newUrl, newState) {                                                                  // 12216
                                                                                                                       // 12217
      if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {                                                            // 12218
        // If we are navigating outside of the app then force a reload                                                 // 12219
        $window.location.href = newUrl;                                                                                // 12220
        return;                                                                                                        // 12221
      }                                                                                                                // 12222
                                                                                                                       // 12223
      $rootScope.$evalAsync(function() {                                                                               // 12224
        var oldUrl = $location.absUrl();                                                                               // 12225
        var oldState = $location.$$state;                                                                              // 12226
        var defaultPrevented;                                                                                          // 12227
                                                                                                                       // 12228
        $location.$$parse(newUrl);                                                                                     // 12229
        $location.$$state = newState;                                                                                  // 12230
                                                                                                                       // 12231
        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                               // 12232
            newState, oldState).defaultPrevented;                                                                      // 12233
                                                                                                                       // 12234
        // if the location was changed by a `$locationChangeStart` handler then stop                                   // 12235
        // processing this location change                                                                             // 12236
        if ($location.absUrl() !== newUrl) return;                                                                     // 12237
                                                                                                                       // 12238
        if (defaultPrevented) {                                                                                        // 12239
          $location.$$parse(oldUrl);                                                                                   // 12240
          $location.$$state = oldState;                                                                                // 12241
          setBrowserUrlWithFallback(oldUrl, false, oldState);                                                          // 12242
        } else {                                                                                                       // 12243
          initializing = false;                                                                                        // 12244
          afterLocationChange(oldUrl, oldState);                                                                       // 12245
        }                                                                                                              // 12246
      });                                                                                                              // 12247
      if (!$rootScope.$$phase) $rootScope.$digest();                                                                   // 12248
    });                                                                                                                // 12249
                                                                                                                       // 12250
    // update browser                                                                                                  // 12251
    $rootScope.$watch(function $locationWatch() {                                                                      // 12252
      var oldUrl = trimEmptyHash($browser.url());                                                                      // 12253
      var newUrl = trimEmptyHash($location.absUrl());                                                                  // 12254
      var oldState = $browser.state();                                                                                 // 12255
      var currentReplace = $location.$$replace;                                                                        // 12256
      var urlOrStateChanged = oldUrl !== newUrl ||                                                                     // 12257
        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);                                     // 12258
                                                                                                                       // 12259
      if (initializing || urlOrStateChanged) {                                                                         // 12260
        initializing = false;                                                                                          // 12261
                                                                                                                       // 12262
        $rootScope.$evalAsync(function() {                                                                             // 12263
          var newUrl = $location.absUrl();                                                                             // 12264
          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                         // 12265
              $location.$$state, oldState).defaultPrevented;                                                           // 12266
                                                                                                                       // 12267
          // if the location was changed by a `$locationChangeStart` handler then stop                                 // 12268
          // processing this location change                                                                           // 12269
          if ($location.absUrl() !== newUrl) return;                                                                   // 12270
                                                                                                                       // 12271
          if (defaultPrevented) {                                                                                      // 12272
            $location.$$parse(oldUrl);                                                                                 // 12273
            $location.$$state = oldState;                                                                              // 12274
          } else {                                                                                                     // 12275
            if (urlOrStateChanged) {                                                                                   // 12276
              setBrowserUrlWithFallback(newUrl, currentReplace,                                                        // 12277
                                        oldState === $location.$$state ? null : $location.$$state);                    // 12278
            }                                                                                                          // 12279
            afterLocationChange(oldUrl, oldState);                                                                     // 12280
          }                                                                                                            // 12281
        });                                                                                                            // 12282
      }                                                                                                                // 12283
                                                                                                                       // 12284
      $location.$$replace = false;                                                                                     // 12285
                                                                                                                       // 12286
      // we don't need to return anything because $evalAsync will make the digest loop dirty when                      // 12287
      // there is a change                                                                                             // 12288
    });                                                                                                                // 12289
                                                                                                                       // 12290
    return $location;                                                                                                  // 12291
                                                                                                                       // 12292
    function afterLocationChange(oldUrl, oldState) {                                                                   // 12293
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,                                      // 12294
        $location.$$state, oldState);                                                                                  // 12295
    }                                                                                                                  // 12296
}];                                                                                                                    // 12297
}                                                                                                                      // 12298
                                                                                                                       // 12299
/**                                                                                                                    // 12300
 * @ngdoc service                                                                                                      // 12301
 * @name $log                                                                                                          // 12302
 * @requires $window                                                                                                   // 12303
 *                                                                                                                     // 12304
 * @description                                                                                                        // 12305
 * Simple service for logging. Default implementation safely writes the message                                        // 12306
 * into the browser's console (if present).                                                                            // 12307
 *                                                                                                                     // 12308
 * The main purpose of this service is to simplify debugging and troubleshooting.                                      // 12309
 *                                                                                                                     // 12310
 * The default is to log `debug` messages. You can use                                                                 // 12311
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.                                                // 12312
 *                                                                                                                     // 12313
 * @example                                                                                                            // 12314
   <example module="logExample">                                                                                       // 12315
     <file name="script.js">                                                                                           // 12316
       angular.module('logExample', [])                                                                                // 12317
         .controller('LogController', ['$scope', '$log', function($scope, $log) {                                      // 12318
           $scope.$log = $log;                                                                                         // 12319
           $scope.message = 'Hello World!';                                                                            // 12320
         }]);                                                                                                          // 12321
     </file>                                                                                                           // 12322
     <file name="index.html">                                                                                          // 12323
       <div ng-controller="LogController">                                                                             // 12324
         <p>Reload this page with open console, enter text and hit the log button...</p>                               // 12325
         <label>Message:                                                                                               // 12326
         <input type="text" ng-model="message" /></label>                                                              // 12327
         <button ng-click="$log.log(message)">log</button>                                                             // 12328
         <button ng-click="$log.warn(message)">warn</button>                                                           // 12329
         <button ng-click="$log.info(message)">info</button>                                                           // 12330
         <button ng-click="$log.error(message)">error</button>                                                         // 12331
         <button ng-click="$log.debug(message)">debug</button>                                                         // 12332
       </div>                                                                                                          // 12333
     </file>                                                                                                           // 12334
   </example>                                                                                                          // 12335
 */                                                                                                                    // 12336
                                                                                                                       // 12337
/**                                                                                                                    // 12338
 * @ngdoc provider                                                                                                     // 12339
 * @name $logProvider                                                                                                  // 12340
 * @description                                                                                                        // 12341
 * Use the `$logProvider` to configure how the application logs messages                                               // 12342
 */                                                                                                                    // 12343
function $LogProvider() {                                                                                              // 12344
  var debug = true,                                                                                                    // 12345
      self = this;                                                                                                     // 12346
                                                                                                                       // 12347
  /**                                                                                                                  // 12348
   * @ngdoc method                                                                                                     // 12349
   * @name $logProvider#debugEnabled                                                                                   // 12350
   * @description                                                                                                      // 12351
   * @param {boolean=} flag enable or disable debug level messages                                                     // 12352
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 12353
   */                                                                                                                  // 12354
  this.debugEnabled = function(flag) {                                                                                 // 12355
    if (isDefined(flag)) {                                                                                             // 12356
      debug = flag;                                                                                                    // 12357
    return this;                                                                                                       // 12358
    } else {                                                                                                           // 12359
      return debug;                                                                                                    // 12360
    }                                                                                                                  // 12361
  };                                                                                                                   // 12362
                                                                                                                       // 12363
  this.$get = ['$window', function($window) {                                                                          // 12364
    return {                                                                                                           // 12365
      /**                                                                                                              // 12366
       * @ngdoc method                                                                                                 // 12367
       * @name $log#log                                                                                                // 12368
       *                                                                                                               // 12369
       * @description                                                                                                  // 12370
       * Write a log message                                                                                           // 12371
       */                                                                                                              // 12372
      log: consoleLog('log'),                                                                                          // 12373
                                                                                                                       // 12374
      /**                                                                                                              // 12375
       * @ngdoc method                                                                                                 // 12376
       * @name $log#info                                                                                               // 12377
       *                                                                                                               // 12378
       * @description                                                                                                  // 12379
       * Write an information message                                                                                  // 12380
       */                                                                                                              // 12381
      info: consoleLog('info'),                                                                                        // 12382
                                                                                                                       // 12383
      /**                                                                                                              // 12384
       * @ngdoc method                                                                                                 // 12385
       * @name $log#warn                                                                                               // 12386
       *                                                                                                               // 12387
       * @description                                                                                                  // 12388
       * Write a warning message                                                                                       // 12389
       */                                                                                                              // 12390
      warn: consoleLog('warn'),                                                                                        // 12391
                                                                                                                       // 12392
      /**                                                                                                              // 12393
       * @ngdoc method                                                                                                 // 12394
       * @name $log#error                                                                                              // 12395
       *                                                                                                               // 12396
       * @description                                                                                                  // 12397
       * Write an error message                                                                                        // 12398
       */                                                                                                              // 12399
      error: consoleLog('error'),                                                                                      // 12400
                                                                                                                       // 12401
      /**                                                                                                              // 12402
       * @ngdoc method                                                                                                 // 12403
       * @name $log#debug                                                                                              // 12404
       *                                                                                                               // 12405
       * @description                                                                                                  // 12406
       * Write a debug message                                                                                         // 12407
       */                                                                                                              // 12408
      debug: (function() {                                                                                             // 12409
        var fn = consoleLog('debug');                                                                                  // 12410
                                                                                                                       // 12411
        return function() {                                                                                            // 12412
          if (debug) {                                                                                                 // 12413
            fn.apply(self, arguments);                                                                                 // 12414
          }                                                                                                            // 12415
        };                                                                                                             // 12416
      }())                                                                                                             // 12417
    };                                                                                                                 // 12418
                                                                                                                       // 12419
    function formatError(arg) {                                                                                        // 12420
      if (arg instanceof Error) {                                                                                      // 12421
        if (arg.stack) {                                                                                               // 12422
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)                                                 // 12423
              ? 'Error: ' + arg.message + '\n' + arg.stack                                                             // 12424
              : arg.stack;                                                                                             // 12425
        } else if (arg.sourceURL) {                                                                                    // 12426
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;                                                   // 12427
        }                                                                                                              // 12428
      }                                                                                                                // 12429
      return arg;                                                                                                      // 12430
    }                                                                                                                  // 12431
                                                                                                                       // 12432
    function consoleLog(type) {                                                                                        // 12433
      var console = $window.console || {},                                                                             // 12434
          logFn = console[type] || console.log || noop,                                                                // 12435
          hasApply = false;                                                                                            // 12436
                                                                                                                       // 12437
      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.                                       // 12438
      // The reason behind this is that console.log has type "object" in IE8...                                        // 12439
      try {                                                                                                            // 12440
        hasApply = !!logFn.apply;                                                                                      // 12441
      } catch (e) {}                                                                                                   // 12442
                                                                                                                       // 12443
      if (hasApply) {                                                                                                  // 12444
        return function() {                                                                                            // 12445
          var args = [];                                                                                               // 12446
          forEach(arguments, function(arg) {                                                                           // 12447
            args.push(formatError(arg));                                                                               // 12448
          });                                                                                                          // 12449
          return logFn.apply(console, args);                                                                           // 12450
        };                                                                                                             // 12451
      }                                                                                                                // 12452
                                                                                                                       // 12453
      // we are IE which either doesn't have window.console => this is noop and we do nothing,                         // 12454
      // or we are IE where console.log doesn't have apply so we log at least first 2 args                             // 12455
      return function(arg1, arg2) {                                                                                    // 12456
        logFn(arg1, arg2 == null ? '' : arg2);                                                                         // 12457
      };                                                                                                               // 12458
    }                                                                                                                  // 12459
  }];                                                                                                                  // 12460
}                                                                                                                      // 12461
                                                                                                                       // 12462
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 12463
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 12464
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 12465
 *          An approval from 2 Core members with history of modifying      *                                           // 12466
 *                         this file is required.                          *                                           // 12467
 *                                                                         *                                           // 12468
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 12469
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 12470
 *     Or gives undesired access to variables likes document or window?    *                                           // 12471
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 12472
                                                                                                                       // 12473
var $parseMinErr = minErr('$parse');                                                                                   // 12474
                                                                                                                       // 12475
// Sandboxing Angular Expressions                                                                                      // 12476
// ------------------------------                                                                                      // 12477
// Angular expressions are generally considered safe because these expressions only have direct                        // 12478
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by                  // 12479
// obtaining a reference to native JS functions such as the Function constructor.                                      // 12480
//                                                                                                                     // 12481
// As an example, consider the following Angular expression:                                                           // 12482
//                                                                                                                     // 12483
//   {}.toString.constructor('alert("evil JS code")')                                                                  // 12484
//                                                                                                                     // 12485
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits                     // 12486
// against the expression language, but not to prevent exploits that were enabled by exposing                          // 12487
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good                     // 12488
// practice and therefore we are not even trying to protect against interaction with an object                         // 12489
// explicitly exposed in this way.                                                                                     // 12490
//                                                                                                                     // 12491
// In general, it is not possible to access a Window object from an angular expression unless a                        // 12492
// window or some DOM object that has a reference to window is published onto a Scope.                                 // 12493
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to                       // 12494
// native objects.                                                                                                     // 12495
//                                                                                                                     // 12496
// See https://docs.angularjs.org/guide/security                                                                       // 12497
                                                                                                                       // 12498
                                                                                                                       // 12499
function ensureSafeMemberName(name, fullExpression) {                                                                  // 12500
  // From the JavaScript docs:                                                                                         // 12501
  // Property names must be strings. This means that non-string objects cannot be used                                 // 12502
  // as keys in an object. Any non-string object, including a number, is typecasted                                    // 12503
  // into a string via the toString method.                                                                            // 12504
  //                                                                                                                   // 12505
  // So, to ensure that we are checking the same `name` that JavaScript would use,                                     // 12506
  // we cast it to a string, if possible                                                                               // 12507
  name =  (isObject(name) && name.toString) ? name.toString() : name;                                                  // 12508
                                                                                                                       // 12509
  if (name === "__defineGetter__" || name === "__defineSetter__"                                                       // 12510
      || name === "__lookupGetter__" || name === "__lookupSetter__"                                                    // 12511
      || name === "__proto__") {                                                                                       // 12512
    throw $parseMinErr('isecfld',                                                                                      // 12513
        'Attempting to access a disallowed field in Angular expressions! '                                             // 12514
        + 'Expression: {0}', fullExpression);                                                                          // 12515
  }                                                                                                                    // 12516
  return name;                                                                                                         // 12517
}                                                                                                                      // 12518
                                                                                                                       // 12519
function ensureSafeObject(obj, fullExpression) {                                                                       // 12520
  // nifty check if obj is Function that is fast and works across iframes and other contexts                           // 12521
  if (obj) {                                                                                                           // 12522
    if (obj.constructor === obj) {                                                                                     // 12523
      throw $parseMinErr('isecfn',                                                                                     // 12524
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                // 12525
          fullExpression);                                                                                             // 12526
    } else if (// isWindow(obj)                                                                                        // 12527
        obj.window === obj) {                                                                                          // 12528
      throw $parseMinErr('isecwindow',                                                                                 // 12529
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',                              // 12530
          fullExpression);                                                                                             // 12531
    } else if (// isElement(obj)                                                                                       // 12532
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {                                        // 12533
      throw $parseMinErr('isecdom',                                                                                    // 12534
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',                               // 12535
          fullExpression);                                                                                             // 12536
    } else if (// block Object so that we can't get hold of dangerous Object.* methods                                 // 12537
        obj === Object) {                                                                                              // 12538
      throw $parseMinErr('isecobj',                                                                                    // 12539
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',                                  // 12540
          fullExpression);                                                                                             // 12541
    }                                                                                                                  // 12542
  }                                                                                                                    // 12543
  return obj;                                                                                                          // 12544
}                                                                                                                      // 12545
                                                                                                                       // 12546
var CALL = Function.prototype.call;                                                                                    // 12547
var APPLY = Function.prototype.apply;                                                                                  // 12548
var BIND = Function.prototype.bind;                                                                                    // 12549
                                                                                                                       // 12550
function ensureSafeFunction(obj, fullExpression) {                                                                     // 12551
  if (obj) {                                                                                                           // 12552
    if (obj.constructor === obj) {                                                                                     // 12553
      throw $parseMinErr('isecfn',                                                                                     // 12554
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                  // 12555
        fullExpression);                                                                                               // 12556
    } else if (obj === CALL || obj === APPLY || obj === BIND) {                                                        // 12557
      throw $parseMinErr('isecff',                                                                                     // 12558
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',                       // 12559
        fullExpression);                                                                                               // 12560
    }                                                                                                                  // 12561
  }                                                                                                                    // 12562
}                                                                                                                      // 12563
                                                                                                                       // 12564
var OPERATORS = createMap();                                                                                           // 12565
forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};                                     // 12567
                                                                                                                       // 12568
                                                                                                                       // 12569
/////////////////////////////////////////                                                                              // 12570
                                                                                                                       // 12571
                                                                                                                       // 12572
/**                                                                                                                    // 12573
 * @constructor                                                                                                        // 12574
 */                                                                                                                    // 12575
var Lexer = function(options) {                                                                                        // 12576
  this.options = options;                                                                                              // 12577
};                                                                                                                     // 12578
                                                                                                                       // 12579
Lexer.prototype = {                                                                                                    // 12580
  constructor: Lexer,                                                                                                  // 12581
                                                                                                                       // 12582
  lex: function(text) {                                                                                                // 12583
    this.text = text;                                                                                                  // 12584
    this.index = 0;                                                                                                    // 12585
    this.tokens = [];                                                                                                  // 12586
                                                                                                                       // 12587
    while (this.index < this.text.length) {                                                                            // 12588
      var ch = this.text.charAt(this.index);                                                                           // 12589
      if (ch === '"' || ch === "'") {                                                                                  // 12590
        this.readString(ch);                                                                                           // 12591
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {                                      // 12592
        this.readNumber();                                                                                             // 12593
      } else if (this.isIdent(ch)) {                                                                                   // 12594
        this.readIdent();                                                                                              // 12595
      } else if (this.is(ch, '(){}[].,;:?')) {                                                                         // 12596
        this.tokens.push({index: this.index, text: ch});                                                               // 12597
        this.index++;                                                                                                  // 12598
      } else if (this.isWhitespace(ch)) {                                                                              // 12599
        this.index++;                                                                                                  // 12600
      } else {                                                                                                         // 12601
        var ch2 = ch + this.peek();                                                                                    // 12602
        var ch3 = ch2 + this.peek(2);                                                                                  // 12603
        var op1 = OPERATORS[ch];                                                                                       // 12604
        var op2 = OPERATORS[ch2];                                                                                      // 12605
        var op3 = OPERATORS[ch3];                                                                                      // 12606
        if (op1 || op2 || op3) {                                                                                       // 12607
          var token = op3 ? ch3 : (op2 ? ch2 : ch);                                                                    // 12608
          this.tokens.push({index: this.index, text: token, operator: true});                                          // 12609
          this.index += token.length;                                                                                  // 12610
        } else {                                                                                                       // 12611
          this.throwError('Unexpected next character ', this.index, this.index + 1);                                   // 12612
        }                                                                                                              // 12613
      }                                                                                                                // 12614
    }                                                                                                                  // 12615
    return this.tokens;                                                                                                // 12616
  },                                                                                                                   // 12617
                                                                                                                       // 12618
  is: function(ch, chars) {                                                                                            // 12619
    return chars.indexOf(ch) !== -1;                                                                                   // 12620
  },                                                                                                                   // 12621
                                                                                                                       // 12622
  peek: function(i) {                                                                                                  // 12623
    var num = i || 1;                                                                                                  // 12624
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;                         // 12625
  },                                                                                                                   // 12626
                                                                                                                       // 12627
  isNumber: function(ch) {                                                                                             // 12628
    return ('0' <= ch && ch <= '9') && typeof ch === "string";                                                         // 12629
  },                                                                                                                   // 12630
                                                                                                                       // 12631
  isWhitespace: function(ch) {                                                                                         // 12632
    // IE treats non-breaking space as \u00A0                                                                          // 12633
    return (ch === ' ' || ch === '\r' || ch === '\t' ||                                                                // 12634
            ch === '\n' || ch === '\v' || ch === '\u00A0');                                                            // 12635
  },                                                                                                                   // 12636
                                                                                                                       // 12637
  isIdent: function(ch) {                                                                                              // 12638
    return ('a' <= ch && ch <= 'z' ||                                                                                  // 12639
            'A' <= ch && ch <= 'Z' ||                                                                                  // 12640
            '_' === ch || ch === '$');                                                                                 // 12641
  },                                                                                                                   // 12642
                                                                                                                       // 12643
  isExpOperator: function(ch) {                                                                                        // 12644
    return (ch === '-' || ch === '+' || this.isNumber(ch));                                                            // 12645
  },                                                                                                                   // 12646
                                                                                                                       // 12647
  throwError: function(error, start, end) {                                                                            // 12648
    end = end || this.index;                                                                                           // 12649
    var colStr = (isDefined(start)                                                                                     // 12650
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'                          // 12651
            : ' ' + end);                                                                                              // 12652
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',                                 // 12653
        error, colStr, this.text);                                                                                     // 12654
  },                                                                                                                   // 12655
                                                                                                                       // 12656
  readNumber: function() {                                                                                             // 12657
    var number = '';                                                                                                   // 12658
    var start = this.index;                                                                                            // 12659
    while (this.index < this.text.length) {                                                                            // 12660
      var ch = lowercase(this.text.charAt(this.index));                                                                // 12661
      if (ch == '.' || this.isNumber(ch)) {                                                                            // 12662
        number += ch;                                                                                                  // 12663
      } else {                                                                                                         // 12664
        var peekCh = this.peek();                                                                                      // 12665
        if (ch == 'e' && this.isExpOperator(peekCh)) {                                                                 // 12666
          number += ch;                                                                                                // 12667
        } else if (this.isExpOperator(ch) &&                                                                           // 12668
            peekCh && this.isNumber(peekCh) &&                                                                         // 12669
            number.charAt(number.length - 1) == 'e') {                                                                 // 12670
          number += ch;                                                                                                // 12671
        } else if (this.isExpOperator(ch) &&                                                                           // 12672
            (!peekCh || !this.isNumber(peekCh)) &&                                                                     // 12673
            number.charAt(number.length - 1) == 'e') {                                                                 // 12674
          this.throwError('Invalid exponent');                                                                         // 12675
        } else {                                                                                                       // 12676
          break;                                                                                                       // 12677
        }                                                                                                              // 12678
      }                                                                                                                // 12679
      this.index++;                                                                                                    // 12680
    }                                                                                                                  // 12681
    this.tokens.push({                                                                                                 // 12682
      index: start,                                                                                                    // 12683
      text: number,                                                                                                    // 12684
      constant: true,                                                                                                  // 12685
      value: Number(number)                                                                                            // 12686
    });                                                                                                                // 12687
  },                                                                                                                   // 12688
                                                                                                                       // 12689
  readIdent: function() {                                                                                              // 12690
    var start = this.index;                                                                                            // 12691
    while (this.index < this.text.length) {                                                                            // 12692
      var ch = this.text.charAt(this.index);                                                                           // 12693
      if (!(this.isIdent(ch) || this.isNumber(ch))) {                                                                  // 12694
        break;                                                                                                         // 12695
      }                                                                                                                // 12696
      this.index++;                                                                                                    // 12697
    }                                                                                                                  // 12698
    this.tokens.push({                                                                                                 // 12699
      index: start,                                                                                                    // 12700
      text: this.text.slice(start, this.index),                                                                        // 12701
      identifier: true                                                                                                 // 12702
    });                                                                                                                // 12703
  },                                                                                                                   // 12704
                                                                                                                       // 12705
  readString: function(quote) {                                                                                        // 12706
    var start = this.index;                                                                                            // 12707
    this.index++;                                                                                                      // 12708
    var string = '';                                                                                                   // 12709
    var rawString = quote;                                                                                             // 12710
    var escape = false;                                                                                                // 12711
    while (this.index < this.text.length) {                                                                            // 12712
      var ch = this.text.charAt(this.index);                                                                           // 12713
      rawString += ch;                                                                                                 // 12714
      if (escape) {                                                                                                    // 12715
        if (ch === 'u') {                                                                                              // 12716
          var hex = this.text.substring(this.index + 1, this.index + 5);                                               // 12717
          if (!hex.match(/[\da-f]{4}/i)) {                                                                             // 12718
            this.throwError('Invalid unicode escape [\\u' + hex + ']');                                                // 12719
          }                                                                                                            // 12720
          this.index += 4;                                                                                             // 12721
          string += String.fromCharCode(parseInt(hex, 16));                                                            // 12722
        } else {                                                                                                       // 12723
          var rep = ESCAPE[ch];                                                                                        // 12724
          string = string + (rep || ch);                                                                               // 12725
        }                                                                                                              // 12726
        escape = false;                                                                                                // 12727
      } else if (ch === '\\') {                                                                                        // 12728
        escape = true;                                                                                                 // 12729
      } else if (ch === quote) {                                                                                       // 12730
        this.index++;                                                                                                  // 12731
        this.tokens.push({                                                                                             // 12732
          index: start,                                                                                                // 12733
          text: rawString,                                                                                             // 12734
          constant: true,                                                                                              // 12735
          value: string                                                                                                // 12736
        });                                                                                                            // 12737
        return;                                                                                                        // 12738
      } else {                                                                                                         // 12739
        string += ch;                                                                                                  // 12740
      }                                                                                                                // 12741
      this.index++;                                                                                                    // 12742
    }                                                                                                                  // 12743
    this.throwError('Unterminated quote', start);                                                                      // 12744
  }                                                                                                                    // 12745
};                                                                                                                     // 12746
                                                                                                                       // 12747
var AST = function(lexer, options) {                                                                                   // 12748
  this.lexer = lexer;                                                                                                  // 12749
  this.options = options;                                                                                              // 12750
};                                                                                                                     // 12751
                                                                                                                       // 12752
AST.Program = 'Program';                                                                                               // 12753
AST.ExpressionStatement = 'ExpressionStatement';                                                                       // 12754
AST.AssignmentExpression = 'AssignmentExpression';                                                                     // 12755
AST.ConditionalExpression = 'ConditionalExpression';                                                                   // 12756
AST.LogicalExpression = 'LogicalExpression';                                                                           // 12757
AST.BinaryExpression = 'BinaryExpression';                                                                             // 12758
AST.UnaryExpression = 'UnaryExpression';                                                                               // 12759
AST.CallExpression = 'CallExpression';                                                                                 // 12760
AST.MemberExpression = 'MemberExpression';                                                                             // 12761
AST.Identifier = 'Identifier';                                                                                         // 12762
AST.Literal = 'Literal';                                                                                               // 12763
AST.ArrayExpression = 'ArrayExpression';                                                                               // 12764
AST.Property = 'Property';                                                                                             // 12765
AST.ObjectExpression = 'ObjectExpression';                                                                             // 12766
AST.ThisExpression = 'ThisExpression';                                                                                 // 12767
                                                                                                                       // 12768
// Internal use only                                                                                                   // 12769
AST.NGValueParameter = 'NGValueParameter';                                                                             // 12770
                                                                                                                       // 12771
AST.prototype = {                                                                                                      // 12772
  ast: function(text) {                                                                                                // 12773
    this.text = text;                                                                                                  // 12774
    this.tokens = this.lexer.lex(text);                                                                                // 12775
                                                                                                                       // 12776
    var value = this.program();                                                                                        // 12777
                                                                                                                       // 12778
    if (this.tokens.length !== 0) {                                                                                    // 12779
      this.throwError('is an unexpected token', this.tokens[0]);                                                       // 12780
    }                                                                                                                  // 12781
                                                                                                                       // 12782
    return value;                                                                                                      // 12783
  },                                                                                                                   // 12784
                                                                                                                       // 12785
  program: function() {                                                                                                // 12786
    var body = [];                                                                                                     // 12787
    while (true) {                                                                                                     // 12788
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))                                                    // 12789
        body.push(this.expressionStatement());                                                                         // 12790
      if (!this.expect(';')) {                                                                                         // 12791
        return { type: AST.Program, body: body};                                                                       // 12792
      }                                                                                                                // 12793
    }                                                                                                                  // 12794
  },                                                                                                                   // 12795
                                                                                                                       // 12796
  expressionStatement: function() {                                                                                    // 12797
    return { type: AST.ExpressionStatement, expression: this.filterChain() };                                          // 12798
  },                                                                                                                   // 12799
                                                                                                                       // 12800
  filterChain: function() {                                                                                            // 12801
    var left = this.expression();                                                                                      // 12802
    var token;                                                                                                         // 12803
    while ((token = this.expect('|'))) {                                                                               // 12804
      left = this.filter(left);                                                                                        // 12805
    }                                                                                                                  // 12806
    return left;                                                                                                       // 12807
  },                                                                                                                   // 12808
                                                                                                                       // 12809
  expression: function() {                                                                                             // 12810
    return this.assignment();                                                                                          // 12811
  },                                                                                                                   // 12812
                                                                                                                       // 12813
  assignment: function() {                                                                                             // 12814
    var result = this.ternary();                                                                                       // 12815
    if (this.expect('=')) {                                                                                            // 12816
      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};               // 12817
    }                                                                                                                  // 12818
    return result;                                                                                                     // 12819
  },                                                                                                                   // 12820
                                                                                                                       // 12821
  ternary: function() {                                                                                                // 12822
    var test = this.logicalOR();                                                                                       // 12823
    var alternate;                                                                                                     // 12824
    var consequent;                                                                                                    // 12825
    if (this.expect('?')) {                                                                                            // 12826
      alternate = this.expression();                                                                                   // 12827
      if (this.consume(':')) {                                                                                         // 12828
        consequent = this.expression();                                                                                // 12829
        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};           // 12830
      }                                                                                                                // 12831
    }                                                                                                                  // 12832
    return test;                                                                                                       // 12833
  },                                                                                                                   // 12834
                                                                                                                       // 12835
  logicalOR: function() {                                                                                              // 12836
    var left = this.logicalAND();                                                                                      // 12837
    while (this.expect('||')) {                                                                                        // 12838
      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };                    // 12839
    }                                                                                                                  // 12840
    return left;                                                                                                       // 12841
  },                                                                                                                   // 12842
                                                                                                                       // 12843
  logicalAND: function() {                                                                                             // 12844
    var left = this.equality();                                                                                        // 12845
    while (this.expect('&&')) {                                                                                        // 12846
      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};                       // 12847
    }                                                                                                                  // 12848
    return left;                                                                                                       // 12849
  },                                                                                                                   // 12850
                                                                                                                       // 12851
  equality: function() {                                                                                               // 12852
    var left = this.relational();                                                                                      // 12853
    var token;                                                                                                         // 12854
    while ((token = this.expect('==','!=','===','!=='))) {                                                             // 12855
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };               // 12856
    }                                                                                                                  // 12857
    return left;                                                                                                       // 12858
  },                                                                                                                   // 12859
                                                                                                                       // 12860
  relational: function() {                                                                                             // 12861
    var left = this.additive();                                                                                        // 12862
    var token;                                                                                                         // 12863
    while ((token = this.expect('<', '>', '<=', '>='))) {                                                              // 12864
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };                 // 12865
    }                                                                                                                  // 12866
    return left;                                                                                                       // 12867
  },                                                                                                                   // 12868
                                                                                                                       // 12869
  additive: function() {                                                                                               // 12870
    var left = this.multiplicative();                                                                                  // 12871
    var token;                                                                                                         // 12872
    while ((token = this.expect('+','-'))) {                                                                           // 12873
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };           // 12874
    }                                                                                                                  // 12875
    return left;                                                                                                       // 12876
  },                                                                                                                   // 12877
                                                                                                                       // 12878
  multiplicative: function() {                                                                                         // 12879
    var left = this.unary();                                                                                           // 12880
    var token;                                                                                                         // 12881
    while ((token = this.expect('*','/','%'))) {                                                                       // 12882
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };                    // 12883
    }                                                                                                                  // 12884
    return left;                                                                                                       // 12885
  },                                                                                                                   // 12886
                                                                                                                       // 12887
  unary: function() {                                                                                                  // 12888
    var token;                                                                                                         // 12889
    if ((token = this.expect('+', '-', '!'))) {                                                                        // 12890
      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };                // 12891
    } else {                                                                                                           // 12892
      return this.primary();                                                                                           // 12893
    }                                                                                                                  // 12894
  },                                                                                                                   // 12895
                                                                                                                       // 12896
  primary: function() {                                                                                                // 12897
    var primary;                                                                                                       // 12898
    if (this.expect('(')) {                                                                                            // 12899
      primary = this.filterChain();                                                                                    // 12900
      this.consume(')');                                                                                               // 12901
    } else if (this.expect('[')) {                                                                                     // 12902
      primary = this.arrayDeclaration();                                                                               // 12903
    } else if (this.expect('{')) {                                                                                     // 12904
      primary = this.object();                                                                                         // 12905
    } else if (this.constants.hasOwnProperty(this.peek().text)) {                                                      // 12906
      primary = copy(this.constants[this.consume().text]);                                                             // 12907
    } else if (this.peek().identifier) {                                                                               // 12908
      primary = this.identifier();                                                                                     // 12909
    } else if (this.peek().constant) {                                                                                 // 12910
      primary = this.constant();                                                                                       // 12911
    } else {                                                                                                           // 12912
      this.throwError('not a primary expression', this.peek());                                                        // 12913
    }                                                                                                                  // 12914
                                                                                                                       // 12915
    var next;                                                                                                          // 12916
    while ((next = this.expect('(', '[', '.'))) {                                                                      // 12917
      if (next.text === '(') {                                                                                         // 12918
        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };                      // 12919
        this.consume(')');                                                                                             // 12920
      } else if (next.text === '[') {                                                                                  // 12921
        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };        // 12922
        this.consume(']');                                                                                             // 12923
      } else if (next.text === '.') {                                                                                  // 12924
        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };       // 12925
      } else {                                                                                                         // 12926
        this.throwError('IMPOSSIBLE');                                                                                 // 12927
      }                                                                                                                // 12928
    }                                                                                                                  // 12929
    return primary;                                                                                                    // 12930
  },                                                                                                                   // 12931
                                                                                                                       // 12932
  filter: function(baseExpression) {                                                                                   // 12933
    var args = [baseExpression];                                                                                       // 12934
    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};                 // 12935
                                                                                                                       // 12936
    while (this.expect(':')) {                                                                                         // 12937
      args.push(this.expression());                                                                                    // 12938
    }                                                                                                                  // 12939
                                                                                                                       // 12940
    return result;                                                                                                     // 12941
  },                                                                                                                   // 12942
                                                                                                                       // 12943
  parseArguments: function() {                                                                                         // 12944
    var args = [];                                                                                                     // 12945
    if (this.peekToken().text !== ')') {                                                                               // 12946
      do {                                                                                                             // 12947
        args.push(this.expression());                                                                                  // 12948
      } while (this.expect(','));                                                                                      // 12949
    }                                                                                                                  // 12950
    return args;                                                                                                       // 12951
  },                                                                                                                   // 12952
                                                                                                                       // 12953
  identifier: function() {                                                                                             // 12954
    var token = this.consume();                                                                                        // 12955
    if (!token.identifier) {                                                                                           // 12956
      this.throwError('is not a valid identifier', token);                                                             // 12957
    }                                                                                                                  // 12958
    return { type: AST.Identifier, name: token.text };                                                                 // 12959
  },                                                                                                                   // 12960
                                                                                                                       // 12961
  constant: function() {                                                                                               // 12962
    // TODO check that it is a constant                                                                                // 12963
    return { type: AST.Literal, value: this.consume().value };                                                         // 12964
  },                                                                                                                   // 12965
                                                                                                                       // 12966
  arrayDeclaration: function() {                                                                                       // 12967
    var elements = [];                                                                                                 // 12968
    if (this.peekToken().text !== ']') {                                                                               // 12969
      do {                                                                                                             // 12970
        if (this.peek(']')) {                                                                                          // 12971
          // Support trailing commas per ES5.1.                                                                        // 12972
          break;                                                                                                       // 12973
        }                                                                                                              // 12974
        elements.push(this.expression());                                                                              // 12975
      } while (this.expect(','));                                                                                      // 12976
    }                                                                                                                  // 12977
    this.consume(']');                                                                                                 // 12978
                                                                                                                       // 12979
    return { type: AST.ArrayExpression, elements: elements };                                                          // 12980
  },                                                                                                                   // 12981
                                                                                                                       // 12982
  object: function() {                                                                                                 // 12983
    var properties = [], property;                                                                                     // 12984
    if (this.peekToken().text !== '}') {                                                                               // 12985
      do {                                                                                                             // 12986
        if (this.peek('}')) {                                                                                          // 12987
          // Support trailing commas per ES5.1.                                                                        // 12988
          break;                                                                                                       // 12989
        }                                                                                                              // 12990
        property = {type: AST.Property, kind: 'init'};                                                                 // 12991
        if (this.peek().constant) {                                                                                    // 12992
          property.key = this.constant();                                                                              // 12993
        } else if (this.peek().identifier) {                                                                           // 12994
          property.key = this.identifier();                                                                            // 12995
        } else {                                                                                                       // 12996
          this.throwError("invalid key", this.peek());                                                                 // 12997
        }                                                                                                              // 12998
        this.consume(':');                                                                                             // 12999
        property.value = this.expression();                                                                            // 13000
        properties.push(property);                                                                                     // 13001
      } while (this.expect(','));                                                                                      // 13002
    }                                                                                                                  // 13003
    this.consume('}');                                                                                                 // 13004
                                                                                                                       // 13005
    return {type: AST.ObjectExpression, properties: properties };                                                      // 13006
  },                                                                                                                   // 13007
                                                                                                                       // 13008
  throwError: function(msg, token) {                                                                                   // 13009
    throw $parseMinErr('syntax',                                                                                       // 13010
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',                    // 13011
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));                            // 13012
  },                                                                                                                   // 13013
                                                                                                                       // 13014
  consume: function(e1) {                                                                                              // 13015
    if (this.tokens.length === 0) {                                                                                    // 13016
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 13017
    }                                                                                                                  // 13018
                                                                                                                       // 13019
    var token = this.expect(e1);                                                                                       // 13020
    if (!token) {                                                                                                      // 13021
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());                                           // 13022
    }                                                                                                                  // 13023
    return token;                                                                                                      // 13024
  },                                                                                                                   // 13025
                                                                                                                       // 13026
  peekToken: function() {                                                                                              // 13027
    if (this.tokens.length === 0) {                                                                                    // 13028
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 13029
    }                                                                                                                  // 13030
    return this.tokens[0];                                                                                             // 13031
  },                                                                                                                   // 13032
                                                                                                                       // 13033
  peek: function(e1, e2, e3, e4) {                                                                                     // 13034
    return this.peekAhead(0, e1, e2, e3, e4);                                                                          // 13035
  },                                                                                                                   // 13036
                                                                                                                       // 13037
  peekAhead: function(i, e1, e2, e3, e4) {                                                                             // 13038
    if (this.tokens.length > i) {                                                                                      // 13039
      var token = this.tokens[i];                                                                                      // 13040
      var t = token.text;                                                                                              // 13041
      if (t === e1 || t === e2 || t === e3 || t === e4 ||                                                              // 13042
          (!e1 && !e2 && !e3 && !e4)) {                                                                                // 13043
        return token;                                                                                                  // 13044
      }                                                                                                                // 13045
    }                                                                                                                  // 13046
    return false;                                                                                                      // 13047
  },                                                                                                                   // 13048
                                                                                                                       // 13049
  expect: function(e1, e2, e3, e4) {                                                                                   // 13050
    var token = this.peek(e1, e2, e3, e4);                                                                             // 13051
    if (token) {                                                                                                       // 13052
      this.tokens.shift();                                                                                             // 13053
      return token;                                                                                                    // 13054
    }                                                                                                                  // 13055
    return false;                                                                                                      // 13056
  },                                                                                                                   // 13057
                                                                                                                       // 13058
                                                                                                                       // 13059
  /* `undefined` is not a constant, it is an identifier,                                                               // 13060
   * but using it as an identifier is not supported                                                                    // 13061
   */                                                                                                                  // 13062
  constants: {                                                                                                         // 13063
    'true': { type: AST.Literal, value: true },                                                                        // 13064
    'false': { type: AST.Literal, value: false },                                                                      // 13065
    'null': { type: AST.Literal, value: null },                                                                        // 13066
    'undefined': {type: AST.Literal, value: undefined },                                                               // 13067
    'this': {type: AST.ThisExpression }                                                                                // 13068
  }                                                                                                                    // 13069
};                                                                                                                     // 13070
                                                                                                                       // 13071
function ifDefined(v, d) {                                                                                             // 13072
  return typeof v !== 'undefined' ? v : d;                                                                             // 13073
}                                                                                                                      // 13074
                                                                                                                       // 13075
function plusFn(l, r) {                                                                                                // 13076
  if (typeof l === 'undefined') return r;                                                                              // 13077
  if (typeof r === 'undefined') return l;                                                                              // 13078
  return l + r;                                                                                                        // 13079
}                                                                                                                      // 13080
                                                                                                                       // 13081
function isStateless($filter, filterName) {                                                                            // 13082
  var fn = $filter(filterName);                                                                                        // 13083
  return !fn.$stateful;                                                                                                // 13084
}                                                                                                                      // 13085
                                                                                                                       // 13086
function findConstantAndWatchExpressions(ast, $filter) {                                                               // 13087
  var allConstants;                                                                                                    // 13088
  var argsToWatch;                                                                                                     // 13089
  switch (ast.type) {                                                                                                  // 13090
  case AST.Program:                                                                                                    // 13091
    allConstants = true;                                                                                               // 13092
    forEach(ast.body, function(expr) {                                                                                 // 13093
      findConstantAndWatchExpressions(expr.expression, $filter);                                                       // 13094
      allConstants = allConstants && expr.expression.constant;                                                         // 13095
    });                                                                                                                // 13096
    ast.constant = allConstants;                                                                                       // 13097
    break;                                                                                                             // 13098
  case AST.Literal:                                                                                                    // 13099
    ast.constant = true;                                                                                               // 13100
    ast.toWatch = [];                                                                                                  // 13101
    break;                                                                                                             // 13102
  case AST.UnaryExpression:                                                                                            // 13103
    findConstantAndWatchExpressions(ast.argument, $filter);                                                            // 13104
    ast.constant = ast.argument.constant;                                                                              // 13105
    ast.toWatch = ast.argument.toWatch;                                                                                // 13106
    break;                                                                                                             // 13107
  case AST.BinaryExpression:                                                                                           // 13108
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13109
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13110
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13111
    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);                                                          // 13112
    break;                                                                                                             // 13113
  case AST.LogicalExpression:                                                                                          // 13114
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13115
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13116
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13117
    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 13118
    break;                                                                                                             // 13119
  case AST.ConditionalExpression:                                                                                      // 13120
    findConstantAndWatchExpressions(ast.test, $filter);                                                                // 13121
    findConstantAndWatchExpressions(ast.alternate, $filter);                                                           // 13122
    findConstantAndWatchExpressions(ast.consequent, $filter);                                                          // 13123
    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;                             // 13124
    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 13125
    break;                                                                                                             // 13126
  case AST.Identifier:                                                                                                 // 13127
    ast.constant = false;                                                                                              // 13128
    ast.toWatch = [ast];                                                                                               // 13129
    break;                                                                                                             // 13130
  case AST.MemberExpression:                                                                                           // 13131
    findConstantAndWatchExpressions(ast.object, $filter);                                                              // 13132
    if (ast.computed) {                                                                                                // 13133
      findConstantAndWatchExpressions(ast.property, $filter);                                                          // 13134
    }                                                                                                                  // 13135
    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);                                    // 13136
    ast.toWatch = [ast];                                                                                               // 13137
    break;                                                                                                             // 13138
  case AST.CallExpression:                                                                                             // 13139
    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;                                         // 13140
    argsToWatch = [];                                                                                                  // 13141
    forEach(ast.arguments, function(expr) {                                                                            // 13142
      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13143
      allConstants = allConstants && expr.constant;                                                                    // 13144
      if (!expr.constant) {                                                                                            // 13145
        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13146
      }                                                                                                                // 13147
    });                                                                                                                // 13148
    ast.constant = allConstants;                                                                                       // 13149
    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];                           // 13150
    break;                                                                                                             // 13151
  case AST.AssignmentExpression:                                                                                       // 13152
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13153
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13154
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13155
    ast.toWatch = [ast];                                                                                               // 13156
    break;                                                                                                             // 13157
  case AST.ArrayExpression:                                                                                            // 13158
    allConstants = true;                                                                                               // 13159
    argsToWatch = [];                                                                                                  // 13160
    forEach(ast.elements, function(expr) {                                                                             // 13161
      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13162
      allConstants = allConstants && expr.constant;                                                                    // 13163
      if (!expr.constant) {                                                                                            // 13164
        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13165
      }                                                                                                                // 13166
    });                                                                                                                // 13167
    ast.constant = allConstants;                                                                                       // 13168
    ast.toWatch = argsToWatch;                                                                                         // 13169
    break;                                                                                                             // 13170
  case AST.ObjectExpression:                                                                                           // 13171
    allConstants = true;                                                                                               // 13172
    argsToWatch = [];                                                                                                  // 13173
    forEach(ast.properties, function(property) {                                                                       // 13174
      findConstantAndWatchExpressions(property.value, $filter);                                                        // 13175
      allConstants = allConstants && property.value.constant;                                                          // 13176
      if (!property.value.constant) {                                                                                  // 13177
        argsToWatch.push.apply(argsToWatch, property.value.toWatch);                                                   // 13178
      }                                                                                                                // 13179
    });                                                                                                                // 13180
    ast.constant = allConstants;                                                                                       // 13181
    ast.toWatch = argsToWatch;                                                                                         // 13182
    break;                                                                                                             // 13183
  case AST.ThisExpression:                                                                                             // 13184
    ast.constant = false;                                                                                              // 13185
    ast.toWatch = [];                                                                                                  // 13186
    break;                                                                                                             // 13187
  }                                                                                                                    // 13188
}                                                                                                                      // 13189
                                                                                                                       // 13190
function getInputs(body) {                                                                                             // 13191
  if (body.length != 1) return;                                                                                        // 13192
  var lastExpression = body[0].expression;                                                                             // 13193
  var candidate = lastExpression.toWatch;                                                                              // 13194
  if (candidate.length !== 1) return candidate;                                                                        // 13195
  return candidate[0] !== lastExpression ? candidate : undefined;                                                      // 13196
}                                                                                                                      // 13197
                                                                                                                       // 13198
function isAssignable(ast) {                                                                                           // 13199
  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;                                             // 13200
}                                                                                                                      // 13201
                                                                                                                       // 13202
function assignableAST(ast) {                                                                                          // 13203
  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {                                                 // 13204
    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
  }                                                                                                                    // 13206
}                                                                                                                      // 13207
                                                                                                                       // 13208
function isLiteral(ast) {                                                                                              // 13209
  return ast.body.length === 0 ||                                                                                      // 13210
      ast.body.length === 1 && (                                                                                       // 13211
      ast.body[0].expression.type === AST.Literal ||                                                                   // 13212
      ast.body[0].expression.type === AST.ArrayExpression ||                                                           // 13213
      ast.body[0].expression.type === AST.ObjectExpression);                                                           // 13214
}                                                                                                                      // 13215
                                                                                                                       // 13216
function isConstant(ast) {                                                                                             // 13217
  return ast.constant;                                                                                                 // 13218
}                                                                                                                      // 13219
                                                                                                                       // 13220
function ASTCompiler(astBuilder, $filter) {                                                                            // 13221
  this.astBuilder = astBuilder;                                                                                        // 13222
  this.$filter = $filter;                                                                                              // 13223
}                                                                                                                      // 13224
                                                                                                                       // 13225
ASTCompiler.prototype = {                                                                                              // 13226
  compile: function(expression, expensiveChecks) {                                                                     // 13227
    var self = this;                                                                                                   // 13228
    var ast = this.astBuilder.ast(expression);                                                                         // 13229
    this.state = {                                                                                                     // 13230
      nextId: 0,                                                                                                       // 13231
      filters: {},                                                                                                     // 13232
      expensiveChecks: expensiveChecks,                                                                                // 13233
      fn: {vars: [], body: [], own: {}},                                                                               // 13234
      assign: {vars: [], body: [], own: {}},                                                                           // 13235
      inputs: []                                                                                                       // 13236
    };                                                                                                                 // 13237
    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13238
    var extra = '';                                                                                                    // 13239
    var assignable;                                                                                                    // 13240
    this.stage = 'assign';                                                                                             // 13241
    if ((assignable = assignableAST(ast))) {                                                                           // 13242
      this.state.computing = 'assign';                                                                                 // 13243
      var result = this.nextId();                                                                                      // 13244
      this.recurse(assignable, result);                                                                                // 13245
      this.return_(result);                                                                                            // 13246
      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');                                                 // 13247
    }                                                                                                                  // 13248
    var toWatch = getInputs(ast.body);                                                                                 // 13249
    self.stage = 'inputs';                                                                                             // 13250
    forEach(toWatch, function(watch, key) {                                                                            // 13251
      var fnKey = 'fn' + key;                                                                                          // 13252
      self.state[fnKey] = {vars: [], body: [], own: {}};                                                               // 13253
      self.state.computing = fnKey;                                                                                    // 13254
      var intoId = self.nextId();                                                                                      // 13255
      self.recurse(watch, intoId);                                                                                     // 13256
      self.return_(intoId);                                                                                            // 13257
      self.state.inputs.push(fnKey);                                                                                   // 13258
      watch.watchId = key;                                                                                             // 13259
    });                                                                                                                // 13260
    this.state.computing = 'fn';                                                                                       // 13261
    this.stage = 'main';                                                                                               // 13262
    this.recurse(ast);                                                                                                 // 13263
    var fnString =                                                                                                     // 13264
      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
      // This is a workaround for this until we do a better job at only removing the prefix only when we should.       // 13266
      '"' + this.USE + ' ' + this.STRICT + '";\n' +                                                                    // 13267
      this.filterPrefix() +                                                                                            // 13268
      'var fn=' + this.generateFunction('fn', 's,l,a,i') +                                                             // 13269
      extra +                                                                                                          // 13270
      this.watchFns() +                                                                                                // 13271
      'return fn;';                                                                                                    // 13272
                                                                                                                       // 13273
    /* jshint -W054 */                                                                                                 // 13274
    var fn = (new Function('$filter',                                                                                  // 13275
        'ensureSafeMemberName',                                                                                        // 13276
        'ensureSafeObject',                                                                                            // 13277
        'ensureSafeFunction',                                                                                          // 13278
        'ifDefined',                                                                                                   // 13279
        'plus',                                                                                                        // 13280
        'text',                                                                                                        // 13281
        fnString))(                                                                                                    // 13282
          this.$filter,                                                                                                // 13283
          ensureSafeMemberName,                                                                                        // 13284
          ensureSafeObject,                                                                                            // 13285
          ensureSafeFunction,                                                                                          // 13286
          ifDefined,                                                                                                   // 13287
          plusFn,                                                                                                      // 13288
          expression);                                                                                                 // 13289
    /* jshint +W054 */                                                                                                 // 13290
    this.state = this.stage = undefined;                                                                               // 13291
    fn.literal = isLiteral(ast);                                                                                       // 13292
    fn.constant = isConstant(ast);                                                                                     // 13293
    return fn;                                                                                                         // 13294
  },                                                                                                                   // 13295
                                                                                                                       // 13296
  USE: 'use',                                                                                                          // 13297
                                                                                                                       // 13298
  STRICT: 'strict',                                                                                                    // 13299
                                                                                                                       // 13300
  watchFns: function() {                                                                                               // 13301
    var result = [];                                                                                                   // 13302
    var fns = this.state.inputs;                                                                                       // 13303
    var self = this;                                                                                                   // 13304
    forEach(fns, function(name) {                                                                                      // 13305
      result.push('var ' + name + '=' + self.generateFunction(name, 's'));                                             // 13306
    });                                                                                                                // 13307
    if (fns.length) {                                                                                                  // 13308
      result.push('fn.inputs=[' + fns.join(',') + '];');                                                               // 13309
    }                                                                                                                  // 13310
    return result.join('');                                                                                            // 13311
  },                                                                                                                   // 13312
                                                                                                                       // 13313
  generateFunction: function(name, params) {                                                                           // 13314
    return 'function(' + params + '){' +                                                                               // 13315
        this.varsPrefix(name) +                                                                                        // 13316
        this.body(name) +                                                                                              // 13317
        '};';                                                                                                          // 13318
  },                                                                                                                   // 13319
                                                                                                                       // 13320
  filterPrefix: function() {                                                                                           // 13321
    var parts = [];                                                                                                    // 13322
    var self = this;                                                                                                   // 13323
    forEach(this.state.filters, function(id, filter) {                                                                 // 13324
      parts.push(id + '=$filter(' + self.escape(filter) + ')');                                                        // 13325
    });                                                                                                                // 13326
    if (parts.length) return 'var ' + parts.join(',') + ';';                                                           // 13327
    return '';                                                                                                         // 13328
  },                                                                                                                   // 13329
                                                                                                                       // 13330
  varsPrefix: function(section) {                                                                                      // 13331
    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';                   // 13332
  },                                                                                                                   // 13333
                                                                                                                       // 13334
  body: function(section) {                                                                                            // 13335
    return this.state[section].body.join('');                                                                          // 13336
  },                                                                                                                   // 13337
                                                                                                                       // 13338
  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                      // 13339
    var left, right, self = this, args, expression;                                                                    // 13340
    recursionFn = recursionFn || noop;                                                                                 // 13341
    if (!skipWatchIdCheck && isDefined(ast.watchId)) {                                                                 // 13342
      intoId = intoId || this.nextId();                                                                                // 13343
      this.if_('i',                                                                                                    // 13344
        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),                                                // 13345
        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)                                               // 13346
      );                                                                                                               // 13347
      return;                                                                                                          // 13348
    }                                                                                                                  // 13349
    switch (ast.type) {                                                                                                // 13350
    case AST.Program:                                                                                                  // 13351
      forEach(ast.body, function(expression, pos) {                                                                    // 13352
        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });                   // 13353
        if (pos !== ast.body.length - 1) {                                                                             // 13354
          self.current().body.push(right, ';');                                                                        // 13355
        } else {                                                                                                       // 13356
          self.return_(right);                                                                                         // 13357
        }                                                                                                              // 13358
      });                                                                                                              // 13359
      break;                                                                                                           // 13360
    case AST.Literal:                                                                                                  // 13361
      expression = this.escape(ast.value);                                                                             // 13362
      this.assign(intoId, expression);                                                                                 // 13363
      recursionFn(expression);                                                                                         // 13364
      break;                                                                                                           // 13365
    case AST.UnaryExpression:                                                                                          // 13366
      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });                              // 13367
      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';                                                // 13368
      this.assign(intoId, expression);                                                                                 // 13369
      recursionFn(expression);                                                                                         // 13370
      break;                                                                                                           // 13371
    case AST.BinaryExpression:                                                                                         // 13372
      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });                                   // 13373
      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });                                 // 13374
      if (ast.operator === '+') {                                                                                      // 13375
        expression = this.plus(left, right);                                                                           // 13376
      } else if (ast.operator === '-') {                                                                               // 13377
        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);                                // 13378
      } else {                                                                                                         // 13379
        expression = '(' + left + ')' + ast.operator + '(' + right + ')';                                              // 13380
      }                                                                                                                // 13381
      this.assign(intoId, expression);                                                                                 // 13382
      recursionFn(expression);                                                                                         // 13383
      break;                                                                                                           // 13384
    case AST.LogicalExpression:                                                                                        // 13385
      intoId = intoId || this.nextId();                                                                                // 13386
      self.recurse(ast.left, intoId);                                                                                  // 13387
      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));                // 13388
      recursionFn(intoId);                                                                                             // 13389
      break;                                                                                                           // 13390
    case AST.ConditionalExpression:                                                                                    // 13391
      intoId = intoId || this.nextId();                                                                                // 13392
      self.recurse(ast.test, intoId);                                                                                  // 13393
      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));             // 13394
      recursionFn(intoId);                                                                                             // 13395
      break;                                                                                                           // 13396
    case AST.Identifier:                                                                                               // 13397
      intoId = intoId || this.nextId();                                                                                // 13398
      if (nameId) {                                                                                                    // 13399
        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
        nameId.computed = false;                                                                                       // 13401
        nameId.name = ast.name;                                                                                        // 13402
      }                                                                                                                // 13403
      ensureSafeMemberName(ast.name);                                                                                  // 13404
      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),                             // 13405
        function() {                                                                                                   // 13406
          self.if_(self.stage === 'inputs' || 's', function() {                                                        // 13407
            if (create && create !== 1) {                                                                              // 13408
              self.if_(                                                                                                // 13409
                self.not(self.nonComputedMember('s', ast.name)),                                                       // 13410
                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));                                         // 13411
            }                                                                                                          // 13412
            self.assign(intoId, self.nonComputedMember('s', ast.name));                                                // 13413
          });                                                                                                          // 13414
        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))                                    // 13415
        );                                                                                                             // 13416
      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {                                     // 13417
        self.addEnsureSafeObject(intoId);                                                                              // 13418
      }                                                                                                                // 13419
      recursionFn(intoId);                                                                                             // 13420
      break;                                                                                                           // 13421
    case AST.MemberExpression:                                                                                         // 13422
      left = nameId && (nameId.context = this.nextId()) || this.nextId();                                              // 13423
      intoId = intoId || this.nextId();                                                                                // 13424
      self.recurse(ast.object, left, undefined, function() {                                                           // 13425
        self.if_(self.notNull(left), function() {                                                                      // 13426
          if (ast.computed) {                                                                                          // 13427
            right = self.nextId();                                                                                     // 13428
            self.recurse(ast.property, right);                                                                         // 13429
            self.addEnsureSafeMemberName(right);                                                                       // 13430
            if (create && create !== 1) {                                                                              // 13431
              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
            }                                                                                                          // 13433
            expression = self.ensureSafeObject(self.computedMember(left, right));                                      // 13434
            self.assign(intoId, expression);                                                                           // 13435
            if (nameId) {                                                                                              // 13436
              nameId.computed = true;                                                                                  // 13437
              nameId.name = right;                                                                                     // 13438
            }                                                                                                          // 13439
          } else {                                                                                                     // 13440
            ensureSafeMemberName(ast.property.name);                                                                   // 13441
            if (create && create !== 1) {                                                                              // 13442
              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
            }                                                                                                          // 13444
            expression = self.nonComputedMember(left, ast.property.name);                                              // 13445
            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {                      // 13446
              expression = self.ensureSafeObject(expression);                                                          // 13447
            }                                                                                                          // 13448
            self.assign(intoId, expression);                                                                           // 13449
            if (nameId) {                                                                                              // 13450
              nameId.computed = false;                                                                                 // 13451
              nameId.name = ast.property.name;                                                                         // 13452
            }                                                                                                          // 13453
          }                                                                                                            // 13454
        }, function() {                                                                                                // 13455
          self.assign(intoId, 'undefined');                                                                            // 13456
        });                                                                                                            // 13457
        recursionFn(intoId);                                                                                           // 13458
      }, !!create);                                                                                                    // 13459
      break;                                                                                                           // 13460
    case AST.CallExpression:                                                                                           // 13461
      intoId = intoId || this.nextId();                                                                                // 13462
      if (ast.filter) {                                                                                                // 13463
        right = self.filter(ast.callee.name);                                                                          // 13464
        args = [];                                                                                                     // 13465
        forEach(ast.arguments, function(expr) {                                                                        // 13466
          var argument = self.nextId();                                                                                // 13467
          self.recurse(expr, argument);                                                                                // 13468
          args.push(argument);                                                                                         // 13469
        });                                                                                                            // 13470
        expression = right + '(' + args.join(',') + ')';                                                               // 13471
        self.assign(intoId, expression);                                                                               // 13472
        recursionFn(intoId);                                                                                           // 13473
      } else {                                                                                                         // 13474
        right = self.nextId();                                                                                         // 13475
        left = {};                                                                                                     // 13476
        args = [];                                                                                                     // 13477
        self.recurse(ast.callee, right, left, function() {                                                             // 13478
          self.if_(self.notNull(right), function() {                                                                   // 13479
            self.addEnsureSafeFunction(right);                                                                         // 13480
            forEach(ast.arguments, function(expr) {                                                                    // 13481
              self.recurse(expr, self.nextId(), undefined, function(argument) {                                        // 13482
                args.push(self.ensureSafeObject(argument));                                                            // 13483
              });                                                                                                      // 13484
            });                                                                                                        // 13485
            if (left.name) {                                                                                           // 13486
              if (!self.state.expensiveChecks) {                                                                       // 13487
                self.addEnsureSafeObject(left.context);                                                                // 13488
              }                                                                                                        // 13489
              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';           // 13490
            } else {                                                                                                   // 13491
              expression = right + '(' + args.join(',') + ')';                                                         // 13492
            }                                                                                                          // 13493
            expression = self.ensureSafeObject(expression);                                                            // 13494
            self.assign(intoId, expression);                                                                           // 13495
          }, function() {                                                                                              // 13496
            self.assign(intoId, 'undefined');                                                                          // 13497
          });                                                                                                          // 13498
          recursionFn(intoId);                                                                                         // 13499
        });                                                                                                            // 13500
      }                                                                                                                // 13501
      break;                                                                                                           // 13502
    case AST.AssignmentExpression:                                                                                     // 13503
      right = this.nextId();                                                                                           // 13504
      left = {};                                                                                                       // 13505
      if (!isAssignable(ast.left)) {                                                                                   // 13506
        throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');                                       // 13507
      }                                                                                                                // 13508
      this.recurse(ast.left, undefined, left, function() {                                                             // 13509
        self.if_(self.notNull(left.context), function() {                                                              // 13510
          self.recurse(ast.right, right);                                                                              // 13511
          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));                               // 13512
          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;                     // 13513
          self.assign(intoId, expression);                                                                             // 13514
          recursionFn(intoId || expression);                                                                           // 13515
        });                                                                                                            // 13516
      }, 1);                                                                                                           // 13517
      break;                                                                                                           // 13518
    case AST.ArrayExpression:                                                                                          // 13519
      args = [];                                                                                                       // 13520
      forEach(ast.elements, function(expr) {                                                                           // 13521
        self.recurse(expr, self.nextId(), undefined, function(argument) {                                              // 13522
          args.push(argument);                                                                                         // 13523
        });                                                                                                            // 13524
      });                                                                                                              // 13525
      expression = '[' + args.join(',') + ']';                                                                         // 13526
      this.assign(intoId, expression);                                                                                 // 13527
      recursionFn(expression);                                                                                         // 13528
      break;                                                                                                           // 13529
    case AST.ObjectExpression:                                                                                         // 13530
      args = [];                                                                                                       // 13531
      forEach(ast.properties, function(property) {                                                                     // 13532
        self.recurse(property.value, self.nextId(), undefined, function(expr) {                                        // 13533
          args.push(self.escape(                                                                                       // 13534
              property.key.type === AST.Identifier ? property.key.name :                                               // 13535
                ('' + property.key.value)) +                                                                           // 13536
              ':' + expr);                                                                                             // 13537
        });                                                                                                            // 13538
      });                                                                                                              // 13539
      expression = '{' + args.join(',') + '}';                                                                         // 13540
      this.assign(intoId, expression);                                                                                 // 13541
      recursionFn(expression);                                                                                         // 13542
      break;                                                                                                           // 13543
    case AST.ThisExpression:                                                                                           // 13544
      this.assign(intoId, 's');                                                                                        // 13545
      recursionFn('s');                                                                                                // 13546
      break;                                                                                                           // 13547
    case AST.NGValueParameter:                                                                                         // 13548
      this.assign(intoId, 'v');                                                                                        // 13549
      recursionFn('v');                                                                                                // 13550
      break;                                                                                                           // 13551
    }                                                                                                                  // 13552
  },                                                                                                                   // 13553
                                                                                                                       // 13554
  getHasOwnProperty: function(element, property) {                                                                     // 13555
    var key = element + '.' + property;                                                                                // 13556
    var own = this.current().own;                                                                                      // 13557
    if (!own.hasOwnProperty(key)) {                                                                                    // 13558
      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');                 // 13559
    }                                                                                                                  // 13560
    return own[key];                                                                                                   // 13561
  },                                                                                                                   // 13562
                                                                                                                       // 13563
  assign: function(id, value) {                                                                                        // 13564
    if (!id) return;                                                                                                   // 13565
    this.current().body.push(id, '=', value, ';');                                                                     // 13566
    return id;                                                                                                         // 13567
  },                                                                                                                   // 13568
                                                                                                                       // 13569
  filter: function(filterName) {                                                                                       // 13570
    if (!this.state.filters.hasOwnProperty(filterName)) {                                                              // 13571
      this.state.filters[filterName] = this.nextId(true);                                                              // 13572
    }                                                                                                                  // 13573
    return this.state.filters[filterName];                                                                             // 13574
  },                                                                                                                   // 13575
                                                                                                                       // 13576
  ifDefined: function(id, defaultValue) {                                                                              // 13577
    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';                                                  // 13578
  },                                                                                                                   // 13579
                                                                                                                       // 13580
  plus: function(left, right) {                                                                                        // 13581
    return 'plus(' + left + ',' + right + ')';                                                                         // 13582
  },                                                                                                                   // 13583
                                                                                                                       // 13584
  return_: function(id) {                                                                                              // 13585
    this.current().body.push('return ', id, ';');                                                                      // 13586
  },                                                                                                                   // 13587
                                                                                                                       // 13588
  if_: function(test, alternate, consequent) {                                                                         // 13589
    if (test === true) {                                                                                               // 13590
      alternate();                                                                                                     // 13591
    } else {                                                                                                           // 13592
      var body = this.current().body;                                                                                  // 13593
      body.push('if(', test, '){');                                                                                    // 13594
      alternate();                                                                                                     // 13595
      body.push('}');                                                                                                  // 13596
      if (consequent) {                                                                                                // 13597
        body.push('else{');                                                                                            // 13598
        consequent();                                                                                                  // 13599
        body.push('}');                                                                                                // 13600
      }                                                                                                                // 13601
    }                                                                                                                  // 13602
  },                                                                                                                   // 13603
                                                                                                                       // 13604
  not: function(expression) {                                                                                          // 13605
    return '!(' + expression + ')';                                                                                    // 13606
  },                                                                                                                   // 13607
                                                                                                                       // 13608
  notNull: function(expression) {                                                                                      // 13609
    return expression + '!=null';                                                                                      // 13610
  },                                                                                                                   // 13611
                                                                                                                       // 13612
  nonComputedMember: function(left, right) {                                                                           // 13613
    return left + '.' + right;                                                                                         // 13614
  },                                                                                                                   // 13615
                                                                                                                       // 13616
  computedMember: function(left, right) {                                                                              // 13617
    return left + '[' + right + ']';                                                                                   // 13618
  },                                                                                                                   // 13619
                                                                                                                       // 13620
  member: function(left, right, computed) {                                                                            // 13621
    if (computed) return this.computedMember(left, right);                                                             // 13622
    return this.nonComputedMember(left, right);                                                                        // 13623
  },                                                                                                                   // 13624
                                                                                                                       // 13625
  addEnsureSafeObject: function(item) {                                                                                // 13626
    this.current().body.push(this.ensureSafeObject(item), ';');                                                        // 13627
  },                                                                                                                   // 13628
                                                                                                                       // 13629
  addEnsureSafeMemberName: function(item) {                                                                            // 13630
    this.current().body.push(this.ensureSafeMemberName(item), ';');                                                    // 13631
  },                                                                                                                   // 13632
                                                                                                                       // 13633
  addEnsureSafeFunction: function(item) {                                                                              // 13634
    this.current().body.push(this.ensureSafeFunction(item), ';');                                                      // 13635
  },                                                                                                                   // 13636
                                                                                                                       // 13637
  ensureSafeObject: function(item) {                                                                                   // 13638
    return 'ensureSafeObject(' + item + ',text)';                                                                      // 13639
  },                                                                                                                   // 13640
                                                                                                                       // 13641
  ensureSafeMemberName: function(item) {                                                                               // 13642
    return 'ensureSafeMemberName(' + item + ',text)';                                                                  // 13643
  },                                                                                                                   // 13644
                                                                                                                       // 13645
  ensureSafeFunction: function(item) {                                                                                 // 13646
    return 'ensureSafeFunction(' + item + ',text)';                                                                    // 13647
  },                                                                                                                   // 13648
                                                                                                                       // 13649
  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                  // 13650
    var self = this;                                                                                                   // 13651
    return function() {                                                                                                // 13652
      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);                                        // 13653
    };                                                                                                                 // 13654
  },                                                                                                                   // 13655
                                                                                                                       // 13656
  lazyAssign: function(id, value) {                                                                                    // 13657
    var self = this;                                                                                                   // 13658
    return function() {                                                                                                // 13659
      self.assign(id, value);                                                                                          // 13660
    };                                                                                                                 // 13661
  },                                                                                                                   // 13662
                                                                                                                       // 13663
  stringEscapeRegex: /[^ a-zA-Z0-9]/g,                                                                                 // 13664
                                                                                                                       // 13665
  stringEscapeFn: function(c) {                                                                                        // 13666
    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);                                                  // 13667
  },                                                                                                                   // 13668
                                                                                                                       // 13669
  escape: function(value) {                                                                                            // 13670
    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";                // 13671
    if (isNumber(value)) return value.toString();                                                                      // 13672
    if (value === true) return 'true';                                                                                 // 13673
    if (value === false) return 'false';                                                                               // 13674
    if (value === null) return 'null';                                                                                 // 13675
    if (typeof value === 'undefined') return 'undefined';                                                              // 13676
                                                                                                                       // 13677
    throw $parseMinErr('esc', 'IMPOSSIBLE');                                                                           // 13678
  },                                                                                                                   // 13679
                                                                                                                       // 13680
  nextId: function(skip, init) {                                                                                       // 13681
    var id = 'v' + (this.state.nextId++);                                                                              // 13682
    if (!skip) {                                                                                                       // 13683
      this.current().vars.push(id + (init ? '=' + init : ''));                                                         // 13684
    }                                                                                                                  // 13685
    return id;                                                                                                         // 13686
  },                                                                                                                   // 13687
                                                                                                                       // 13688
  current: function() {                                                                                                // 13689
    return this.state[this.state.computing];                                                                           // 13690
  }                                                                                                                    // 13691
};                                                                                                                     // 13692
                                                                                                                       // 13693
                                                                                                                       // 13694
function ASTInterpreter(astBuilder, $filter) {                                                                         // 13695
  this.astBuilder = astBuilder;                                                                                        // 13696
  this.$filter = $filter;                                                                                              // 13697
}                                                                                                                      // 13698
                                                                                                                       // 13699
ASTInterpreter.prototype = {                                                                                           // 13700
  compile: function(expression, expensiveChecks) {                                                                     // 13701
    var self = this;                                                                                                   // 13702
    var ast = this.astBuilder.ast(expression);                                                                         // 13703
    this.expression = expression;                                                                                      // 13704
    this.expensiveChecks = expensiveChecks;                                                                            // 13705
    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13706
    var assignable;                                                                                                    // 13707
    var assign;                                                                                                        // 13708
    if ((assignable = assignableAST(ast))) {                                                                           // 13709
      assign = this.recurse(assignable);                                                                               // 13710
    }                                                                                                                  // 13711
    var toWatch = getInputs(ast.body);                                                                                 // 13712
    var inputs;                                                                                                        // 13713
    if (toWatch) {                                                                                                     // 13714
      inputs = [];                                                                                                     // 13715
      forEach(toWatch, function(watch, key) {                                                                          // 13716
        var input = self.recurse(watch);                                                                               // 13717
        watch.input = input;                                                                                           // 13718
        inputs.push(input);                                                                                            // 13719
        watch.watchId = key;                                                                                           // 13720
      });                                                                                                              // 13721
    }                                                                                                                  // 13722
    var expressions = [];                                                                                              // 13723
    forEach(ast.body, function(expression) {                                                                           // 13724
      expressions.push(self.recurse(expression.expression));                                                           // 13725
    });                                                                                                                // 13726
    var fn = ast.body.length === 0 ? function() {} :                                                                   // 13727
             ast.body.length === 1 ? expressions[0] :                                                                  // 13728
             function(scope, locals) {                                                                                 // 13729
               var lastValue;                                                                                          // 13730
               forEach(expressions, function(exp) {                                                                    // 13731
                 lastValue = exp(scope, locals);                                                                       // 13732
               });                                                                                                     // 13733
               return lastValue;                                                                                       // 13734
             };                                                                                                        // 13735
    if (assign) {                                                                                                      // 13736
      fn.assign = function(scope, value, locals) {                                                                     // 13737
        return assign(scope, locals, value);                                                                           // 13738
      };                                                                                                               // 13739
    }                                                                                                                  // 13740
    if (inputs) {                                                                                                      // 13741
      fn.inputs = inputs;                                                                                              // 13742
    }                                                                                                                  // 13743
    fn.literal = isLiteral(ast);                                                                                       // 13744
    fn.constant = isConstant(ast);                                                                                     // 13745
    return fn;                                                                                                         // 13746
  },                                                                                                                   // 13747
                                                                                                                       // 13748
  recurse: function(ast, context, create) {                                                                            // 13749
    var left, right, self = this, args, expression;                                                                    // 13750
    if (ast.input) {                                                                                                   // 13751
      return this.inputs(ast.input, ast.watchId);                                                                      // 13752
    }                                                                                                                  // 13753
    switch (ast.type) {                                                                                                // 13754
    case AST.Literal:                                                                                                  // 13755
      return this.value(ast.value, context);                                                                           // 13756
    case AST.UnaryExpression:                                                                                          // 13757
      right = this.recurse(ast.argument);                                                                              // 13758
      return this['unary' + ast.operator](right, context);                                                             // 13759
    case AST.BinaryExpression:                                                                                         // 13760
      left = this.recurse(ast.left);                                                                                   // 13761
      right = this.recurse(ast.right);                                                                                 // 13762
      return this['binary' + ast.operator](left, right, context);                                                      // 13763
    case AST.LogicalExpression:                                                                                        // 13764
      left = this.recurse(ast.left);                                                                                   // 13765
      right = this.recurse(ast.right);                                                                                 // 13766
      return this['binary' + ast.operator](left, right, context);                                                      // 13767
    case AST.ConditionalExpression:                                                                                    // 13768
      return this['ternary?:'](                                                                                        // 13769
        this.recurse(ast.test),                                                                                        // 13770
        this.recurse(ast.alternate),                                                                                   // 13771
        this.recurse(ast.consequent),                                                                                  // 13772
        context                                                                                                        // 13773
      );                                                                                                               // 13774
    case AST.Identifier:                                                                                               // 13775
      ensureSafeMemberName(ast.name, self.expression);                                                                 // 13776
      return self.identifier(ast.name,                                                                                 // 13777
                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),                          // 13778
                             context, create, self.expression);                                                        // 13779
    case AST.MemberExpression:                                                                                         // 13780
      left = this.recurse(ast.object, false, !!create);                                                                // 13781
      if (!ast.computed) {                                                                                             // 13782
        ensureSafeMemberName(ast.property.name, self.expression);                                                      // 13783
        right = ast.property.name;                                                                                     // 13784
      }                                                                                                                // 13785
      if (ast.computed) right = this.recurse(ast.property);                                                            // 13786
      return ast.computed ?                                                                                            // 13787
        this.computedMember(left, right, context, create, self.expression) :                                           // 13788
        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);                   // 13789
    case AST.CallExpression:                                                                                           // 13790
      args = [];                                                                                                       // 13791
      forEach(ast.arguments, function(expr) {                                                                          // 13792
        args.push(self.recurse(expr));                                                                                 // 13793
      });                                                                                                              // 13794
      if (ast.filter) right = this.$filter(ast.callee.name);                                                           // 13795
      if (!ast.filter) right = this.recurse(ast.callee, true);                                                         // 13796
      return ast.filter ?                                                                                              // 13797
        function(scope, locals, assign, inputs) {                                                                      // 13798
          var values = [];                                                                                             // 13799
          for (var i = 0; i < args.length; ++i) {                                                                      // 13800
            values.push(args[i](scope, locals, assign, inputs));                                                       // 13801
          }                                                                                                            // 13802
          var value = right.apply(undefined, values, inputs);                                                          // 13803
          return context ? {context: undefined, name: undefined, value: value} : value;                                // 13804
        } :                                                                                                            // 13805
        function(scope, locals, assign, inputs) {                                                                      // 13806
          var rhs = right(scope, locals, assign, inputs);                                                              // 13807
          var value;                                                                                                   // 13808
          if (rhs.value != null) {                                                                                     // 13809
            ensureSafeObject(rhs.context, self.expression);                                                            // 13810
            ensureSafeFunction(rhs.value, self.expression);                                                            // 13811
            var values = [];                                                                                           // 13812
            for (var i = 0; i < args.length; ++i) {                                                                    // 13813
              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));                  // 13814
            }                                                                                                          // 13815
            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);                           // 13816
          }                                                                                                            // 13817
          return context ? {value: value} : value;                                                                     // 13818
        };                                                                                                             // 13819
    case AST.AssignmentExpression:                                                                                     // 13820
      left = this.recurse(ast.left, true, 1);                                                                          // 13821
      right = this.recurse(ast.right);                                                                                 // 13822
      return function(scope, locals, assign, inputs) {                                                                 // 13823
        var lhs = left(scope, locals, assign, inputs);                                                                 // 13824
        var rhs = right(scope, locals, assign, inputs);                                                                // 13825
        ensureSafeObject(lhs.value, self.expression);                                                                  // 13826
        lhs.context[lhs.name] = rhs;                                                                                   // 13827
        return context ? {value: rhs} : rhs;                                                                           // 13828
      };                                                                                                               // 13829
    case AST.ArrayExpression:                                                                                          // 13830
      args = [];                                                                                                       // 13831
      forEach(ast.elements, function(expr) {                                                                           // 13832
        args.push(self.recurse(expr));                                                                                 // 13833
      });                                                                                                              // 13834
      return function(scope, locals, assign, inputs) {                                                                 // 13835
        var value = [];                                                                                                // 13836
        for (var i = 0; i < args.length; ++i) {                                                                        // 13837
          value.push(args[i](scope, locals, assign, inputs));                                                          // 13838
        }                                                                                                              // 13839
        return context ? {value: value} : value;                                                                       // 13840
      };                                                                                                               // 13841
    case AST.ObjectExpression:                                                                                         // 13842
      args = [];                                                                                                       // 13843
      forEach(ast.properties, function(property) {                                                                     // 13844
        args.push({key: property.key.type === AST.Identifier ?                                                         // 13845
                        property.key.name :                                                                            // 13846
                        ('' + property.key.value),                                                                     // 13847
                   value: self.recurse(property.value)                                                                 // 13848
        });                                                                                                            // 13849
      });                                                                                                              // 13850
      return function(scope, locals, assign, inputs) {                                                                 // 13851
        var value = {};                                                                                                // 13852
        for (var i = 0; i < args.length; ++i) {                                                                        // 13853
          value[args[i].key] = args[i].value(scope, locals, assign, inputs);                                           // 13854
        }                                                                                                              // 13855
        return context ? {value: value} : value;                                                                       // 13856
      };                                                                                                               // 13857
    case AST.ThisExpression:                                                                                           // 13858
      return function(scope) {                                                                                         // 13859
        return context ? {value: scope} : scope;                                                                       // 13860
      };                                                                                                               // 13861
    case AST.NGValueParameter:                                                                                         // 13862
      return function(scope, locals, assign, inputs) {                                                                 // 13863
        return context ? {value: assign} : assign;                                                                     // 13864
      };                                                                                                               // 13865
    }                                                                                                                  // 13866
  },                                                                                                                   // 13867
                                                                                                                       // 13868
  'unary+': function(argument, context) {                                                                              // 13869
    return function(scope, locals, assign, inputs) {                                                                   // 13870
      var arg = argument(scope, locals, assign, inputs);                                                               // 13871
      if (isDefined(arg)) {                                                                                            // 13872
        arg = +arg;                                                                                                    // 13873
      } else {                                                                                                         // 13874
        arg = 0;                                                                                                       // 13875
      }                                                                                                                // 13876
      return context ? {value: arg} : arg;                                                                             // 13877
    };                                                                                                                 // 13878
  },                                                                                                                   // 13879
  'unary-': function(argument, context) {                                                                              // 13880
    return function(scope, locals, assign, inputs) {                                                                   // 13881
      var arg = argument(scope, locals, assign, inputs);                                                               // 13882
      if (isDefined(arg)) {                                                                                            // 13883
        arg = -arg;                                                                                                    // 13884
      } else {                                                                                                         // 13885
        arg = 0;                                                                                                       // 13886
      }                                                                                                                // 13887
      return context ? {value: arg} : arg;                                                                             // 13888
    };                                                                                                                 // 13889
  },                                                                                                                   // 13890
  'unary!': function(argument, context) {                                                                              // 13891
    return function(scope, locals, assign, inputs) {                                                                   // 13892
      var arg = !argument(scope, locals, assign, inputs);                                                              // 13893
      return context ? {value: arg} : arg;                                                                             // 13894
    };                                                                                                                 // 13895
  },                                                                                                                   // 13896
  'binary+': function(left, right, context) {                                                                          // 13897
    return function(scope, locals, assign, inputs) {                                                                   // 13898
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13899
      var rhs = right(scope, locals, assign, inputs);                                                                  // 13900
      var arg = plusFn(lhs, rhs);                                                                                      // 13901
      return context ? {value: arg} : arg;                                                                             // 13902
    };                                                                                                                 // 13903
  },                                                                                                                   // 13904
  'binary-': function(left, right, context) {                                                                          // 13905
    return function(scope, locals, assign, inputs) {                                                                   // 13906
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13907
      var rhs = right(scope, locals, assign, inputs);                                                                  // 13908
      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);                                               // 13909
      return context ? {value: arg} : arg;                                                                             // 13910
    };                                                                                                                 // 13911
  },                                                                                                                   // 13912
  'binary*': function(left, right, context) {                                                                          // 13913
    return function(scope, locals, assign, inputs) {                                                                   // 13914
      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);                            // 13915
      return context ? {value: arg} : arg;                                                                             // 13916
    };                                                                                                                 // 13917
  },                                                                                                                   // 13918
  'binary/': function(left, right, context) {                                                                          // 13919
    return function(scope, locals, assign, inputs) {                                                                   // 13920
      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);                            // 13921
      return context ? {value: arg} : arg;                                                                             // 13922
    };                                                                                                                 // 13923
  },                                                                                                                   // 13924
  'binary%': function(left, right, context) {                                                                          // 13925
    return function(scope, locals, assign, inputs) {                                                                   // 13926
      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);                            // 13927
      return context ? {value: arg} : arg;                                                                             // 13928
    };                                                                                                                 // 13929
  },                                                                                                                   // 13930
  'binary===': function(left, right, context) {                                                                        // 13931
    return function(scope, locals, assign, inputs) {                                                                   // 13932
      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);                          // 13933
      return context ? {value: arg} : arg;                                                                             // 13934
    };                                                                                                                 // 13935
  },                                                                                                                   // 13936
  'binary!==': function(left, right, context) {                                                                        // 13937
    return function(scope, locals, assign, inputs) {                                                                   // 13938
      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);                          // 13939
      return context ? {value: arg} : arg;                                                                             // 13940
    };                                                                                                                 // 13941
  },                                                                                                                   // 13942
  'binary==': function(left, right, context) {                                                                         // 13943
    return function(scope, locals, assign, inputs) {                                                                   // 13944
      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);                           // 13945
      return context ? {value: arg} : arg;                                                                             // 13946
    };                                                                                                                 // 13947
  },                                                                                                                   // 13948
  'binary!=': function(left, right, context) {                                                                         // 13949
    return function(scope, locals, assign, inputs) {                                                                   // 13950
      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);                           // 13951
      return context ? {value: arg} : arg;                                                                             // 13952
    };                                                                                                                 // 13953
  },                                                                                                                   // 13954
  'binary<': function(left, right, context) {                                                                          // 13955
    return function(scope, locals, assign, inputs) {                                                                   // 13956
      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);                            // 13957
      return context ? {value: arg} : arg;                                                                             // 13958
    };                                                                                                                 // 13959
  },                                                                                                                   // 13960
  'binary>': function(left, right, context) {                                                                          // 13961
    return function(scope, locals, assign, inputs) {                                                                   // 13962
      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);                            // 13963
      return context ? {value: arg} : arg;                                                                             // 13964
    };                                                                                                                 // 13965
  },                                                                                                                   // 13966
  'binary<=': function(left, right, context) {                                                                         // 13967
    return function(scope, locals, assign, inputs) {                                                                   // 13968
      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);                           // 13969
      return context ? {value: arg} : arg;                                                                             // 13970
    };                                                                                                                 // 13971
  },                                                                                                                   // 13972
  'binary>=': function(left, right, context) {                                                                         // 13973
    return function(scope, locals, assign, inputs) {                                                                   // 13974
      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);                           // 13975
      return context ? {value: arg} : arg;                                                                             // 13976
    };                                                                                                                 // 13977
  },                                                                                                                   // 13978
  'binary&&': function(left, right, context) {                                                                         // 13979
    return function(scope, locals, assign, inputs) {                                                                   // 13980
      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);                           // 13981
      return context ? {value: arg} : arg;                                                                             // 13982
    };                                                                                                                 // 13983
  },                                                                                                                   // 13984
  'binary||': function(left, right, context) {                                                                         // 13985
    return function(scope, locals, assign, inputs) {                                                                   // 13986
      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);                           // 13987
      return context ? {value: arg} : arg;                                                                             // 13988
    };                                                                                                                 // 13989
  },                                                                                                                   // 13990
  'ternary?:': function(test, alternate, consequent, context) {                                                        // 13991
    return function(scope, locals, assign, inputs) {                                                                   // 13992
      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;                                                                             // 13994
    };                                                                                                                 // 13995
  },                                                                                                                   // 13996
  value: function(value, context) {                                                                                    // 13997
    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };               // 13998
  },                                                                                                                   // 13999
  identifier: function(name, expensiveChecks, context, create, expression) {                                           // 14000
    return function(scope, locals, assign, inputs) {                                                                   // 14001
      var base = locals && (name in locals) ? locals : scope;                                                          // 14002
      if (create && create !== 1 && base && !(base[name])) {                                                           // 14003
        base[name] = {};                                                                                               // 14004
      }                                                                                                                // 14005
      var value = base ? base[name] : undefined;                                                                       // 14006
      if (expensiveChecks) {                                                                                           // 14007
        ensureSafeObject(value, expression);                                                                           // 14008
      }                                                                                                                // 14009
      if (context) {                                                                                                   // 14010
        return {context: base, name: name, value: value};                                                              // 14011
      } else {                                                                                                         // 14012
        return value;                                                                                                  // 14013
      }                                                                                                                // 14014
    };                                                                                                                 // 14015
  },                                                                                                                   // 14016
  computedMember: function(left, right, context, create, expression) {                                                 // 14017
    return function(scope, locals, assign, inputs) {                                                                   // 14018
      var lhs = left(scope, locals, assign, inputs);                                                                   // 14019
      var rhs;                                                                                                         // 14020
      var value;                                                                                                       // 14021
      if (lhs != null) {                                                                                               // 14022
        rhs = right(scope, locals, assign, inputs);                                                                    // 14023
        ensureSafeMemberName(rhs, expression);                                                                         // 14024
        if (create && create !== 1 && lhs && !(lhs[rhs])) {                                                            // 14025
          lhs[rhs] = {};                                                                                               // 14026
        }                                                                                                              // 14027
        value = lhs[rhs];                                                                                              // 14028
        ensureSafeObject(value, expression);                                                                           // 14029
      }                                                                                                                // 14030
      if (context) {                                                                                                   // 14031
        return {context: lhs, name: rhs, value: value};                                                                // 14032
      } else {                                                                                                         // 14033
        return value;                                                                                                  // 14034
      }                                                                                                                // 14035
    };                                                                                                                 // 14036
  },                                                                                                                   // 14037
  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {                             // 14038
    return function(scope, locals, assign, inputs) {                                                                   // 14039
      var lhs = left(scope, locals, assign, inputs);                                                                   // 14040
      if (create && create !== 1 && lhs && !(lhs[right])) {                                                            // 14041
        lhs[right] = {};                                                                                               // 14042
      }                                                                                                                // 14043
      var value = lhs != null ? lhs[right] : undefined;                                                                // 14044
      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {                                                   // 14045
        ensureSafeObject(value, expression);                                                                           // 14046
      }                                                                                                                // 14047
      if (context) {                                                                                                   // 14048
        return {context: lhs, name: right, value: value};                                                              // 14049
      } else {                                                                                                         // 14050
        return value;                                                                                                  // 14051
      }                                                                                                                // 14052
    };                                                                                                                 // 14053
  },                                                                                                                   // 14054
  inputs: function(input, watchId) {                                                                                   // 14055
    return function(scope, value, locals, inputs) {                                                                    // 14056
      if (inputs) return inputs[watchId];                                                                              // 14057
      return input(scope, value, locals);                                                                              // 14058
    };                                                                                                                 // 14059
  }                                                                                                                    // 14060
};                                                                                                                     // 14061
                                                                                                                       // 14062
/**                                                                                                                    // 14063
 * @constructor                                                                                                        // 14064
 */                                                                                                                    // 14065
var Parser = function(lexer, $filter, options) {                                                                       // 14066
  this.lexer = lexer;                                                                                                  // 14067
  this.$filter = $filter;                                                                                              // 14068
  this.options = options;                                                                                              // 14069
  this.ast = new AST(this.lexer);                                                                                      // 14070
  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :                                             // 14071
                                   new ASTCompiler(this.ast, $filter);                                                 // 14072
};                                                                                                                     // 14073
                                                                                                                       // 14074
Parser.prototype = {                                                                                                   // 14075
  constructor: Parser,                                                                                                 // 14076
                                                                                                                       // 14077
  parse: function(text) {                                                                                              // 14078
    return this.astCompiler.compile(text, this.options.expensiveChecks);                                               // 14079
  }                                                                                                                    // 14080
};                                                                                                                     // 14081
                                                                                                                       // 14082
var getterFnCacheDefault = createMap();                                                                                // 14083
var getterFnCacheExpensive = createMap();                                                                              // 14084
                                                                                                                       // 14085
function isPossiblyDangerousMemberName(name) {                                                                         // 14086
  return name == 'constructor';                                                                                        // 14087
}                                                                                                                      // 14088
                                                                                                                       // 14089
var objectValueOf = Object.prototype.valueOf;                                                                          // 14090
                                                                                                                       // 14091
function getValueOf(value) {                                                                                           // 14092
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);                                      // 14093
}                                                                                                                      // 14094
                                                                                                                       // 14095
///////////////////////////////////                                                                                    // 14096
                                                                                                                       // 14097
/**                                                                                                                    // 14098
 * @ngdoc service                                                                                                      // 14099
 * @name $parse                                                                                                        // 14100
 * @kind function                                                                                                      // 14101
 *                                                                                                                     // 14102
 * @description                                                                                                        // 14103
 *                                                                                                                     // 14104
 * Converts Angular {@link guide/expression expression} into a function.                                               // 14105
 *                                                                                                                     // 14106
 * ```js                                                                                                               // 14107
 *   var getter = $parse('user.name');                                                                                 // 14108
 *   var setter = getter.assign;                                                                                       // 14109
 *   var context = {user:{name:'angular'}};                                                                            // 14110
 *   var locals = {user:{name:'local'}};                                                                               // 14111
 *                                                                                                                     // 14112
 *   expect(getter(context)).toEqual('angular');                                                                       // 14113
 *   setter(context, 'newValue');                                                                                      // 14114
 *   expect(context.user.name).toEqual('newValue');                                                                    // 14115
 *   expect(getter(context, locals)).toEqual('local');                                                                 // 14116
 * ```                                                                                                                 // 14117
 *                                                                                                                     // 14118
 *                                                                                                                     // 14119
 * @param {string} expression String expression to compile.                                                            // 14120
 * @returns {function(context, locals)} a function which represents the compiled expression:                           // 14121
 *                                                                                                                     // 14122
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings                       // 14123
 *      are evaluated against (typically a scope object).                                                              // 14124
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                       // 14125
 *      `context`.                                                                                                     // 14126
 *                                                                                                                     // 14127
 *    The returned function also has the following properties:                                                         // 14128
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript                            // 14129
 *        literal.                                                                                                     // 14130
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript                             // 14131
 *        constant literals.                                                                                           // 14132
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be                     // 14133
 *        set to a function to change its value on the given context.                                                  // 14134
 *                                                                                                                     // 14135
 */                                                                                                                    // 14136
                                                                                                                       // 14137
                                                                                                                       // 14138
/**                                                                                                                    // 14139
 * @ngdoc provider                                                                                                     // 14140
 * @name $parseProvider                                                                                                // 14141
 *                                                                                                                     // 14142
 * @description                                                                                                        // 14143
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}                   // 14144
 *  service.                                                                                                           // 14145
 */                                                                                                                    // 14146
function $ParseProvider() {                                                                                            // 14147
  var cacheDefault = createMap();                                                                                      // 14148
  var cacheExpensive = createMap();                                                                                    // 14149
                                                                                                                       // 14150
  this.$get = ['$filter', function($filter) {                                                                          // 14151
    var noUnsafeEval = csp().noUnsafeEval;                                                                             // 14152
    var $parseOptions = {                                                                                              // 14153
          csp: noUnsafeEval,                                                                                           // 14154
          expensiveChecks: false                                                                                       // 14155
        },                                                                                                             // 14156
        $parseOptionsExpensive = {                                                                                     // 14157
          csp: noUnsafeEval,                                                                                           // 14158
          expensiveChecks: true                                                                                        // 14159
        };                                                                                                             // 14160
                                                                                                                       // 14161
    return function $parse(exp, interceptorFn, expensiveChecks) {                                                      // 14162
      var parsedExpression, oneTime, cacheKey;                                                                         // 14163
                                                                                                                       // 14164
      switch (typeof exp) {                                                                                            // 14165
        case 'string':                                                                                                 // 14166
          exp = exp.trim();                                                                                            // 14167
          cacheKey = exp;                                                                                              // 14168
                                                                                                                       // 14169
          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);                                               // 14170
          parsedExpression = cache[cacheKey];                                                                          // 14171
                                                                                                                       // 14172
          if (!parsedExpression) {                                                                                     // 14173
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {                                                      // 14174
              oneTime = true;                                                                                          // 14175
              exp = exp.substring(2);                                                                                  // 14176
            }                                                                                                          // 14177
            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;                               // 14178
            var lexer = new Lexer(parseOptions);                                                                       // 14179
            var parser = new Parser(lexer, $filter, parseOptions);                                                     // 14180
            parsedExpression = parser.parse(exp);                                                                      // 14181
            if (parsedExpression.constant) {                                                                           // 14182
              parsedExpression.$$watchDelegate = constantWatchDelegate;                                                // 14183
            } else if (oneTime) {                                                                                      // 14184
              parsedExpression.$$watchDelegate = parsedExpression.literal ?                                            // 14185
                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;                                                  // 14186
            } else if (parsedExpression.inputs) {                                                                      // 14187
              parsedExpression.$$watchDelegate = inputsWatchDelegate;                                                  // 14188
            }                                                                                                          // 14189
            cache[cacheKey] = parsedExpression;                                                                        // 14190
          }                                                                                                            // 14191
          return addInterceptor(parsedExpression, interceptorFn);                                                      // 14192
                                                                                                                       // 14193
        case 'function':                                                                                               // 14194
          return addInterceptor(exp, interceptorFn);                                                                   // 14195
                                                                                                                       // 14196
        default:                                                                                                       // 14197
          return noop;                                                                                                 // 14198
      }                                                                                                                // 14199
    };                                                                                                                 // 14200
                                                                                                                       // 14201
    function expressionInputDirtyCheck(newValue, oldValueOfValue) {                                                    // 14202
                                                                                                                       // 14203
      if (newValue == null || oldValueOfValue == null) { // null/undefined                                             // 14204
        return newValue === oldValueOfValue;                                                                           // 14205
      }                                                                                                                // 14206
                                                                                                                       // 14207
      if (typeof newValue === 'object') {                                                                              // 14208
                                                                                                                       // 14209
        // attempt to convert the value to a primitive type                                                            // 14210
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can                     // 14211
        //             be cheaply dirty-checked                                                                        // 14212
        newValue = getValueOf(newValue);                                                                               // 14213
                                                                                                                       // 14214
        if (typeof newValue === 'object') {                                                                            // 14215
          // objects/arrays are not supported - deep-watching them would be too expensive                              // 14216
          return false;                                                                                                // 14217
        }                                                                                                              // 14218
                                                                                                                       // 14219
        // fall-through to the primitive equality check                                                                // 14220
      }                                                                                                                // 14221
                                                                                                                       // 14222
      //Primitive or NaN                                                                                               // 14223
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);           // 14224
    }                                                                                                                  // 14225
                                                                                                                       // 14226
    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {           // 14227
      var inputExpressions = parsedExpression.inputs;                                                                  // 14228
      var lastResult;                                                                                                  // 14229
                                                                                                                       // 14230
      if (inputExpressions.length === 1) {                                                                             // 14231
        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails        // 14232
        inputExpressions = inputExpressions[0];                                                                        // 14233
        return scope.$watch(function expressionInputWatch(scope) {                                                     // 14234
          var newInputValue = inputExpressions(scope);                                                                 // 14235
          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {                                            // 14236
            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);                               // 14237
            oldInputValueOf = newInputValue && getValueOf(newInputValue);                                              // 14238
          }                                                                                                            // 14239
          return lastResult;                                                                                           // 14240
        }, listener, objectEquality, prettyPrintExpression);                                                           // 14241
      }                                                                                                                // 14242
                                                                                                                       // 14243
      var oldInputValueOfValues = [];                                                                                  // 14244
      var oldInputValues = [];                                                                                         // 14245
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                     // 14246
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails   // 14247
        oldInputValues[i] = null;                                                                                      // 14248
      }                                                                                                                // 14249
                                                                                                                       // 14250
      return scope.$watch(function expressionInputsWatch(scope) {                                                      // 14251
        var changed = false;                                                                                           // 14252
                                                                                                                       // 14253
        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                   // 14254
          var newInputValue = inputExpressions[i](scope);                                                              // 14255
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {            // 14256
            oldInputValues[i] = newInputValue;                                                                         // 14257
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);                                     // 14258
          }                                                                                                            // 14259
        }                                                                                                              // 14260
                                                                                                                       // 14261
        if (changed) {                                                                                                 // 14262
          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);                                  // 14263
        }                                                                                                              // 14264
                                                                                                                       // 14265
        return lastResult;                                                                                             // 14266
      }, listener, objectEquality, prettyPrintExpression);                                                             // 14267
    }                                                                                                                  // 14268
                                                                                                                       // 14269
    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                 // 14270
      var unwatch, lastValue;                                                                                          // 14271
      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14272
        return parsedExpression(scope);                                                                                // 14273
      }, function oneTimeListener(value, old, scope) {                                                                 // 14274
        lastValue = value;                                                                                             // 14275
        if (isFunction(listener)) {                                                                                    // 14276
          listener.apply(this, arguments);                                                                             // 14277
        }                                                                                                              // 14278
        if (isDefined(value)) {                                                                                        // 14279
          scope.$$postDigest(function() {                                                                              // 14280
            if (isDefined(lastValue)) {                                                                                // 14281
              unwatch();                                                                                               // 14282
            }                                                                                                          // 14283
          });                                                                                                          // 14284
        }                                                                                                              // 14285
      }, objectEquality);                                                                                              // 14286
    }                                                                                                                  // 14287
                                                                                                                       // 14288
    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {                          // 14289
      var unwatch, lastValue;                                                                                          // 14290
      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14291
        return parsedExpression(scope);                                                                                // 14292
      }, function oneTimeListener(value, old, scope) {                                                                 // 14293
        lastValue = value;                                                                                             // 14294
        if (isFunction(listener)) {                                                                                    // 14295
          listener.call(this, value, old, scope);                                                                      // 14296
        }                                                                                                              // 14297
        if (isAllDefined(value)) {                                                                                     // 14298
          scope.$$postDigest(function() {                                                                              // 14299
            if (isAllDefined(lastValue)) unwatch();                                                                    // 14300
          });                                                                                                          // 14301
        }                                                                                                              // 14302
      }, objectEquality);                                                                                              // 14303
                                                                                                                       // 14304
      function isAllDefined(value) {                                                                                   // 14305
        var allDefined = true;                                                                                         // 14306
        forEach(value, function(val) {                                                                                 // 14307
          if (!isDefined(val)) allDefined = false;                                                                     // 14308
        });                                                                                                            // 14309
        return allDefined;                                                                                             // 14310
      }                                                                                                                // 14311
    }                                                                                                                  // 14312
                                                                                                                       // 14313
    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                // 14314
      var unwatch;                                                                                                     // 14315
      return unwatch = scope.$watch(function constantWatch(scope) {                                                    // 14316
        return parsedExpression(scope);                                                                                // 14317
      }, function constantListener(value, old, scope) {                                                                // 14318
        if (isFunction(listener)) {                                                                                    // 14319
          listener.apply(this, arguments);                                                                             // 14320
        }                                                                                                              // 14321
        unwatch();                                                                                                     // 14322
      }, objectEquality);                                                                                              // 14323
    }                                                                                                                  // 14324
                                                                                                                       // 14325
    function addInterceptor(parsedExpression, interceptorFn) {                                                         // 14326
      if (!interceptorFn) return parsedExpression;                                                                     // 14327
      var watchDelegate = parsedExpression.$$watchDelegate;                                                            // 14328
                                                                                                                       // 14329
      var regularWatch =                                                                                               // 14330
          watchDelegate !== oneTimeLiteralWatchDelegate &&                                                             // 14331
          watchDelegate !== oneTimeWatchDelegate;                                                                      // 14332
                                                                                                                       // 14333
      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {                   // 14334
        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14335
        return interceptorFn(value, scope, locals);                                                                    // 14336
      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {                                       // 14337
        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14338
        var result = interceptorFn(value, scope, locals);                                                              // 14339
        // we only return the interceptor's result if the                                                              // 14340
        // initial value is defined (for bind-once)                                                                    // 14341
        return isDefined(value) ? result : value;                                                                      // 14342
      };                                                                                                               // 14343
                                                                                                                       // 14344
      // Propagate $$watchDelegates other then inputsWatchDelegate                                                     // 14345
      if (parsedExpression.$$watchDelegate &&                                                                          // 14346
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {                                                  // 14347
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;                                                         // 14348
      } else if (!interceptorFn.$stateful) {                                                                           // 14349
        // If there is an interceptor, but no watchDelegate then treat the interceptor like                            // 14350
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful                        // 14351
        fn.$$watchDelegate = inputsWatchDelegate;                                                                      // 14352
        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];                            // 14353
      }                                                                                                                // 14354
                                                                                                                       // 14355
      return fn;                                                                                                       // 14356
    }                                                                                                                  // 14357
  }];                                                                                                                  // 14358
}                                                                                                                      // 14359
                                                                                                                       // 14360
/**                                                                                                                    // 14361
 * @ngdoc service                                                                                                      // 14362
 * @name $q                                                                                                            // 14363
 * @requires $rootScope                                                                                                // 14364
 *                                                                                                                     // 14365
 * @description                                                                                                        // 14366
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)                  // 14367
 * when they are done processing.                                                                                      // 14368
 *                                                                                                                     // 14369
 * This is an implementation of promises/deferred objects inspired by                                                  // 14370
 * [Kris Kowal's Q](https://github.com/kriskowal/q).                                                                   // 14371
 *                                                                                                                     // 14372
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred                 // 14373
 * implementations, and the other which resembles ES6 promises to some degree.                                         // 14374
 *                                                                                                                     // 14375
 * # $q constructor                                                                                                    // 14376
 *                                                                                                                     // 14377
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`            // 14378
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,              // 14379
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).                // 14380
 *                                                                                                                     // 14381
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are       // 14382
 * available yet.                                                                                                      // 14383
 *                                                                                                                     // 14384
 * It can be used like so:                                                                                             // 14385
 *                                                                                                                     // 14386
 * ```js                                                                                                               // 14387
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14388
 *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14389
 *                                                                                                                     // 14390
 *   function asyncGreet(name) {                                                                                       // 14391
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.                         // 14392
 *     return $q(function(resolve, reject) {                                                                           // 14393
 *       setTimeout(function() {                                                                                       // 14394
 *         if (okToGreet(name)) {                                                                                      // 14395
 *           resolve('Hello, ' + name + '!');                                                                          // 14396
 *         } else {                                                                                                    // 14397
 *           reject('Greeting ' + name + ' is not allowed.');                                                          // 14398
 *         }                                                                                                           // 14399
 *       }, 1000);                                                                                                     // 14400
 *     });                                                                                                             // 14401
 *   }                                                                                                                 // 14402
 *                                                                                                                     // 14403
 *   var promise = asyncGreet('Robin Hood');                                                                           // 14404
 *   promise.then(function(greeting) {                                                                                 // 14405
 *     alert('Success: ' + greeting);                                                                                  // 14406
 *   }, function(reason) {                                                                                             // 14407
 *     alert('Failed: ' + reason);                                                                                     // 14408
 *   });                                                                                                               // 14409
 * ```                                                                                                                 // 14410
 *                                                                                                                     // 14411
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.                            // 14412
 *                                                                                                                     // 14413
 * However, the more traditional CommonJS-style usage is still available, and documented below.                        // 14414
 *                                                                                                                     // 14415
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an                   // 14416
 * interface for interacting with an object that represents the result of an action that is                            // 14417
 * performed asynchronously, and may or may not be finished at any given point in time.                                // 14418
 *                                                                                                                     // 14419
 * From the perspective of dealing with error handling, deferred and promise APIs are to                               // 14420
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.                   // 14421
 *                                                                                                                     // 14422
 * ```js                                                                                                               // 14423
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14424
 *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14425
 *                                                                                                                     // 14426
 *   function asyncGreet(name) {                                                                                       // 14427
 *     var deferred = $q.defer();                                                                                      // 14428
 *                                                                                                                     // 14429
 *     setTimeout(function() {                                                                                         // 14430
 *       deferred.notify('About to greet ' + name + '.');                                                              // 14431
 *                                                                                                                     // 14432
 *       if (okToGreet(name)) {                                                                                        // 14433
 *         deferred.resolve('Hello, ' + name + '!');                                                                   // 14434
 *       } else {                                                                                                      // 14435
 *         deferred.reject('Greeting ' + name + ' is not allowed.');                                                   // 14436
 *       }                                                                                                             // 14437
 *     }, 1000);                                                                                                       // 14438
 *                                                                                                                     // 14439
 *     return deferred.promise;                                                                                        // 14440
 *   }                                                                                                                 // 14441
 *                                                                                                                     // 14442
 *   var promise = asyncGreet('Robin Hood');                                                                           // 14443
 *   promise.then(function(greeting) {                                                                                 // 14444
 *     alert('Success: ' + greeting);                                                                                  // 14445
 *   }, function(reason) {                                                                                             // 14446
 *     alert('Failed: ' + reason);                                                                                     // 14447
 *   }, function(update) {                                                                                             // 14448
 *     alert('Got notification: ' + update);                                                                           // 14449
 *   });                                                                                                               // 14450
 * ```                                                                                                                 // 14451
 *                                                                                                                     // 14452
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff                         // 14453
 * comes in the way of guarantees that promise and deferred APIs make, see                                             // 14454
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.                                      // 14455
 *                                                                                                                     // 14456
 * Additionally the promise api allows for composition that is very hard to do with the                                // 14457
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.                     // 14458
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the                    // 14459
 * section on serial or parallel joining of promises.                                                                  // 14460
 *                                                                                                                     // 14461
 * # The Deferred API                                                                                                  // 14462
 *                                                                                                                     // 14463
 * A new instance of deferred is constructed by calling `$q.defer()`.                                                  // 14464
 *                                                                                                                     // 14465
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs                     // 14466
 * that can be used for signaling the successful or unsuccessful completion, as well as the status                     // 14467
 * of the task.                                                                                                        // 14468
 *                                                                                                                     // 14469
 * **Methods**                                                                                                         // 14470
 *                                                                                                                     // 14471
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection                     // 14472
 *   constructed via `$q.reject`, the promise will be rejected instead.                                                // 14473
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to                           // 14474
 *   resolving it with a rejection constructed via `$q.reject`.                                                        // 14475
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called                   // 14476
 *   multiple times before the promise is either resolved or rejected.                                                 // 14477
 *                                                                                                                     // 14478
 * **Properties**                                                                                                      // 14479
 *                                                                                                                     // 14480
 * - promise – `{Promise}` – promise object associated with this deferred.                                             // 14481
 *                                                                                                                     // 14482
 *                                                                                                                     // 14483
 * # The Promise API                                                                                                   // 14484
 *                                                                                                                     // 14485
 * A new promise instance is created when a deferred instance is created and can be retrieved by                       // 14486
 * calling `deferred.promise`.                                                                                         // 14487
 *                                                                                                                     // 14488
 * The purpose of the promise object is to allow for interested parties to get access to the result                    // 14489
 * of the deferred task when it completes.                                                                             // 14490
 *                                                                                                                     // 14491
 * **Methods**                                                                                                         // 14492
 *                                                                                                                     // 14493
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or                    // 14494
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously                   // 14495
 *   as soon as the result is available. The callbacks are called with a single argument: the result                   // 14496
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to                        // 14497
 *   provide a progress indication, before the promise is resolved or rejected.                                        // 14498
 *                                                                                                                     // 14499
 *   This method *returns a new promise* which is resolved or rejected via the return value of the                     // 14500
 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved                  // 14501
 *   with the value which is resolved in that promise using                                                            // 14502
 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).                    // 14503
 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be                       // 14504
 *   resolved or rejected from the notifyCallback method.                                                              // 14505
 *                                                                                                                     // 14506
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`                                        // 14507
 *                                                                                                                     // 14508
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,     // 14509
 *   but to do so without modifying the final value. This is useful to release resources or do some                    // 14510
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full                        // 14511
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for                      // 14512
 *   more information.                                                                                                 // 14513
 *                                                                                                                     // 14514
 * # Chaining promises                                                                                                 // 14515
 *                                                                                                                     // 14516
 * Because calling the `then` method of a promise returns a new derived promise, it is easily                          // 14517
 * possible to create a chain of promises:                                                                             // 14518
 *                                                                                                                     // 14519
 * ```js                                                                                                               // 14520
 *   promiseB = promiseA.then(function(result) {                                                                       // 14521
 *     return result + 1;                                                                                              // 14522
 *   });                                                                                                               // 14523
 *                                                                                                                     // 14524
 *   // promiseB will be resolved immediately after promiseA is resolved and its value                                 // 14525
 *   // will be the result of promiseA incremented by 1                                                                // 14526
 * ```                                                                                                                 // 14527
 *                                                                                                                     // 14528
 * It is possible to create chains of any length and since a promise can be resolved with another                      // 14529
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of                      // 14530
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like                      // 14531
 * $http's response interceptors.                                                                                      // 14532
 *                                                                                                                     // 14533
 *                                                                                                                     // 14534
 * # Differences between Kris Kowal's Q and $q                                                                         // 14535
 *                                                                                                                     // 14536
 *  There are two main differences:                                                                                    // 14537
 *                                                                                                                     // 14538
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation                                     // 14539
 *   mechanism in angular, which means faster propagation of resolution or rejection into your                         // 14540
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.                            // 14541
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains                     // 14542
 *   all the important functionality needed for common async tasks.                                                    // 14543
 *                                                                                                                     // 14544
 *  # Testing                                                                                                          // 14545
 *                                                                                                                     // 14546
 *  ```js                                                                                                              // 14547
 *    it('should simulate promise', inject(function($q, $rootScope) {                                                  // 14548
 *      var deferred = $q.defer();                                                                                     // 14549
 *      var promise = deferred.promise;                                                                                // 14550
 *      var resolvedValue;                                                                                             // 14551
 *                                                                                                                     // 14552
 *      promise.then(function(value) { resolvedValue = value; });                                                      // 14553
 *      expect(resolvedValue).toBeUndefined();                                                                         // 14554
 *                                                                                                                     // 14555
 *      // Simulate resolving of promise                                                                               // 14556
 *      deferred.resolve(123);                                                                                         // 14557
 *      // Note that the 'then' function does not get called synchronously.                                            // 14558
 *      // This is because we want the promise API to always be async, whether or not                                  // 14559
 *      // it got called synchronously or asynchronously.                                                              // 14560
 *      expect(resolvedValue).toBeUndefined();                                                                         // 14561
 *                                                                                                                     // 14562
 *      // Propagate promise resolution to 'then' functions using $apply().                                            // 14563
 *      $rootScope.$apply();                                                                                           // 14564
 *      expect(resolvedValue).toEqual(123);                                                                            // 14565
 *    }));                                                                                                             // 14566
 *  ```                                                                                                                // 14567
 *                                                                                                                     // 14568
 * @param {function(function, function)} resolver Function which is responsible for resolving or                       // 14569
 *   rejecting the newly created promise. The first parameter is a function which resolves the                         // 14570
 *   promise, the second parameter is a function which rejects the promise.                                            // 14571
 *                                                                                                                     // 14572
 * @returns {Promise} The newly created promise.                                                                       // 14573
 */                                                                                                                    // 14574
function $QProvider() {                                                                                                // 14575
                                                                                                                       // 14576
  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {                            // 14577
    return qFactory(function(callback) {                                                                               // 14578
      $rootScope.$evalAsync(callback);                                                                                 // 14579
    }, $exceptionHandler);                                                                                             // 14580
  }];                                                                                                                  // 14581
}                                                                                                                      // 14582
                                                                                                                       // 14583
function $$QProvider() {                                                                                               // 14584
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {                                // 14585
    return qFactory(function(callback) {                                                                               // 14586
      $browser.defer(callback);                                                                                        // 14587
    }, $exceptionHandler);                                                                                             // 14588
  }];                                                                                                                  // 14589
}                                                                                                                      // 14590
                                                                                                                       // 14591
/**                                                                                                                    // 14592
 * Constructs a promise manager.                                                                                       // 14593
 *                                                                                                                     // 14594
 * @param {function(function)} nextTick Function for executing functions in the next turn.                             // 14595
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for                   // 14596
 *     debugging purposes.                                                                                             // 14597
 * @returns {object} Promise manager.                                                                                  // 14598
 */                                                                                                                    // 14599
function qFactory(nextTick, exceptionHandler) {                                                                        // 14600
  var $qMinErr = minErr('$q', TypeError);                                                                              // 14601
  function callOnce(self, resolveFn, rejectFn) {                                                                       // 14602
    var called = false;                                                                                                // 14603
    function wrap(fn) {                                                                                                // 14604
      return function(value) {                                                                                         // 14605
        if (called) return;                                                                                            // 14606
        called = true;                                                                                                 // 14607
        fn.call(self, value);                                                                                          // 14608
      };                                                                                                               // 14609
    }                                                                                                                  // 14610
                                                                                                                       // 14611
    return [wrap(resolveFn), wrap(rejectFn)];                                                                          // 14612
  }                                                                                                                    // 14613
                                                                                                                       // 14614
  /**                                                                                                                  // 14615
   * @ngdoc method                                                                                                     // 14616
   * @name ng.$q#defer                                                                                                 // 14617
   * @kind function                                                                                                    // 14618
   *                                                                                                                   // 14619
   * @description                                                                                                      // 14620
   * Creates a `Deferred` object which represents a task which will finish in the future.                              // 14621
   *                                                                                                                   // 14622
   * @returns {Deferred} Returns a new instance of deferred.                                                           // 14623
   */                                                                                                                  // 14624
  var defer = function() {                                                                                             // 14625
    return new Deferred();                                                                                             // 14626
  };                                                                                                                   // 14627
                                                                                                                       // 14628
  function Promise() {                                                                                                 // 14629
    this.$$state = { status: 0 };                                                                                      // 14630
  }                                                                                                                    // 14631
                                                                                                                       // 14632
  extend(Promise.prototype, {                                                                                          // 14633
    then: function(onFulfilled, onRejected, progressBack) {                                                            // 14634
      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {                          // 14635
        return this;                                                                                                   // 14636
      }                                                                                                                // 14637
      var result = new Deferred();                                                                                     // 14638
                                                                                                                       // 14639
      this.$$state.pending = this.$$state.pending || [];                                                               // 14640
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);                                      // 14641
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);                                                 // 14642
                                                                                                                       // 14643
      return result.promise;                                                                                           // 14644
    },                                                                                                                 // 14645
                                                                                                                       // 14646
    "catch": function(callback) {                                                                                      // 14647
      return this.then(null, callback);                                                                                // 14648
    },                                                                                                                 // 14649
                                                                                                                       // 14650
    "finally": function(callback, progressBack) {                                                                      // 14651
      return this.then(function(value) {                                                                               // 14652
        return handleCallback(value, true, callback);                                                                  // 14653
      }, function(error) {                                                                                             // 14654
        return handleCallback(error, false, callback);                                                                 // 14655
      }, progressBack);                                                                                                // 14656
    }                                                                                                                  // 14657
  });                                                                                                                  // 14658
                                                                                                                       // 14659
  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native                            // 14660
  function simpleBind(context, fn) {                                                                                   // 14661
    return function(value) {                                                                                           // 14662
      fn.call(context, value);                                                                                         // 14663
    };                                                                                                                 // 14664
  }                                                                                                                    // 14665
                                                                                                                       // 14666
  function processQueue(state) {                                                                                       // 14667
    var fn, deferred, pending;                                                                                         // 14668
                                                                                                                       // 14669
    pending = state.pending;                                                                                           // 14670
    state.processScheduled = false;                                                                                    // 14671
    state.pending = undefined;                                                                                         // 14672
    for (var i = 0, ii = pending.length; i < ii; ++i) {                                                                // 14673
      deferred = pending[i][0];                                                                                        // 14674
      fn = pending[i][state.status];                                                                                   // 14675
      try {                                                                                                            // 14676
        if (isFunction(fn)) {                                                                                          // 14677
          deferred.resolve(fn(state.value));                                                                           // 14678
        } else if (state.status === 1) {                                                                               // 14679
          deferred.resolve(state.value);                                                                               // 14680
        } else {                                                                                                       // 14681
          deferred.reject(state.value);                                                                                // 14682
        }                                                                                                              // 14683
      } catch (e) {                                                                                                    // 14684
        deferred.reject(e);                                                                                            // 14685
        exceptionHandler(e);                                                                                           // 14686
      }                                                                                                                // 14687
    }                                                                                                                  // 14688
  }                                                                                                                    // 14689
                                                                                                                       // 14690
  function scheduleProcessQueue(state) {                                                                               // 14691
    if (state.processScheduled || !state.pending) return;                                                              // 14692
    state.processScheduled = true;                                                                                     // 14693
    nextTick(function() { processQueue(state); });                                                                     // 14694
  }                                                                                                                    // 14695
                                                                                                                       // 14696
  function Deferred() {                                                                                                // 14697
    this.promise = new Promise();                                                                                      // 14698
    //Necessary to support unbound execution :/                                                                        // 14699
    this.resolve = simpleBind(this, this.resolve);                                                                     // 14700
    this.reject = simpleBind(this, this.reject);                                                                       // 14701
    this.notify = simpleBind(this, this.notify);                                                                       // 14702
  }                                                                                                                    // 14703
                                                                                                                       // 14704
  extend(Deferred.prototype, {                                                                                         // 14705
    resolve: function(val) {                                                                                           // 14706
      if (this.promise.$$state.status) return;                                                                         // 14707
      if (val === this.promise) {                                                                                      // 14708
        this.$$reject($qMinErr(                                                                                        // 14709
          'qcycle',                                                                                                    // 14710
          "Expected promise to be resolved with value other than itself '{0}'",                                        // 14711
          val));                                                                                                       // 14712
      } else {                                                                                                         // 14713
        this.$$resolve(val);                                                                                           // 14714
      }                                                                                                                // 14715
                                                                                                                       // 14716
    },                                                                                                                 // 14717
                                                                                                                       // 14718
    $$resolve: function(val) {                                                                                         // 14719
      var then, fns;                                                                                                   // 14720
                                                                                                                       // 14721
      fns = callOnce(this, this.$$resolve, this.$$reject);                                                             // 14722
      try {                                                                                                            // 14723
        if ((isObject(val) || isFunction(val))) then = val && val.then;                                                // 14724
        if (isFunction(then)) {                                                                                        // 14725
          this.promise.$$state.status = -1;                                                                            // 14726
          then.call(val, fns[0], fns[1], this.notify);                                                                 // 14727
        } else {                                                                                                       // 14728
          this.promise.$$state.value = val;                                                                            // 14729
          this.promise.$$state.status = 1;                                                                             // 14730
          scheduleProcessQueue(this.promise.$$state);                                                                  // 14731
        }                                                                                                              // 14732
      } catch (e) {                                                                                                    // 14733
        fns[1](e);                                                                                                     // 14734
        exceptionHandler(e);                                                                                           // 14735
      }                                                                                                                // 14736
    },                                                                                                                 // 14737
                                                                                                                       // 14738
    reject: function(reason) {                                                                                         // 14739
      if (this.promise.$$state.status) return;                                                                         // 14740
      this.$$reject(reason);                                                                                           // 14741
    },                                                                                                                 // 14742
                                                                                                                       // 14743
    $$reject: function(reason) {                                                                                       // 14744
      this.promise.$$state.value = reason;                                                                             // 14745
      this.promise.$$state.status = 2;                                                                                 // 14746
      scheduleProcessQueue(this.promise.$$state);                                                                      // 14747
    },                                                                                                                 // 14748
                                                                                                                       // 14749
    notify: function(progress) {                                                                                       // 14750
      var callbacks = this.promise.$$state.pending;                                                                    // 14751
                                                                                                                       // 14752
      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {                                       // 14753
        nextTick(function() {                                                                                          // 14754
          var callback, result;                                                                                        // 14755
          for (var i = 0, ii = callbacks.length; i < ii; i++) {                                                        // 14756
            result = callbacks[i][0];                                                                                  // 14757
            callback = callbacks[i][3];                                                                                // 14758
            try {                                                                                                      // 14759
              result.notify(isFunction(callback) ? callback(progress) : progress);                                     // 14760
            } catch (e) {                                                                                              // 14761
              exceptionHandler(e);                                                                                     // 14762
            }                                                                                                          // 14763
          }                                                                                                            // 14764
        });                                                                                                            // 14765
      }                                                                                                                // 14766
    }                                                                                                                  // 14767
  });                                                                                                                  // 14768
                                                                                                                       // 14769
  /**                                                                                                                  // 14770
   * @ngdoc method                                                                                                     // 14771
   * @name $q#reject                                                                                                   // 14772
   * @kind function                                                                                                    // 14773
   *                                                                                                                   // 14774
   * @description                                                                                                      // 14775
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be                    // 14776
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in                     // 14777
   * a promise chain, you don't need to worry about it.                                                                // 14778
   *                                                                                                                   // 14779
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of                           // 14780
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via                   // 14781
   * a promise error callback and you want to forward the error to the promise derived from the                        // 14782
   * current promise, you have to "rethrow" the error by returning a rejection constructed via                         // 14783
   * `reject`.                                                                                                         // 14784
   *                                                                                                                   // 14785
   * ```js                                                                                                             // 14786
   *   promiseB = promiseA.then(function(result) {                                                                     // 14787
   *     // success: do something and resolve promiseB                                                                 // 14788
   *     //          with the old or a new result                                                                      // 14789
   *     return result;                                                                                                // 14790
   *   }, function(reason) {                                                                                           // 14791
   *     // error: handle the error if possible and                                                                    // 14792
   *     //        resolve promiseB with newPromiseOrValue,                                                            // 14793
   *     //        otherwise forward the rejection to promiseB                                                         // 14794
   *     if (canHandle(reason)) {                                                                                      // 14795
   *      // handle the error and recover                                                                              // 14796
   *      return newPromiseOrValue;                                                                                    // 14797
   *     }                                                                                                             // 14798
   *     return $q.reject(reason);                                                                                     // 14799
   *   });                                                                                                             // 14800
   * ```                                                                                                               // 14801
   *                                                                                                                   // 14802
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.                    // 14803
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.                     // 14804
   */                                                                                                                  // 14805
  var reject = function(reason) {                                                                                      // 14806
    var result = new Deferred();                                                                                       // 14807
    result.reject(reason);                                                                                             // 14808
    return result.promise;                                                                                             // 14809
  };                                                                                                                   // 14810
                                                                                                                       // 14811
  var makePromise = function makePromise(value, resolved) {                                                            // 14812
    var result = new Deferred();                                                                                       // 14813
    if (resolved) {                                                                                                    // 14814
      result.resolve(value);                                                                                           // 14815
    } else {                                                                                                           // 14816
      result.reject(value);                                                                                            // 14817
    }                                                                                                                  // 14818
    return result.promise;                                                                                             // 14819
  };                                                                                                                   // 14820
                                                                                                                       // 14821
  var handleCallback = function handleCallback(value, isResolved, callback) {                                          // 14822
    var callbackOutput = null;                                                                                         // 14823
    try {                                                                                                              // 14824
      if (isFunction(callback)) callbackOutput = callback();                                                           // 14825
    } catch (e) {                                                                                                      // 14826
      return makePromise(e, false);                                                                                    // 14827
    }                                                                                                                  // 14828
    if (isPromiseLike(callbackOutput)) {                                                                               // 14829
      return callbackOutput.then(function() {                                                                          // 14830
        return makePromise(value, isResolved);                                                                         // 14831
      }, function(error) {                                                                                             // 14832
        return makePromise(error, false);                                                                              // 14833
      });                                                                                                              // 14834
    } else {                                                                                                           // 14835
      return makePromise(value, isResolved);                                                                           // 14836
    }                                                                                                                  // 14837
  };                                                                                                                   // 14838
                                                                                                                       // 14839
  /**                                                                                                                  // 14840
   * @ngdoc method                                                                                                     // 14841
   * @name $q#when                                                                                                     // 14842
   * @kind function                                                                                                    // 14843
   *                                                                                                                   // 14844
   * @description                                                                                                      // 14845
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.                       // 14846
   * This is useful when you are dealing with an object that might or might not be a promise, or if                    // 14847
   * the promise comes from a source that can't be trusted.                                                            // 14848
   *                                                                                                                   // 14849
   * @param {*} value Value or a promise                                                                               // 14850
   * @param {Function=} successCallback                                                                                // 14851
   * @param {Function=} errorCallback                                                                                  // 14852
   * @param {Function=} progressCallback                                                                               // 14853
   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14854
   */                                                                                                                  // 14855
                                                                                                                       // 14856
                                                                                                                       // 14857
  var when = function(value, callback, errback, progressBack) {                                                        // 14858
    var result = new Deferred();                                                                                       // 14859
    result.resolve(value);                                                                                             // 14860
    return result.promise.then(callback, errback, progressBack);                                                       // 14861
  };                                                                                                                   // 14862
                                                                                                                       // 14863
  /**                                                                                                                  // 14864
   * @ngdoc method                                                                                                     // 14865
   * @name $q#resolve                                                                                                  // 14866
   * @kind function                                                                                                    // 14867
   *                                                                                                                   // 14868
   * @description                                                                                                      // 14869
   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.                                         // 14870
   *                                                                                                                   // 14871
   * @param {*} value Value or a promise                                                                               // 14872
   * @param {Function=} successCallback                                                                                // 14873
   * @param {Function=} errorCallback                                                                                  // 14874
   * @param {Function=} progressCallback                                                                               // 14875
   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14876
   */                                                                                                                  // 14877
  var resolve = when;                                                                                                  // 14878
                                                                                                                       // 14879
  /**                                                                                                                  // 14880
   * @ngdoc method                                                                                                     // 14881
   * @name $q#all                                                                                                      // 14882
   * @kind function                                                                                                    // 14883
   *                                                                                                                   // 14884
   * @description                                                                                                      // 14885
   * Combines multiple promises into a single promise that is resolved when all of the input                           // 14886
   * promises are resolved.                                                                                            // 14887
   *                                                                                                                   // 14888
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.                                  // 14889
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,                   // 14890
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.                     // 14891
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected                    // 14892
   *   with the same rejection value.                                                                                  // 14893
   */                                                                                                                  // 14894
                                                                                                                       // 14895
  function all(promises) {                                                                                             // 14896
    var deferred = new Deferred(),                                                                                     // 14897
        counter = 0,                                                                                                   // 14898
        results = isArray(promises) ? [] : {};                                                                         // 14899
                                                                                                                       // 14900
    forEach(promises, function(promise, key) {                                                                         // 14901
      counter++;                                                                                                       // 14902
      when(promise).then(function(value) {                                                                             // 14903
        if (results.hasOwnProperty(key)) return;                                                                       // 14904
        results[key] = value;                                                                                          // 14905
        if (!(--counter)) deferred.resolve(results);                                                                   // 14906
      }, function(reason) {                                                                                            // 14907
        if (results.hasOwnProperty(key)) return;                                                                       // 14908
        deferred.reject(reason);                                                                                       // 14909
      });                                                                                                              // 14910
    });                                                                                                                // 14911
                                                                                                                       // 14912
    if (counter === 0) {                                                                                               // 14913
      deferred.resolve(results);                                                                                       // 14914
    }                                                                                                                  // 14915
                                                                                                                       // 14916
    return deferred.promise;                                                                                           // 14917
  }                                                                                                                    // 14918
                                                                                                                       // 14919
  var $Q = function Q(resolver) {                                                                                      // 14920
    if (!isFunction(resolver)) {                                                                                       // 14921
      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);                                           // 14922
    }                                                                                                                  // 14923
                                                                                                                       // 14924
    if (!(this instanceof Q)) {                                                                                        // 14925
      // More useful when $Q is the Promise itself.                                                                    // 14926
      return new Q(resolver);                                                                                          // 14927
    }                                                                                                                  // 14928
                                                                                                                       // 14929
    var deferred = new Deferred();                                                                                     // 14930
                                                                                                                       // 14931
    function resolveFn(value) {                                                                                        // 14932
      deferred.resolve(value);                                                                                         // 14933
    }                                                                                                                  // 14934
                                                                                                                       // 14935
    function rejectFn(reason) {                                                                                        // 14936
      deferred.reject(reason);                                                                                         // 14937
    }                                                                                                                  // 14938
                                                                                                                       // 14939
    resolver(resolveFn, rejectFn);                                                                                     // 14940
                                                                                                                       // 14941
    return deferred.promise;                                                                                           // 14942
  };                                                                                                                   // 14943
                                                                                                                       // 14944
  $Q.defer = defer;                                                                                                    // 14945
  $Q.reject = reject;                                                                                                  // 14946
  $Q.when = when;                                                                                                      // 14947
  $Q.resolve = resolve;                                                                                                // 14948
  $Q.all = all;                                                                                                        // 14949
                                                                                                                       // 14950
  return $Q;                                                                                                           // 14951
}                                                                                                                      // 14952
                                                                                                                       // 14953
function $$RAFProvider() { //rAF                                                                                       // 14954
  this.$get = ['$window', '$timeout', function($window, $timeout) {                                                    // 14955
    var requestAnimationFrame = $window.requestAnimationFrame ||                                                       // 14956
                                $window.webkitRequestAnimationFrame;                                                   // 14957
                                                                                                                       // 14958
    var cancelAnimationFrame = $window.cancelAnimationFrame ||                                                         // 14959
                               $window.webkitCancelAnimationFrame ||                                                   // 14960
                               $window.webkitCancelRequestAnimationFrame;                                              // 14961
                                                                                                                       // 14962
    var rafSupported = !!requestAnimationFrame;                                                                        // 14963
    var raf = rafSupported                                                                                             // 14964
      ? function(fn) {                                                                                                 // 14965
          var id = requestAnimationFrame(fn);                                                                          // 14966
          return function() {                                                                                          // 14967
            cancelAnimationFrame(id);                                                                                  // 14968
          };                                                                                                           // 14969
        }                                                                                                              // 14970
      : function(fn) {                                                                                                 // 14971
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666                                                // 14972
          return function() {                                                                                          // 14973
            $timeout.cancel(timer);                                                                                    // 14974
          };                                                                                                           // 14975
        };                                                                                                             // 14976
                                                                                                                       // 14977
    raf.supported = rafSupported;                                                                                      // 14978
                                                                                                                       // 14979
    return raf;                                                                                                        // 14980
  }];                                                                                                                  // 14981
}                                                                                                                      // 14982
                                                                                                                       // 14983
/**                                                                                                                    // 14984
 * DESIGN NOTES                                                                                                        // 14985
 *                                                                                                                     // 14986
 * The design decisions behind the scope are heavily favored for speed and memory consumption.                         // 14987
 *                                                                                                                     // 14988
 * The typical use of scope is to watch the expressions, which most of the time return the same                        // 14989
 * value as last time so we optimize the operation.                                                                    // 14990
 *                                                                                                                     // 14991
 * Closures construction is expensive in terms of speed as well as memory:                                             // 14992
 *   - No closures, instead use prototypical inheritance for API                                                       // 14993
 *   - Internal state needs to be stored on scope directly, which means that private state is                          // 14994
 *     exposed as $$____ properties                                                                                    // 14995
 *                                                                                                                     // 14996
 * Loop operations are optimized by using while(count--) { ... }                                                       // 14997
 *   - this means that in order to keep the same order of execution as addition we have to add                         // 14998
 *     items to the array at the beginning (unshift) instead of at the end (push)                                      // 14999
 *                                                                                                                     // 15000
 * Child scopes are created and removed often                                                                          // 15001
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list                        // 15002
 *                                                                                                                     // 15003
 * There are few watches then a lot of observers. This is why you don't want the observer to be                        // 15004
 * implemented in the same way as watch. Watch requires return of initialization function which                        // 15005
 * are expensive to construct.                                                                                         // 15006
 */                                                                                                                    // 15007
                                                                                                                       // 15008
                                                                                                                       // 15009
/**                                                                                                                    // 15010
 * @ngdoc provider                                                                                                     // 15011
 * @name $rootScopeProvider                                                                                            // 15012
 * @description                                                                                                        // 15013
 *                                                                                                                     // 15014
 * Provider for the $rootScope service.                                                                                // 15015
 */                                                                                                                    // 15016
                                                                                                                       // 15017
/**                                                                                                                    // 15018
 * @ngdoc method                                                                                                       // 15019
 * @name $rootScopeProvider#digestTtl                                                                                  // 15020
 * @description                                                                                                        // 15021
 *                                                                                                                     // 15022
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and                    // 15023
 * assuming that the model is unstable.                                                                                // 15024
 *                                                                                                                     // 15025
 * The current default is 10 iterations.                                                                               // 15026
 *                                                                                                                     // 15027
 * In complex applications it's possible that the dependencies between `$watch`s will result in                        // 15028
 * several digest iterations. However if an application needs more than the default 10 digest                          // 15029
 * iterations for its model to stabilize then you should investigate what is causing the model to                      // 15030
 * continuously change during the digest.                                                                              // 15031
 *                                                                                                                     // 15032
 * Increasing the TTL could have performance implications, so you should not change it without                         // 15033
 * proper justification.                                                                                               // 15034
 *                                                                                                                     // 15035
 * @param {number} limit The number of digest iterations.                                                              // 15036
 */                                                                                                                    // 15037
                                                                                                                       // 15038
                                                                                                                       // 15039
/**                                                                                                                    // 15040
 * @ngdoc service                                                                                                      // 15041
 * @name $rootScope                                                                                                    // 15042
 * @description                                                                                                        // 15043
 *                                                                                                                     // 15044
 * Every application has a single root {@link ng.$rootScope.Scope scope}.                                              // 15045
 * All other scopes are descendant scopes of the root scope. Scopes provide separation                                 // 15046
 * between the model and the view, via a mechanism for watching the model for changes.                                 // 15047
 * They also provide an event emission/broadcast and subscription facility. See the                                    // 15048
 * {@link guide/scope developer guide on scopes}.                                                                      // 15049
 */                                                                                                                    // 15050
function $RootScopeProvider() {                                                                                        // 15051
  var TTL = 10;                                                                                                        // 15052
  var $rootScopeMinErr = minErr('$rootScope');                                                                         // 15053
  var lastDirtyWatch = null;                                                                                           // 15054
  var applyAsyncId = null;                                                                                             // 15055
                                                                                                                       // 15056
  this.digestTtl = function(value) {                                                                                   // 15057
    if (arguments.length) {                                                                                            // 15058
      TTL = value;                                                                                                     // 15059
    }                                                                                                                  // 15060
    return TTL;                                                                                                        // 15061
  };                                                                                                                   // 15062
                                                                                                                       // 15063
  function createChildScopeClass(parent) {                                                                             // 15064
    function ChildScope() {                                                                                            // 15065
      this.$$watchers = this.$$nextSibling =                                                                           // 15066
          this.$$childHead = this.$$childTail = null;                                                                  // 15067
      this.$$listeners = {};                                                                                           // 15068
      this.$$listenerCount = {};                                                                                       // 15069
      this.$$watchersCount = 0;                                                                                        // 15070
      this.$id = nextUid();                                                                                            // 15071
      this.$$ChildScope = null;                                                                                        // 15072
    }                                                                                                                  // 15073
    ChildScope.prototype = parent;                                                                                     // 15074
    return ChildScope;                                                                                                 // 15075
  }                                                                                                                    // 15076
                                                                                                                       // 15077
  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',                                                 // 15078
      function($injector, $exceptionHandler, $parse, $browser) {                                                       // 15079
                                                                                                                       // 15080
    function destroyChildScope($event) {                                                                               // 15081
        $event.currentScope.$$destroyed = true;                                                                        // 15082
    }                                                                                                                  // 15083
                                                                                                                       // 15084
    /**                                                                                                                // 15085
     * @ngdoc type                                                                                                     // 15086
     * @name $rootScope.Scope                                                                                          // 15087
     *                                                                                                                 // 15088
     * @description                                                                                                    // 15089
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the                           // 15090
     * {@link auto.$injector $injector}. Child scopes are created using the                                            // 15091
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when                     // 15092
     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for                          // 15093
     * an in-depth introduction and usage examples.                                                                    // 15094
     *                                                                                                                 // 15095
     *                                                                                                                 // 15096
     * # Inheritance                                                                                                   // 15097
     * A scope can inherit from a parent scope, as in this example:                                                    // 15098
     * ```js                                                                                                           // 15099
         var parent = $rootScope;                                                                                      // 15100
         var child = parent.$new();                                                                                    // 15101
                                                                                                                       // 15102
         parent.salutation = "Hello";                                                                                  // 15103
         expect(child.salutation).toEqual('Hello');                                                                    // 15104
                                                                                                                       // 15105
         child.salutation = "Welcome";                                                                                 // 15106
         expect(child.salutation).toEqual('Welcome');                                                                  // 15107
         expect(parent.salutation).toEqual('Hello');                                                                   // 15108
     * ```                                                                                                             // 15109
     *                                                                                                                 // 15110
     * When interacting with `Scope` in tests, additional helper methods are available on the                          // 15111
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional                      // 15112
     * details.                                                                                                        // 15113
     *                                                                                                                 // 15114
     *                                                                                                                 // 15115
     * @param {Object.<string, function()>=} providers Map of service factory which need to be                         // 15116
     *                                       provided for the current scope. Defaults to {@link ng}.                   // 15117
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should                      // 15118
     *                              append/override services provided by `providers`. This is handy                    // 15119
     *                              when unit-testing and having the need to override a default                        // 15120
     *                              service.                                                                           // 15121
     * @returns {Object} Newly created scope.                                                                          // 15122
     *                                                                                                                 // 15123
     */                                                                                                                // 15124
    function Scope() {                                                                                                 // 15125
      this.$id = nextUid();                                                                                            // 15126
      this.$$phase = this.$parent = this.$$watchers =                                                                  // 15127
                     this.$$nextSibling = this.$$prevSibling =                                                         // 15128
                     this.$$childHead = this.$$childTail = null;                                                       // 15129
      this.$root = this;                                                                                               // 15130
      this.$$destroyed = false;                                                                                        // 15131
      this.$$listeners = {};                                                                                           // 15132
      this.$$listenerCount = {};                                                                                       // 15133
      this.$$watchersCount = 0;                                                                                        // 15134
      this.$$isolateBindings = null;                                                                                   // 15135
    }                                                                                                                  // 15136
                                                                                                                       // 15137
    /**                                                                                                                // 15138
     * @ngdoc property                                                                                                 // 15139
     * @name $rootScope.Scope#$id                                                                                      // 15140
     *                                                                                                                 // 15141
     * @description                                                                                                    // 15142
     * Unique scope ID (monotonically increasing) useful for debugging.                                                // 15143
     */                                                                                                                // 15144
                                                                                                                       // 15145
     /**                                                                                                               // 15146
      * @ngdoc property                                                                                                // 15147
      * @name $rootScope.Scope#$parent                                                                                 // 15148
      *                                                                                                                // 15149
      * @description                                                                                                   // 15150
      * Reference to the parent scope.                                                                                 // 15151
      */                                                                                                               // 15152
                                                                                                                       // 15153
      /**                                                                                                              // 15154
       * @ngdoc property                                                                                               // 15155
       * @name $rootScope.Scope#$root                                                                                  // 15156
       *                                                                                                               // 15157
       * @description                                                                                                  // 15158
       * Reference to the root scope.                                                                                  // 15159
       */                                                                                                              // 15160
                                                                                                                       // 15161
    Scope.prototype = {                                                                                                // 15162
      constructor: Scope,                                                                                              // 15163
      /**                                                                                                              // 15164
       * @ngdoc method                                                                                                 // 15165
       * @name $rootScope.Scope#$new                                                                                   // 15166
       * @kind function                                                                                                // 15167
       *                                                                                                               // 15168
       * @description                                                                                                  // 15169
       * Creates a new child {@link ng.$rootScope.Scope scope}.                                                        // 15170
       *                                                                                                               // 15171
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.                      // 15172
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.      // 15173
       *                                                                                                               // 15174
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is                          // 15175
       * desired for the scope and its child scopes to be permanently detached from the parent and                     // 15176
       * thus stop participating in model change detection and listener notification by invoking.                      // 15177
       *                                                                                                               // 15178
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the                     // 15179
       *         parent scope. The scope is isolated, as it can not see parent scope properties.                       // 15180
       *         When creating widgets, it is useful for the widget to not accidentally read parent                    // 15181
       *         state.                                                                                                // 15182
       *                                                                                                               // 15183
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`               // 15184
       *                              of the newly created scope. Defaults to `this` scope if not provided.            // 15185
       *                              This is used when creating a transclude scope to correctly place it              // 15186
       *                              in the scope hierarchy while maintaining the correct prototypical                // 15187
       *                              inheritance.                                                                     // 15188
       *                                                                                                               // 15189
       * @returns {Object} The newly created child scope.                                                              // 15190
       *                                                                                                               // 15191
       */                                                                                                              // 15192
      $new: function(isolate, parent) {                                                                                // 15193
        var child;                                                                                                     // 15194
                                                                                                                       // 15195
        parent = parent || this;                                                                                       // 15196
                                                                                                                       // 15197
        if (isolate) {                                                                                                 // 15198
          child = new Scope();                                                                                         // 15199
          child.$root = this.$root;                                                                                    // 15200
        } else {                                                                                                       // 15201
          // Only create a child scope class if somebody asks for one,                                                 // 15202
          // but cache it to allow the VM to optimize lookups.                                                         // 15203
          if (!this.$$ChildScope) {                                                                                    // 15204
            this.$$ChildScope = createChildScopeClass(this);                                                           // 15205
          }                                                                                                            // 15206
          child = new this.$$ChildScope();                                                                             // 15207
        }                                                                                                              // 15208
        child.$parent = parent;                                                                                        // 15209
        child.$$prevSibling = parent.$$childTail;                                                                      // 15210
        if (parent.$$childHead) {                                                                                      // 15211
          parent.$$childTail.$$nextSibling = child;                                                                    // 15212
          parent.$$childTail = child;                                                                                  // 15213
        } else {                                                                                                       // 15214
          parent.$$childHead = parent.$$childTail = child;                                                             // 15215
        }                                                                                                              // 15216
                                                                                                                       // 15217
        // When the new scope is not isolated or we inherit from `this`, and                                           // 15218
        // the parent scope is destroyed, the property `$$destroyed` is inherited                                      // 15219
        // prototypically. In all other cases, this property needs to be set                                           // 15220
        // when the parent scope is destroyed.                                                                         // 15221
        // The listener needs to be added after the parent is set                                                      // 15222
        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);                                       // 15223
                                                                                                                       // 15224
        return child;                                                                                                  // 15225
      },                                                                                                               // 15226
                                                                                                                       // 15227
      /**                                                                                                              // 15228
       * @ngdoc method                                                                                                 // 15229
       * @name $rootScope.Scope#$watch                                                                                 // 15230
       * @kind function                                                                                                // 15231
       *                                                                                                               // 15232
       * @description                                                                                                  // 15233
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.                        // 15234
       *                                                                                                               // 15235
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest                         // 15236
       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change           // 15237
       *   its value when executed multiple times with the same input because it may be executed multiple              // 15238
       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be                // 15239
       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).                                                     // 15240
       * - The `listener` is called only when the value from the current `watchExpression` and the                     // 15241
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,                    // 15242
       *   see below). Inequality is determined according to reference inequality,                                     // 15243
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`                                         // 15245
       *   (see next point)                                                                                            // 15246
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined                            // 15247
       *   according to the {@link angular.equals} function. To save the value of the object for                       // 15248
       *   later comparison, the {@link angular.copy} function is used. This therefore means that                      // 15249
       *   watching complex objects will have adverse memory and performance implications.                             // 15250
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.                     // 15251
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun                         // 15252
       *   iteration limit is 10 to prevent an infinite loop deadlock.                                                 // 15253
       *                                                                                                               // 15254
       *                                                                                                               // 15255
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,                    // 15256
       * you can register a `watchExpression` function with no `listener`. (Be prepared for                            // 15257
       * multiple calls to your `watchExpression` because it will execute multiple times in a                          // 15258
       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)                            // 15259
       *                                                                                                               // 15260
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously                      // 15261
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the                                     // 15262
       * watcher. In rare cases, this is undesirable because the listener is called when the result                    // 15263
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you                     // 15264
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the                     // 15265
       * listener was called due to initialization.                                                                    // 15266
       *                                                                                                               // 15267
       *                                                                                                               // 15268
       *                                                                                                               // 15269
       * # Example                                                                                                     // 15270
       * ```js                                                                                                         // 15271
           // let's assume that scope was dependency injected as the $rootScope                                        // 15272
           var scope = $rootScope;                                                                                     // 15273
           scope.name = 'misko';                                                                                       // 15274
           scope.counter = 0;                                                                                          // 15275
                                                                                                                       // 15276
           expect(scope.counter).toEqual(0);                                                                           // 15277
           scope.$watch('name', function(newValue, oldValue) {                                                         // 15278
             scope.counter = scope.counter + 1;                                                                        // 15279
           });                                                                                                         // 15280
           expect(scope.counter).toEqual(0);                                                                           // 15281
                                                                                                                       // 15282
           scope.$digest();                                                                                            // 15283
           // the listener is always called during the first $digest loop after it was registered                      // 15284
           expect(scope.counter).toEqual(1);                                                                           // 15285
                                                                                                                       // 15286
           scope.$digest();                                                                                            // 15287
           // but now it will not be called unless the value changes                                                   // 15288
           expect(scope.counter).toEqual(1);                                                                           // 15289
                                                                                                                       // 15290
           scope.name = 'adam';                                                                                        // 15291
           scope.$digest();                                                                                            // 15292
           expect(scope.counter).toEqual(2);                                                                           // 15293
                                                                                                                       // 15294
                                                                                                                       // 15295
                                                                                                                       // 15296
           // Using a function as a watchExpression                                                                    // 15297
           var food;                                                                                                   // 15298
           scope.foodCounter = 0;                                                                                      // 15299
           expect(scope.foodCounter).toEqual(0);                                                                       // 15300
           scope.$watch(                                                                                               // 15301
             // This function returns the value being watched. It is called for each turn of the $digest loop          // 15302
             function() { return food; },                                                                              // 15303
             // This is the change listener, called when the value returned from the above function changes            // 15304
             function(newValue, oldValue) {                                                                            // 15305
               if ( newValue !== oldValue ) {                                                                          // 15306
                 // Only increment the counter if the value changed                                                    // 15307
                 scope.foodCounter = scope.foodCounter + 1;                                                            // 15308
               }                                                                                                       // 15309
             }                                                                                                         // 15310
           );                                                                                                          // 15311
           // No digest has been run so the counter will be zero                                                       // 15312
           expect(scope.foodCounter).toEqual(0);                                                                       // 15313
                                                                                                                       // 15314
           // Run the digest but since food has not changed count will still be zero                                   // 15315
           scope.$digest();                                                                                            // 15316
           expect(scope.foodCounter).toEqual(0);                                                                       // 15317
                                                                                                                       // 15318
           // Update food and run digest.  Now the counter will increment                                              // 15319
           food = 'cheeseburger';                                                                                      // 15320
           scope.$digest();                                                                                            // 15321
           expect(scope.foodCounter).toEqual(1);                                                                       // 15322
                                                                                                                       // 15323
       * ```                                                                                                           // 15324
       *                                                                                                               // 15325
       *                                                                                                               // 15326
       *                                                                                                               // 15327
       * @param {(function()|string)} watchExpression Expression that is evaluated on each                             // 15328
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers                   // 15329
       *    a call to the `listener`.                                                                                  // 15330
       *                                                                                                               // 15331
       *    - `string`: Evaluated as {@link guide/expression expression}                                               // 15332
       *    - `function(scope)`: called with current `scope` as a parameter.                                           // 15333
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value                          // 15334
       *    of `watchExpression` changes.                                                                              // 15335
       *                                                                                                               // 15336
       *    - `newVal` contains the current value of the `watchExpression`                                             // 15337
       *    - `oldVal` contains the previous value of the `watchExpression`                                            // 15338
       *    - `scope` refers to the current scope                                                                      // 15339
       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of          // 15340
       *     comparing for reference equality.                                                                         // 15341
       * @returns {function()} Returns a deregistration function for this listener.                                    // 15342
       */                                                                                                              // 15343
      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {                                    // 15344
        var get = $parse(watchExp);                                                                                    // 15345
                                                                                                                       // 15346
        if (get.$$watchDelegate) {                                                                                     // 15347
          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);                                   // 15348
        }                                                                                                              // 15349
        var scope = this,                                                                                              // 15350
            array = scope.$$watchers,                                                                                  // 15351
            watcher = {                                                                                                // 15352
              fn: listener,                                                                                            // 15353
              last: initWatchVal,                                                                                      // 15354
              get: get,                                                                                                // 15355
              exp: prettyPrintExpression || watchExp,                                                                  // 15356
              eq: !!objectEquality                                                                                     // 15357
            };                                                                                                         // 15358
                                                                                                                       // 15359
        lastDirtyWatch = null;                                                                                         // 15360
                                                                                                                       // 15361
        if (!isFunction(listener)) {                                                                                   // 15362
          watcher.fn = noop;                                                                                           // 15363
        }                                                                                                              // 15364
                                                                                                                       // 15365
        if (!array) {                                                                                                  // 15366
          array = scope.$$watchers = [];                                                                               // 15367
        }                                                                                                              // 15368
        // we use unshift since we use a while loop in $digest for speed.                                              // 15369
        // the while loop reads in reverse order.                                                                      // 15370
        array.unshift(watcher);                                                                                        // 15371
        incrementWatchersCount(this, 1);                                                                               // 15372
                                                                                                                       // 15373
        return function deregisterWatch() {                                                                            // 15374
          if (arrayRemove(array, watcher) >= 0) {                                                                      // 15375
            incrementWatchersCount(scope, -1);                                                                         // 15376
          }                                                                                                            // 15377
          lastDirtyWatch = null;                                                                                       // 15378
        };                                                                                                             // 15379
      },                                                                                                               // 15380
                                                                                                                       // 15381
      /**                                                                                                              // 15382
       * @ngdoc method                                                                                                 // 15383
       * @name $rootScope.Scope#$watchGroup                                                                            // 15384
       * @kind function                                                                                                // 15385
       *                                                                                                               // 15386
       * @description                                                                                                  // 15387
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.     // 15388
       * If any one expression in the collection changes the `listener` is executed.                                   // 15389
       *                                                                                                               // 15390
       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
       *   call to $digest() to see if any items changes.                                                              // 15392
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.                   // 15393
       *                                                                                                               // 15394
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually       // 15395
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}                                                     // 15396
       *                                                                                                               // 15397
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any      // 15398
       *    expression in `watchExpressions` changes                                                                   // 15399
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching     // 15400
       *    those of `watchExpression`                                                                                 // 15401
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`                                                                                 // 15403
       *    The `scope` refers to the current scope.                                                                   // 15404
       * @returns {function()} Returns a de-registration function for all listeners.                                   // 15405
       */                                                                                                              // 15406
      $watchGroup: function(watchExpressions, listener) {                                                              // 15407
        var oldValues = new Array(watchExpressions.length);                                                            // 15408
        var newValues = new Array(watchExpressions.length);                                                            // 15409
        var deregisterFns = [];                                                                                        // 15410
        var self = this;                                                                                               // 15411
        var changeReactionScheduled = false;                                                                           // 15412
        var firstRun = true;                                                                                           // 15413
                                                                                                                       // 15414
        if (!watchExpressions.length) {                                                                                // 15415
          // No expressions means we call the listener ASAP                                                            // 15416
          var shouldCall = true;                                                                                       // 15417
          self.$evalAsync(function() {                                                                                 // 15418
            if (shouldCall) listener(newValues, newValues, self);                                                      // 15419
          });                                                                                                          // 15420
          return function deregisterWatchGroup() {                                                                     // 15421
            shouldCall = false;                                                                                        // 15422
          };                                                                                                           // 15423
        }                                                                                                              // 15424
                                                                                                                       // 15425
        if (watchExpressions.length === 1) {                                                                           // 15426
          // Special case size of one                                                                                  // 15427
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {                  // 15428
            newValues[0] = value;                                                                                      // 15429
            oldValues[0] = oldValue;                                                                                   // 15430
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);                                  // 15431
          });                                                                                                          // 15432
        }                                                                                                              // 15433
                                                                                                                       // 15434
        forEach(watchExpressions, function(expr, i) {                                                                  // 15435
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {                            // 15436
            newValues[i] = value;                                                                                      // 15437
            oldValues[i] = oldValue;                                                                                   // 15438
            if (!changeReactionScheduled) {                                                                            // 15439
              changeReactionScheduled = true;                                                                          // 15440
              self.$evalAsync(watchGroupAction);                                                                       // 15441
            }                                                                                                          // 15442
          });                                                                                                          // 15443
          deregisterFns.push(unwatchFn);                                                                               // 15444
        });                                                                                                            // 15445
                                                                                                                       // 15446
        function watchGroupAction() {                                                                                  // 15447
          changeReactionScheduled = false;                                                                             // 15448
                                                                                                                       // 15449
          if (firstRun) {                                                                                              // 15450
            firstRun = false;                                                                                          // 15451
            listener(newValues, newValues, self);                                                                      // 15452
          } else {                                                                                                     // 15453
            listener(newValues, oldValues, self);                                                                      // 15454
          }                                                                                                            // 15455
        }                                                                                                              // 15456
                                                                                                                       // 15457
        return function deregisterWatchGroup() {                                                                       // 15458
          while (deregisterFns.length) {                                                                               // 15459
            deregisterFns.shift()();                                                                                   // 15460
          }                                                                                                            // 15461
        };                                                                                                             // 15462
      },                                                                                                               // 15463
                                                                                                                       // 15464
                                                                                                                       // 15465
      /**                                                                                                              // 15466
       * @ngdoc method                                                                                                 // 15467
       * @name $rootScope.Scope#$watchCollection                                                                       // 15468
       * @kind function                                                                                                // 15469
       *                                                                                                               // 15470
       * @description                                                                                                  // 15471
       * Shallow watches the properties of an object and fires whenever any of the properties change                   // 15472
       * (for arrays, this implies watching the array items; for object maps, this implies watching                    // 15473
       * the properties). If a change is detected, the `listener` callback is fired.                                   // 15474
       *                                                                                                               // 15475
       * - The `obj` collection is observed via standard $watch operation and is examined on every                     // 15476
       *   call to $digest() to see if any items have been added, removed, or moved.                                   // 15477
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include                   // 15478
       *   adding, removing, and moving items belonging to an object or array.                                         // 15479
       *                                                                                                               // 15480
       *                                                                                                               // 15481
       * # Example                                                                                                     // 15482
       * ```js                                                                                                         // 15483
          $scope.names = ['igor', 'matias', 'misko', 'james'];                                                         // 15484
          $scope.dataCount = 4;                                                                                        // 15485
                                                                                                                       // 15486
          $scope.$watchCollection('names', function(newNames, oldNames) {                                              // 15487
            $scope.dataCount = newNames.length;                                                                        // 15488
          });                                                                                                          // 15489
                                                                                                                       // 15490
          expect($scope.dataCount).toEqual(4);                                                                         // 15491
          $scope.$digest();                                                                                            // 15492
                                                                                                                       // 15493
          //still at 4 ... no changes                                                                                  // 15494
          expect($scope.dataCount).toEqual(4);                                                                         // 15495
                                                                                                                       // 15496
          $scope.names.pop();                                                                                          // 15497
          $scope.$digest();                                                                                            // 15498
                                                                                                                       // 15499
          //now there's been a change                                                                                  // 15500
          expect($scope.dataCount).toEqual(3);                                                                         // 15501
       * ```                                                                                                           // 15502
       *                                                                                                               // 15503
       *                                                                                                               // 15504
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The                     // 15505
       *    expression value should evaluate to an object or an array which is observed on each                        // 15506
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the                           // 15507
       *    collection will trigger a call to the `listener`.                                                          // 15508
       *                                                                                                               // 15509
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called                    // 15510
       *    when a change is detected.                                                                                 // 15511
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression                 // 15512
       *    - The `oldCollection` object is a copy of the former collection data.                                      // 15513
       *      Due to performance considerations, the`oldCollection` value is computed only if the                      // 15514
       *      `listener` function declares two or more arguments.                                                      // 15515
       *    - The `scope` argument refers to the current scope.                                                        // 15516
       *                                                                                                               // 15517
       * @returns {function()} Returns a de-registration function for this listener. When the                          // 15518
       *    de-registration function is executed, the internal watch operation is terminated.                          // 15519
       */                                                                                                              // 15520
      $watchCollection: function(obj, listener) {                                                                      // 15521
        $watchCollectionInterceptor.$stateful = true;                                                                  // 15522
                                                                                                                       // 15523
        var self = this;                                                                                               // 15524
        // the current value, updated on each dirty-check run                                                          // 15525
        var newValue;                                                                                                  // 15526
        // a shallow copy of the newValue from the last dirty-check run,                                               // 15527
        // updated to match newValue during dirty-check run                                                            // 15528
        var oldValue;                                                                                                  // 15529
        // a shallow copy of the newValue from when the last change happened                                           // 15530
        var veryOldValue;                                                                                              // 15531
        // only track veryOldValue if the listener is asking for it                                                    // 15532
        var trackVeryOldValue = (listener.length > 1);                                                                 // 15533
        var changeDetected = 0;                                                                                        // 15534
        var changeDetector = $parse(obj, $watchCollectionInterceptor);                                                 // 15535
        var internalArray = [];                                                                                        // 15536
        var internalObject = {};                                                                                       // 15537
        var initRun = true;                                                                                            // 15538
        var oldLength = 0;                                                                                             // 15539
                                                                                                                       // 15540
        function $watchCollectionInterceptor(_value) {                                                                 // 15541
          newValue = _value;                                                                                           // 15542
          var newLength, key, bothNaN, newItem, oldItem;                                                               // 15543
                                                                                                                       // 15544
          // If the new value is undefined, then return undefined as the watch may be a one-time watch                 // 15545
          if (isUndefined(newValue)) return;                                                                           // 15546
                                                                                                                       // 15547
          if (!isObject(newValue)) { // if primitive                                                                   // 15548
            if (oldValue !== newValue) {                                                                               // 15549
              oldValue = newValue;                                                                                     // 15550
              changeDetected++;                                                                                        // 15551
            }                                                                                                          // 15552
          } else if (isArrayLike(newValue)) {                                                                          // 15553
            if (oldValue !== internalArray) {                                                                          // 15554
              // we are transitioning from something which was not an array into array.                                // 15555
              oldValue = internalArray;                                                                                // 15556
              oldLength = oldValue.length = 0;                                                                         // 15557
              changeDetected++;                                                                                        // 15558
            }                                                                                                          // 15559
                                                                                                                       // 15560
            newLength = newValue.length;                                                                               // 15561
                                                                                                                       // 15562
            if (oldLength !== newLength) {                                                                             // 15563
              // if lengths do not match we need to trigger change notification                                        // 15564
              changeDetected++;                                                                                        // 15565
              oldValue.length = oldLength = newLength;                                                                 // 15566
            }                                                                                                          // 15567
            // copy the items to oldValue and look for changes.                                                        // 15568
            for (var i = 0; i < newLength; i++) {                                                                      // 15569
              oldItem = oldValue[i];                                                                                   // 15570
              newItem = newValue[i];                                                                                   // 15571
                                                                                                                       // 15572
              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                                // 15573
              if (!bothNaN && (oldItem !== newItem)) {                                                                 // 15574
                changeDetected++;                                                                                      // 15575
                oldValue[i] = newItem;                                                                                 // 15576
              }                                                                                                        // 15577
            }                                                                                                          // 15578
          } else {                                                                                                     // 15579
            if (oldValue !== internalObject) {                                                                         // 15580
              // we are transitioning from something which was not an object into object.                              // 15581
              oldValue = internalObject = {};                                                                          // 15582
              oldLength = 0;                                                                                           // 15583
              changeDetected++;                                                                                        // 15584
            }                                                                                                          // 15585
            // copy the items to oldValue and look for changes.                                                        // 15586
            newLength = 0;                                                                                             // 15587
            for (key in newValue) {                                                                                    // 15588
              if (hasOwnProperty.call(newValue, key)) {                                                                // 15589
                newLength++;                                                                                           // 15590
                newItem = newValue[key];                                                                               // 15591
                oldItem = oldValue[key];                                                                               // 15592
                                                                                                                       // 15593
                if (key in oldValue) {                                                                                 // 15594
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                            // 15595
                  if (!bothNaN && (oldItem !== newItem)) {                                                             // 15596
                    changeDetected++;                                                                                  // 15597
                    oldValue[key] = newItem;                                                                           // 15598
                  }                                                                                                    // 15599
                } else {                                                                                               // 15600
                  oldLength++;                                                                                         // 15601
                  oldValue[key] = newItem;                                                                             // 15602
                  changeDetected++;                                                                                    // 15603
                }                                                                                                      // 15604
              }                                                                                                        // 15605
            }                                                                                                          // 15606
            if (oldLength > newLength) {                                                                               // 15607
              // we used to have more keys, need to find them and destroy them.                                        // 15608
              changeDetected++;                                                                                        // 15609
              for (key in oldValue) {                                                                                  // 15610
                if (!hasOwnProperty.call(newValue, key)) {                                                             // 15611
                  oldLength--;                                                                                         // 15612
                  delete oldValue[key];                                                                                // 15613
                }                                                                                                      // 15614
              }                                                                                                        // 15615
            }                                                                                                          // 15616
          }                                                                                                            // 15617
          return changeDetected;                                                                                       // 15618
        }                                                                                                              // 15619
                                                                                                                       // 15620
        function $watchCollectionAction() {                                                                            // 15621
          if (initRun) {                                                                                               // 15622
            initRun = false;                                                                                           // 15623
            listener(newValue, newValue, self);                                                                        // 15624
          } else {                                                                                                     // 15625
            listener(newValue, veryOldValue, self);                                                                    // 15626
          }                                                                                                            // 15627
                                                                                                                       // 15628
          // make a copy for the next time a collection is changed                                                     // 15629
          if (trackVeryOldValue) {                                                                                     // 15630
            if (!isObject(newValue)) {                                                                                 // 15631
              //primitive                                                                                              // 15632
              veryOldValue = newValue;                                                                                 // 15633
            } else if (isArrayLike(newValue)) {                                                                        // 15634
              veryOldValue = new Array(newValue.length);                                                               // 15635
              for (var i = 0; i < newValue.length; i++) {                                                              // 15636
                veryOldValue[i] = newValue[i];                                                                         // 15637
              }                                                                                                        // 15638
            } else { // if object                                                                                      // 15639
              veryOldValue = {};                                                                                       // 15640
              for (var key in newValue) {                                                                              // 15641
                if (hasOwnProperty.call(newValue, key)) {                                                              // 15642
                  veryOldValue[key] = newValue[key];                                                                   // 15643
                }                                                                                                      // 15644
              }                                                                                                        // 15645
            }                                                                                                          // 15646
          }                                                                                                            // 15647
        }                                                                                                              // 15648
                                                                                                                       // 15649
        return this.$watch(changeDetector, $watchCollectionAction);                                                    // 15650
      },                                                                                                               // 15651
                                                                                                                       // 15652
      /**                                                                                                              // 15653
       * @ngdoc method                                                                                                 // 15654
       * @name $rootScope.Scope#$digest                                                                                // 15655
       * @kind function                                                                                                // 15656
       *                                                                                                               // 15657
       * @description                                                                                                  // 15658
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and                     // 15659
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change                      // 15660
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}                      // 15661
       * until no more listeners are firing. This means that it is possible to get into an infinite                    // 15662
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of                         // 15663
       * iterations exceeds 10.                                                                                        // 15664
       *                                                                                                               // 15665
       * Usually, you don't call `$digest()` directly in                                                               // 15666
       * {@link ng.directive:ngController controllers} or in                                                           // 15667
       * {@link ng.$compileProvider#directive directives}.                                                             // 15668
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within                   // 15669
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.                           // 15670
       *                                                                                                               // 15671
       * If you want to be notified whenever `$digest()` is called,                                                    // 15672
       * you can register a `watchExpression` function with                                                            // 15673
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.                                               // 15674
       *                                                                                                               // 15675
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.                             // 15676
       *                                                                                                               // 15677
       * # Example                                                                                                     // 15678
       * ```js                                                                                                         // 15679
           var scope = ...;                                                                                            // 15680
           scope.name = 'misko';                                                                                       // 15681
           scope.counter = 0;                                                                                          // 15682
                                                                                                                       // 15683
           expect(scope.counter).toEqual(0);                                                                           // 15684
           scope.$watch('name', function(newValue, oldValue) {                                                         // 15685
             scope.counter = scope.counter + 1;                                                                        // 15686
           });                                                                                                         // 15687
           expect(scope.counter).toEqual(0);                                                                           // 15688
                                                                                                                       // 15689
           scope.$digest();                                                                                            // 15690
           // the listener is always called during the first $digest loop after it was registered                      // 15691
           expect(scope.counter).toEqual(1);                                                                           // 15692
                                                                                                                       // 15693
           scope.$digest();                                                                                            // 15694
           // but now it will not be called unless the value changes                                                   // 15695
           expect(scope.counter).toEqual(1);                                                                           // 15696
                                                                                                                       // 15697
           scope.name = 'adam';                                                                                        // 15698
           scope.$digest();                                                                                            // 15699
           expect(scope.counter).toEqual(2);                                                                           // 15700
       * ```                                                                                                           // 15701
       *                                                                                                               // 15702
       */                                                                                                              // 15703
      $digest: function() {                                                                                            // 15704
        var watch, value, last,                                                                                        // 15705
            watchers,                                                                                                  // 15706
            length,                                                                                                    // 15707
            dirty, ttl = TTL,                                                                                          // 15708
            next, current, target = this,                                                                              // 15709
            watchLog = [],                                                                                             // 15710
            logIdx, logMsg, asyncTask;                                                                                 // 15711
                                                                                                                       // 15712
        beginPhase('$digest');                                                                                         // 15713
        // Check for changes to browser url that happened in sync before the call to $digest                           // 15714
        $browser.$$checkUrlChange();                                                                                   // 15715
                                                                                                                       // 15716
        if (this === $rootScope && applyAsyncId !== null) {                                                            // 15717
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then                        // 15718
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.                           // 15719
          $browser.defer.cancel(applyAsyncId);                                                                         // 15720
          flushApplyAsync();                                                                                           // 15721
        }                                                                                                              // 15722
                                                                                                                       // 15723
        lastDirtyWatch = null;                                                                                         // 15724
                                                                                                                       // 15725
        do { // "while dirty" loop                                                                                     // 15726
          dirty = false;                                                                                               // 15727
          current = target;                                                                                            // 15728
                                                                                                                       // 15729
          while (asyncQueue.length) {                                                                                  // 15730
            try {                                                                                                      // 15731
              asyncTask = asyncQueue.shift();                                                                          // 15732
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);                                           // 15733
            } catch (e) {                                                                                              // 15734
              $exceptionHandler(e);                                                                                    // 15735
            }                                                                                                          // 15736
            lastDirtyWatch = null;                                                                                     // 15737
          }                                                                                                            // 15738
                                                                                                                       // 15739
          traverseScopesLoop:                                                                                          // 15740
          do { // "traverse the scopes" loop                                                                           // 15741
            if ((watchers = current.$$watchers)) {                                                                     // 15742
              // process our watches                                                                                   // 15743
              length = watchers.length;                                                                                // 15744
              while (length--) {                                                                                       // 15745
                try {                                                                                                  // 15746
                  watch = watchers[length];                                                                            // 15747
                  // Most common watches are on primitives, in which case we can short                                 // 15748
                  // circuit it with === operator, only when === fails do we use .equals                               // 15749
                  if (watch) {                                                                                         // 15750
                    if ((value = watch.get(current)) !== (last = watch.last) &&                                        // 15751
                        !(watch.eq                                                                                     // 15752
                            ? equals(value, last)                                                                      // 15753
                            : (typeof value === 'number' && typeof last === 'number'                                   // 15754
                               && isNaN(value) && isNaN(last)))) {                                                     // 15755
                      dirty = true;                                                                                    // 15756
                      lastDirtyWatch = watch;                                                                          // 15757
                      watch.last = watch.eq ? copy(value, null) : value;                                               // 15758
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);                              // 15759
                      if (ttl < 5) {                                                                                   // 15760
                        logIdx = 4 - ttl;                                                                              // 15761
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];                                                  // 15762
                        watchLog[logIdx].push({                                                                        // 15763
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,  // 15764
                          newVal: value,                                                                               // 15765
                          oldVal: last                                                                                 // 15766
                        });                                                                                            // 15767
                      }                                                                                                // 15768
                    } else if (watch === lastDirtyWatch) {                                                             // 15769
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers   // 15770
                      // have already been tested.                                                                     // 15771
                      dirty = false;                                                                                   // 15772
                      break traverseScopesLoop;                                                                        // 15773
                    }                                                                                                  // 15774
                  }                                                                                                    // 15775
                } catch (e) {                                                                                          // 15776
                  $exceptionHandler(e);                                                                                // 15777
                }                                                                                                      // 15778
              }                                                                                                        // 15779
            }                                                                                                          // 15780
                                                                                                                       // 15781
            // Insanity Warning: scope depth-first traversal                                                           // 15782
            // yes, this code is a bit crazy, but it works and we have tests to prove it!                              // 15783
            // this piece should be kept in sync with the traversal in $broadcast                                      // 15784
            if (!(next = ((current.$$watchersCount && current.$$childHead) ||                                          // 15785
                (current !== target && current.$$nextSibling)))) {                                                     // 15786
              while (current !== target && !(next = current.$$nextSibling)) {                                          // 15787
                current = current.$parent;                                                                             // 15788
              }                                                                                                        // 15789
            }                                                                                                          // 15790
          } while ((current = next));                                                                                  // 15791
                                                                                                                       // 15792
          // `break traverseScopesLoop;` takes us to here                                                              // 15793
                                                                                                                       // 15794
          if ((dirty || asyncQueue.length) && !(ttl--)) {                                                              // 15795
            clearPhase();                                                                                              // 15796
            throw $rootScopeMinErr('infdig',                                                                           // 15797
                '{0} $digest() iterations reached. Aborting!\n' +                                                      // 15798
                'Watchers fired in the last 5 iterations: {1}',                                                        // 15799
                TTL, watchLog);                                                                                        // 15800
          }                                                                                                            // 15801
                                                                                                                       // 15802
        } while (dirty || asyncQueue.length);                                                                          // 15803
                                                                                                                       // 15804
        clearPhase();                                                                                                  // 15805
                                                                                                                       // 15806
        while (postDigestQueue.length) {                                                                               // 15807
          try {                                                                                                        // 15808
            postDigestQueue.shift()();                                                                                 // 15809
          } catch (e) {                                                                                                // 15810
            $exceptionHandler(e);                                                                                      // 15811
          }                                                                                                            // 15812
        }                                                                                                              // 15813
      },                                                                                                               // 15814
                                                                                                                       // 15815
                                                                                                                       // 15816
      /**                                                                                                              // 15817
       * @ngdoc event                                                                                                  // 15818
       * @name $rootScope.Scope#$destroy                                                                               // 15819
       * @eventType broadcast on scope being destroyed                                                                 // 15820
       *                                                                                                               // 15821
       * @description                                                                                                  // 15822
       * Broadcasted when a scope and its children are being destroyed.                                                // 15823
       *                                                                                                               // 15824
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15825
       * clean up DOM bindings before an element is removed from the DOM.                                              // 15826
       */                                                                                                              // 15827
                                                                                                                       // 15828
      /**                                                                                                              // 15829
       * @ngdoc method                                                                                                 // 15830
       * @name $rootScope.Scope#$destroy                                                                               // 15831
       * @kind function                                                                                                // 15832
       *                                                                                                               // 15833
       * @description                                                                                                  // 15834
       * Removes the current scope (and all of its children) from the parent scope. Removal implies                    // 15835
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer                                    // 15836
       * propagate to the current scope and its children. Removal also implies that the current                        // 15837
       * scope is eligible for garbage collection.                                                                     // 15838
       *                                                                                                               // 15839
       * The `$destroy()` is usually used by directives such as                                                        // 15840
       * {@link ng.directive:ngRepeat ngRepeat} for managing the                                                       // 15841
       * unrolling of the loop.                                                                                        // 15842
       *                                                                                                               // 15843
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.                            // 15844
       * Application code can register a `$destroy` event handler that will give it a chance to                        // 15845
       * perform any necessary cleanup.                                                                                // 15846
       *                                                                                                               // 15847
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15848
       * clean up DOM bindings before an element is removed from the DOM.                                              // 15849
       */                                                                                                              // 15850
      $destroy: function() {                                                                                           // 15851
        // We can't destroy a scope that has been already destroyed.                                                   // 15852
        if (this.$$destroyed) return;                                                                                  // 15853
        var parent = this.$parent;                                                                                     // 15854
                                                                                                                       // 15855
        this.$broadcast('$destroy');                                                                                   // 15856
        this.$$destroyed = true;                                                                                       // 15857
                                                                                                                       // 15858
        if (this === $rootScope) {                                                                                     // 15859
          //Remove handlers attached to window when $rootScope is removed                                              // 15860
          $browser.$$applicationDestroyed();                                                                           // 15861
        }                                                                                                              // 15862
                                                                                                                       // 15863
        incrementWatchersCount(this, -this.$$watchersCount);                                                           // 15864
        for (var eventName in this.$$listenerCount) {                                                                  // 15865
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);                                    // 15866
        }                                                                                                              // 15867
                                                                                                                       // 15868
        // sever all the references to parent scopes (after this cleanup, the current scope should                     // 15869
        // not be retained by any of our references and should be eligible for garbage collection)                     // 15870
        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;                             // 15871
        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;                             // 15872
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;                                 // 15873
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;                                 // 15874
                                                                                                                       // 15875
        // Disable listeners, watchers and apply/digest methods                                                        // 15876
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;                        // 15877
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };                                       // 15878
        this.$$listeners = {};                                                                                         // 15879
                                                                                                                       // 15880
        // All of the code below is bogus code that works around V8's memory leak via optimized code                   // 15881
        // and inline caches.                                                                                          // 15882
        //                                                                                                             // 15883
        // see:                                                                                                        // 15884
        // - https://code.google.com/p/v8/issues/detail?id=2073#c26                                                    // 15885
        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909                                   // 15886
        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451                                   // 15887
                                                                                                                       // 15888
        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =                                    // 15889
            this.$$childTail = this.$root = this.$$watchers = null;                                                    // 15890
      },                                                                                                               // 15891
                                                                                                                       // 15892
      /**                                                                                                              // 15893
       * @ngdoc method                                                                                                 // 15894
       * @name $rootScope.Scope#$eval                                                                                  // 15895
       * @kind function                                                                                                // 15896
       *                                                                                                               // 15897
       * @description                                                                                                  // 15898
       * Executes the `expression` on the current scope and returns the result. Any exceptions in                      // 15899
       * the expression are propagated (uncaught). This is useful when evaluating Angular                              // 15900
       * expressions.                                                                                                  // 15901
       *                                                                                                               // 15902
       * # Example                                                                                                     // 15903
       * ```js                                                                                                         // 15904
           var scope = ng.$rootScope.Scope();                                                                          // 15905
           scope.a = 1;                                                                                                // 15906
           scope.b = 2;                                                                                                // 15907
                                                                                                                       // 15908
           expect(scope.$eval('a+b')).toEqual(3);                                                                      // 15909
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);                               // 15910
       * ```                                                                                                           // 15911
       *                                                                                                               // 15912
       * @param {(string|function())=} expression An angular expression to be executed.                                // 15913
       *                                                                                                               // 15914
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.                    // 15915
       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 15916
       *                                                                                                               // 15917
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 15918
       * @returns {*} The result of evaluating the expression.                                                         // 15919
       */                                                                                                              // 15920
      $eval: function(expr, locals) {                                                                                  // 15921
        return $parse(expr)(this, locals);                                                                             // 15922
      },                                                                                                               // 15923
                                                                                                                       // 15924
      /**                                                                                                              // 15925
       * @ngdoc method                                                                                                 // 15926
       * @name $rootScope.Scope#$evalAsync                                                                             // 15927
       * @kind function                                                                                                // 15928
       *                                                                                                               // 15929
       * @description                                                                                                  // 15930
       * Executes the expression on the current scope at a later point in time.                                        // 15931
       *                                                                                                               // 15932
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only                       // 15933
       * that:                                                                                                         // 15934
       *                                                                                                               // 15935
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM                   // 15936
       *     rendering).                                                                                               // 15937
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after                    // 15938
       *     `expression` execution.                                                                                   // 15939
       *                                                                                                               // 15940
       * Any exceptions from the execution of the expression are forwarded to the                                      // 15941
       * {@link ng.$exceptionHandler $exceptionHandler} service.                                                       // 15942
       *                                                                                                               // 15943
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle                      // 15944
       * will be scheduled. However, it is encouraged to always call code that changes the model                       // 15945
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.                                  // 15946
       *                                                                                                               // 15947
       * @param {(string|function())=} expression An angular expression to be executed.                                // 15948
       *                                                                                                               // 15949
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 15950
       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 15951
       *                                                                                                               // 15952
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 15953
       */                                                                                                              // 15954
      $evalAsync: function(expr, locals) {                                                                             // 15955
        // if we are outside of an $digest loop and this is the first time we are scheduling async                     // 15956
        // task also schedule async auto-flush                                                                         // 15957
        if (!$rootScope.$$phase && !asyncQueue.length) {                                                               // 15958
          $browser.defer(function() {                                                                                  // 15959
            if (asyncQueue.length) {                                                                                   // 15960
              $rootScope.$digest();                                                                                    // 15961
            }                                                                                                          // 15962
          });                                                                                                          // 15963
        }                                                                                                              // 15964
                                                                                                                       // 15965
        asyncQueue.push({scope: this, expression: expr, locals: locals});                                              // 15966
      },                                                                                                               // 15967
                                                                                                                       // 15968
      $$postDigest: function(fn) {                                                                                     // 15969
        postDigestQueue.push(fn);                                                                                      // 15970
      },                                                                                                               // 15971
                                                                                                                       // 15972
      /**                                                                                                              // 15973
       * @ngdoc method                                                                                                 // 15974
       * @name $rootScope.Scope#$apply                                                                                 // 15975
       * @kind function                                                                                                // 15976
       *                                                                                                               // 15977
       * @description                                                                                                  // 15978
       * `$apply()` is used to execute an expression in angular from outside of the angular                            // 15979
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).                   // 15980
       * Because we are calling into the angular framework we need to perform proper scope life                        // 15981
       * cycle of {@link ng.$exceptionHandler exception handling},                                                     // 15982
       * {@link ng.$rootScope.Scope#$digest executing watches}.                                                        // 15983
       *                                                                                                               // 15984
       * ## Life cycle                                                                                                 // 15985
       *                                                                                                               // 15986
       * # Pseudo-Code of `$apply()`                                                                                   // 15987
       * ```js                                                                                                         // 15988
           function $apply(expr) {                                                                                     // 15989
             try {                                                                                                     // 15990
               return $eval(expr);                                                                                     // 15991
             } catch (e) {                                                                                             // 15992
               $exceptionHandler(e);                                                                                   // 15993
             } finally {                                                                                               // 15994
               $root.$digest();                                                                                        // 15995
             }                                                                                                         // 15996
           }                                                                                                           // 15997
       * ```                                                                                                           // 15998
       *                                                                                                               // 15999
       *                                                                                                               // 16000
       * Scope's `$apply()` method transitions through the following stages:                                           // 16001
       *                                                                                                               // 16002
       * 1. The {@link guide/expression expression} is executed using the                                              // 16003
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.                                                          // 16004
       * 2. Any exceptions from the execution of the expression are forwarded to the                                   // 16005
       *    {@link ng.$exceptionHandler $exceptionHandler} service.                                                    // 16006
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the                     // 16007
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.                    // 16008
       *                                                                                                               // 16009
       *                                                                                                               // 16010
       * @param {(string|function())=} exp An angular expression to be executed.                                       // 16011
       *                                                                                                               // 16012
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16013
       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 16014
       *                                                                                                               // 16015
       * @returns {*} The result of evaluating the expression.                                                         // 16016
       */                                                                                                              // 16017
      $apply: function(expr) {                                                                                         // 16018
        try {                                                                                                          // 16019
          beginPhase('$apply');                                                                                        // 16020
          try {                                                                                                        // 16021
            return this.$eval(expr);                                                                                   // 16022
          } finally {                                                                                                  // 16023
            clearPhase();                                                                                              // 16024
          }                                                                                                            // 16025
        } catch (e) {                                                                                                  // 16026
          $exceptionHandler(e);                                                                                        // 16027
        } finally {                                                                                                    // 16028
          try {                                                                                                        // 16029
            $rootScope.$digest();                                                                                      // 16030
          } catch (e) {                                                                                                // 16031
            $exceptionHandler(e);                                                                                      // 16032
            throw e;                                                                                                   // 16033
          }                                                                                                            // 16034
        }                                                                                                              // 16035
      },                                                                                                               // 16036
                                                                                                                       // 16037
      /**                                                                                                              // 16038
       * @ngdoc method                                                                                                 // 16039
       * @name $rootScope.Scope#$applyAsync                                                                            // 16040
       * @kind function                                                                                                // 16041
       *                                                                                                               // 16042
       * @description                                                                                                  // 16043
       * Schedule the invocation of $apply to occur at a later time. The actual time difference                        // 16044
       * varies across browsers, but is typically around ~10 milliseconds.                                             // 16045
       *                                                                                                               // 16046
       * This can be used to queue up multiple expressions which need to be evaluated in the same                      // 16047
       * digest.                                                                                                       // 16048
       *                                                                                                               // 16049
       * @param {(string|function())=} exp An angular expression to be executed.                                       // 16050
       *                                                                                                               // 16051
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16052
       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 16053
       */                                                                                                              // 16054
      $applyAsync: function(expr) {                                                                                    // 16055
        var scope = this;                                                                                              // 16056
        expr && applyAsyncQueue.push($applyAsyncExpression);                                                           // 16057
        scheduleApplyAsync();                                                                                          // 16058
                                                                                                                       // 16059
        function $applyAsyncExpression() {                                                                             // 16060
          scope.$eval(expr);                                                                                           // 16061
        }                                                                                                              // 16062
      },                                                                                                               // 16063
                                                                                                                       // 16064
      /**                                                                                                              // 16065
       * @ngdoc method                                                                                                 // 16066
       * @name $rootScope.Scope#$on                                                                                    // 16067
       * @kind function                                                                                                // 16068
       *                                                                                                               // 16069
       * @description                                                                                                  // 16070
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for                            // 16071
       * discussion of event life cycle.                                                                               // 16072
       *                                                                                                               // 16073
       * The event listener function format is: `function(event, args...)`. The `event` object                         // 16074
       * passed into the listener has the following attributes:                                                        // 16075
       *                                                                                                               // 16076
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or                                 // 16077
       *     `$broadcast`-ed.                                                                                          // 16078
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the                      // 16079
       *     event propagates through the scope hierarchy, this property is set to null.                               // 16080
       *   - `name` - `{string}`: name of the event.                                                                   // 16081
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel                         // 16082
       *     further event propagation (available only for events that were `$emit`-ed).                               // 16083
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag                    // 16084
       *     to true.                                                                                                  // 16085
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.                                    // 16086
       *                                                                                                               // 16087
       * @param {string} name Event name to listen on.                                                                 // 16088
       * @param {function(event, ...args)} listener Function to call when the event is emitted.                        // 16089
       * @returns {function()} Returns a deregistration function for this listener.                                    // 16090
       */                                                                                                              // 16091
      $on: function(name, listener) {                                                                                  // 16092
        var namedListeners = this.$$listeners[name];                                                                   // 16093
        if (!namedListeners) {                                                                                         // 16094
          this.$$listeners[name] = namedListeners = [];                                                                // 16095
        }                                                                                                              // 16096
        namedListeners.push(listener);                                                                                 // 16097
                                                                                                                       // 16098
        var current = this;                                                                                            // 16099
        do {                                                                                                           // 16100
          if (!current.$$listenerCount[name]) {                                                                        // 16101
            current.$$listenerCount[name] = 0;                                                                         // 16102
          }                                                                                                            // 16103
          current.$$listenerCount[name]++;                                                                             // 16104
        } while ((current = current.$parent));                                                                         // 16105
                                                                                                                       // 16106
        var self = this;                                                                                               // 16107
        return function() {                                                                                            // 16108
          var indexOfListener = namedListeners.indexOf(listener);                                                      // 16109
          if (indexOfListener !== -1) {                                                                                // 16110
            namedListeners[indexOfListener] = null;                                                                    // 16111
            decrementListenerCount(self, 1, name);                                                                     // 16112
          }                                                                                                            // 16113
        };                                                                                                             // 16114
      },                                                                                                               // 16115
                                                                                                                       // 16116
                                                                                                                       // 16117
      /**                                                                                                              // 16118
       * @ngdoc method                                                                                                 // 16119
       * @name $rootScope.Scope#$emit                                                                                  // 16120
       * @kind function                                                                                                // 16121
       *                                                                                                               // 16122
       * @description                                                                                                  // 16123
       * Dispatches an event `name` upwards through the scope hierarchy notifying the                                  // 16124
       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16125
       *                                                                                                               // 16126
       * The event life cycle starts at the scope on which `$emit` was called. All                                     // 16127
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16128
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all                         // 16129
       * registered listeners along the way. The event will stop propagating if one of the listeners                   // 16130
       * cancels it.                                                                                                   // 16131
       *                                                                                                               // 16132
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16133
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16134
       *                                                                                                               // 16135
       * @param {string} name Event name to emit.                                                                      // 16136
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16137
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).                                          // 16138
       */                                                                                                              // 16139
      $emit: function(name, args) {                                                                                    // 16140
        var empty = [],                                                                                                // 16141
            namedListeners,                                                                                            // 16142
            scope = this,                                                                                              // 16143
            stopPropagation = false,                                                                                   // 16144
            event = {                                                                                                  // 16145
              name: name,                                                                                              // 16146
              targetScope: scope,                                                                                      // 16147
              stopPropagation: function() {stopPropagation = true;},                                                   // 16148
              preventDefault: function() {                                                                             // 16149
                event.defaultPrevented = true;                                                                         // 16150
              },                                                                                                       // 16151
              defaultPrevented: false                                                                                  // 16152
            },                                                                                                         // 16153
            listenerArgs = concat([event], arguments, 1),                                                              // 16154
            i, length;                                                                                                 // 16155
                                                                                                                       // 16156
        do {                                                                                                           // 16157
          namedListeners = scope.$$listeners[name] || empty;                                                           // 16158
          event.currentScope = scope;                                                                                  // 16159
          for (i = 0, length = namedListeners.length; i < length; i++) {                                               // 16160
                                                                                                                       // 16161
            // if listeners were deregistered, defragment the array                                                    // 16162
            if (!namedListeners[i]) {                                                                                  // 16163
              namedListeners.splice(i, 1);                                                                             // 16164
              i--;                                                                                                     // 16165
              length--;                                                                                                // 16166
              continue;                                                                                                // 16167
            }                                                                                                          // 16168
            try {                                                                                                      // 16169
              //allow all listeners attached to the current scope to run                                               // 16170
              namedListeners[i].apply(null, listenerArgs);                                                             // 16171
            } catch (e) {                                                                                              // 16172
              $exceptionHandler(e);                                                                                    // 16173
            }                                                                                                          // 16174
          }                                                                                                            // 16175
          //if any listener on the current scope stops propagation, prevent bubbling                                   // 16176
          if (stopPropagation) {                                                                                       // 16177
            event.currentScope = null;                                                                                 // 16178
            return event;                                                                                              // 16179
          }                                                                                                            // 16180
          //traverse upwards                                                                                           // 16181
          scope = scope.$parent;                                                                                       // 16182
        } while (scope);                                                                                               // 16183
                                                                                                                       // 16184
        event.currentScope = null;                                                                                     // 16185
                                                                                                                       // 16186
        return event;                                                                                                  // 16187
      },                                                                                                               // 16188
                                                                                                                       // 16189
                                                                                                                       // 16190
      /**                                                                                                              // 16191
       * @ngdoc method                                                                                                 // 16192
       * @name $rootScope.Scope#$broadcast                                                                             // 16193
       * @kind function                                                                                                // 16194
       *                                                                                                               // 16195
       * @description                                                                                                  // 16196
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the                   // 16197
       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16198
       *                                                                                                               // 16199
       * The event life cycle starts at the scope on which `$broadcast` was called. All                                // 16200
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16201
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current                   // 16202
       * scope and calls all registered listeners along the way. The event cannot be canceled.                         // 16203
       *                                                                                                               // 16204
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16205
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16206
       *                                                                                                               // 16207
       * @param {string} name Event name to broadcast.                                                                 // 16208
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16209
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}                                            // 16210
       */                                                                                                              // 16211
      $broadcast: function(name, args) {                                                                               // 16212
        var target = this,                                                                                             // 16213
            current = target,                                                                                          // 16214
            next = target,                                                                                             // 16215
            event = {                                                                                                  // 16216
              name: name,                                                                                              // 16217
              targetScope: target,                                                                                     // 16218
              preventDefault: function() {                                                                             // 16219
                event.defaultPrevented = true;                                                                         // 16220
              },                                                                                                       // 16221
              defaultPrevented: false                                                                                  // 16222
            };                                                                                                         // 16223
                                                                                                                       // 16224
        if (!target.$$listenerCount[name]) return event;                                                               // 16225
                                                                                                                       // 16226
        var listenerArgs = concat([event], arguments, 1),                                                              // 16227
            listeners, i, length;                                                                                      // 16228
                                                                                                                       // 16229
        //down while you can, then up and next sibling or up and next sibling until back at root                       // 16230
        while ((current = next)) {                                                                                     // 16231
          event.currentScope = current;                                                                                // 16232
          listeners = current.$$listeners[name] || [];                                                                 // 16233
          for (i = 0, length = listeners.length; i < length; i++) {                                                    // 16234
            // if listeners were deregistered, defragment the array                                                    // 16235
            if (!listeners[i]) {                                                                                       // 16236
              listeners.splice(i, 1);                                                                                  // 16237
              i--;                                                                                                     // 16238
              length--;                                                                                                // 16239
              continue;                                                                                                // 16240
            }                                                                                                          // 16241
                                                                                                                       // 16242
            try {                                                                                                      // 16243
              listeners[i].apply(null, listenerArgs);                                                                  // 16244
            } catch (e) {                                                                                              // 16245
              $exceptionHandler(e);                                                                                    // 16246
            }                                                                                                          // 16247
          }                                                                                                            // 16248
                                                                                                                       // 16249
          // Insanity Warning: scope depth-first traversal                                                             // 16250
          // yes, this code is a bit crazy, but it works and we have tests to prove it!                                // 16251
          // this piece should be kept in sync with the traversal in $digest                                           // 16252
          // (though it differs due to having the extra check for $$listenerCount)                                     // 16253
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||                                      // 16254
              (current !== target && current.$$nextSibling)))) {                                                       // 16255
            while (current !== target && !(next = current.$$nextSibling)) {                                            // 16256
              current = current.$parent;                                                                               // 16257
            }                                                                                                          // 16258
          }                                                                                                            // 16259
        }                                                                                                              // 16260
                                                                                                                       // 16261
        event.currentScope = null;                                                                                     // 16262
        return event;                                                                                                  // 16263
      }                                                                                                                // 16264
    };                                                                                                                 // 16265
                                                                                                                       // 16266
    var $rootScope = new Scope();                                                                                      // 16267
                                                                                                                       // 16268
    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.                               // 16269
    var asyncQueue = $rootScope.$$asyncQueue = [];                                                                     // 16270
    var postDigestQueue = $rootScope.$$postDigestQueue = [];                                                           // 16271
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];                                                           // 16272
                                                                                                                       // 16273
    return $rootScope;                                                                                                 // 16274
                                                                                                                       // 16275
                                                                                                                       // 16276
    function beginPhase(phase) {                                                                                       // 16277
      if ($rootScope.$$phase) {                                                                                        // 16278
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);                               // 16279
      }                                                                                                                // 16280
                                                                                                                       // 16281
      $rootScope.$$phase = phase;                                                                                      // 16282
    }                                                                                                                  // 16283
                                                                                                                       // 16284
    function clearPhase() {                                                                                            // 16285
      $rootScope.$$phase = null;                                                                                       // 16286
    }                                                                                                                  // 16287
                                                                                                                       // 16288
    function incrementWatchersCount(current, count) {                                                                  // 16289
      do {                                                                                                             // 16290
        current.$$watchersCount += count;                                                                              // 16291
      } while ((current = current.$parent));                                                                           // 16292
    }                                                                                                                  // 16293
                                                                                                                       // 16294
    function decrementListenerCount(current, count, name) {                                                            // 16295
      do {                                                                                                             // 16296
        current.$$listenerCount[name] -= count;                                                                        // 16297
                                                                                                                       // 16298
        if (current.$$listenerCount[name] === 0) {                                                                     // 16299
          delete current.$$listenerCount[name];                                                                        // 16300
        }                                                                                                              // 16301
      } while ((current = current.$parent));                                                                           // 16302
    }                                                                                                                  // 16303
                                                                                                                       // 16304
    /**                                                                                                                // 16305
     * function used as an initial value for watchers.                                                                 // 16306
     * because it's unique we can easily tell it apart from other values                                               // 16307
     */                                                                                                                // 16308
    function initWatchVal() {}                                                                                         // 16309
                                                                                                                       // 16310
    function flushApplyAsync() {                                                                                       // 16311
      while (applyAsyncQueue.length) {                                                                                 // 16312
        try {                                                                                                          // 16313
          applyAsyncQueue.shift()();                                                                                   // 16314
        } catch (e) {                                                                                                  // 16315
          $exceptionHandler(e);                                                                                        // 16316
        }                                                                                                              // 16317
      }                                                                                                                // 16318
      applyAsyncId = null;                                                                                             // 16319
    }                                                                                                                  // 16320
                                                                                                                       // 16321
    function scheduleApplyAsync() {                                                                                    // 16322
      if (applyAsyncId === null) {                                                                                     // 16323
        applyAsyncId = $browser.defer(function() {                                                                     // 16324
          $rootScope.$apply(flushApplyAsync);                                                                          // 16325
        });                                                                                                            // 16326
      }                                                                                                                // 16327
    }                                                                                                                  // 16328
  }];                                                                                                                  // 16329
}                                                                                                                      // 16330
                                                                                                                       // 16331
/**                                                                                                                    // 16332
 * @description                                                                                                        // 16333
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.                              // 16334
 */                                                                                                                    // 16335
function $$SanitizeUriProvider() {                                                                                     // 16336
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,                                                // 16337
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;                                        // 16338
                                                                                                                       // 16339
  /**                                                                                                                  // 16340
   * @description                                                                                                      // 16341
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16342
   * urls during a[href] sanitization.                                                                                 // 16343
   *                                                                                                                   // 16344
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16345
   *                                                                                                                   // 16346
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 16347
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 16348
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16349
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16350
   *                                                                                                                   // 16351
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16352
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16353
   *    chaining otherwise.                                                                                            // 16354
   */                                                                                                                  // 16355
  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 16356
    if (isDefined(regexp)) {                                                                                           // 16357
      aHrefSanitizationWhitelist = regexp;                                                                             // 16358
      return this;                                                                                                     // 16359
    }                                                                                                                  // 16360
    return aHrefSanitizationWhitelist;                                                                                 // 16361
  };                                                                                                                   // 16362
                                                                                                                       // 16363
                                                                                                                       // 16364
  /**                                                                                                                  // 16365
   * @description                                                                                                      // 16366
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16367
   * urls during img[src] sanitization.                                                                                // 16368
   *                                                                                                                   // 16369
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16370
   *                                                                                                                   // 16371
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 16372
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 16373
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16374
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16375
   *                                                                                                                   // 16376
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16377
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16378
   *    chaining otherwise.                                                                                            // 16379
   */                                                                                                                  // 16380
  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 16381
    if (isDefined(regexp)) {                                                                                           // 16382
      imgSrcSanitizationWhitelist = regexp;                                                                            // 16383
      return this;                                                                                                     // 16384
    }                                                                                                                  // 16385
    return imgSrcSanitizationWhitelist;                                                                                // 16386
  };                                                                                                                   // 16387
                                                                                                                       // 16388
  this.$get = function() {                                                                                             // 16389
    return function sanitizeUri(uri, isImage) {                                                                        // 16390
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;                                  // 16391
      var normalizedVal;                                                                                               // 16392
      normalizedVal = urlResolve(uri).href;                                                                            // 16393
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {                                                       // 16394
        return 'unsafe:' + normalizedVal;                                                                              // 16395
      }                                                                                                                // 16396
      return uri;                                                                                                      // 16397
    };                                                                                                                 // 16398
  };                                                                                                                   // 16399
}                                                                                                                      // 16400
                                                                                                                       // 16401
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 16402
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 16403
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 16404
 *          An approval from 2 Core members with history of modifying      *                                           // 16405
 *                         this file is required.                          *                                           // 16406
 *                                                                         *                                           // 16407
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 16408
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 16409
 *     Or gives undesired access to variables likes document or window?    *                                           // 16410
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 16411
                                                                                                                       // 16412
var $sceMinErr = minErr('$sce');                                                                                       // 16413
                                                                                                                       // 16414
var SCE_CONTEXTS = {                                                                                                   // 16415
  HTML: 'html',                                                                                                        // 16416
  CSS: 'css',                                                                                                          // 16417
  URL: 'url',                                                                                                          // 16418
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a                   // 16419
  // url.  (e.g. ng-include, script src, templateUrl)                                                                  // 16420
  RESOURCE_URL: 'resourceUrl',                                                                                         // 16421
  JS: 'js'                                                                                                             // 16422
};                                                                                                                     // 16423
                                                                                                                       // 16424
// Helper functions follow.                                                                                            // 16425
                                                                                                                       // 16426
function adjustMatcher(matcher) {                                                                                      // 16427
  if (matcher === 'self') {                                                                                            // 16428
    return matcher;                                                                                                    // 16429
  } else if (isString(matcher)) {                                                                                      // 16430
    // Strings match exactly except for 2 wildcards - '*' and '**'.                                                    // 16431
    // '*' matches any character except those from the set ':/.?&'.                                                    // 16432
    // '**' matches any character (like .* in a RegExp).                                                               // 16433
    // More than 2 *'s raises an error as it's ill defined.                                                            // 16434
    if (matcher.indexOf('***') > -1) {                                                                                 // 16435
      throw $sceMinErr('iwcard',                                                                                       // 16436
          'Illegal sequence *** in string matcher.  String: {0}', matcher);                                            // 16437
    }                                                                                                                  // 16438
    matcher = escapeForRegexp(matcher).                                                                                // 16439
                  replace('\\*\\*', '.*').                                                                             // 16440
                  replace('\\*', '[^:/.?&;]*');                                                                        // 16441
    return new RegExp('^' + matcher + '$');                                                                            // 16442
  } else if (isRegExp(matcher)) {                                                                                      // 16443
    // The only other type of matcher allowed is a Regexp.                                                             // 16444
    // Match entire URL / disallow partial matches.                                                                    // 16445
    // Flags are reset (i.e. no global, ignoreCase or multiline)                                                       // 16446
    return new RegExp('^' + matcher.source + '$');                                                                     // 16447
  } else {                                                                                                             // 16448
    throw $sceMinErr('imatcher',                                                                                       // 16449
        'Matchers may only be "self", string patterns or RegExp objects');                                             // 16450
  }                                                                                                                    // 16451
}                                                                                                                      // 16452
                                                                                                                       // 16453
                                                                                                                       // 16454
function adjustMatchers(matchers) {                                                                                    // 16455
  var adjustedMatchers = [];                                                                                           // 16456
  if (isDefined(matchers)) {                                                                                           // 16457
    forEach(matchers, function(matcher) {                                                                              // 16458
      adjustedMatchers.push(adjustMatcher(matcher));                                                                   // 16459
    });                                                                                                                // 16460
  }                                                                                                                    // 16461
  return adjustedMatchers;                                                                                             // 16462
}                                                                                                                      // 16463
                                                                                                                       // 16464
                                                                                                                       // 16465
/**                                                                                                                    // 16466
 * @ngdoc service                                                                                                      // 16467
 * @name $sceDelegate                                                                                                  // 16468
 * @kind function                                                                                                      // 16469
 *                                                                                                                     // 16470
 * @description                                                                                                        // 16471
 *                                                                                                                     // 16472
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict                     // 16473
 * Contextual Escaping (SCE)} services to AngularJS.                                                                   // 16474
 *                                                                                                                     // 16475
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of                      // 16476
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is                     // 16477
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to                        // 16478
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things                         // 16479
 * work because `$sce` delegates to `$sceDelegate` for these operations.                                               // 16480
 *                                                                                                                     // 16481
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.                               // 16482
 *                                                                                                                     // 16483
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you                      // 16484
 * can override it completely to change the behavior of `$sce`, the common case would                                  // 16485
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting                     // 16486
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as                   // 16487
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist                                               // 16488
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link                                                               // 16489
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                             // 16490
 */                                                                                                                    // 16491
                                                                                                                       // 16492
/**                                                                                                                    // 16493
 * @ngdoc provider                                                                                                     // 16494
 * @name $sceDelegateProvider                                                                                          // 16495
 * @description                                                                                                        // 16496
 *                                                                                                                     // 16497
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate                       // 16498
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure                     // 16499
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link                                           // 16500
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and                         // 16501
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                      // 16502
 *                                                                                                                     // 16503
 * For the general details about this service in Angular, read the main page for {@link ng.$sce                        // 16504
 * Strict Contextual Escaping (SCE)}.                                                                                  // 16505
 *                                                                                                                     // 16506
 * **Example**:  Consider the following case. <a name="example"></a>                                                   // 16507
 *                                                                                                                     // 16508
 * - your app is hosted at url `http://myapp.example.com/`                                                             // 16509
 * - but some of your templates are hosted on other domains you control such as                                        // 16510
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.                                     // 16511
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.                                        // 16512
 *                                                                                                                     // 16513
 * Here is what a secure configuration for this scenario might look like:                                              // 16514
 *                                                                                                                     // 16515
 * ```                                                                                                                 // 16516
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {                                                // 16517
 *    $sceDelegateProvider.resourceUrlWhitelist([                                                                      // 16518
 *      // Allow same origin resource loads.                                                                           // 16519
 *      'self',                                                                                                        // 16520
 *      // Allow loading from our assets domain.  Notice the difference between * and **.                              // 16521
 *      'http://srv*.assets.example.com/**'                                                                            // 16522
 *    ]);                                                                                                              // 16523
 *                                                                                                                     // 16524
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.                                   // 16525
 *    $sceDelegateProvider.resourceUrlBlacklist([                                                                      // 16526
 *      'http://myapp.example.com/clickThru**'                                                                         // 16527
 *    ]);                                                                                                              // 16528
 *  });                                                                                                                // 16529
 * ```                                                                                                                 // 16530
 */                                                                                                                    // 16531
                                                                                                                       // 16532
function $SceDelegateProvider() {                                                                                      // 16533
  this.SCE_CONTEXTS = SCE_CONTEXTS;                                                                                    // 16534
                                                                                                                       // 16535
  // Resource URLs can also be trusted by policy.                                                                      // 16536
  var resourceUrlWhitelist = ['self'],                                                                                 // 16537
      resourceUrlBlacklist = [];                                                                                       // 16538
                                                                                                                       // 16539
  /**                                                                                                                  // 16540
   * @ngdoc method                                                                                                     // 16541
   * @name $sceDelegateProvider#resourceUrlWhitelist                                                                   // 16542
   * @kind function                                                                                                    // 16543
   *                                                                                                                   // 16544
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value                         // 16545
   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16546
   *     changes to the array are ignored.                                                                             // 16547
   *                                                                                                                   // 16548
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16549
   *     allowed in this array.                                                                                        // 16550
   *                                                                                                                   // 16551
   *     Note: **an empty whitelist array will block all URLs**!                                                       // 16552
   *                                                                                                                   // 16553
   * @return {Array} the currently set whitelist array.                                                                // 16554
   *                                                                                                                   // 16555
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only                       // 16556
   * same origin resource requests.                                                                                    // 16557
   *                                                                                                                   // 16558
   * @description                                                                                                      // 16559
   * Sets/Gets the whitelist of trusted resource URLs.                                                                 // 16560
   */                                                                                                                  // 16561
  this.resourceUrlWhitelist = function(value) {                                                                        // 16562
    if (arguments.length) {                                                                                            // 16563
      resourceUrlWhitelist = adjustMatchers(value);                                                                    // 16564
    }                                                                                                                  // 16565
    return resourceUrlWhitelist;                                                                                       // 16566
  };                                                                                                                   // 16567
                                                                                                                       // 16568
  /**                                                                                                                  // 16569
   * @ngdoc method                                                                                                     // 16570
   * @name $sceDelegateProvider#resourceUrlBlacklist                                                                   // 16571
   * @kind function                                                                                                    // 16572
   *                                                                                                                   // 16573
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value                         // 16574
   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16575
   *     changes to the array are ignored.                                                                             // 16576
   *                                                                                                                   // 16577
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16578
   *     allowed in this array.                                                                                        // 16579
   *                                                                                                                   // 16580
   *     The typical usage for the blacklist is to **block                                                             // 16581
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as                   // 16582
   *     these would otherwise be trusted but actually return content from the redirected domain.                      // 16583
   *                                                                                                                   // 16584
   *     Finally, **the blacklist overrides the whitelist** and has the final say.                                     // 16585
   *                                                                                                                   // 16586
   * @return {Array} the currently set blacklist array.                                                                // 16587
   *                                                                                                                   // 16588
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there                    // 16589
   * is no blacklist.)                                                                                                 // 16590
   *                                                                                                                   // 16591
   * @description                                                                                                      // 16592
   * Sets/Gets the blacklist of trusted resource URLs.                                                                 // 16593
   */                                                                                                                  // 16594
                                                                                                                       // 16595
  this.resourceUrlBlacklist = function(value) {                                                                        // 16596
    if (arguments.length) {                                                                                            // 16597
      resourceUrlBlacklist = adjustMatchers(value);                                                                    // 16598
    }                                                                                                                  // 16599
    return resourceUrlBlacklist;                                                                                       // 16600
  };                                                                                                                   // 16601
                                                                                                                       // 16602
  this.$get = ['$injector', function($injector) {                                                                      // 16603
                                                                                                                       // 16604
    var htmlSanitizer = function htmlSanitizer(html) {                                                                 // 16605
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16606
    };                                                                                                                 // 16607
                                                                                                                       // 16608
    if ($injector.has('$sanitize')) {                                                                                  // 16609
      htmlSanitizer = $injector.get('$sanitize');                                                                      // 16610
    }                                                                                                                  // 16611
                                                                                                                       // 16612
                                                                                                                       // 16613
    function matchUrl(matcher, parsedUrl) {                                                                            // 16614
      if (matcher === 'self') {                                                                                        // 16615
        return urlIsSameOrigin(parsedUrl);                                                                             // 16616
      } else {                                                                                                         // 16617
        // definitely a regex.  See adjustMatchers()                                                                   // 16618
        return !!matcher.exec(parsedUrl.href);                                                                         // 16619
      }                                                                                                                // 16620
    }                                                                                                                  // 16621
                                                                                                                       // 16622
    function isResourceUrlAllowedByPolicy(url) {                                                                       // 16623
      var parsedUrl = urlResolve(url.toString());                                                                      // 16624
      var i, n, allowed = false;                                                                                       // 16625
      // Ensure that at least one item from the whitelist allows this url.                                             // 16626
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {                                                       // 16627
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {                                                            // 16628
          allowed = true;                                                                                              // 16629
          break;                                                                                                       // 16630
        }                                                                                                              // 16631
      }                                                                                                                // 16632
      if (allowed) {                                                                                                   // 16633
        // Ensure that no item from the blacklist blocked this url.                                                    // 16634
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {                                                     // 16635
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {                                                          // 16636
            allowed = false;                                                                                           // 16637
            break;                                                                                                     // 16638
          }                                                                                                            // 16639
        }                                                                                                              // 16640
      }                                                                                                                // 16641
      return allowed;                                                                                                  // 16642
    }                                                                                                                  // 16643
                                                                                                                       // 16644
    function generateHolderType(Base) {                                                                                // 16645
      var holderType = function TrustedValueHolderType(trustedValue) {                                                 // 16646
        this.$$unwrapTrustedValue = function() {                                                                       // 16647
          return trustedValue;                                                                                         // 16648
        };                                                                                                             // 16649
      };                                                                                                               // 16650
      if (Base) {                                                                                                      // 16651
        holderType.prototype = new Base();                                                                             // 16652
      }                                                                                                                // 16653
      holderType.prototype.valueOf = function sceValueOf() {                                                           // 16654
        return this.$$unwrapTrustedValue();                                                                            // 16655
      };                                                                                                               // 16656
      holderType.prototype.toString = function sceToString() {                                                         // 16657
        return this.$$unwrapTrustedValue().toString();                                                                 // 16658
      };                                                                                                               // 16659
      return holderType;                                                                                               // 16660
    }                                                                                                                  // 16661
                                                                                                                       // 16662
    var trustedValueHolderBase = generateHolderType(),                                                                 // 16663
        byType = {};                                                                                                   // 16664
                                                                                                                       // 16665
    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);                                            // 16666
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);                                             // 16667
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);                                             // 16668
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);                                              // 16669
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);                                  // 16670
                                                                                                                       // 16671
    /**                                                                                                                // 16672
     * @ngdoc method                                                                                                   // 16673
     * @name $sceDelegate#trustAs                                                                                      // 16674
     *                                                                                                                 // 16675
     * @description                                                                                                    // 16676
     * Returns an object that is trusted by angular for use in specified strict                                        // 16677
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src                                         // 16678
     * attribute interpolation, any dom event binding attribute interpolation                                          // 16679
     * such as for onclick,  etc.) that uses the provided value.                                                       // 16680
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.                                               // 16681
     *                                                                                                                 // 16682
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 16683
     *   resourceUrl, html, js and css.                                                                                // 16684
     * @param {*} value The value that that should be considered trusted/safe.                                         // 16685
     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 16686
     * where Angular expects a $sce.trustAs() return value.                                                            // 16687
     */                                                                                                                // 16688
    function trustAs(type, trustedValue) {                                                                             // 16689
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16690
      if (!Constructor) {                                                                                              // 16691
        throw $sceMinErr('icontext',                                                                                   // 16692
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',                                 // 16693
            type, trustedValue);                                                                                       // 16694
      }                                                                                                                // 16695
      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {                                 // 16696
        return trustedValue;                                                                                           // 16697
      }                                                                                                                // 16698
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting                    // 16699
      // mutable objects, we ensure here that the value passed in is actually a string.                                // 16700
      if (typeof trustedValue !== 'string') {                                                                          // 16701
        throw $sceMinErr('itype',                                                                                      // 16702
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',                     // 16703
            type);                                                                                                     // 16704
      }                                                                                                                // 16705
      return new Constructor(trustedValue);                                                                            // 16706
    }                                                                                                                  // 16707
                                                                                                                       // 16708
    /**                                                                                                                // 16709
     * @ngdoc method                                                                                                   // 16710
     * @name $sceDelegate#valueOf                                                                                      // 16711
     *                                                                                                                 // 16712
     * @description                                                                                                    // 16713
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs                     // 16714
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link                                       // 16715
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.                                                                // 16716
     *                                                                                                                 // 16717
     * If the passed parameter is not a value that had been returned by {@link                                         // 16718
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.                                              // 16719
     *                                                                                                                 // 16720
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}                   // 16721
     *      call or anything else.                                                                                     // 16722
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs                         // 16723
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns                        // 16724
     *     `value` unchanged.                                                                                          // 16725
     */                                                                                                                // 16726
    function valueOf(maybeTrusted) {                                                                                   // 16727
      if (maybeTrusted instanceof trustedValueHolderBase) {                                                            // 16728
        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16729
      } else {                                                                                                         // 16730
        return maybeTrusted;                                                                                           // 16731
      }                                                                                                                // 16732
    }                                                                                                                  // 16733
                                                                                                                       // 16734
    /**                                                                                                                // 16735
     * @ngdoc method                                                                                                   // 16736
     * @name $sceDelegate#getTrusted                                                                                   // 16737
     *                                                                                                                 // 16738
     * @description                                                                                                    // 16739
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and                           // 16740
     * returns the originally supplied value if the queried context type is a supertype of the                         // 16741
     * created type.  If this condition isn't satisfied, throws an exception.                                          // 16742
     *                                                                                                                 // 16743
     * @param {string} type The kind of context in which this value is to be used.                                     // 16744
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs                                    // 16745
     *     `$sceDelegate.trustAs`} call.                                                                               // 16746
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs                            // 16747
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.                          // 16748
     */                                                                                                                // 16749
    function getTrusted(type, maybeTrusted) {                                                                          // 16750
      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {                                 // 16751
        return maybeTrusted;                                                                                           // 16752
      }                                                                                                                // 16753
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16754
      if (constructor && maybeTrusted instanceof constructor) {                                                        // 16755
        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16756
      }                                                                                                                // 16757
      // If we get here, then we may only take one of two actions.                                                     // 16758
      // 1. sanitize the value for the requested type, or                                                              // 16759
      // 2. throw an exception.                                                                                        // 16760
      if (type === SCE_CONTEXTS.RESOURCE_URL) {                                                                        // 16761
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {                                                              // 16762
          return maybeTrusted;                                                                                         // 16763
        } else {                                                                                                       // 16764
          throw $sceMinErr('insecurl',                                                                                 // 16765
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',                       // 16766
              maybeTrusted.toString());                                                                                // 16767
        }                                                                                                              // 16768
      } else if (type === SCE_CONTEXTS.HTML) {                                                                         // 16769
        return htmlSanitizer(maybeTrusted);                                                                            // 16770
      }                                                                                                                // 16771
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16772
    }                                                                                                                  // 16773
                                                                                                                       // 16774
    return { trustAs: trustAs,                                                                                         // 16775
             getTrusted: getTrusted,                                                                                   // 16776
             valueOf: valueOf };                                                                                       // 16777
  }];                                                                                                                  // 16778
}                                                                                                                      // 16779
                                                                                                                       // 16780
                                                                                                                       // 16781
/**                                                                                                                    // 16782
 * @ngdoc provider                                                                                                     // 16783
 * @name $sceProvider                                                                                                  // 16784
 * @description                                                                                                        // 16785
 *                                                                                                                     // 16786
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.                          // 16787
 * -   enable/disable Strict Contextual Escaping (SCE) in a module                                                     // 16788
 * -   override the default implementation with a custom delegate                                                      // 16789
 *                                                                                                                     // 16790
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.                                                   // 16791
 */                                                                                                                    // 16792
                                                                                                                       // 16793
/* jshint maxlen: false*/                                                                                              // 16794
                                                                                                                       // 16795
/**                                                                                                                    // 16796
 * @ngdoc service                                                                                                      // 16797
 * @name $sce                                                                                                          // 16798
 * @kind function                                                                                                      // 16799
 *                                                                                                                     // 16800
 * @description                                                                                                        // 16801
 *                                                                                                                     // 16802
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.                                 // 16803
 *                                                                                                                     // 16804
 * # Strict Contextual Escaping                                                                                        // 16805
 *                                                                                                                     // 16806
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain                          // 16807
 * contexts to result in a value that is marked as safe to use for that context.  One example of                       // 16808
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer                       // 16809
 * to these contexts as privileged or SCE contexts.                                                                    // 16810
 *                                                                                                                     // 16811
 * As of version 1.2, Angular ships with SCE enabled by default.                                                       // 16812
 *                                                                                                                     // 16813
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow                // 16814
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer                                   // 16815
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.                   // 16816
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`                   // 16817
 * to the top of your HTML document.                                                                                   // 16818
 *                                                                                                                     // 16819
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for                         // 16820
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.                                              // 16821
 *                                                                                                                     // 16822
 * Here's an example of a binding in a privileged context:                                                             // 16823
 *                                                                                                                     // 16824
 * ```                                                                                                                 // 16825
 * <input ng-model="userHtml" aria-label="User input">                                                                 // 16826
 * <div ng-bind-html="userHtml"></div>                                                                                 // 16827
 * ```                                                                                                                 // 16828
 *                                                                                                                     // 16829
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE                                 // 16830
 * disabled, this application allows the user to render arbitrary HTML into the DIV.                                   // 16831
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via                            // 16832
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates                     // 16833
 * security vulnerabilities.)                                                                                          // 16834
 *                                                                                                                     // 16835
 * For the case of HTML, you might use a library, either on the client side, or on the server side,                    // 16836
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.                               // 16837
 *                                                                                                                     // 16838
 * How would you ensure that every place that used these types of bindings was bound to a value that                   // 16839
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you                      // 16840
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some                       // 16841
 * properties/fields and forgot to update the binding to the sanitized value?                                          // 16842
 *                                                                                                                     // 16843
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can                    // 16844
 * determine that something explicitly says it's safe to use a value for binding in that                               // 16845
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done                    // 16846
 * for those values that you can easily tell are safe - because they were received from your server,                   // 16847
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps                         // 16848
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API                         // 16849
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.                   // 16850
 *                                                                                                                     // 16851
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}                                // 16852
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to                               // 16853
 * obtain values that will be accepted by SCE / privileged contexts.                                                   // 16854
 *                                                                                                                     // 16855
 *                                                                                                                     // 16856
 * ## How does it work?                                                                                                // 16857
 *                                                                                                                     // 16858
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted                    // 16859
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link                          // 16860
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the                  // 16861
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.                              // 16862
 *                                                                                                                     // 16863
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link                                               // 16864
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly                        // 16865
 * simplified):                                                                                                        // 16866
 *                                                                                                                     // 16867
 * ```                                                                                                                 // 16868
 * var ngBindHtmlDirective = ['$sce', function($sce) {                                                                 // 16869
 *   return function(scope, element, attr) {                                                                           // 16870
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {                                               // 16871
 *       element.html(value || '');                                                                                    // 16872
 *     });                                                                                                             // 16873
 *   };                                                                                                                // 16874
 * }];                                                                                                                 // 16875
 * ```                                                                                                                 // 16876
 *                                                                                                                     // 16877
 * ## Impact on loading templates                                                                                      // 16878
 *                                                                                                                     // 16879
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as                           // 16880
 * `templateUrl`'s specified by {@link guide/directive directives}.                                                    // 16881
 *                                                                                                                     // 16882
 * By default, Angular only loads templates from the same domain and protocol as the application                       // 16883
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl                                             // 16884
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or                       // 16885
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist                      // 16886
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.                                           // 16887
 *                                                                                                                     // 16888
 * *Please note*:                                                                                                      // 16889
 * The browser's                                                                                                       // 16890
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 16891
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 16892
 * policy apply in addition to this and may further restrict whether the template is successfully                      // 16893
 * loaded.  This means that without the right CORS policy, loading templates from a different domain                   // 16894
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some                       // 16895
 * browsers.                                                                                                           // 16896
 *                                                                                                                     // 16897
 * ## This feels like too much overhead                                                                                // 16898
 *                                                                                                                     // 16899
 * It's important to remember that SCE only applies to interpolation expressions.                                      // 16900
 *                                                                                                                     // 16901
 * If your expressions are constant literals, they're automatically trusted and you don't need to                      // 16902
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.                                     // 16903
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.                                               // 16904
 *                                                                                                                     // 16905
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them                       // 16906
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.                                  // 16907
 *                                                                                                                     // 16908
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load                     // 16909
 * templates in `ng-include` from your application's domain without having to even know about SCE.                     // 16910
 * It blocks loading templates from other domains or loading templates over http from an https                         // 16911
 * served document.  You can change these by setting your own custom {@link                                            // 16912
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link                                                 // 16913
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.                                    // 16914
 *                                                                                                                     // 16915
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an                    // 16916
 * application that's secure and can be audited to verify that with much more ease than bolting                        // 16917
 * security onto an application later.                                                                                 // 16918
 *                                                                                                                     // 16919
 * <a name="contexts"></a>                                                                                             // 16920
 * ## What trusted context types are supported?                                                                        // 16921
 *                                                                                                                     // 16922
 * | Context             | Notes          |                                                                            // 16923
 * |---------------------|----------------|                                                                            // 16924
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *                                                                                                                     // 16930
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *                                                                                                                     // 16932
 *  Each element in these arrays must be one of the following:                                                         // 16933
 *                                                                                                                     // 16934
 *  - **'self'**                                                                                                       // 16935
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same                          // 16936
 *      domain** as the application document using the **same protocol**.                                              // 16937
 *  - **String** (except the special value `'self'`)                                                                   // 16938
 *    - The string is matched against the full *normalized / absolute URL* of the resource                             // 16939
 *      being tested (substring matches are not good enough.)                                                          // 16940
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters                             // 16941
 *      match themselves.                                                                                              // 16942
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6                       // 16943
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use                       // 16944
 *      in a whitelist.                                                                                                // 16945
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not                                  // 16946
 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.                               // 16947
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might                        // 16948
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.                             // 16949
 *      http://foo.example.com/templates/**).                                                                          // 16950
 *  - **RegExp** (*see caveat below*)                                                                                  // 16951
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax                   // 16952
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to                               // 16953
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should                   // 16954
 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a                      // 16955
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a                        // 16956
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It                     // 16957
 *      is highly recommended to use the string patterns and only fall back to regular expressions                     // 16958
 *      as a last resort.                                                                                              // 16959
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is                               // 16960
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested                        // 16961
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags                             // 16962
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.                                     // 16963
 *    - If you are generating your JavaScript from some other templating engine (not                                   // 16964
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),                        // 16965
 *      remember to escape your regular expression (and be aware that you might need more than                         // 16966
 *      one level of escaping depending on your templating engine and the way you interpolated                         // 16967
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good                             // 16968
 *      enough before coding your own.  E.g. Ruby has                                                                  // 16969
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)                           // 16970
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).                                  // 16971
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google                              // 16972
 *      Closure library's [goog.string.regExpEscape(s)](                                                               // 16973
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).             // 16974
 *                                                                                                                     // 16975
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.                                          // 16976
 *                                                                                                                     // 16977
 * ## Show me an example using SCE.                                                                                    // 16978
 *                                                                                                                     // 16979
 * <example module="mySceApp" deps="angular-sanitize.js">                                                              // 16980
 * <file name="index.html">                                                                                            // 16981
 *   <div ng-controller="AppController as myCtrl">                                                                     // 16982
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>                          // 16983
 *     <b>User comments</b><br>                                                                                        // 16984
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when                         // 16985
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an                   // 16986
 *     exploit.                                                                                                        // 16987
 *     <div class="well">                                                                                              // 16988
 *       <div ng-repeat="userComment in myCtrl.userComments">                                                          // 16989
 *         <b>{{userComment.name}}</b>:                                                                                // 16990
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>                                    // 16991
 *         <br>                                                                                                        // 16992
 *       </div>                                                                                                        // 16993
 *     </div>                                                                                                          // 16994
 *   </div>                                                                                                            // 16995
 * </file>                                                                                                             // 16996
 *                                                                                                                     // 16997
 * <file name="script.js">                                                                                             // 16998
 *   angular.module('mySceApp', ['ngSanitize'])                                                                        // 16999
 *     .controller('AppController', ['$http', '$templateCache', '$sce',                                                // 17000
 *       function($http, $templateCache, $sce) {                                                                       // 17001
 *         var self = this;                                                                                            // 17002
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {                       // 17003
 *           self.userComments = userComments;                                                                         // 17004
 *         });                                                                                                         // 17005
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(                                                              // 17006
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                         // 17007
 *             'sanitization.&quot;">Hover over this text.</span>');                                                   // 17008
 *       }]);                                                                                                          // 17009
 * </file>                                                                                                             // 17010
 *                                                                                                                     // 17011
 * <file name="test_data.json">                                                                                        // 17012
 * [                                                                                                                   // 17013
 *   { "name": "Alice",                                                                                                // 17014
 *     "htmlComment":                                                                                                  // 17015
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"                     // 17016
 *   },                                                                                                                // 17017
 *   { "name": "Bob",                                                                                                  // 17018
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"                                                          // 17019
 *   }                                                                                                                 // 17020
 * ]                                                                                                                   // 17021
 * </file>                                                                                                             // 17022
 *                                                                                                                     // 17023
 * <file name="protractor.js" type="protractor">                                                                       // 17024
 *   describe('SCE doc demo', function() {                                                                             // 17025
 *     it('should sanitize untrusted values', function() {                                                             // 17026
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())                                            // 17027
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');                                                     // 17028
 *     });                                                                                                             // 17029
 *                                                                                                                     // 17030
 *     it('should NOT sanitize explicitly trusted values', function() {                                                // 17031
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(                                          // 17032
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                           // 17033
 *           'sanitization.&quot;">Hover over this text.</span>');                                                     // 17034
 *     });                                                                                                             // 17035
 *   });                                                                                                               // 17036
 * </file>                                                                                                             // 17037
 * </example>                                                                                                          // 17038
 *                                                                                                                     // 17039
 *                                                                                                                     // 17040
 *                                                                                                                     // 17041
 * ## Can I disable SCE completely?                                                                                    // 17042
 *                                                                                                                     // 17043
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits                     // 17044
 * for little coding overhead.  It will be much harder to take an SCE disabled application and                         // 17045
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE                    // 17046
 * for cases where you have a lot of existing code that was written before SCE was introduced and                      // 17047
 * you're migrating them a module at a time.                                                                           // 17048
 *                                                                                                                     // 17049
 * That said, here's how you can completely disable SCE:                                                               // 17050
 *                                                                                                                     // 17051
 * ```                                                                                                                 // 17052
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {                                     // 17053
 *   // Completely disable SCE.  For demonstration purposes only!                                                      // 17054
 *   // Do not use in new projects.                                                                                    // 17055
 *   $sceProvider.enabled(false);                                                                                      // 17056
 * });                                                                                                                 // 17057
 * ```                                                                                                                 // 17058
 *                                                                                                                     // 17059
 */                                                                                                                    // 17060
/* jshint maxlen: 100 */                                                                                               // 17061
                                                                                                                       // 17062
function $SceProvider() {                                                                                              // 17063
  var enabled = true;                                                                                                  // 17064
                                                                                                                       // 17065
  /**                                                                                                                  // 17066
   * @ngdoc method                                                                                                     // 17067
   * @name $sceProvider#enabled                                                                                        // 17068
   * @kind function                                                                                                    // 17069
   *                                                                                                                   // 17070
   * @param {boolean=} value If provided, then enables/disables SCE.                                                   // 17071
   * @return {boolean} true if SCE is enabled, false otherwise.                                                        // 17072
   *                                                                                                                   // 17073
   * @description                                                                                                      // 17074
   * Enables/disables SCE and returns the current value.                                                               // 17075
   */                                                                                                                  // 17076
  this.enabled = function(value) {                                                                                     // 17077
    if (arguments.length) {                                                                                            // 17078
      enabled = !!value;                                                                                               // 17079
    }                                                                                                                  // 17080
    return enabled;                                                                                                    // 17081
  };                                                                                                                   // 17082
                                                                                                                       // 17083
                                                                                                                       // 17084
  /* Design notes on the default implementation for SCE.                                                               // 17085
   *                                                                                                                   // 17086
   * The API contract for the SCE delegate                                                                             // 17087
   * -------------------------------------                                                                             // 17088
   * The SCE delegate object must provide the following 3 methods:                                                     // 17089
   *                                                                                                                   // 17090
   * - trustAs(contextEnum, value)                                                                                     // 17091
   *     This method is used to tell the SCE service that the provided value is OK to use in the                       // 17092
   *     contexts specified by contextEnum.  It must return an object that will be accepted by                         // 17093
   *     getTrusted() for a compatible contextEnum and return this value.                                              // 17094
   *                                                                                                                   // 17095
   * - valueOf(value)                                                                                                  // 17096
   *     For values that were not produced by trustAs(), return them as is.  For values that were                      // 17097
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if                        // 17098
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given                     // 17099
   *     such a value.                                                                                                 // 17100
   *                                                                                                                   // 17101
   * - getTrusted(contextEnum, value)                                                                                  // 17102
   *     This function should return the a value that is safe to use in the context specified by                       // 17103
   *     contextEnum or throw and exception otherwise.                                                                 // 17104
   *                                                                                                                   // 17105
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be                         // 17106
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For                       // 17107
   * instance, an implementation could maintain a registry of all trusted objects by context.  In                      // 17108
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would                       // 17109
   * return the same object passed in if it was found in the registry under a compatible context or                    // 17110
   * throw an exception otherwise.  An implementation might only wrap values some of the time based                    // 17111
   * on some criteria.  getTrusted() might return a value and not throw an exception for special                       // 17112
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.                        // 17113
   *                                                                                                                   // 17114
   *                                                                                                                   // 17115
   * A note on the inheritance model for SCE contexts                                                                  // 17116
   * ------------------------------------------------                                                                  // 17117
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This                   // 17118
   * is purely an implementation details.                                                                              // 17119
   *                                                                                                                   // 17120
   * The contract is simply this:                                                                                      // 17121
   *                                                                                                                   // 17122
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)                      // 17123
   *     will also succeed.                                                                                            // 17124
   *                                                                                                                   // 17125
   * Inheritance happens to capture this in a natural way.  In some future, we                                         // 17126
   * may not use inheritance anymore.  That is OK because no code outside of                                           // 17127
   * sce.js and sceSpecs.js would need to be aware of this detail.                                                     // 17128
   */                                                                                                                  // 17129
                                                                                                                       // 17130
  this.$get = ['$parse', '$sceDelegate', function(                                                                     // 17131
                $parse,   $sceDelegate) {                                                                              // 17132
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow                        // 17133
    // the "expression(javascript expression)" syntax which is insecure.                                               // 17134
    if (enabled && msie < 8) {                                                                                         // 17135
      throw $sceMinErr('iequirks',                                                                                     // 17136
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +                      // 17137
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +                        // 17138
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');                                 // 17139
    }                                                                                                                  // 17140
                                                                                                                       // 17141
    var sce = shallowCopy(SCE_CONTEXTS);                                                                               // 17142
                                                                                                                       // 17143
    /**                                                                                                                // 17144
     * @ngdoc method                                                                                                   // 17145
     * @name $sce#isEnabled                                                                                            // 17146
     * @kind function                                                                                                  // 17147
     *                                                                                                                 // 17148
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you                   // 17149
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.                                    // 17150
     *                                                                                                                 // 17151
     * @description                                                                                                    // 17152
     * Returns a boolean indicating if SCE is enabled.                                                                 // 17153
     */                                                                                                                // 17154
    sce.isEnabled = function() {                                                                                       // 17155
      return enabled;                                                                                                  // 17156
    };                                                                                                                 // 17157
    sce.trustAs = $sceDelegate.trustAs;                                                                                // 17158
    sce.getTrusted = $sceDelegate.getTrusted;                                                                          // 17159
    sce.valueOf = $sceDelegate.valueOf;                                                                                // 17160
                                                                                                                       // 17161
    if (!enabled) {                                                                                                    // 17162
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };                                          // 17163
      sce.valueOf = identity;                                                                                          // 17164
    }                                                                                                                  // 17165
                                                                                                                       // 17166
    /**                                                                                                                // 17167
     * @ngdoc method                                                                                                   // 17168
     * @name $sce#parseAs                                                                                              // 17169
     *                                                                                                                 // 17170
     * @description                                                                                                    // 17171
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link                      // 17172
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it                    // 17173
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,                             // 17174
     * *result*)}                                                                                                      // 17175
     *                                                                                                                 // 17176
     * @param {string} type The kind of SCE context in which this result will be used.                                 // 17177
     * @param {string} expression String expression to compile.                                                        // 17178
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17179
     *                                                                                                                 // 17180
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17181
     *      are evaluated against (typically a scope object).                                                          // 17182
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17183
     *      `context`.                                                                                                 // 17184
     */                                                                                                                // 17185
    sce.parseAs = function sceParseAs(type, expr) {                                                                    // 17186
      var parsed = $parse(expr);                                                                                       // 17187
      if (parsed.literal && parsed.constant) {                                                                         // 17188
        return parsed;                                                                                                 // 17189
      } else {                                                                                                         // 17190
        return $parse(expr, function(value) {                                                                          // 17191
          return sce.getTrusted(type, value);                                                                          // 17192
        });                                                                                                            // 17193
      }                                                                                                                // 17194
    };                                                                                                                 // 17195
                                                                                                                       // 17196
    /**                                                                                                                // 17197
     * @ngdoc method                                                                                                   // 17198
     * @name $sce#trustAs                                                                                              // 17199
     *                                                                                                                 // 17200
     * @description                                                                                                    // 17201
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,                                  // 17202
     * returns an object that is trusted by angular for use in specified strict contextual                             // 17203
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute                                          // 17204
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)                        // 17205
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual                        // 17206
     * escaping.                                                                                                       // 17207
     *                                                                                                                 // 17208
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 17209
     *   resourceUrl, html, js and css.                                                                                // 17210
     * @param {*} value The value that that should be considered trusted/safe.                                         // 17211
     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 17212
     * where Angular expects a $sce.trustAs() return value.                                                            // 17213
     */                                                                                                                // 17214
                                                                                                                       // 17215
    /**                                                                                                                // 17216
     * @ngdoc method                                                                                                   // 17217
     * @name $sce#trustAsHtml                                                                                          // 17218
     *                                                                                                                 // 17219
     * @description                                                                                                    // 17220
     * Shorthand method.  `$sce.trustAsHtml(value)` →                                                                  // 17221
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}                                    // 17222
     *                                                                                                                 // 17223
     * @param {*} value The value to trustAs.                                                                          // 17224
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml                                      // 17225
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives                           // 17226
     *     only accept expressions that are either literal constants or are the                                        // 17227
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17228
     */                                                                                                                // 17229
                                                                                                                       // 17230
    /**                                                                                                                // 17231
     * @ngdoc method                                                                                                   // 17232
     * @name $sce#trustAsUrl                                                                                           // 17233
     *                                                                                                                 // 17234
     * @description                                                                                                    // 17235
     * Shorthand method.  `$sce.trustAsUrl(value)` →                                                                   // 17236
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}                                     // 17237
     *                                                                                                                 // 17238
     * @param {*} value The value to trustAs.                                                                          // 17239
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl                                       // 17240
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives                            // 17241
     *     only accept expressions that are either literal constants or are the                                        // 17242
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17243
     */                                                                                                                // 17244
                                                                                                                       // 17245
    /**                                                                                                                // 17246
     * @ngdoc method                                                                                                   // 17247
     * @name $sce#trustAsResourceUrl                                                                                   // 17248
     *                                                                                                                 // 17249
     * @description                                                                                                    // 17250
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →                                                           // 17251
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}                            // 17252
     *                                                                                                                 // 17253
     * @param {*} value The value to trustAs.                                                                          // 17254
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl                               // 17255
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives                    // 17256
     *     only accept expressions that are either literal constants or are the return                                 // 17257
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                             // 17258
     */                                                                                                                // 17259
                                                                                                                       // 17260
    /**                                                                                                                // 17261
     * @ngdoc method                                                                                                   // 17262
     * @name $sce#trustAsJs                                                                                            // 17263
     *                                                                                                                 // 17264
     * @description                                                                                                    // 17265
     * Shorthand method.  `$sce.trustAsJs(value)` →                                                                    // 17266
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}                                      // 17267
     *                                                                                                                 // 17268
     * @param {*} value The value to trustAs.                                                                          // 17269
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs                                        // 17270
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives                             // 17271
     *     only accept expressions that are either literal constants or are the                                        // 17272
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17273
     */                                                                                                                // 17274
                                                                                                                       // 17275
    /**                                                                                                                // 17276
     * @ngdoc method                                                                                                   // 17277
     * @name $sce#getTrusted                                                                                           // 17278
     *                                                                                                                 // 17279
     * @description                                                                                                    // 17280
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,                            // 17281
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the                             // 17282
     * originally supplied value if the queried context type is a supertype of the created type.                       // 17283
     * If this condition isn't satisfied, throws an exception.                                                         // 17284
     *                                                                                                                 // 17285
     * @param {string} type The kind of context in which this value is to be used.                                     // 17286
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}                            // 17287
     *                         call.                                                                                   // 17288
     * @returns {*} The value the was originally provided to                                                           // 17289
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.                                   // 17290
     *              Otherwise, throws an exception.                                                                    // 17291
     */                                                                                                                // 17292
                                                                                                                       // 17293
    /**                                                                                                                // 17294
     * @ngdoc method                                                                                                   // 17295
     * @name $sce#getTrustedHtml                                                                                       // 17296
     *                                                                                                                 // 17297
     * @description                                                                                                    // 17298
     * Shorthand method.  `$sce.getTrustedHtml(value)` →                                                               // 17299
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}                              // 17300
     *                                                                                                                 // 17301
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17302
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`                                            // 17303
     */                                                                                                                // 17304
                                                                                                                       // 17305
    /**                                                                                                                // 17306
     * @ngdoc method                                                                                                   // 17307
     * @name $sce#getTrustedCss                                                                                        // 17308
     *                                                                                                                 // 17309
     * @description                                                                                                    // 17310
     * Shorthand method.  `$sce.getTrustedCss(value)` →                                                                // 17311
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}                               // 17312
     *                                                                                                                 // 17313
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17314
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`                                             // 17315
     */                                                                                                                // 17316
                                                                                                                       // 17317
    /**                                                                                                                // 17318
     * @ngdoc method                                                                                                   // 17319
     * @name $sce#getTrustedUrl                                                                                        // 17320
     *                                                                                                                 // 17321
     * @description                                                                                                    // 17322
     * Shorthand method.  `$sce.getTrustedUrl(value)` →                                                                // 17323
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}                               // 17324
     *                                                                                                                 // 17325
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17326
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`                                             // 17327
     */                                                                                                                // 17328
                                                                                                                       // 17329
    /**                                                                                                                // 17330
     * @ngdoc method                                                                                                   // 17331
     * @name $sce#getTrustedResourceUrl                                                                                // 17332
     *                                                                                                                 // 17333
     * @description                                                                                                    // 17334
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →                                                        // 17335
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}                      // 17336
     *                                                                                                                 // 17337
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.                                                // 17338
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`                                    // 17339
     */                                                                                                                // 17340
                                                                                                                       // 17341
    /**                                                                                                                // 17342
     * @ngdoc method                                                                                                   // 17343
     * @name $sce#getTrustedJs                                                                                         // 17344
     *                                                                                                                 // 17345
     * @description                                                                                                    // 17346
     * Shorthand method.  `$sce.getTrustedJs(value)` →                                                                 // 17347
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}                                // 17348
     *                                                                                                                 // 17349
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17350
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`                                              // 17351
     */                                                                                                                // 17352
                                                                                                                       // 17353
    /**                                                                                                                // 17354
     * @ngdoc method                                                                                                   // 17355
     * @name $sce#parseAsHtml                                                                                          // 17356
     *                                                                                                                 // 17357
     * @description                                                                                                    // 17358
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →                                                      // 17359
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}                                                    // 17360
     *                                                                                                                 // 17361
     * @param {string} expression String expression to compile.                                                        // 17362
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17363
     *                                                                                                                 // 17364
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17365
     *      are evaluated against (typically a scope object).                                                          // 17366
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17367
     *      `context`.                                                                                                 // 17368
     */                                                                                                                // 17369
                                                                                                                       // 17370
    /**                                                                                                                // 17371
     * @ngdoc method                                                                                                   // 17372
     * @name $sce#parseAsCss                                                                                           // 17373
     *                                                                                                                 // 17374
     * @description                                                                                                    // 17375
     * Shorthand method.  `$sce.parseAsCss(value)` →                                                                   // 17376
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}                                                     // 17377
     *                                                                                                                 // 17378
     * @param {string} expression String expression to compile.                                                        // 17379
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17380
     *                                                                                                                 // 17381
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17382
     *      are evaluated against (typically a scope object).                                                          // 17383
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17384
     *      `context`.                                                                                                 // 17385
     */                                                                                                                // 17386
                                                                                                                       // 17387
    /**                                                                                                                // 17388
     * @ngdoc method                                                                                                   // 17389
     * @name $sce#parseAsUrl                                                                                           // 17390
     *                                                                                                                 // 17391
     * @description                                                                                                    // 17392
     * Shorthand method.  `$sce.parseAsUrl(value)` →                                                                   // 17393
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}                                                     // 17394
     *                                                                                                                 // 17395
     * @param {string} expression String expression to compile.                                                        // 17396
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17397
     *                                                                                                                 // 17398
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17399
     *      are evaluated against (typically a scope object).                                                          // 17400
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17401
     *      `context`.                                                                                                 // 17402
     */                                                                                                                // 17403
                                                                                                                       // 17404
    /**                                                                                                                // 17405
     * @ngdoc method                                                                                                   // 17406
     * @name $sce#parseAsResourceUrl                                                                                   // 17407
     *                                                                                                                 // 17408
     * @description                                                                                                    // 17409
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →                                                           // 17410
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}                                            // 17411
     *                                                                                                                 // 17412
     * @param {string} expression String expression to compile.                                                        // 17413
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17414
     *                                                                                                                 // 17415
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17416
     *      are evaluated against (typically a scope object).                                                          // 17417
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17418
     *      `context`.                                                                                                 // 17419
     */                                                                                                                // 17420
                                                                                                                       // 17421
    /**                                                                                                                // 17422
     * @ngdoc method                                                                                                   // 17423
     * @name $sce#parseAsJs                                                                                            // 17424
     *                                                                                                                 // 17425
     * @description                                                                                                    // 17426
     * Shorthand method.  `$sce.parseAsJs(value)` →                                                                    // 17427
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}                                                      // 17428
     *                                                                                                                 // 17429
     * @param {string} expression String expression to compile.                                                        // 17430
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17431
     *                                                                                                                 // 17432
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17433
     *      are evaluated against (typically a scope object).                                                          // 17434
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17435
     *      `context`.                                                                                                 // 17436
     */                                                                                                                // 17437
                                                                                                                       // 17438
    // Shorthand delegations.                                                                                          // 17439
    var parse = sce.parseAs,                                                                                           // 17440
        getTrusted = sce.getTrusted,                                                                                   // 17441
        trustAs = sce.trustAs;                                                                                         // 17442
                                                                                                                       // 17443
    forEach(SCE_CONTEXTS, function(enumValue, name) {                                                                  // 17444
      var lName = lowercase(name);                                                                                     // 17445
      sce[camelCase("parse_as_" + lName)] = function(expr) {                                                           // 17446
        return parse(enumValue, expr);                                                                                 // 17447
      };                                                                                                               // 17448
      sce[camelCase("get_trusted_" + lName)] = function(value) {                                                       // 17449
        return getTrusted(enumValue, value);                                                                           // 17450
      };                                                                                                               // 17451
      sce[camelCase("trust_as_" + lName)] = function(value) {                                                          // 17452
        return trustAs(enumValue, value);                                                                              // 17453
      };                                                                                                               // 17454
    });                                                                                                                // 17455
                                                                                                                       // 17456
    return sce;                                                                                                        // 17457
  }];                                                                                                                  // 17458
}                                                                                                                      // 17459
                                                                                                                       // 17460
/**                                                                                                                    // 17461
 * !!! This is an undocumented "private" service !!!                                                                   // 17462
 *                                                                                                                     // 17463
 * @name $sniffer                                                                                                      // 17464
 * @requires $window                                                                                                   // 17465
 * @requires $document                                                                                                 // 17466
 *                                                                                                                     // 17467
 * @property {boolean} history Does the browser support html5 history api ?                                            // 17468
 * @property {boolean} transitions Does the browser support CSS transition events ?                                    // 17469
 * @property {boolean} animations Does the browser support CSS animation events ?                                      // 17470
 *                                                                                                                     // 17471
 * @description                                                                                                        // 17472
 * This is very simple implementation of testing browser's features.                                                   // 17473
 */                                                                                                                    // 17474
function $SnifferProvider() {                                                                                          // 17475
  this.$get = ['$window', '$document', function($window, $document) {                                                  // 17476
    var eventSupport = {},                                                                                             // 17477
        android =                                                                                                      // 17478
          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),                      // 17479
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),                                                    // 17480
        document = $document[0] || {},                                                                                 // 17481
        vendorPrefix,                                                                                                  // 17482
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,                                                                     // 17483
        bodyStyle = document.body && document.body.style,                                                              // 17484
        transitions = false,                                                                                           // 17485
        animations = false,                                                                                            // 17486
        match;                                                                                                         // 17487
                                                                                                                       // 17488
    if (bodyStyle) {                                                                                                   // 17489
      for (var prop in bodyStyle) {                                                                                    // 17490
        if (match = vendorRegex.exec(prop)) {                                                                          // 17491
          vendorPrefix = match[0];                                                                                     // 17492
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);                             // 17493
          break;                                                                                                       // 17494
        }                                                                                                              // 17495
      }                                                                                                                // 17496
                                                                                                                       // 17497
      if (!vendorPrefix) {                                                                                             // 17498
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';                                                     // 17499
      }                                                                                                                // 17500
                                                                                                                       // 17501
      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));                     // 17502
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));                       // 17503
                                                                                                                       // 17504
      if (android && (!transitions ||  !animations)) {                                                                 // 17505
        transitions = isString(bodyStyle.webkitTransition);                                                            // 17506
        animations = isString(bodyStyle.webkitAnimation);                                                              // 17507
      }                                                                                                                // 17508
    }                                                                                                                  // 17509
                                                                                                                       // 17510
                                                                                                                       // 17511
    return {                                                                                                           // 17512
      // Android has history.pushState, but it does not update location correctly                                      // 17513
      // so let's not use the history API at all.                                                                      // 17514
      // http://code.google.com/p/android/issues/detail?id=17471                                                       // 17515
      // https://github.com/angular/angular.js/issues/904                                                              // 17516
                                                                                                                       // 17517
      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has                         // 17518
      // so let's not use the history API also                                                                         // 17519
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined                      // 17520
      // jshint -W018                                                                                                  // 17521
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),                           // 17522
      // jshint +W018                                                                                                  // 17523
      hasEvent: function(event) {                                                                                      // 17524
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have                    // 17525
        // it. In particular the event is not fired when backspace or delete key are pressed or                        // 17526
        // when cut operation is performed.                                                                            // 17527
        // IE10+ implements 'input' event but it erroneously fires under various situations,                           // 17528
        // e.g. when placeholder changes, or a form is focused.                                                        // 17529
        if (event === 'input' && msie <= 11) return false;                                                             // 17530
                                                                                                                       // 17531
        if (isUndefined(eventSupport[event])) {                                                                        // 17532
          var divElm = document.createElement('div');                                                                  // 17533
          eventSupport[event] = 'on' + event in divElm;                                                                // 17534
        }                                                                                                              // 17535
                                                                                                                       // 17536
        return eventSupport[event];                                                                                    // 17537
      },                                                                                                               // 17538
      csp: csp(),                                                                                                      // 17539
      vendorPrefix: vendorPrefix,                                                                                      // 17540
      transitions: transitions,                                                                                        // 17541
      animations: animations,                                                                                          // 17542
      android: android                                                                                                 // 17543
    };                                                                                                                 // 17544
  }];                                                                                                                  // 17545
}                                                                                                                      // 17546
                                                                                                                       // 17547
var $compileMinErr = minErr('$compile');                                                                               // 17548
                                                                                                                       // 17549
/**                                                                                                                    // 17550
 * @ngdoc service                                                                                                      // 17551
 * @name $templateRequest                                                                                              // 17552
 *                                                                                                                     // 17553
 * @description                                                                                                        // 17554
 * The `$templateRequest` service runs security checks then downloads the provided template using                      // 17555
 * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request                      // 17556
 * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the                     // 17557
 * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the                      // 17558
 * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted                       // 17559
 * when `tpl` is of type string and `$templateCache` has the matching entry.                                           // 17560
 *                                                                                                                     // 17561
 * @param {string|TrustedResourceUrl} tpl The HTTP request template URL                                                // 17562
 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
 *                                                                                                                     // 17564
 * @return {Promise} a promise for the HTTP response data of the given URL.                                            // 17565
 *                                                                                                                     // 17566
 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.                 // 17567
 */                                                                                                                    // 17568
function $TemplateRequestProvider() {                                                                                  // 17569
  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {                    // 17570
    function handleRequestFn(tpl, ignoreRequestError) {                                                                // 17571
      handleRequestFn.totalPendingRequests++;                                                                          // 17572
                                                                                                                       // 17573
      // We consider the template cache holds only trusted templates, so                                               // 17574
      // there's no need to go through whitelisting again for keys that already                                        // 17575
      // are included in there. This also makes Angular accept any script                                              // 17576
      // directive, no matter its name. However, we still need to unwrap trusted                                       // 17577
      // types.                                                                                                        // 17578
      if (!isString(tpl) || !$templateCache.get(tpl)) {                                                                // 17579
        tpl = $sce.getTrustedResourceUrl(tpl);                                                                         // 17580
      }                                                                                                                // 17581
                                                                                                                       // 17582
      var transformResponse = $http.defaults && $http.defaults.transformResponse;                                      // 17583
                                                                                                                       // 17584
      if (isArray(transformResponse)) {                                                                                // 17585
        transformResponse = transformResponse.filter(function(transformer) {                                           // 17586
          return transformer !== defaultHttpResponseTransform;                                                         // 17587
        });                                                                                                            // 17588
      } else if (transformResponse === defaultHttpResponseTransform) {                                                 // 17589
        transformResponse = null;                                                                                      // 17590
      }                                                                                                                // 17591
                                                                                                                       // 17592
      var httpOptions = {                                                                                              // 17593
        cache: $templateCache,                                                                                         // 17594
        transformResponse: transformResponse                                                                           // 17595
      };                                                                                                               // 17596
                                                                                                                       // 17597
      return $http.get(tpl, httpOptions)                                                                               // 17598
        ['finally'](function() {                                                                                       // 17599
          handleRequestFn.totalPendingRequests--;                                                                      // 17600
        })                                                                                                             // 17601
        .then(function(response) {                                                                                     // 17602
          $templateCache.put(tpl, response.data);                                                                      // 17603
          return response.data;                                                                                        // 17604
        }, handleError);                                                                                               // 17605
                                                                                                                       // 17606
      function handleError(resp) {                                                                                     // 17607
        if (!ignoreRequestError) {                                                                                     // 17608
          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',                        // 17609
            tpl, resp.status, resp.statusText);                                                                        // 17610
        }                                                                                                              // 17611
        return $q.reject(resp);                                                                                        // 17612
      }                                                                                                                // 17613
    }                                                                                                                  // 17614
                                                                                                                       // 17615
    handleRequestFn.totalPendingRequests = 0;                                                                          // 17616
                                                                                                                       // 17617
    return handleRequestFn;                                                                                            // 17618
  }];                                                                                                                  // 17619
}                                                                                                                      // 17620
                                                                                                                       // 17621
function $$TestabilityProvider() {                                                                                     // 17622
  this.$get = ['$rootScope', '$browser', '$location',                                                                  // 17623
       function($rootScope,   $browser,   $location) {                                                                 // 17624
                                                                                                                       // 17625
    /**                                                                                                                // 17626
     * @name $testability                                                                                              // 17627
     *                                                                                                                 // 17628
     * @description                                                                                                    // 17629
     * The private $$testability service provides a collection of methods for use when debugging                       // 17630
     * or by automated test and debugging tools.                                                                       // 17631
     */                                                                                                                // 17632
    var testability = {};                                                                                              // 17633
                                                                                                                       // 17634
    /**                                                                                                                // 17635
     * @name $$testability#findBindings                                                                                // 17636
     *                                                                                                                 // 17637
     * @description                                                                                                    // 17638
     * Returns an array of elements that are bound (via ng-bind or {{}})                                               // 17639
     * to expressions matching the input.                                                                              // 17640
     *                                                                                                                 // 17641
     * @param {Element} element The element root to search from.                                                       // 17642
     * @param {string} expression The binding expression to match.                                                     // 17643
     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17644
     *     for the expression. Filters and whitespace are ignored.                                                     // 17645
     */                                                                                                                // 17646
    testability.findBindings = function(element, expression, opt_exactMatch) {                                         // 17647
      var bindings = element.getElementsByClassName('ng-binding');                                                     // 17648
      var matches = [];                                                                                                // 17649
      forEach(bindings, function(binding) {                                                                            // 17650
        var dataBinding = angular.element(binding).data('$binding');                                                   // 17651
        if (dataBinding) {                                                                                             // 17652
          forEach(dataBinding, function(bindingName) {                                                                 // 17653
            if (opt_exactMatch) {                                                                                      // 17654
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');                       // 17655
              if (matcher.test(bindingName)) {                                                                         // 17656
                matches.push(binding);                                                                                 // 17657
              }                                                                                                        // 17658
            } else {                                                                                                   // 17659
              if (bindingName.indexOf(expression) != -1) {                                                             // 17660
                matches.push(binding);                                                                                 // 17661
              }                                                                                                        // 17662
            }                                                                                                          // 17663
          });                                                                                                          // 17664
        }                                                                                                              // 17665
      });                                                                                                              // 17666
      return matches;                                                                                                  // 17667
    };                                                                                                                 // 17668
                                                                                                                       // 17669
    /**                                                                                                                // 17670
     * @name $$testability#findModels                                                                                  // 17671
     *                                                                                                                 // 17672
     * @description                                                                                                    // 17673
     * Returns an array of elements that are two-way found via ng-model to                                             // 17674
     * expressions matching the input.                                                                                 // 17675
     *                                                                                                                 // 17676
     * @param {Element} element The element root to search from.                                                       // 17677
     * @param {string} expression The model expression to match.                                                       // 17678
     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17679
     *     for the expression.                                                                                         // 17680
     */                                                                                                                // 17681
    testability.findModels = function(element, expression, opt_exactMatch) {                                           // 17682
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];                                                                     // 17683
      for (var p = 0; p < prefixes.length; ++p) {                                                                      // 17684
        var attributeEquals = opt_exactMatch ? '=' : '*=';                                                             // 17685
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';                        // 17686
        var elements = element.querySelectorAll(selector);                                                             // 17687
        if (elements.length) {                                                                                         // 17688
          return elements;                                                                                             // 17689
        }                                                                                                              // 17690
      }                                                                                                                // 17691
    };                                                                                                                 // 17692
                                                                                                                       // 17693
    /**                                                                                                                // 17694
     * @name $$testability#getLocation                                                                                 // 17695
     *                                                                                                                 // 17696
     * @description                                                                                                    // 17697
     * Shortcut for getting the location in a browser agnostic way. Returns                                            // 17698
     *     the path, search, and hash. (e.g. /path?a=b#hash)                                                           // 17699
     */                                                                                                                // 17700
    testability.getLocation = function() {                                                                             // 17701
      return $location.url();                                                                                          // 17702
    };                                                                                                                 // 17703
                                                                                                                       // 17704
    /**                                                                                                                // 17705
     * @name $$testability#setLocation                                                                                 // 17706
     *                                                                                                                 // 17707
     * @description                                                                                                    // 17708
     * Shortcut for navigating to a location without doing a full page reload.                                         // 17709
     *                                                                                                                 // 17710
     * @param {string} url The location url (path, search and hash,                                                    // 17711
     *     e.g. /path?a=b#hash) to go to.                                                                              // 17712
     */                                                                                                                // 17713
    testability.setLocation = function(url) {                                                                          // 17714
      if (url !== $location.url()) {                                                                                   // 17715
        $location.url(url);                                                                                            // 17716
        $rootScope.$digest();                                                                                          // 17717
      }                                                                                                                // 17718
    };                                                                                                                 // 17719
                                                                                                                       // 17720
    /**                                                                                                                // 17721
     * @name $$testability#whenStable                                                                                  // 17722
     *                                                                                                                 // 17723
     * @description                                                                                                    // 17724
     * Calls the callback when $timeout and $http requests are completed.                                              // 17725
     *                                                                                                                 // 17726
     * @param {function} callback                                                                                      // 17727
     */                                                                                                                // 17728
    testability.whenStable = function(callback) {                                                                      // 17729
      $browser.notifyWhenNoOutstandingRequests(callback);                                                              // 17730
    };                                                                                                                 // 17731
                                                                                                                       // 17732
    return testability;                                                                                                // 17733
  }];                                                                                                                  // 17734
}                                                                                                                      // 17735
                                                                                                                       // 17736
function $TimeoutProvider() {                                                                                          // 17737
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',                                             // 17738
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {                                            // 17739
                                                                                                                       // 17740
    var deferreds = {};                                                                                                // 17741
                                                                                                                       // 17742
                                                                                                                       // 17743
     /**                                                                                                               // 17744
      * @ngdoc service                                                                                                 // 17745
      * @name $timeout                                                                                                 // 17746
      *                                                                                                                // 17747
      * @description                                                                                                   // 17748
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch                       // 17749
      * block and delegates any exceptions to                                                                          // 17750
      * {@link ng.$exceptionHandler $exceptionHandler} service.                                                        // 17751
      *                                                                                                                // 17752
      * The return value of calling `$timeout` is a promise, which will be resolved when                               // 17753
      * the delay has passed and the timeout function, if provided, is executed.                                       // 17754
      *                                                                                                                // 17755
      * To cancel a timeout request, call `$timeout.cancel(promise)`.                                                  // 17756
      *                                                                                                                // 17757
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to                                             // 17758
      * synchronously flush the queue of deferred functions.                                                           // 17759
      *                                                                                                                // 17760
      * If you only want a promise that will be resolved after some specified delay                                    // 17761
      * then you can call `$timeout` without the `fn` function.                                                        // 17762
      *                                                                                                                // 17763
      * @param {function()=} fn A function, whose execution should be delayed.                                         // 17764
      * @param {number=} [delay=0] Delay in milliseconds.                                                              // 17765
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 17766
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 17767
      * @param {...*=} Pass additional parameters to the executed function.                                            // 17768
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this                   // 17769
      *   promise will be resolved with is the return value of the `fn` function.                                      // 17770
      *                                                                                                                // 17771
      */                                                                                                               // 17772
    function timeout(fn, delay, invokeApply) {                                                                         // 17773
      if (!isFunction(fn)) {                                                                                           // 17774
        invokeApply = delay;                                                                                           // 17775
        delay = fn;                                                                                                    // 17776
        fn = noop;                                                                                                     // 17777
      }                                                                                                                // 17778
                                                                                                                       // 17779
      var args = sliceArgs(arguments, 3),                                                                              // 17780
          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 17781
          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 17782
          promise = deferred.promise,                                                                                  // 17783
          timeoutId;                                                                                                   // 17784
                                                                                                                       // 17785
      timeoutId = $browser.defer(function() {                                                                          // 17786
        try {                                                                                                          // 17787
          deferred.resolve(fn.apply(null, args));                                                                      // 17788
        } catch (e) {                                                                                                  // 17789
          deferred.reject(e);                                                                                          // 17790
          $exceptionHandler(e);                                                                                        // 17791
        }                                                                                                              // 17792
        finally {                                                                                                      // 17793
          delete deferreds[promise.$$timeoutId];                                                                       // 17794
        }                                                                                                              // 17795
                                                                                                                       // 17796
        if (!skipApply) $rootScope.$apply();                                                                           // 17797
      }, delay);                                                                                                       // 17798
                                                                                                                       // 17799
      promise.$$timeoutId = timeoutId;                                                                                 // 17800
      deferreds[timeoutId] = deferred;                                                                                 // 17801
                                                                                                                       // 17802
      return promise;                                                                                                  // 17803
    }                                                                                                                  // 17804
                                                                                                                       // 17805
                                                                                                                       // 17806
     /**                                                                                                               // 17807
      * @ngdoc method                                                                                                  // 17808
      * @name $timeout#cancel                                                                                          // 17809
      *                                                                                                                // 17810
      * @description                                                                                                   // 17811
      * Cancels a task associated with the `promise`. As a result of this, the promise will be                         // 17812
      * resolved with a rejection.                                                                                     // 17813
      *                                                                                                                // 17814
      * @param {Promise=} promise Promise returned by the `$timeout` function.                                         // 17815
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                         // 17816
      *   canceled.                                                                                                    // 17817
      */                                                                                                               // 17818
    timeout.cancel = function(promise) {                                                                               // 17819
      if (promise && promise.$$timeoutId in deferreds) {                                                               // 17820
        deferreds[promise.$$timeoutId].reject('canceled');                                                             // 17821
        delete deferreds[promise.$$timeoutId];                                                                         // 17822
        return $browser.defer.cancel(promise.$$timeoutId);                                                             // 17823
      }                                                                                                                // 17824
      return false;                                                                                                    // 17825
    };                                                                                                                 // 17826
                                                                                                                       // 17827
    return timeout;                                                                                                    // 17828
  }];                                                                                                                  // 17829
}                                                                                                                      // 17830
                                                                                                                       // 17831
// NOTE:  The usage of window and document instead of $window and $document here is                                    // 17832
// deliberate.  This service depends on the specific behavior of anchor nodes created by the                           // 17833
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and                            // 17834
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it                                  // 17835
// doesn't know about mocked locations and resolves URLs to the real document - which is                               // 17836
// exactly the behavior needed here.  There is little value is mocking these out for this                              // 17837
// service.                                                                                                            // 17838
var urlParsingNode = document.createElement("a");                                                                      // 17839
var originUrl = urlResolve(window.location.href);                                                                      // 17840
                                                                                                                       // 17841
                                                                                                                       // 17842
/**                                                                                                                    // 17843
 *                                                                                                                     // 17844
 * Implementation Notes for non-IE browsers                                                                            // 17845
 * ----------------------------------------                                                                            // 17846
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,                           // 17847
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative                          // 17848
 * URL will be resolved into an absolute URL in the context of the application document.                               // 17849
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related                           // 17850
 * properties are all populated to reflect the normalized URL.  This approach has wide                                 // 17851
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See                                                         // 17852
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                     // 17853
 *                                                                                                                     // 17854
 * Implementation Notes for IE                                                                                         // 17855
 * ---------------------------                                                                                         // 17856
 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other                                   // 17857
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify                       // 17858
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We                        // 17859
 * work around that by performing the parsing in a 2nd step by taking a previously normalized                          // 17860
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the                      // 17861
 * properties such as protocol, hostname, port, etc.                                                                   // 17862
 *                                                                                                                     // 17863
 * References:                                                                                                         // 17864
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement                                                 // 17865
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                   // 17866
 *   http://url.spec.whatwg.org/#urlutils                                                                              // 17867
 *   https://github.com/angular/angular.js/pull/2902                                                                   // 17868
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/                                                   // 17869
 *                                                                                                                     // 17870
 * @kind function                                                                                                      // 17871
 * @param {string} url The URL to be parsed.                                                                           // 17872
 * @description Normalizes and parses a URL.                                                                           // 17873
 * @returns {object} Returns the normalized URL as a dictionary.                                                       // 17874
 *                                                                                                                     // 17875
 *   | member name   | Description    |                                                                                // 17876
 *   |---------------|----------------|                                                                                // 17877
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |                        // 17878
 *   | protocol      | The protocol including the trailing colon                              |                        // 17879
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |                        // 17880
 *   | search        | The search params, minus the question mark                             |                        // 17881
 *   | hash          | The hash string, minus the hash symbol                                                          // 17882
 *   | hostname      | The hostname                                                                                    // 17883
 *   | port          | The port, without ":"                                                                           // 17884
 *   | pathname      | The pathname, beginning with "/"                                                                // 17885
 *                                                                                                                     // 17886
 */                                                                                                                    // 17887
function urlResolve(url) {                                                                                             // 17888
  var href = url;                                                                                                      // 17889
                                                                                                                       // 17890
  if (msie) {                                                                                                          // 17891
    // Normalize before parse.  Refer Implementation Notes on why this is                                              // 17892
    // done in two steps on IE.                                                                                        // 17893
    urlParsingNode.setAttribute("href", href);                                                                         // 17894
    href = urlParsingNode.href;                                                                                        // 17895
  }                                                                                                                    // 17896
                                                                                                                       // 17897
  urlParsingNode.setAttribute('href', href);                                                                           // 17898
                                                                                                                       // 17899
  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils                             // 17900
  return {                                                                                                             // 17901
    href: urlParsingNode.href,                                                                                         // 17902
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',                                // 17903
    host: urlParsingNode.host,                                                                                         // 17904
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',                                     // 17905
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',                                            // 17906
    hostname: urlParsingNode.hostname,                                                                                 // 17907
    port: urlParsingNode.port,                                                                                         // 17908
    pathname: (urlParsingNode.pathname.charAt(0) === '/')                                                              // 17909
      ? urlParsingNode.pathname                                                                                        // 17910
      : '/' + urlParsingNode.pathname                                                                                  // 17911
  };                                                                                                                   // 17912
}                                                                                                                      // 17913
                                                                                                                       // 17914
/**                                                                                                                    // 17915
 * Parse a request URL and determine whether this is a same-origin request as the application document.                // 17916
 *                                                                                                                     // 17917
 * @param {string|object} requestUrl The url of the request as a string that will be resolved                          // 17918
 * or a parsed URL object.                                                                                             // 17919
 * @returns {boolean} Whether the request is for the same origin as the application document.                          // 17920
 */                                                                                                                    // 17921
function urlIsSameOrigin(requestUrl) {                                                                                 // 17922
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;                                           // 17923
  return (parsed.protocol === originUrl.protocol &&                                                                    // 17924
          parsed.host === originUrl.host);                                                                             // 17925
}                                                                                                                      // 17926
                                                                                                                       // 17927
/**                                                                                                                    // 17928
 * @ngdoc service                                                                                                      // 17929
 * @name $window                                                                                                       // 17930
 *                                                                                                                     // 17931
 * @description                                                                                                        // 17932
 * A reference to the browser's `window` object. While `window`                                                        // 17933
 * is globally available in JavaScript, it causes testability problems, because                                        // 17934
 * it is a global variable. In angular we always refer to it through the                                               // 17935
 * `$window` service, so it may be overridden, removed or mocked for testing.                                          // 17936
 *                                                                                                                     // 17937
 * Expressions, like the one defined for the `ngClick` directive in the example                                        // 17938
 * below, are evaluated with respect to the current scope.  Therefore, there is                                        // 17939
 * no risk of inadvertently coding in a dependency on a global value in such an                                        // 17940
 * expression.                                                                                                         // 17941
 *                                                                                                                     // 17942
 * @example                                                                                                            // 17943
   <example module="windowExample">                                                                                    // 17944
     <file name="index.html">                                                                                          // 17945
       <script>                                                                                                        // 17946
         angular.module('windowExample', [])                                                                           // 17947
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {                          // 17948
             $scope.greeting = 'Hello, World!';                                                                        // 17949
             $scope.doGreeting = function(greeting) {                                                                  // 17950
               $window.alert(greeting);                                                                                // 17951
             };                                                                                                        // 17952
           }]);                                                                                                        // 17953
       </script>                                                                                                       // 17954
       <div ng-controller="ExampleController">                                                                         // 17955
         <input type="text" ng-model="greeting" aria-label="greeting" />                                               // 17956
         <button ng-click="doGreeting(greeting)">ALERT</button>                                                        // 17957
       </div>                                                                                                          // 17958
     </file>                                                                                                           // 17959
     <file name="protractor.js" type="protractor">                                                                     // 17960
      it('should display the greeting in the input box', function() {                                                  // 17961
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');                                                     // 17962
       // If we click the button it will block the test runner                                                         // 17963
       // element(':button').click();                                                                                  // 17964
      });                                                                                                              // 17965
     </file>                                                                                                           // 17966
   </example>                                                                                                          // 17967
 */                                                                                                                    // 17968
function $WindowProvider() {                                                                                           // 17969
  this.$get = valueFn(window);                                                                                         // 17970
}                                                                                                                      // 17971
                                                                                                                       // 17972
/**                                                                                                                    // 17973
 * @name $$cookieReader                                                                                                // 17974
 * @requires $document                                                                                                 // 17975
 *                                                                                                                     // 17976
 * @description                                                                                                        // 17977
 * This is a private service for reading cookies used by $http and ngCookies                                           // 17978
 *                                                                                                                     // 17979
 * @return {Object} a key/value map of the current cookies                                                             // 17980
 */                                                                                                                    // 17981
function $$CookieReader($document) {                                                                                   // 17982
  var rawDocument = $document[0] || {};                                                                                // 17983
  var lastCookies = {};                                                                                                // 17984
  var lastCookieString = '';                                                                                           // 17985
                                                                                                                       // 17986
  function safeDecodeURIComponent(str) {                                                                               // 17987
    try {                                                                                                              // 17988
      return decodeURIComponent(str);                                                                                  // 17989
    } catch (e) {                                                                                                      // 17990
      return str;                                                                                                      // 17991
    }                                                                                                                  // 17992
  }                                                                                                                    // 17993
                                                                                                                       // 17994
  return function() {                                                                                                  // 17995
    var cookieArray, cookie, i, index, name;                                                                           // 17996
    var currentCookieString = rawDocument.cookie || '';                                                                // 17997
                                                                                                                       // 17998
    if (currentCookieString !== lastCookieString) {                                                                    // 17999
      lastCookieString = currentCookieString;                                                                          // 18000
      cookieArray = lastCookieString.split('; ');                                                                      // 18001
      lastCookies = {};                                                                                                // 18002
                                                                                                                       // 18003
      for (i = 0; i < cookieArray.length; i++) {                                                                       // 18004
        cookie = cookieArray[i];                                                                                       // 18005
        index = cookie.indexOf('=');                                                                                   // 18006
        if (index > 0) { //ignore nameless cookies                                                                     // 18007
          name = safeDecodeURIComponent(cookie.substring(0, index));                                                   // 18008
          // the first value that is seen for a cookie is the most                                                     // 18009
          // specific one.  values for the same cookie name that                                                       // 18010
          // follow are for less specific paths.                                                                       // 18011
          if (isUndefined(lastCookies[name])) {                                                                        // 18012
            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));                                   // 18013
          }                                                                                                            // 18014
        }                                                                                                              // 18015
      }                                                                                                                // 18016
    }                                                                                                                  // 18017
    return lastCookies;                                                                                                // 18018
  };                                                                                                                   // 18019
}                                                                                                                      // 18020
                                                                                                                       // 18021
$$CookieReader.$inject = ['$document'];                                                                                // 18022
                                                                                                                       // 18023
function $$CookieReaderProvider() {                                                                                    // 18024
  this.$get = $$CookieReader;                                                                                          // 18025
}                                                                                                                      // 18026
                                                                                                                       // 18027
/* global currencyFilter: true,                                                                                        // 18028
 dateFilter: true,                                                                                                     // 18029
 filterFilter: true,                                                                                                   // 18030
 jsonFilter: true,                                                                                                     // 18031
 limitToFilter: true,                                                                                                  // 18032
 lowercaseFilter: true,                                                                                                // 18033
 numberFilter: true,                                                                                                   // 18034
 orderByFilter: true,                                                                                                  // 18035
 uppercaseFilter: true,                                                                                                // 18036
 */                                                                                                                    // 18037
                                                                                                                       // 18038
/**                                                                                                                    // 18039
 * @ngdoc provider                                                                                                     // 18040
 * @name $filterProvider                                                                                               // 18041
 * @description                                                                                                        // 18042
 *                                                                                                                     // 18043
 * Filters are just functions which transform input to an output. However filters need to be                           // 18044
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is                    // 18045
 * annotated with dependencies and is responsible for creating a filter function.                                      // 18046
 *                                                                                                                     // 18047
 * <div class="alert alert-warning">                                                                                   // 18048
 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.      // 18049
 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace                  // 18050
 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                             // 18051
 * (`myapp_subsection_filterx`).                                                                                       // 18052
 * </div>                                                                                                              // 18053
 *                                                                                                                     // 18054
 * ```js                                                                                                               // 18055
 *   // Filter registration                                                                                            // 18056
 *   function MyModule($provide, $filterProvider) {                                                                    // 18057
 *     // create a service to demonstrate injection (not always needed)                                                // 18058
 *     $provide.value('greet', function(name){                                                                         // 18059
 *       return 'Hello ' + name + '!';                                                                                 // 18060
 *     });                                                                                                             // 18061
 *                                                                                                                     // 18062
 *     // register a filter factory which uses the                                                                     // 18063
 *     // greet service to demonstrate DI.                                                                             // 18064
 *     $filterProvider.register('greet', function(greet){                                                              // 18065
 *       // return the filter function which uses the greet service                                                    // 18066
 *       // to generate salutation                                                                                     // 18067
 *       return function(text) {                                                                                       // 18068
 *         // filters need to be forgiving so check input validity                                                     // 18069
 *         return text && greet(text) || text;                                                                         // 18070
 *       };                                                                                                            // 18071
 *     });                                                                                                             // 18072
 *   }                                                                                                                 // 18073
 * ```                                                                                                                 // 18074
 *                                                                                                                     // 18075
 * The filter function is registered with the `$injector` under the filter name suffix with                            // 18076
 * `Filter`.                                                                                                           // 18077
 *                                                                                                                     // 18078
 * ```js                                                                                                               // 18079
 *   it('should be the same instance', inject(                                                                         // 18080
 *     function($filterProvider) {                                                                                     // 18081
 *       $filterProvider.register('reverse', function(){                                                               // 18082
 *         return ...;                                                                                                 // 18083
 *       });                                                                                                           // 18084
 *     },                                                                                                              // 18085
 *     function($filter, reverseFilter) {                                                                              // 18086
 *       expect($filter('reverse')).toBe(reverseFilter);                                                               // 18087
 *     });                                                                                                             // 18088
 * ```                                                                                                                 // 18089
 *                                                                                                                     // 18090
 *                                                                                                                     // 18091
 * For more information about how angular filters work, and how to create your own filters, see                        // 18092
 * {@link guide/filter Filters} in the Angular Developer Guide.                                                        // 18093
 */                                                                                                                    // 18094
                                                                                                                       // 18095
/**                                                                                                                    // 18096
 * @ngdoc service                                                                                                      // 18097
 * @name $filter                                                                                                       // 18098
 * @kind function                                                                                                      // 18099
 * @description                                                                                                        // 18100
 * Filters are used for formatting data displayed to the user.                                                         // 18101
 *                                                                                                                     // 18102
 * The general syntax in templates is as follows:                                                                      // 18103
 *                                                                                                                     // 18104
 *         {{ expression [| filter_name[:parameter_value] ... ] }}                                                     // 18105
 *                                                                                                                     // 18106
 * @param {String} name Name of the filter function to retrieve                                                        // 18107
 * @return {Function} the filter function                                                                              // 18108
 * @example                                                                                                            // 18109
   <example name="$filter" module="filterExample">                                                                     // 18110
     <file name="index.html">                                                                                          // 18111
       <div ng-controller="MainCtrl">                                                                                  // 18112
        <h3>{{ originalText }}</h3>                                                                                    // 18113
        <h3>{{ filteredText }}</h3>                                                                                    // 18114
       </div>                                                                                                          // 18115
     </file>                                                                                                           // 18116
                                                                                                                       // 18117
     <file name="script.js">                                                                                           // 18118
      angular.module('filterExample', [])                                                                              // 18119
      .controller('MainCtrl', function($scope, $filter) {                                                              // 18120
        $scope.originalText = 'hello';                                                                                 // 18121
        $scope.filteredText = $filter('uppercase')($scope.originalText);                                               // 18122
      });                                                                                                              // 18123
     </file>                                                                                                           // 18124
   </example>                                                                                                          // 18125
  */                                                                                                                   // 18126
$FilterProvider.$inject = ['$provide'];                                                                                // 18127
function $FilterProvider($provide) {                                                                                   // 18128
  var suffix = 'Filter';                                                                                               // 18129
                                                                                                                       // 18130
  /**                                                                                                                  // 18131
   * @ngdoc method                                                                                                     // 18132
   * @name $filterProvider#register                                                                                    // 18133
   * @param {string|Object} name Name of the filter function, or an object map of filters where                        // 18134
   *    the keys are the filter names and the values are the filter factories.                                         // 18135
   *                                                                                                                   // 18136
   *    <div class="alert alert-warning">                                                                              // 18137
   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`. // 18138
   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace             // 18139
   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                        // 18140
   *    (`myapp_subsection_filterx`).                                                                                  // 18141
   *    </div>                                                                                                         // 18142
    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map                      // 18144
   *    of the registered filter instances.                                                                            // 18145
   */                                                                                                                  // 18146
  function register(name, factory) {                                                                                   // 18147
    if (isObject(name)) {                                                                                              // 18148
      var filters = {};                                                                                                // 18149
      forEach(name, function(filter, key) {                                                                            // 18150
        filters[key] = register(key, filter);                                                                          // 18151
      });                                                                                                              // 18152
      return filters;                                                                                                  // 18153
    } else {                                                                                                           // 18154
      return $provide.factory(name + suffix, factory);                                                                 // 18155
    }                                                                                                                  // 18156
  }                                                                                                                    // 18157
  this.register = register;                                                                                            // 18158
                                                                                                                       // 18159
  this.$get = ['$injector', function($injector) {                                                                      // 18160
    return function(name) {                                                                                            // 18161
      return $injector.get(name + suffix);                                                                             // 18162
    };                                                                                                                 // 18163
  }];                                                                                                                  // 18164
                                                                                                                       // 18165
  ////////////////////////////////////////                                                                             // 18166
                                                                                                                       // 18167
  /* global                                                                                                            // 18168
    currencyFilter: false,                                                                                             // 18169
    dateFilter: false,                                                                                                 // 18170
    filterFilter: false,                                                                                               // 18171
    jsonFilter: false,                                                                                                 // 18172
    limitToFilter: false,                                                                                              // 18173
    lowercaseFilter: false,                                                                                            // 18174
    numberFilter: false,                                                                                               // 18175
    orderByFilter: false,                                                                                              // 18176
    uppercaseFilter: false,                                                                                            // 18177
  */                                                                                                                   // 18178
                                                                                                                       // 18179
  register('currency', currencyFilter);                                                                                // 18180
  register('date', dateFilter);                                                                                        // 18181
  register('filter', filterFilter);                                                                                    // 18182
  register('json', jsonFilter);                                                                                        // 18183
  register('limitTo', limitToFilter);                                                                                  // 18184
  register('lowercase', lowercaseFilter);                                                                              // 18185
  register('number', numberFilter);                                                                                    // 18186
  register('orderBy', orderByFilter);                                                                                  // 18187
  register('uppercase', uppercaseFilter);                                                                              // 18188
}                                                                                                                      // 18189
                                                                                                                       // 18190
/**                                                                                                                    // 18191
 * @ngdoc filter                                                                                                       // 18192
 * @name filter                                                                                                        // 18193
 * @kind function                                                                                                      // 18194
 *                                                                                                                     // 18195
 * @description                                                                                                        // 18196
 * Selects a subset of items from `array` and returns it as a new array.                                               // 18197
 *                                                                                                                     // 18198
 * @param {Array} array The source array.                                                                              // 18199
 * @param {string|Object|function()} expression The predicate to be used for selecting items from                      // 18200
 *   `array`.                                                                                                          // 18201
 *                                                                                                                     // 18202
 *   Can be one of:                                                                                                    // 18203
 *                                                                                                                     // 18204
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or                   // 18205
 *     objects with string properties in `array` that match this string will be returned. This also                    // 18206
 *     applies to nested object properties.                                                                            // 18207
 *     The predicate can be negated by prefixing the string with `!`.                                                  // 18208
 *                                                                                                                     // 18209
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained                       // 18210
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items                         // 18211
 *     which have property `name` containing "M" and property `phone` containing "1". A special                        // 18212
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any                                // 18213
 *     property of the object or its nested object properties. That's equivalent to the simple                         // 18214
 *     substring match with a `string` as described above. The predicate can be negated by prefixing                   // 18215
 *     the string with `!`.                                                                                            // 18216
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`                   // 18217
 *     not containing "M".                                                                                             // 18218
 *                                                                                                                     // 18219
 *     Note that a named property will match properties on the same level only, while the special                      // 18220
 *     `$` property will match properties on the same level or deeper. E.g. an array item like                         // 18221
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but                         // 18222
 *     **will** be matched by `{$: 'John'}`.                                                                           // 18223
 *                                                                                                                     // 18224
 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.                   // 18225
 *     The function is called for each element of the array, with the element, its index, and                          // 18226
 *     the entire array itself as arguments.                                                                           // 18227
 *                                                                                                                     // 18228
 *     The final result is an array of those elements that the predicate returned true for.                            // 18229
 *                                                                                                                     // 18230
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in                           // 18231
 *     determining if the expected value (from the filter expression) and actual value (from                           // 18232
 *     the object in the array) should be considered a match.                                                          // 18233
 *                                                                                                                     // 18234
 *   Can be one of:                                                                                                    // 18235
 *                                                                                                                     // 18236
 *   - `function(actual, expected)`:                                                                                   // 18237
 *     The function will be given the object value and the predicate value to compare and                              // 18238
 *     should return true if both values should be considered equal.                                                   // 18239
 *                                                                                                                     // 18240
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.                // 18241
 *     This is essentially strict comparison of expected and actual.                                                   // 18242
 *                                                                                                                     // 18243
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case                    // 18244
 *     insensitive way.                                                                                                // 18245
 *                                                                                                                     // 18246
 *     Primitive values are converted to strings. Objects are not compared against primitives,                         // 18247
 *     unless they have a custom `toString` method (e.g. `Date` objects).                                              // 18248
 *                                                                                                                     // 18249
 * @example                                                                                                            // 18250
   <example>                                                                                                           // 18251
     <file name="index.html">                                                                                          // 18252
       <div ng-init="friends = [{name:'John', phone:'555-1276'},                                                       // 18253
                                {name:'Mary', phone:'800-BIG-MARY'},                                                   // 18254
                                {name:'Mike', phone:'555-4321'},                                                       // 18255
                                {name:'Adam', phone:'555-5678'},                                                       // 18256
                                {name:'Julie', phone:'555-8765'},                                                      // 18257
                                {name:'Juliette', phone:'555-5678'}]"></div>                                           // 18258
                                                                                                                       // 18259
       <label>Search: <input ng-model="searchText"></label>                                                            // 18260
       <table id="searchTextResults">                                                                                  // 18261
         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18262
         <tr ng-repeat="friend in friends | filter:searchText">                                                        // 18263
           <td>{{friend.name}}</td>                                                                                    // 18264
           <td>{{friend.phone}}</td>                                                                                   // 18265
         </tr>                                                                                                         // 18266
       </table>                                                                                                        // 18267
       <hr>                                                                                                            // 18268
       <label>Any: <input ng-model="search.$"></label> <br>                                                            // 18269
       <label>Name only <input ng-model="search.name"></label><br>                                                     // 18270
       <label>Phone only <input ng-model="search.phone"></label><br>                                                   // 18271
       <label>Equality <input type="checkbox" ng-model="strict"></label><br>                                           // 18272
       <table id="searchObjResults">                                                                                   // 18273
         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18274
         <tr ng-repeat="friendObj in friends | filter:search:strict">                                                  // 18275
           <td>{{friendObj.name}}</td>                                                                                 // 18276
           <td>{{friendObj.phone}}</td>                                                                                // 18277
         </tr>                                                                                                         // 18278
       </table>                                                                                                        // 18279
     </file>                                                                                                           // 18280
     <file name="protractor.js" type="protractor">                                                                     // 18281
       var expectFriendNames = function(expectedNames, key) {                                                          // 18282
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {                      // 18283
           arr.forEach(function(wd, i) {                                                                               // 18284
             expect(wd.getText()).toMatch(expectedNames[i]);                                                           // 18285
           });                                                                                                         // 18286
         });                                                                                                           // 18287
       };                                                                                                              // 18288
                                                                                                                       // 18289
       it('should search across all fields when filtering with a string', function() {                                 // 18290
         var searchText = element(by.model('searchText'));                                                             // 18291
         searchText.clear();                                                                                           // 18292
         searchText.sendKeys('m');                                                                                     // 18293
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');                                                        // 18294
                                                                                                                       // 18295
         searchText.clear();                                                                                           // 18296
         searchText.sendKeys('76');                                                                                    // 18297
         expectFriendNames(['John', 'Julie'], 'friend');                                                               // 18298
       });                                                                                                             // 18299
                                                                                                                       // 18300
       it('should search in specific fields when filtering with a predicate object', function() {                      // 18301
         var searchAny = element(by.model('search.$'));                                                                // 18302
         searchAny.clear();                                                                                            // 18303
         searchAny.sendKeys('i');                                                                                      // 18304
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');                                        // 18305
       });                                                                                                             // 18306
       it('should use a equal comparison when comparator is true', function() {                                        // 18307
         var searchName = element(by.model('search.name'));                                                            // 18308
         var strict = element(by.model('strict'));                                                                     // 18309
         searchName.clear();                                                                                           // 18310
         searchName.sendKeys('Julie');                                                                                 // 18311
         strict.click();                                                                                               // 18312
         expectFriendNames(['Julie'], 'friendObj');                                                                    // 18313
       });                                                                                                             // 18314
     </file>                                                                                                           // 18315
   </example>                                                                                                          // 18316
 */                                                                                                                    // 18317
function filterFilter() {                                                                                              // 18318
  return function(array, expression, comparator) {                                                                     // 18319
    if (!isArrayLike(array)) {                                                                                         // 18320
      if (array == null) {                                                                                             // 18321
        return array;                                                                                                  // 18322
      } else {                                                                                                         // 18323
        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);                                 // 18324
      }                                                                                                                // 18325
    }                                                                                                                  // 18326
                                                                                                                       // 18327
    var expressionType = getTypeForFilter(expression);                                                                 // 18328
    var predicateFn;                                                                                                   // 18329
    var matchAgainstAnyProp;                                                                                           // 18330
                                                                                                                       // 18331
    switch (expressionType) {                                                                                          // 18332
      case 'function':                                                                                                 // 18333
        predicateFn = expression;                                                                                      // 18334
        break;                                                                                                         // 18335
      case 'boolean':                                                                                                  // 18336
      case 'null':                                                                                                     // 18337
      case 'number':                                                                                                   // 18338
      case 'string':                                                                                                   // 18339
        matchAgainstAnyProp = true;                                                                                    // 18340
        //jshint -W086                                                                                                 // 18341
      case 'object':                                                                                                   // 18342
        //jshint +W086                                                                                                 // 18343
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);                                  // 18344
        break;                                                                                                         // 18345
      default:                                                                                                         // 18346
        return array;                                                                                                  // 18347
    }                                                                                                                  // 18348
                                                                                                                       // 18349
    return Array.prototype.filter.call(array, predicateFn);                                                            // 18350
  };                                                                                                                   // 18351
}                                                                                                                      // 18352
                                                                                                                       // 18353
// Helper functions for `filterFilter`                                                                                 // 18354
function createPredicateFn(expression, comparator, matchAgainstAnyProp) {                                              // 18355
  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);                                             // 18356
  var predicateFn;                                                                                                     // 18357
                                                                                                                       // 18358
  if (comparator === true) {                                                                                           // 18359
    comparator = equals;                                                                                               // 18360
  } else if (!isFunction(comparator)) {                                                                                // 18361
    comparator = function(actual, expected) {                                                                          // 18362
      if (isUndefined(actual)) {                                                                                       // 18363
        // No substring matching against `undefined`                                                                   // 18364
        return false;                                                                                                  // 18365
      }                                                                                                                // 18366
      if ((actual === null) || (expected === null)) {                                                                  // 18367
        // No substring matching against `null`; only match against `null`                                             // 18368
        return actual === expected;                                                                                    // 18369
      }                                                                                                                // 18370
      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {                                    // 18371
        // Should not compare primitives against objects, unless they have custom `toString` method                    // 18372
        return false;                                                                                                  // 18373
      }                                                                                                                // 18374
                                                                                                                       // 18375
      actual = lowercase('' + actual);                                                                                 // 18376
      expected = lowercase('' + expected);                                                                             // 18377
      return actual.indexOf(expected) !== -1;                                                                          // 18378
    };                                                                                                                 // 18379
  }                                                                                                                    // 18380
                                                                                                                       // 18381
  predicateFn = function(item) {                                                                                       // 18382
    if (shouldMatchPrimitives && !isObject(item)) {                                                                    // 18383
      return deepCompare(item, expression.$, comparator, false);                                                       // 18384
    }                                                                                                                  // 18385
    return deepCompare(item, expression, comparator, matchAgainstAnyProp);                                             // 18386
  };                                                                                                                   // 18387
                                                                                                                       // 18388
  return predicateFn;                                                                                                  // 18389
}                                                                                                                      // 18390
                                                                                                                       // 18391
function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {                        // 18392
  var actualType = getTypeForFilter(actual);                                                                           // 18393
  var expectedType = getTypeForFilter(expected);                                                                       // 18394
                                                                                                                       // 18395
  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {                                                   // 18396
    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);                               // 18397
  } else if (isArray(actual)) {                                                                                        // 18398
    // In case `actual` is an array, consider it a match                                                               // 18399
    // if ANY of it's items matches `expected`                                                                         // 18400
    return actual.some(function(item) {                                                                                // 18401
      return deepCompare(item, expected, comparator, matchAgainstAnyProp);                                             // 18402
    });                                                                                                                // 18403
  }                                                                                                                    // 18404
                                                                                                                       // 18405
  switch (actualType) {                                                                                                // 18406
    case 'object':                                                                                                     // 18407
      var key;                                                                                                         // 18408
      if (matchAgainstAnyProp) {                                                                                       // 18409
        for (key in actual) {                                                                                          // 18410
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {                       // 18411
            return true;                                                                                               // 18412
          }                                                                                                            // 18413
        }                                                                                                              // 18414
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);                        // 18415
      } else if (expectedType === 'object') {                                                                          // 18416
        for (key in expected) {                                                                                        // 18417
          var expectedVal = expected[key];                                                                             // 18418
          if (isFunction(expectedVal) || isUndefined(expectedVal)) {                                                   // 18419
            continue;                                                                                                  // 18420
          }                                                                                                            // 18421
                                                                                                                       // 18422
          var matchAnyProperty = key === '$';                                                                          // 18423
          var actualVal = matchAnyProperty ? actual : actual[key];                                                     // 18424
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {                  // 18425
            return false;                                                                                              // 18426
          }                                                                                                            // 18427
        }                                                                                                              // 18428
        return true;                                                                                                   // 18429
      } else {                                                                                                         // 18430
        return comparator(actual, expected);                                                                           // 18431
      }                                                                                                                // 18432
      break;                                                                                                           // 18433
    case 'function':                                                                                                   // 18434
      return false;                                                                                                    // 18435
    default:                                                                                                           // 18436
      return comparator(actual, expected);                                                                             // 18437
  }                                                                                                                    // 18438
}                                                                                                                      // 18439
                                                                                                                       // 18440
// Used for easily differentiating between `null` and actual `object`                                                  // 18441
function getTypeForFilter(val) {                                                                                       // 18442
  return (val === null) ? 'null' : typeof val;                                                                         // 18443
}                                                                                                                      // 18444
                                                                                                                       // 18445
/**                                                                                                                    // 18446
 * @ngdoc filter                                                                                                       // 18447
 * @name currency                                                                                                      // 18448
 * @kind function                                                                                                      // 18449
 *                                                                                                                     // 18450
 * @description                                                                                                        // 18451
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default                         // 18452
 * symbol for current locale is used.                                                                                  // 18453
 *                                                                                                                     // 18454
 * @param {number} amount Input to filter.                                                                             // 18455
 * @param {string=} symbol Currency symbol or identifier to be displayed.                                              // 18456
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.                                                                                 // 18458
 *                                                                                                                     // 18459
 *                                                                                                                     // 18460
 * @example                                                                                                            // 18461
   <example module="currencyExample">                                                                                  // 18462
     <file name="index.html">                                                                                          // 18463
       <script>                                                                                                        // 18464
         angular.module('currencyExample', [])                                                                         // 18465
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18466
             $scope.amount = 1234.56;                                                                                  // 18467
           }]);                                                                                                        // 18468
       </script>                                                                                                       // 18469
       <div ng-controller="ExampleController">                                                                         // 18470
         <input type="number" ng-model="amount" aria-label="amount"> <br>                                              // 18471
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>                     // 18472
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>             // 18473
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>                      // 18474
       </div>                                                                                                          // 18475
     </file>                                                                                                           // 18476
     <file name="protractor.js" type="protractor">                                                                     // 18477
       it('should init with 1234.56', function() {                                                                     // 18478
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');                                       // 18479
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');                                     // 18480
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');                                  // 18481
       });                                                                                                             // 18482
       it('should update', function() {                                                                                // 18483
         if (browser.params.browser == 'safari') {                                                                     // 18484
           // Safari does not understand the minus key. See                                                            // 18485
           // https://github.com/angular/protractor/issues/481                                                         // 18486
           return;                                                                                                     // 18487
         }                                                                                                             // 18488
         element(by.model('amount')).clear();                                                                          // 18489
         element(by.model('amount')).sendKeys('-1234');                                                                // 18490
         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');                                      // 18491
         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');                                    // 18492
         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');                                 // 18493
       });                                                                                                             // 18494
     </file>                                                                                                           // 18495
   </example>                                                                                                          // 18496
 */                                                                                                                    // 18497
currencyFilter.$inject = ['$locale'];                                                                                  // 18498
function currencyFilter($locale) {                                                                                     // 18499
  var formats = $locale.NUMBER_FORMATS;                                                                                // 18500
  return function(amount, currencySymbol, fractionSize) {                                                              // 18501
    if (isUndefined(currencySymbol)) {                                                                                 // 18502
      currencySymbol = formats.CURRENCY_SYM;                                                                           // 18503
    }                                                                                                                  // 18504
                                                                                                                       // 18505
    if (isUndefined(fractionSize)) {                                                                                   // 18506
      fractionSize = formats.PATTERNS[1].maxFrac;                                                                      // 18507
    }                                                                                                                  // 18508
                                                                                                                       // 18509
    // if null or undefined pass it through                                                                            // 18510
    return (amount == null)                                                                                            // 18511
        ? amount                                                                                                       // 18512
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).             // 18513
            replace(/\u00A4/g, currencySymbol);                                                                        // 18514
  };                                                                                                                   // 18515
}                                                                                                                      // 18516
                                                                                                                       // 18517
/**                                                                                                                    // 18518
 * @ngdoc filter                                                                                                       // 18519
 * @name number                                                                                                        // 18520
 * @kind function                                                                                                      // 18521
 *                                                                                                                     // 18522
 * @description                                                                                                        // 18523
 * Formats a number as text.                                                                                           // 18524
 *                                                                                                                     // 18525
 * If the input is null or undefined, it will just be returned.                                                        // 18526
 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.                                  // 18527
 * If the input is not a number an empty string is returned.                                                           // 18528
 *                                                                                                                     // 18529
 *                                                                                                                     // 18530
 * @param {number|string} number Number to format.                                                                     // 18531
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.                             // 18532
 * If this is not provided then the fraction size is computed from the current locale's number                         // 18533
 * formatting pattern. In the case of the default locale, it will be 3.                                                // 18534
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.                          // 18535
 *                                                                                                                     // 18536
 * @example                                                                                                            // 18537
   <example module="numberFilterExample">                                                                              // 18538
     <file name="index.html">                                                                                          // 18539
       <script>                                                                                                        // 18540
         angular.module('numberFilterExample', [])                                                                     // 18541
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18542
             $scope.val = 1234.56789;                                                                                  // 18543
           }]);                                                                                                        // 18544
       </script>                                                                                                       // 18545
       <div ng-controller="ExampleController">                                                                         // 18546
         <label>Enter number: <input ng-model='val'></label><br>                                                       // 18547
         Default formatting: <span id='number-default'>{{val | number}}</span><br>                                     // 18548
         No fractions: <span>{{val | number:0}}</span><br>                                                             // 18549
         Negative number: <span>{{-val | number:4}}</span>                                                             // 18550
       </div>                                                                                                          // 18551
     </file>                                                                                                           // 18552
     <file name="protractor.js" type="protractor">                                                                     // 18553
       it('should format numbers', function() {                                                                        // 18554
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');                                         // 18555
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');                                        // 18556
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');                                 // 18557
       });                                                                                                             // 18558
                                                                                                                       // 18559
       it('should update', function() {                                                                                // 18560
         element(by.model('val')).clear();                                                                             // 18561
         element(by.model('val')).sendKeys('3374.333');                                                                // 18562
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');                                         // 18563
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');                                        // 18564
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');                                 // 18565
      });                                                                                                              // 18566
     </file>                                                                                                           // 18567
   </example>                                                                                                          // 18568
 */                                                                                                                    // 18569
                                                                                                                       // 18570
                                                                                                                       // 18571
numberFilter.$inject = ['$locale'];                                                                                    // 18572
function numberFilter($locale) {                                                                                       // 18573
  var formats = $locale.NUMBER_FORMATS;                                                                                // 18574
  return function(number, fractionSize) {                                                                              // 18575
                                                                                                                       // 18576
    // if null or undefined pass it through                                                                            // 18577
    return (number == null)                                                                                            // 18578
        ? number                                                                                                       // 18579
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,                            // 18580
                       fractionSize);                                                                                  // 18581
  };                                                                                                                   // 18582
}                                                                                                                      // 18583
                                                                                                                       // 18584
var DECIMAL_SEP = '.';                                                                                                 // 18585
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {                                           // 18586
  if (isObject(number)) return '';                                                                                     // 18587
                                                                                                                       // 18588
  var isNegative = number < 0;                                                                                         // 18589
  number = Math.abs(number);                                                                                           // 18590
                                                                                                                       // 18591
  var isInfinity = number === Infinity;                                                                                // 18592
  if (!isInfinity && !isFinite(number)) return '';                                                                     // 18593
                                                                                                                       // 18594
  var numStr = number + '',                                                                                            // 18595
      formatedText = '',                                                                                               // 18596
      hasExponent = false,                                                                                             // 18597
      parts = [];                                                                                                      // 18598
                                                                                                                       // 18599
  if (isInfinity) formatedText = '\u221e';                                                                             // 18600
                                                                                                                       // 18601
  if (!isInfinity && numStr.indexOf('e') !== -1) {                                                                     // 18602
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);                                                                   // 18603
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {                                                     // 18604
      number = 0;                                                                                                      // 18605
    } else {                                                                                                           // 18606
      formatedText = numStr;                                                                                           // 18607
      hasExponent = true;                                                                                              // 18608
    }                                                                                                                  // 18609
  }                                                                                                                    // 18610
                                                                                                                       // 18611
  if (!isInfinity && !hasExponent) {                                                                                   // 18612
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;                                                     // 18613
                                                                                                                       // 18614
    // determine fractionSize if it is not specified                                                                   // 18615
    if (isUndefined(fractionSize)) {                                                                                   // 18616
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);                                // 18617
    }                                                                                                                  // 18618
                                                                                                                       // 18619
    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics                           // 18620
    // inspired by:                                                                                                    // 18621
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round                     // 18622
    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);                // 18623
                                                                                                                       // 18624
    var fraction = ('' + number).split(DECIMAL_SEP);                                                                   // 18625
    var whole = fraction[0];                                                                                           // 18626
    fraction = fraction[1] || '';                                                                                      // 18627
                                                                                                                       // 18628
    var i, pos = 0,                                                                                                    // 18629
        lgroup = pattern.lgSize,                                                                                       // 18630
        group = pattern.gSize;                                                                                         // 18631
                                                                                                                       // 18632
    if (whole.length >= (lgroup + group)) {                                                                            // 18633
      pos = whole.length - lgroup;                                                                                     // 18634
      for (i = 0; i < pos; i++) {                                                                                      // 18635
        if ((pos - i) % group === 0 && i !== 0) {                                                                      // 18636
          formatedText += groupSep;                                                                                    // 18637
        }                                                                                                              // 18638
        formatedText += whole.charAt(i);                                                                               // 18639
      }                                                                                                                // 18640
    }                                                                                                                  // 18641
                                                                                                                       // 18642
    for (i = pos; i < whole.length; i++) {                                                                             // 18643
      if ((whole.length - i) % lgroup === 0 && i !== 0) {                                                              // 18644
        formatedText += groupSep;                                                                                      // 18645
      }                                                                                                                // 18646
      formatedText += whole.charAt(i);                                                                                 // 18647
    }                                                                                                                  // 18648
                                                                                                                       // 18649
    // format fraction part.                                                                                           // 18650
    while (fraction.length < fractionSize) {                                                                           // 18651
      fraction += '0';                                                                                                 // 18652
    }                                                                                                                  // 18653
                                                                                                                       // 18654
    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);           // 18655
  } else {                                                                                                             // 18656
    if (fractionSize > 0 && number < 1) {                                                                              // 18657
      formatedText = number.toFixed(fractionSize);                                                                     // 18658
      number = parseFloat(formatedText);                                                                               // 18659
    }                                                                                                                  // 18660
  }                                                                                                                    // 18661
                                                                                                                       // 18662
  if (number === 0) {                                                                                                  // 18663
    isNegative = false;                                                                                                // 18664
  }                                                                                                                    // 18665
                                                                                                                       // 18666
  parts.push(isNegative ? pattern.negPre : pattern.posPre,                                                             // 18667
             formatedText,                                                                                             // 18668
             isNegative ? pattern.negSuf : pattern.posSuf);                                                            // 18669
  return parts.join('');                                                                                               // 18670
}                                                                                                                      // 18671
                                                                                                                       // 18672
function padNumber(num, digits, trim) {                                                                                // 18673
  var neg = '';                                                                                                        // 18674
  if (num < 0) {                                                                                                       // 18675
    neg =  '-';                                                                                                        // 18676
    num = -num;                                                                                                        // 18677
  }                                                                                                                    // 18678
  num = '' + num;                                                                                                      // 18679
  while (num.length < digits) num = '0' + num;                                                                         // 18680
  if (trim) {                                                                                                          // 18681
    num = num.substr(num.length - digits);                                                                             // 18682
  }                                                                                                                    // 18683
  return neg + num;                                                                                                    // 18684
}                                                                                                                      // 18685
                                                                                                                       // 18686
                                                                                                                       // 18687
function dateGetter(name, size, offset, trim) {                                                                        // 18688
  offset = offset || 0;                                                                                                // 18689
  return function(date) {                                                                                              // 18690
    var value = date['get' + name]();                                                                                  // 18691
    if (offset > 0 || value > -offset) {                                                                               // 18692
      value += offset;                                                                                                 // 18693
    }                                                                                                                  // 18694
    if (value === 0 && offset == -12) value = 12;                                                                      // 18695
    return padNumber(value, size, trim);                                                                               // 18696
  };                                                                                                                   // 18697
}                                                                                                                      // 18698
                                                                                                                       // 18699
function dateStrGetter(name, shortForm) {                                                                              // 18700
  return function(date, formats) {                                                                                     // 18701
    var value = date['get' + name]();                                                                                  // 18702
    var get = uppercase(shortForm ? ('SHORT' + name) : name);                                                          // 18703
                                                                                                                       // 18704
    return formats[get][value];                                                                                        // 18705
  };                                                                                                                   // 18706
}                                                                                                                      // 18707
                                                                                                                       // 18708
function timeZoneGetter(date, formats, offset) {                                                                       // 18709
  var zone = -1 * offset;                                                                                              // 18710
  var paddedZone = (zone >= 0) ? "+" : "";                                                                             // 18711
                                                                                                                       // 18712
  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +                                           // 18713
                padNumber(Math.abs(zone % 60), 2);                                                                     // 18714
                                                                                                                       // 18715
  return paddedZone;                                                                                                   // 18716
}                                                                                                                      // 18717
                                                                                                                       // 18718
function getFirstThursdayOfYear(year) {                                                                                // 18719
    // 0 = index of January                                                                                            // 18720
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();                                                            // 18721
    // 4 = index of Thursday (+1 to account for 1st = 5)                                                               // 18722
    // 11 = index of *next* Thursday (+1 account for 1st = 12)                                                         // 18723
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);                                   // 18724
}                                                                                                                      // 18725
                                                                                                                       // 18726
function getThursdayThisWeek(datetime) {                                                                               // 18727
    return new Date(datetime.getFullYear(), datetime.getMonth(),                                                       // 18728
      // 4 = index of Thursday                                                                                         // 18729
      datetime.getDate() + (4 - datetime.getDay()));                                                                   // 18730
}                                                                                                                      // 18731
                                                                                                                       // 18732
function weekGetter(size) {                                                                                            // 18733
   return function(date) {                                                                                             // 18734
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),                                                     // 18735
         thisThurs = getThursdayThisWeek(date);                                                                        // 18736
                                                                                                                       // 18737
      var diff = +thisThurs - +firstThurs,                                                                             // 18738
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week                                               // 18739
                                                                                                                       // 18740
      return padNumber(result, size);                                                                                  // 18741
   };                                                                                                                  // 18742
}                                                                                                                      // 18743
                                                                                                                       // 18744
function ampmGetter(date, formats) {                                                                                   // 18745
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];                                                   // 18746
}                                                                                                                      // 18747
                                                                                                                       // 18748
function eraGetter(date, formats) {                                                                                    // 18749
  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];                                                  // 18750
}                                                                                                                      // 18751
                                                                                                                       // 18752
function longEraGetter(date, formats) {                                                                                // 18753
  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];                                          // 18754
}                                                                                                                      // 18755
                                                                                                                       // 18756
var DATE_FORMATS = {                                                                                                   // 18757
  yyyy: dateGetter('FullYear', 4),                                                                                     // 18758
    yy: dateGetter('FullYear', 2, 0, true),                                                                            // 18759
     y: dateGetter('FullYear', 1),                                                                                     // 18760
  MMMM: dateStrGetter('Month'),                                                                                        // 18761
   MMM: dateStrGetter('Month', true),                                                                                  // 18762
    MM: dateGetter('Month', 2, 1),                                                                                     // 18763
     M: dateGetter('Month', 1, 1),                                                                                     // 18764
    dd: dateGetter('Date', 2),                                                                                         // 18765
     d: dateGetter('Date', 1),                                                                                         // 18766
    HH: dateGetter('Hours', 2),                                                                                        // 18767
     H: dateGetter('Hours', 1),                                                                                        // 18768
    hh: dateGetter('Hours', 2, -12),                                                                                   // 18769
     h: dateGetter('Hours', 1, -12),                                                                                   // 18770
    mm: dateGetter('Minutes', 2),                                                                                      // 18771
     m: dateGetter('Minutes', 1),                                                                                      // 18772
    ss: dateGetter('Seconds', 2),                                                                                      // 18773
     s: dateGetter('Seconds', 1),                                                                                      // 18774
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`                                               // 18775
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions       // 18776
   sss: dateGetter('Milliseconds', 3),                                                                                 // 18777
  EEEE: dateStrGetter('Day'),                                                                                          // 18778
   EEE: dateStrGetter('Day', true),                                                                                    // 18779
     a: ampmGetter,                                                                                                    // 18780
     Z: timeZoneGetter,                                                                                                // 18781
    ww: weekGetter(2),                                                                                                 // 18782
     w: weekGetter(1),                                                                                                 // 18783
     G: eraGetter,                                                                                                     // 18784
     GG: eraGetter,                                                                                                    // 18785
     GGG: eraGetter,                                                                                                   // 18786
     GGGG: longEraGetter                                                                                               // 18787
};                                                                                                                     // 18788
                                                                                                                       // 18789
var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,       // 18790
    NUMBER_STRING = /^\-?\d+$/;                                                                                        // 18791
                                                                                                                       // 18792
/**                                                                                                                    // 18793
 * @ngdoc filter                                                                                                       // 18794
 * @name date                                                                                                          // 18795
 * @kind function                                                                                                      // 18796
 *                                                                                                                     // 18797
 * @description                                                                                                        // 18798
 *   Formats `date` to a string based on the requested `format`.                                                       // 18799
 *                                                                                                                     // 18800
 *   `format` string can be composed of the following elements:                                                        // 18801
 *                                                                                                                     // 18802
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)                                   // 18803
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)                     // 18804
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)                                          // 18805
 *   * `'MMMM'`: Month in year (January-December)                                                                      // 18806
 *   * `'MMM'`: Month in year (Jan-Dec)                                                                                // 18807
 *   * `'MM'`: Month in year, padded (01-12)                                                                           // 18808
 *   * `'M'`: Month in year (1-12)                                                                                     // 18809
 *   * `'dd'`: Day in month, padded (01-31)                                                                            // 18810
 *   * `'d'`: Day in month (1-31)                                                                                      // 18811
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)                                                                         // 18812
 *   * `'EEE'`: Day in Week, (Sun-Sat)                                                                                 // 18813
 *   * `'HH'`: Hour in day, padded (00-23)                                                                             // 18814
 *   * `'H'`: Hour in day (0-23)                                                                                       // 18815
 *   * `'hh'`: Hour in AM/PM, padded (01-12)                                                                           // 18816
 *   * `'h'`: Hour in AM/PM, (1-12)                                                                                    // 18817
 *   * `'mm'`: Minute in hour, padded (00-59)                                                                          // 18818
 *   * `'m'`: Minute in hour (0-59)                                                                                    // 18819
 *   * `'ss'`: Second in minute, padded (00-59)                                                                        // 18820
 *   * `'s'`: Second in minute (0-59)                                                                                  // 18821
 *   * `'sss'`: Millisecond in second, padded (000-999)                                                                // 18822
 *   * `'a'`: AM/PM marker                                                                                             // 18823
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)                                      // 18824
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year                   // 18825
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year                              // 18826
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')                                      // 18827
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')                                                  // 18828
 *                                                                                                                     // 18829
 *   `format` string can also be one of the following predefined                                                       // 18830
 *   {@link guide/i18n localizable formats}:                                                                           // 18831
 *                                                                                                                     // 18832
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale                                               // 18833
 *     (e.g. Sep 3, 2010 12:05:08 PM)                                                                                  // 18834
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)                             // 18835
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale                                               // 18836
 *     (e.g. Friday, September 3, 2010)                                                                                // 18837
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)                            // 18838
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)                                 // 18839
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)                                          // 18840
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)                                 // 18841
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)                                        // 18842
 *                                                                                                                     // 18843
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.      // 18844
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence     // 18845
 *   (e.g. `"h 'o''clock'"`).                                                                                          // 18846
 *                                                                                                                     // 18847
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or                    // 18848
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its                       // 18849
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is                      // 18850
 *    specified in the string input, the time is considered to be in the local timezone.                               // 18851
 * @param {string=} format Formatting rules (see Description). If not specified,                                       // 18852
 *    `mediumDate` is used.                                                                                            // 18853
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the                        // 18854
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for                         // 18855
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                          // 18856
 *    If not specified, the timezone of the browser will be used.                                                      // 18857
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.                          // 18858
 *                                                                                                                     // 18859
 * @example                                                                                                            // 18860
   <example>                                                                                                           // 18861
     <file name="index.html">                                                                                          // 18862
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:                                                 // 18863
           <span>{{1288323623006 | date:'medium'}}</span><br>                                                          // 18864
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:                                  // 18865
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>                                            // 18866
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:                                     // 18867
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>                                             // 18868
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:                                  // 18869
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>                                          // 18870
     </file>                                                                                                           // 18871
     <file name="protractor.js" type="protractor">                                                                     // 18872
       it('should format date', function() {                                                                           // 18873
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).                                       // 18874
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);                                                      // 18875
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).                        // 18876
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);                                                  // 18877
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).                         // 18878
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);                                                           // 18879
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).                    // 18880
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);                                                          // 18881
       });                                                                                                             // 18882
     </file>                                                                                                           // 18883
   </example>                                                                                                          // 18884
 */                                                                                                                    // 18885
dateFilter.$inject = ['$locale'];                                                                                      // 18886
function dateFilter($locale) {                                                                                         // 18887
                                                                                                                       // 18888
                                                                                                                       // 18889
  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11     // 18891
  function jsonStringToDate(string) {                                                                                  // 18892
    var match;                                                                                                         // 18893
    if (match = string.match(R_ISO8601_STR)) {                                                                         // 18894
      var date = new Date(0),                                                                                          // 18895
          tzHour = 0,                                                                                                  // 18896
          tzMin  = 0,                                                                                                  // 18897
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,                                              // 18898
          timeSetter = match[8] ? date.setUTCHours : date.setHours;                                                    // 18899
                                                                                                                       // 18900
      if (match[9]) {                                                                                                  // 18901
        tzHour = toInt(match[9] + match[10]);                                                                          // 18902
        tzMin = toInt(match[9] + match[11]);                                                                           // 18903
      }                                                                                                                // 18904
      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));                                    // 18905
      var h = toInt(match[4] || 0) - tzHour;                                                                           // 18906
      var m = toInt(match[5] || 0) - tzMin;                                                                            // 18907
      var s = toInt(match[6] || 0);                                                                                    // 18908
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);                                                  // 18909
      timeSetter.call(date, h, m, s, ms);                                                                              // 18910
      return date;                                                                                                     // 18911
    }                                                                                                                  // 18912
    return string;                                                                                                     // 18913
  }                                                                                                                    // 18914
                                                                                                                       // 18915
                                                                                                                       // 18916
  return function(date, format, timezone) {                                                                            // 18917
    var text = '',                                                                                                     // 18918
        parts = [],                                                                                                    // 18919
        fn, match;                                                                                                     // 18920
                                                                                                                       // 18921
    format = format || 'mediumDate';                                                                                   // 18922
    format = $locale.DATETIME_FORMATS[format] || format;                                                               // 18923
    if (isString(date)) {                                                                                              // 18924
      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);                                          // 18925
    }                                                                                                                  // 18926
                                                                                                                       // 18927
    if (isNumber(date)) {                                                                                              // 18928
      date = new Date(date);                                                                                           // 18929
    }                                                                                                                  // 18930
                                                                                                                       // 18931
    if (!isDate(date) || !isFinite(date.getTime())) {                                                                  // 18932
      return date;                                                                                                     // 18933
    }                                                                                                                  // 18934
                                                                                                                       // 18935
    while (format) {                                                                                                   // 18936
      match = DATE_FORMATS_SPLIT.exec(format);                                                                         // 18937
      if (match) {                                                                                                     // 18938
        parts = concat(parts, match, 1);                                                                               // 18939
        format = parts.pop();                                                                                          // 18940
      } else {                                                                                                         // 18941
        parts.push(format);                                                                                            // 18942
        format = null;                                                                                                 // 18943
      }                                                                                                                // 18944
    }                                                                                                                  // 18945
                                                                                                                       // 18946
    var dateTimezoneOffset = date.getTimezoneOffset();                                                                 // 18947
    if (timezone) {                                                                                                    // 18948
      dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                       // 18949
      date = convertTimezoneToLocal(date, timezone, true);                                                             // 18950
    }                                                                                                                  // 18951
    forEach(parts, function(value) {                                                                                   // 18952
      fn = DATE_FORMATS[value];                                                                                        // 18953
      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)                                              // 18954
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");                                                  // 18955
    });                                                                                                                // 18956
                                                                                                                       // 18957
    return text;                                                                                                       // 18958
  };                                                                                                                   // 18959
}                                                                                                                      // 18960
                                                                                                                       // 18961
                                                                                                                       // 18962
/**                                                                                                                    // 18963
 * @ngdoc filter                                                                                                       // 18964
 * @name json                                                                                                          // 18965
 * @kind function                                                                                                      // 18966
 *                                                                                                                     // 18967
 * @description                                                                                                        // 18968
 *   Allows you to convert a JavaScript object into JSON string.                                                       // 18969
 *                                                                                                                     // 18970
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation                        // 18971
 *   the binding is automatically converted to JSON.                                                                   // 18972
 *                                                                                                                     // 18973
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.                           // 18974
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.                                // 18975
 * @returns {string} JSON string.                                                                                      // 18976
 *                                                                                                                     // 18977
 *                                                                                                                     // 18978
 * @example                                                                                                            // 18979
   <example>                                                                                                           // 18980
     <file name="index.html">                                                                                          // 18981
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>                                                   // 18982
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>                                                  // 18983
     </file>                                                                                                           // 18984
     <file name="protractor.js" type="protractor">                                                                     // 18985
       it('should jsonify filtered objects', function() {                                                              // 18986
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);                     // 18987
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);                    // 18988
       });                                                                                                             // 18989
     </file>                                                                                                           // 18990
   </example>                                                                                                          // 18991
 *                                                                                                                     // 18992
 */                                                                                                                    // 18993
function jsonFilter() {                                                                                                // 18994
  return function(object, spacing) {                                                                                   // 18995
    if (isUndefined(spacing)) {                                                                                        // 18996
        spacing = 2;                                                                                                   // 18997
    }                                                                                                                  // 18998
    return toJson(object, spacing);                                                                                    // 18999
  };                                                                                                                   // 19000
}                                                                                                                      // 19001
                                                                                                                       // 19002
                                                                                                                       // 19003
/**                                                                                                                    // 19004
 * @ngdoc filter                                                                                                       // 19005
 * @name lowercase                                                                                                     // 19006
 * @kind function                                                                                                      // 19007
 * @description                                                                                                        // 19008
 * Converts string to lowercase.                                                                                       // 19009
 * @see angular.lowercase                                                                                              // 19010
 */                                                                                                                    // 19011
var lowercaseFilter = valueFn(lowercase);                                                                              // 19012
                                                                                                                       // 19013
                                                                                                                       // 19014
/**                                                                                                                    // 19015
 * @ngdoc filter                                                                                                       // 19016
 * @name uppercase                                                                                                     // 19017
 * @kind function                                                                                                      // 19018
 * @description                                                                                                        // 19019
 * Converts string to uppercase.                                                                                       // 19020
 * @see angular.uppercase                                                                                              // 19021
 */                                                                                                                    // 19022
var uppercaseFilter = valueFn(uppercase);                                                                              // 19023
                                                                                                                       // 19024
/**                                                                                                                    // 19025
 * @ngdoc filter                                                                                                       // 19026
 * @name limitTo                                                                                                       // 19027
 * @kind function                                                                                                      // 19028
 *                                                                                                                     // 19029
 * @description                                                                                                        // 19030
 * Creates a new array or string containing only a specified number of elements. The elements                          // 19031
 * are taken from either the beginning or the end of the source array, string or number, as specified by               // 19032
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is                           // 19033
 * converted to a string.                                                                                              // 19034
 *                                                                                                                     // 19035
 * @param {Array|string|number} input Source array, string or number to be limited.                                    // 19036
 * @param {string|number} limit The length of the returned array or string. If the `limit` number                      // 19037
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.                  // 19038
 *     If the number is negative, `limit` number  of items from the end of the source array/string                     // 19039
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,                  // 19040
 *     the input will be returned unchanged.                                                                           // 19041
 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`                    // 19042
 *     indicates an offset from the end of `input`. Defaults to `0`.                                                   // 19043
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array                       // 19044
 *     had less than `limit` elements.                                                                                 // 19045
 *                                                                                                                     // 19046
 * @example                                                                                                            // 19047
   <example module="limitToExample">                                                                                   // 19048
     <file name="index.html">                                                                                          // 19049
       <script>                                                                                                        // 19050
         angular.module('limitToExample', [])                                                                          // 19051
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19052
             $scope.numbers = [1,2,3,4,5,6,7,8,9];                                                                     // 19053
             $scope.letters = "abcdefghi";                                                                             // 19054
             $scope.longNumber = 2345432342;                                                                           // 19055
             $scope.numLimit = 3;                                                                                      // 19056
             $scope.letterLimit = 3;                                                                                   // 19057
             $scope.longNumberLimit = 3;                                                                               // 19058
           }]);                                                                                                        // 19059
       </script>                                                                                                       // 19060
       <div ng-controller="ExampleController">                                                                         // 19061
         <label>                                                                                                       // 19062
            Limit {{numbers}} to:                                                                                      // 19063
            <input type="number" step="1" ng-model="numLimit">                                                         // 19064
         </label>                                                                                                      // 19065
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>                                                       // 19066
         <label>                                                                                                       // 19067
            Limit {{letters}} to:                                                                                      // 19068
            <input type="number" step="1" ng-model="letterLimit">                                                      // 19069
         </label>                                                                                                      // 19070
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>                                                    // 19071
         <label>                                                                                                       // 19072
            Limit {{longNumber}} to:                                                                                   // 19073
            <input type="number" step="1" ng-model="longNumberLimit">                                                  // 19074
         </label>                                                                                                      // 19075
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>                                         // 19076
       </div>                                                                                                          // 19077
     </file>                                                                                                           // 19078
     <file name="protractor.js" type="protractor">                                                                     // 19079
       var numLimitInput = element(by.model('numLimit'));                                                              // 19080
       var letterLimitInput = element(by.model('letterLimit'));                                                        // 19081
       var longNumberLimitInput = element(by.model('longNumberLimit'));                                                // 19082
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));                                         // 19083
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));                                      // 19084
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));                            // 19085
                                                                                                                       // 19086
       it('should limit the number array to first three items', function() {                                           // 19087
         expect(numLimitInput.getAttribute('value')).toBe('3');                                                        // 19088
         expect(letterLimitInput.getAttribute('value')).toBe('3');                                                     // 19089
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');                                                 // 19090
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');                                          // 19091
         expect(limitedLetters.getText()).toEqual('Output letters: abc');                                              // 19092
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');                                       // 19093
       });                                                                                                             // 19094
                                                                                                                       // 19095
       // There is a bug in safari and protractor that doesn't like the minus key                                      // 19096
       // it('should update the output when -3 is entered', function() {                                               // 19097
       //   numLimitInput.clear();                                                                                     // 19098
       //   numLimitInput.sendKeys('-3');                                                                              // 19099
       //   letterLimitInput.clear();                                                                                  // 19100
       //   letterLimitInput.sendKeys('-3');                                                                           // 19101
       //   longNumberLimitInput.clear();                                                                              // 19102
       //   longNumberLimitInput.sendKeys('-3');                                                                       // 19103
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');                                       // 19104
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');                                           // 19105
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');                                    // 19106
       // });                                                                                                          // 19107
                                                                                                                       // 19108
       it('should not exceed the maximum size of input array', function() {                                            // 19109
         numLimitInput.clear();                                                                                        // 19110
         numLimitInput.sendKeys('100');                                                                                // 19111
         letterLimitInput.clear();                                                                                     // 19112
         letterLimitInput.sendKeys('100');                                                                             // 19113
         longNumberLimitInput.clear();                                                                                 // 19114
         longNumberLimitInput.sendKeys('100');                                                                         // 19115
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');                              // 19116
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');                                        // 19117
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');                                // 19118
       });                                                                                                             // 19119
     </file>                                                                                                           // 19120
   </example>                                                                                                          // 19121
*/                                                                                                                     // 19122
function limitToFilter() {                                                                                             // 19123
  return function(input, limit, begin) {                                                                               // 19124
    if (Math.abs(Number(limit)) === Infinity) {                                                                        // 19125
      limit = Number(limit);                                                                                           // 19126
    } else {                                                                                                           // 19127
      limit = toInt(limit);                                                                                            // 19128
    }                                                                                                                  // 19129
    if (isNaN(limit)) return input;                                                                                    // 19130
                                                                                                                       // 19131
    if (isNumber(input)) input = input.toString();                                                                     // 19132
    if (!isArray(input) && !isString(input)) return input;                                                             // 19133
                                                                                                                       // 19134
    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);                                                               // 19135
    begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;                                      // 19136
                                                                                                                       // 19137
    if (limit >= 0) {                                                                                                  // 19138
      return input.slice(begin, begin + limit);                                                                        // 19139
    } else {                                                                                                           // 19140
      if (begin === 0) {                                                                                               // 19141
        return input.slice(limit, input.length);                                                                       // 19142
      } else {                                                                                                         // 19143
        return input.slice(Math.max(0, begin + limit), begin);                                                         // 19144
      }                                                                                                                // 19145
    }                                                                                                                  // 19146
  };                                                                                                                   // 19147
}                                                                                                                      // 19148
                                                                                                                       // 19149
/**                                                                                                                    // 19150
 * @ngdoc filter                                                                                                       // 19151
 * @name orderBy                                                                                                       // 19152
 * @kind function                                                                                                      // 19153
 *                                                                                                                     // 19154
 * @description                                                                                                        // 19155
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically                              // 19156
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted                           // 19157
 * as expected, make sure they are actually being saved as numbers and not strings.                                    // 19158
 *                                                                                                                     // 19159
 * @param {Array} array The array to sort.                                                                             // 19160
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be                              // 19161
 *    used by the comparator to determine the order of elements.                                                       // 19162
 *                                                                                                                     // 19163
 *    Can be one of:                                                                                                   // 19164
 *                                                                                                                     // 19165
 *    - `function`: Getter function. The result of this function will be sorted using the                              // 19166
 *      `<`, `===`, `>` operator.                                                                                      // 19167
 *    - `string`: An Angular expression. The result of this expression is used to compare elements                     // 19168
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by                      // 19169
 *      3 first characters of a property called `name`). The result of a constant expression                           // 19170
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`                      // 19171
 *      to sort object by the value of their `special name` property). An expression can be                            // 19172
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order                              // 19173
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array                     // 19174
 *      element itself is used to compare where sorting.                                                               // 19175
 *    - `Array`: An array of function or string predicates. The first predicate in the array                           // 19176
 *      is used for sorting, but when two items are equivalent, the next predicate is used.                            // 19177
 *                                                                                                                     // 19178
 *    If the predicate is missing or empty then it defaults to `'+'`.                                                  // 19179
 *                                                                                                                     // 19180
 * @param {boolean=} reverse Reverse the order of the array.                                                           // 19181
 * @returns {Array} Sorted copy of the source array.                                                                   // 19182
 *                                                                                                                     // 19183
 *                                                                                                                     // 19184
 * @example                                                                                                            // 19185
 * The example below demonstrates a simple ngRepeat, where the data is sorted                                          // 19186
 * by age in descending order (predicate is set to `'-age'`).                                                          // 19187
 * `reverse` is not set, which means it defaults to `false`.                                                           // 19188
   <example module="orderByExample">                                                                                   // 19189
     <file name="index.html">                                                                                          // 19190
       <script>                                                                                                        // 19191
         angular.module('orderByExample', [])                                                                          // 19192
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19193
             $scope.friends =                                                                                          // 19194
                 [{name:'John', phone:'555-1212', age:10},                                                             // 19195
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19196
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19197
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19198
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19199
           }]);                                                                                                        // 19200
       </script>                                                                                                       // 19201
       <div ng-controller="ExampleController">                                                                         // 19202
         <table class="friend">                                                                                        // 19203
           <tr>                                                                                                        // 19204
             <th>Name</th>                                                                                             // 19205
             <th>Phone Number</th>                                                                                     // 19206
             <th>Age</th>                                                                                              // 19207
           </tr>                                                                                                       // 19208
           <tr ng-repeat="friend in friends | orderBy:'-age'">                                                         // 19209
             <td>{{friend.name}}</td>                                                                                  // 19210
             <td>{{friend.phone}}</td>                                                                                 // 19211
             <td>{{friend.age}}</td>                                                                                   // 19212
           </tr>                                                                                                       // 19213
         </table>                                                                                                      // 19214
       </div>                                                                                                          // 19215
     </file>                                                                                                           // 19216
   </example>                                                                                                          // 19217
 *                                                                                                                     // 19218
 * The predicate and reverse parameters can be controlled dynamically through scope properties,                        // 19219
 * as shown in the next example.                                                                                       // 19220
 * @example                                                                                                            // 19221
   <example module="orderByExample">                                                                                   // 19222
     <file name="index.html">                                                                                          // 19223
       <script>                                                                                                        // 19224
         angular.module('orderByExample', [])                                                                          // 19225
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19226
             $scope.friends =                                                                                          // 19227
                 [{name:'John', phone:'555-1212', age:10},                                                             // 19228
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19229
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19230
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19231
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19232
             $scope.predicate = 'age';                                                                                 // 19233
             $scope.reverse = true;                                                                                    // 19234
             $scope.order = function(predicate) {                                                                      // 19235
               $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;                            // 19236
               $scope.predicate = predicate;                                                                           // 19237
             };                                                                                                        // 19238
           }]);                                                                                                        // 19239
       </script>                                                                                                       // 19240
       <style type="text/css">                                                                                         // 19241
         .sortorder:after {                                                                                            // 19242
           content: '\25b2';                                                                                           // 19243
         }                                                                                                             // 19244
         .sortorder.reverse:after {                                                                                    // 19245
           content: '\25bc';                                                                                           // 19246
         }                                                                                                             // 19247
       </style>                                                                                                        // 19248
       <div ng-controller="ExampleController">                                                                         // 19249
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>                                           // 19250
         <hr/>                                                                                                         // 19251
         [ <a href="" ng-click="predicate=''">unsorted</a> ]                                                           // 19252
         <table class="friend">                                                                                        // 19253
           <tr>                                                                                                        // 19254
             <th>                                                                                                      // 19255
               <a href="" ng-click="order('name')">Name</a>                                                            // 19256
               <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>             // 19257
             </th>                                                                                                     // 19258
             <th>                                                                                                      // 19259
               <a href="" ng-click="order('phone')">Phone Number</a>                                                   // 19260
               <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>            // 19261
             </th>                                                                                                     // 19262
             <th>                                                                                                      // 19263
               <a href="" ng-click="order('age')">Age</a>                                                              // 19264
               <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>              // 19265
             </th>                                                                                                     // 19266
           </tr>                                                                                                       // 19267
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">                                              // 19268
             <td>{{friend.name}}</td>                                                                                  // 19269
             <td>{{friend.phone}}</td>                                                                                 // 19270
             <td>{{friend.age}}</td>                                                                                   // 19271
           </tr>                                                                                                       // 19272
         </table>                                                                                                      // 19273
       </div>                                                                                                          // 19274
     </file>                                                                                                           // 19275
   </example>                                                                                                          // 19276
 *                                                                                                                     // 19277
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the                      // 19278
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the                          // 19279
 * desired parameters.                                                                                                 // 19280
 *                                                                                                                     // 19281
 * Example:                                                                                                            // 19282
 *                                                                                                                     // 19283
 * @example                                                                                                            // 19284
  <example module="orderByExample">                                                                                    // 19285
    <file name="index.html">                                                                                           // 19286
      <div ng-controller="ExampleController">                                                                          // 19287
        <table class="friend">                                                                                         // 19288
          <tr>                                                                                                         // 19289
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>                                      // 19290
              (<a href="" ng-click="order('-name',false)">^</a>)</th>                                                  // 19291
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>                   // 19292
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>                               // 19293
          </tr>                                                                                                        // 19294
          <tr ng-repeat="friend in friends">                                                                           // 19295
            <td>{{friend.name}}</td>                                                                                   // 19296
            <td>{{friend.phone}}</td>                                                                                  // 19297
            <td>{{friend.age}}</td>                                                                                    // 19298
          </tr>                                                                                                        // 19299
        </table>                                                                                                       // 19300
      </div>                                                                                                           // 19301
    </file>                                                                                                            // 19302
                                                                                                                       // 19303
    <file name="script.js">                                                                                            // 19304
      angular.module('orderByExample', [])                                                                             // 19305
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {                             // 19306
          var orderBy = $filter('orderBy');                                                                            // 19307
          $scope.friends = [                                                                                           // 19308
            { name: 'John',    phone: '555-1212',    age: 10 },                                                        // 19309
            { name: 'Mary',    phone: '555-9876',    age: 19 },                                                        // 19310
            { name: 'Mike',    phone: '555-4321',    age: 21 },                                                        // 19311
            { name: 'Adam',    phone: '555-5678',    age: 35 },                                                        // 19312
            { name: 'Julie',   phone: '555-8765',    age: 29 }                                                         // 19313
          ];                                                                                                           // 19314
          $scope.order = function(predicate, reverse) {                                                                // 19315
            $scope.friends = orderBy($scope.friends, predicate, reverse);                                              // 19316
          };                                                                                                           // 19317
          $scope.order('-age',false);                                                                                  // 19318
        }]);                                                                                                           // 19319
    </file>                                                                                                            // 19320
</example>                                                                                                             // 19321
 */                                                                                                                    // 19322
orderByFilter.$inject = ['$parse'];                                                                                    // 19323
function orderByFilter($parse) {                                                                                       // 19324
  return function(array, sortPredicate, reverseOrder) {                                                                // 19325
                                                                                                                       // 19326
    if (!(isArrayLike(array))) return array;                                                                           // 19327
                                                                                                                       // 19328
    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }                                                  // 19329
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }                                                         // 19330
                                                                                                                       // 19331
    var predicates = processPredicates(sortPredicate, reverseOrder);                                                   // 19332
    // Add a predicate at the end that evaluates to the element index. This makes the                                  // 19333
    // sort stable as it works as a tie-breaker when all the input predicates cannot                                   // 19334
    // distinguish between two elements.                                                                               // 19335
    predicates.push({ get: function() { return {}; }, descending: reverseOrder ? -1 : 1});                             // 19336
                                                                                                                       // 19337
    // The next three lines are a version of a Swartzian Transform idiom from Perl                                     // 19338
    // (sometimes called the Decorate-Sort-Undecorate idiom)                                                           // 19339
    // See https://en.wikipedia.org/wiki/Schwartzian_transform                                                         // 19340
    var compareValues = Array.prototype.map.call(array, getComparisonObject);                                          // 19341
    compareValues.sort(doComparison);                                                                                  // 19342
    array = compareValues.map(function(item) { return item.value; });                                                  // 19343
                                                                                                                       // 19344
    return array;                                                                                                      // 19345
                                                                                                                       // 19346
    function getComparisonObject(value, index) {                                                                       // 19347
      return {                                                                                                         // 19348
        value: value,                                                                                                  // 19349
        predicateValues: predicates.map(function(predicate) {                                                          // 19350
          return getPredicateValue(predicate.get(value), index);                                                       // 19351
        })                                                                                                             // 19352
      };                                                                                                               // 19353
    }                                                                                                                  // 19354
                                                                                                                       // 19355
    function doComparison(v1, v2) {                                                                                    // 19356
      var result = 0;                                                                                                  // 19357
      for (var index=0, length = predicates.length; index < length; ++index) {                                         // 19358
        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;         // 19359
        if (result) break;                                                                                             // 19360
      }                                                                                                                // 19361
      return result;                                                                                                   // 19362
    }                                                                                                                  // 19363
  };                                                                                                                   // 19364
                                                                                                                       // 19365
  function processPredicates(sortPredicate, reverseOrder) {                                                            // 19366
    reverseOrder = reverseOrder ? -1 : 1;                                                                              // 19367
    return sortPredicate.map(function(predicate) {                                                                     // 19368
      var descending = 1, get = identity;                                                                              // 19369
                                                                                                                       // 19370
      if (isFunction(predicate)) {                                                                                     // 19371
        get = predicate;                                                                                               // 19372
      } else if (isString(predicate)) {                                                                                // 19373
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {                                              // 19374
          descending = predicate.charAt(0) == '-' ? -1 : 1;                                                            // 19375
          predicate = predicate.substring(1);                                                                          // 19376
        }                                                                                                              // 19377
        if (predicate !== '') {                                                                                        // 19378
          get = $parse(predicate);                                                                                     // 19379
          if (get.constant) {                                                                                          // 19380
            var key = get();                                                                                           // 19381
            get = function(value) { return value[key]; };                                                              // 19382
          }                                                                                                            // 19383
        }                                                                                                              // 19384
      }                                                                                                                // 19385
      return { get: get, descending: descending * reverseOrder };                                                      // 19386
    });                                                                                                                // 19387
  }                                                                                                                    // 19388
                                                                                                                       // 19389
  function isPrimitive(value) {                                                                                        // 19390
    switch (typeof value) {                                                                                            // 19391
      case 'number': /* falls through */                                                                               // 19392
      case 'boolean': /* falls through */                                                                              // 19393
      case 'string':                                                                                                   // 19394
        return true;                                                                                                   // 19395
      default:                                                                                                         // 19396
        return false;                                                                                                  // 19397
    }                                                                                                                  // 19398
  }                                                                                                                    // 19399
                                                                                                                       // 19400
  function objectValue(value, index) {                                                                                 // 19401
    // If `valueOf` is a valid function use that                                                                       // 19402
    if (typeof value.valueOf === 'function') {                                                                         // 19403
      value = value.valueOf();                                                                                         // 19404
      if (isPrimitive(value)) return value;                                                                            // 19405
    }                                                                                                                  // 19406
    // If `toString` is a valid function and not the one from `Object.prototype` use that                              // 19407
    if (hasCustomToString(value)) {                                                                                    // 19408
      value = value.toString();                                                                                        // 19409
      if (isPrimitive(value)) return value;                                                                            // 19410
    }                                                                                                                  // 19411
    // We have a basic object so we use the position of the object in the collection                                   // 19412
    return index;                                                                                                      // 19413
  }                                                                                                                    // 19414
                                                                                                                       // 19415
  function getPredicateValue(value, index) {                                                                           // 19416
    var type = typeof value;                                                                                           // 19417
    if (value === null) {                                                                                              // 19418
      type = 'string';                                                                                                 // 19419
      value = 'null';                                                                                                  // 19420
    } else if (type === 'string') {                                                                                    // 19421
      value = value.toLowerCase();                                                                                     // 19422
    } else if (type === 'object') {                                                                                    // 19423
      value = objectValue(value, index);                                                                               // 19424
    }                                                                                                                  // 19425
    return { value: value, type: type };                                                                               // 19426
  }                                                                                                                    // 19427
                                                                                                                       // 19428
  function compare(v1, v2) {                                                                                           // 19429
    var result = 0;                                                                                                    // 19430
    if (v1.type === v2.type) {                                                                                         // 19431
      if (v1.value !== v2.value) {                                                                                     // 19432
        result = v1.value < v2.value ? -1 : 1;                                                                         // 19433
      }                                                                                                                // 19434
    } else {                                                                                                           // 19435
      result = v1.type < v2.type ? -1 : 1;                                                                             // 19436
    }                                                                                                                  // 19437
    return result;                                                                                                     // 19438
  }                                                                                                                    // 19439
}                                                                                                                      // 19440
                                                                                                                       // 19441
function ngDirective(directive) {                                                                                      // 19442
  if (isFunction(directive)) {                                                                                         // 19443
    directive = {                                                                                                      // 19444
      link: directive                                                                                                  // 19445
    };                                                                                                                 // 19446
  }                                                                                                                    // 19447
  directive.restrict = directive.restrict || 'AC';                                                                     // 19448
  return valueFn(directive);                                                                                           // 19449
}                                                                                                                      // 19450
                                                                                                                       // 19451
/**                                                                                                                    // 19452
 * @ngdoc directive                                                                                                    // 19453
 * @name a                                                                                                             // 19454
 * @restrict E                                                                                                         // 19455
 *                                                                                                                     // 19456
 * @description                                                                                                        // 19457
 * Modifies the default behavior of the html A tag so that the default action is prevented when                        // 19458
 * the href attribute is empty.                                                                                        // 19459
 *                                                                                                                     // 19460
 * This change permits the easy creation of action links with the `ngClick` directive                                  // 19461
 * without changing the location or causing page reloads, e.g.:                                                        // 19462
 * `<a href="" ng-click="list.addItem()">Add Item</a>`                                                                 // 19463
 */                                                                                                                    // 19464
var htmlAnchorDirective = valueFn({                                                                                    // 19465
  restrict: 'E',                                                                                                       // 19466
  compile: function(element, attr) {                                                                                   // 19467
    if (!attr.href && !attr.xlinkHref) {                                                                               // 19468
      return function(scope, element) {                                                                                // 19469
        // If the linked element is not an anchor tag anymore, do nothing                                              // 19470
        if (element[0].nodeName.toLowerCase() !== 'a') return;                                                         // 19471
                                                                                                                       // 19472
        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.                          // 19473
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?                              // 19474
                   'xlink:href' : 'href';                                                                              // 19475
        element.on('click', function(event) {                                                                          // 19476
          // if we have no href url, then don't navigate anywhere.                                                     // 19477
          if (!element.attr(href)) {                                                                                   // 19478
            event.preventDefault();                                                                                    // 19479
          }                                                                                                            // 19480
        });                                                                                                            // 19481
      };                                                                                                               // 19482
    }                                                                                                                  // 19483
  }                                                                                                                    // 19484
});                                                                                                                    // 19485
                                                                                                                       // 19486
/**                                                                                                                    // 19487
 * @ngdoc directive                                                                                                    // 19488
 * @name ngHref                                                                                                        // 19489
 * @restrict A                                                                                                         // 19490
 * @priority 99                                                                                                        // 19491
 *                                                                                                                     // 19492
 * @description                                                                                                        // 19493
 * Using Angular markup like `{{hash}}` in an href attribute will                                                      // 19494
 * make the link go to the wrong URL if the user clicks it before                                                      // 19495
 * Angular has a chance to replace the `{{hash}}` markup with its                                                      // 19496
 * value. Until Angular replaces the markup the link will be broken                                                    // 19497
 * and will most likely return a 404 error. The `ngHref` directive                                                     // 19498
 * solves this problem.                                                                                                // 19499
 *                                                                                                                     // 19500
 * The wrong way to write it:                                                                                          // 19501
 * ```html                                                                                                             // 19502
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                         // 19503
 * ```                                                                                                                 // 19504
 *                                                                                                                     // 19505
 * The correct way to write it:                                                                                        // 19506
 * ```html                                                                                                             // 19507
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                      // 19508
 * ```                                                                                                                 // 19509
 *                                                                                                                     // 19510
 * @element A                                                                                                          // 19511
 * @param {template} ngHref any string which can contain `{{}}` markup.                                                // 19512
 *                                                                                                                     // 19513
 * @example                                                                                                            // 19514
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes                              // 19515
 * in links and their different behaviors:                                                                             // 19516
    <example>                                                                                                          // 19517
      <file name="index.html">                                                                                         // 19518
        <input ng-model="value" /><br />                                                                               // 19519
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />                                 // 19520
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />                              // 19521
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />                                           // 19522
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />                    // 19523
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />                                      // 19524
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)                                            // 19525
      </file>                                                                                                          // 19526
      <file name="protractor.js" type="protractor">                                                                    // 19527
        it('should execute ng-click but not reload when href without value', function() {                              // 19528
          element(by.id('link-1')).click();                                                                            // 19529
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');                                       // 19530
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');                                              // 19531
        });                                                                                                            // 19532
                                                                                                                       // 19533
        it('should execute ng-click but not reload when href empty string', function() {                               // 19534
          element(by.id('link-2')).click();                                                                            // 19535
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');                                       // 19536
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');                                              // 19537
        });                                                                                                            // 19538
                                                                                                                       // 19539
        it('should execute ng-click and change url when ng-href specified', function() {                               // 19540
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);                                     // 19541
                                                                                                                       // 19542
          element(by.id('link-3')).click();                                                                            // 19543
                                                                                                                       // 19544
          // At this point, we navigate away from an Angular page, so we need                                          // 19545
          // to use browser.driver to get the base webdriver.                                                          // 19546
                                                                                                                       // 19547
          browser.wait(function() {                                                                                    // 19548
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19549
              return url.match(/\/123$/);                                                                              // 19550
            });                                                                                                        // 19551
          }, 5000, 'page should navigate to /123');                                                                    // 19552
        });                                                                                                            // 19553
                                                                                                                       // 19554
        it('should execute ng-click but not reload when href empty string and name specified', function() {            // 19555
          element(by.id('link-4')).click();                                                                            // 19556
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');                                       // 19557
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');                                              // 19558
        });                                                                                                            // 19559
                                                                                                                       // 19560
        it('should execute ng-click but not reload when no href but name specified', function() {                      // 19561
          element(by.id('link-5')).click();                                                                            // 19562
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');                                       // 19563
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);                                            // 19564
        });                                                                                                            // 19565
                                                                                                                       // 19566
        it('should only change url when only ng-href', function() {                                                    // 19567
          element(by.model('value')).clear();                                                                          // 19568
          element(by.model('value')).sendKeys('6');                                                                    // 19569
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);                                       // 19570
                                                                                                                       // 19571
          element(by.id('link-6')).click();                                                                            // 19572
                                                                                                                       // 19573
          // At this point, we navigate away from an Angular page, so we need                                          // 19574
          // to use browser.driver to get the base webdriver.                                                          // 19575
          browser.wait(function() {                                                                                    // 19576
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19577
              return url.match(/\/6$/);                                                                                // 19578
            });                                                                                                        // 19579
          }, 5000, 'page should navigate to /6');                                                                      // 19580
        });                                                                                                            // 19581
      </file>                                                                                                          // 19582
    </example>                                                                                                         // 19583
 */                                                                                                                    // 19584
                                                                                                                       // 19585
/**                                                                                                                    // 19586
 * @ngdoc directive                                                                                                    // 19587
 * @name ngSrc                                                                                                         // 19588
 * @restrict A                                                                                                         // 19589
 * @priority 99                                                                                                        // 19590
 *                                                                                                                     // 19591
 * @description                                                                                                        // 19592
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't                                                   // 19593
 * work right: The browser will fetch from the URL with the literal                                                    // 19594
 * text `{{hash}}` until Angular replaces the expression inside                                                        // 19595
 * `{{hash}}`. The `ngSrc` directive solves this problem.                                                              // 19596
 *                                                                                                                     // 19597
 * The buggy way to write it:                                                                                          // 19598
 * ```html                                                                                                             // 19599
 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>                                              // 19600
 * ```                                                                                                                 // 19601
 *                                                                                                                     // 19602
 * The correct way to write it:                                                                                        // 19603
 * ```html                                                                                                             // 19604
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />                                          // 19605
 * ```                                                                                                                 // 19606
 *                                                                                                                     // 19607
 * @element IMG                                                                                                        // 19608
 * @param {template} ngSrc any string which can contain `{{}}` markup.                                                 // 19609
 */                                                                                                                    // 19610
                                                                                                                       // 19611
/**                                                                                                                    // 19612
 * @ngdoc directive                                                                                                    // 19613
 * @name ngSrcset                                                                                                      // 19614
 * @restrict A                                                                                                         // 19615
 * @priority 99                                                                                                        // 19616
 *                                                                                                                     // 19617
 * @description                                                                                                        // 19618
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't                                                // 19619
 * work right: The browser will fetch from the URL with the literal                                                    // 19620
 * text `{{hash}}` until Angular replaces the expression inside                                                        // 19621
 * `{{hash}}`. The `ngSrcset` directive solves this problem.                                                           // 19622
 *                                                                                                                     // 19623
 * The buggy way to write it:                                                                                          // 19624
 * ```html                                                                                                             // 19625
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>                                        // 19626
 * ```                                                                                                                 // 19627
 *                                                                                                                     // 19628
 * The correct way to write it:                                                                                        // 19629
 * ```html                                                                                                             // 19630
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />                                    // 19631
 * ```                                                                                                                 // 19632
 *                                                                                                                     // 19633
 * @element IMG                                                                                                        // 19634
 * @param {template} ngSrcset any string which can contain `{{}}` markup.                                              // 19635
 */                                                                                                                    // 19636
                                                                                                                       // 19637
/**                                                                                                                    // 19638
 * @ngdoc directive                                                                                                    // 19639
 * @name ngDisabled                                                                                                    // 19640
 * @restrict A                                                                                                         // 19641
 * @priority 100                                                                                                       // 19642
 *                                                                                                                     // 19643
 * @description                                                                                                        // 19644
 *                                                                                                                     // 19645
 * This directive sets the `disabled` attribute on the element if the                                                  // 19646
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.                                        // 19647
 *                                                                                                                     // 19648
 * A special directive is necessary because we cannot use interpolation inside the `disabled`                          // 19649
 * attribute.  The following example would make the button enabled on Chrome/Firefox                                   // 19650
 * but not on older IEs:                                                                                               // 19651
 *                                                                                                                     // 19652
 * ```html                                                                                                             // 19653
 * <!-- See below for an example of ng-disabled being used correctly -->                                               // 19654
 * <div ng-init="isDisabled = false">                                                                                  // 19655
 *  <button disabled="{{isDisabled}}">Disabled</button>                                                                // 19656
 * </div>                                                                                                              // 19657
 * ```                                                                                                                 // 19658
 *                                                                                                                     // 19659
 * This is because the HTML specification does not require browsers to preserve the values of                          // 19660
 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)                    // 19661
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19662
 * binding information would be lost when the browser removes the attribute.                                           // 19663
 *                                                                                                                     // 19664
 * @example                                                                                                            // 19665
    <example>                                                                                                          // 19666
      <file name="index.html">                                                                                         // 19667
        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>                             // 19668
        <button ng-model="button" ng-disabled="checked">Button</button>                                                // 19669
      </file>                                                                                                          // 19670
      <file name="protractor.js" type="protractor">                                                                    // 19671
        it('should toggle button', function() {                                                                        // 19672
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();                                      // 19673
          element(by.model('checked')).click();                                                                        // 19674
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();                                     // 19675
        });                                                                                                            // 19676
      </file>                                                                                                          // 19677
    </example>                                                                                                         // 19678
 *                                                                                                                     // 19679
 * @element INPUT                                                                                                      // 19680
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,                                // 19681
 *     then the `disabled` attribute will be set on the element                                                        // 19682
 */                                                                                                                    // 19683
                                                                                                                       // 19684
                                                                                                                       // 19685
/**                                                                                                                    // 19686
 * @ngdoc directive                                                                                                    // 19687
 * @name ngChecked                                                                                                     // 19688
 * @restrict A                                                                                                         // 19689
 * @priority 100                                                                                                       // 19690
 *                                                                                                                     // 19691
 * @description                                                                                                        // 19692
 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.                        // 19693
 *                                                                                                                     // 19694
 * Note that this directive should not be used together with {@link ngModel `ngModel`},                                // 19695
 * as this can lead to unexpected behavior.                                                                            // 19696
 *                                                                                                                     // 19697
 * ### Why do we need `ngChecked`?                                                                                     // 19698
 *                                                                                                                     // 19699
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19700
 * such as checked. (Their presence means true and their absence means false.)                                         // 19701
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19702
 * binding information would be lost when the browser removes the attribute.                                           // 19703
 * The `ngChecked` directive solves this problem for the `checked` attribute.                                          // 19704
 * This complementary directive is not removed by the browser and so provides                                          // 19705
 * a permanent reliable place to store the binding information.                                                        // 19706
 * @example                                                                                                            // 19707
    <example>                                                                                                          // 19708
      <file name="index.html">                                                                                         // 19709
        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>                          // 19710
        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">                           // 19711
      </file>                                                                                                          // 19712
      <file name="protractor.js" type="protractor">                                                                    // 19713
        it('should check both checkBoxes', function() {                                                                // 19714
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();                                    // 19715
          element(by.model('master')).click();                                                                         // 19716
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();                                   // 19717
        });                                                                                                            // 19718
      </file>                                                                                                          // 19719
    </example>                                                                                                         // 19720
 *                                                                                                                     // 19721
 * @element INPUT                                                                                                      // 19722
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,                                 // 19723
 *     then the `checked` attribute will be set on the element                                                         // 19724
 */                                                                                                                    // 19725
                                                                                                                       // 19726
                                                                                                                       // 19727
/**                                                                                                                    // 19728
 * @ngdoc directive                                                                                                    // 19729
 * @name ngReadonly                                                                                                    // 19730
 * @restrict A                                                                                                         // 19731
 * @priority 100                                                                                                       // 19732
 *                                                                                                                     // 19733
 * @description                                                                                                        // 19734
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19735
 * such as readonly. (Their presence means true and their absence means false.)                                        // 19736
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19737
 * binding information would be lost when the browser removes the attribute.                                           // 19738
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.                                        // 19739
 * This complementary directive is not removed by the browser and so provides                                          // 19740
 * a permanent reliable place to store the binding information.                                                        // 19741
 * @example                                                                                                            // 19742
    <example>                                                                                                          // 19743
      <file name="index.html">                                                                                         // 19744
        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>                 // 19745
        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />                    // 19746
      </file>                                                                                                          // 19747
      <file name="protractor.js" type="protractor">                                                                    // 19748
        it('should toggle readonly attr', function() {                                                                 // 19749
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();                               // 19750
          element(by.model('checked')).click();                                                                        // 19751
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();                              // 19752
        });                                                                                                            // 19753
      </file>                                                                                                          // 19754
    </example>                                                                                                         // 19755
 *                                                                                                                     // 19756
 * @element INPUT                                                                                                      // 19757
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,                                // 19758
 *     then special attribute "readonly" will be set on the element                                                    // 19759
 */                                                                                                                    // 19760
                                                                                                                       // 19761
                                                                                                                       // 19762
/**                                                                                                                    // 19763
 * @ngdoc directive                                                                                                    // 19764
 * @name ngSelected                                                                                                    // 19765
 * @restrict A                                                                                                         // 19766
 * @priority 100                                                                                                       // 19767
 *                                                                                                                     // 19768
 * @description                                                                                                        // 19769
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19770
 * such as selected. (Their presence means true and their absence means false.)                                        // 19771
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19772
 * binding information would be lost when the browser removes the attribute.                                           // 19773
 * The `ngSelected` directive solves this problem for the `selected` attribute.                                        // 19774
 * This complementary directive is not removed by the browser and so provides                                          // 19775
 * a permanent reliable place to store the binding information.                                                        // 19776
 *                                                                                                                     // 19777
 * @example                                                                                                            // 19778
    <example>                                                                                                          // 19779
      <file name="index.html">                                                                                         // 19780
        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>                            // 19781
        <select aria-label="ngSelected demo">                                                                          // 19782
          <option>Hello!</option>                                                                                      // 19783
          <option id="greet" ng-selected="selected">Greetings!</option>                                                // 19784
        </select>                                                                                                      // 19785
      </file>                                                                                                          // 19786
      <file name="protractor.js" type="protractor">                                                                    // 19787
        it('should select Greetings!', function() {                                                                    // 19788
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();                                        // 19789
          element(by.model('selected')).click();                                                                       // 19790
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();                                       // 19791
        });                                                                                                            // 19792
      </file>                                                                                                          // 19793
    </example>                                                                                                         // 19794
 *                                                                                                                     // 19795
 * @element OPTION                                                                                                     // 19796
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,                                // 19797
 *     then special attribute "selected" will be set on the element                                                    // 19798
 */                                                                                                                    // 19799
                                                                                                                       // 19800
/**                                                                                                                    // 19801
 * @ngdoc directive                                                                                                    // 19802
 * @name ngOpen                                                                                                        // 19803
 * @restrict A                                                                                                         // 19804
 * @priority 100                                                                                                       // 19805
 *                                                                                                                     // 19806
 * @description                                                                                                        // 19807
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19808
 * such as open. (Their presence means true and their absence means false.)                                            // 19809
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19810
 * binding information would be lost when the browser removes the attribute.                                           // 19811
 * The `ngOpen` directive solves this problem for the `open` attribute.                                                // 19812
 * This complementary directive is not removed by the browser and so provides                                          // 19813
 * a permanent reliable place to store the binding information.                                                        // 19814
 * @example                                                                                                            // 19815
     <example>                                                                                                         // 19816
       <file name="index.html">                                                                                        // 19817
         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>                          // 19818
         <details id="details" ng-open="open">                                                                         // 19819
            <summary>Show/Hide me</summary>                                                                            // 19820
         </details>                                                                                                    // 19821
       </file>                                                                                                         // 19822
       <file name="protractor.js" type="protractor">                                                                   // 19823
         it('should toggle open', function() {                                                                         // 19824
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();                                         // 19825
           element(by.model('open')).click();                                                                          // 19826
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();                                        // 19827
         });                                                                                                           // 19828
       </file>                                                                                                         // 19829
     </example>                                                                                                        // 19830
 *                                                                                                                     // 19831
 * @element DETAILS                                                                                                    // 19832
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,                                    // 19833
 *     then special attribute "open" will be set on the element                                                        // 19834
 */                                                                                                                    // 19835
                                                                                                                       // 19836
var ngAttributeAliasDirectives = {};                                                                                   // 19837
                                                                                                                       // 19838
// boolean attrs are evaluated                                                                                         // 19839
forEach(BOOLEAN_ATTR, function(propName, attrName) {                                                                   // 19840
  // binding to multiple is not supported                                                                              // 19841
  if (propName == "multiple") return;                                                                                  // 19842
                                                                                                                       // 19843
  function defaultLinkFn(scope, element, attr) {                                                                       // 19844
    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {                                          // 19845
      attr.$set(attrName, !!value);                                                                                    // 19846
    });                                                                                                                // 19847
  }                                                                                                                    // 19848
                                                                                                                       // 19849
  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19850
  var linkFn = defaultLinkFn;                                                                                          // 19851
                                                                                                                       // 19852
  if (propName === 'checked') {                                                                                        // 19853
    linkFn = function(scope, element, attr) {                                                                          // 19854
      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input                         // 19855
      if (attr.ngModel !== attr[normalized]) {                                                                         // 19856
        defaultLinkFn(scope, element, attr);                                                                           // 19857
      }                                                                                                                // 19858
    };                                                                                                                 // 19859
  }                                                                                                                    // 19860
                                                                                                                       // 19861
  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19862
    return {                                                                                                           // 19863
      restrict: 'A',                                                                                                   // 19864
      priority: 100,                                                                                                   // 19865
      link: linkFn                                                                                                     // 19866
    };                                                                                                                 // 19867
  };                                                                                                                   // 19868
});                                                                                                                    // 19869
                                                                                                                       // 19870
// aliased input attrs are evaluated                                                                                   // 19871
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {                                                                     // 19872
  ngAttributeAliasDirectives[ngAttr] = function() {                                                                    // 19873
    return {                                                                                                           // 19874
      priority: 100,                                                                                                   // 19875
      link: function(scope, element, attr) {                                                                           // 19876
        //special case ngPattern when a literal regular expression value                                               // 19877
        //is used as the expression (this way we don't have to watch anything).                                        // 19878
        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {                                               // 19879
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);                                                       // 19880
          if (match) {                                                                                                 // 19881
            attr.$set("ngPattern", new RegExp(match[1], match[2]));                                                    // 19882
            return;                                                                                                    // 19883
          }                                                                                                            // 19884
        }                                                                                                              // 19885
                                                                                                                       // 19886
        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {                                            // 19887
          attr.$set(ngAttr, value);                                                                                    // 19888
        });                                                                                                            // 19889
      }                                                                                                                // 19890
    };                                                                                                                 // 19891
  };                                                                                                                   // 19892
});                                                                                                                    // 19893
                                                                                                                       // 19894
// ng-src, ng-srcset, ng-href are interpolated                                                                         // 19895
forEach(['src', 'srcset', 'href'], function(attrName) {                                                                // 19896
  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19897
  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19898
    return {                                                                                                           // 19899
      priority: 99, // it needs to run after the attributes are interpolated                                           // 19900
      link: function(scope, element, attr) {                                                                           // 19901
        var propName = attrName,                                                                                       // 19902
            name = attrName;                                                                                           // 19903
                                                                                                                       // 19904
        if (attrName === 'href' &&                                                                                     // 19905
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {                                    // 19906
          name = 'xlinkHref';                                                                                          // 19907
          attr.$attr[name] = 'xlink:href';                                                                             // 19908
          propName = null;                                                                                             // 19909
        }                                                                                                              // 19910
                                                                                                                       // 19911
        attr.$observe(normalized, function(value) {                                                                    // 19912
          if (!value) {                                                                                                // 19913
            if (attrName === 'href') {                                                                                 // 19914
              attr.$set(name, null);                                                                                   // 19915
            }                                                                                                          // 19916
            return;                                                                                                    // 19917
          }                                                                                                            // 19918
                                                                                                                       // 19919
          attr.$set(name, value);                                                                                      // 19920
                                                                                                                       // 19921
          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist                        // 19922
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need                           // 19923
          // to set the property as well to achieve the desired effect.                                                // 19924
          // we use attr[attrName] value since $set can sanitize the url.                                              // 19925
          if (msie && propName) element.prop(propName, attr[name]);                                                    // 19926
        });                                                                                                            // 19927
      }                                                                                                                // 19928
    };                                                                                                                 // 19929
  };                                                                                                                   // 19930
});                                                                                                                    // 19931
                                                                                                                       // 19932
/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true                                                  // 19933
 */                                                                                                                    // 19934
var nullFormCtrl = {                                                                                                   // 19935
  $addControl: noop,                                                                                                   // 19936
  $$renameControl: nullFormRenameControl,                                                                              // 19937
  $removeControl: noop,                                                                                                // 19938
  $setValidity: noop,                                                                                                  // 19939
  $setDirty: noop,                                                                                                     // 19940
  $setPristine: noop,                                                                                                  // 19941
  $setSubmitted: noop                                                                                                  // 19942
},                                                                                                                     // 19943
SUBMITTED_CLASS = 'ng-submitted';                                                                                      // 19944
                                                                                                                       // 19945
function nullFormRenameControl(control, name) {                                                                        // 19946
  control.$name = name;                                                                                                // 19947
}                                                                                                                      // 19948
                                                                                                                       // 19949
/**                                                                                                                    // 19950
 * @ngdoc type                                                                                                         // 19951
 * @name form.FormController                                                                                           // 19952
 *                                                                                                                     // 19953
 * @property {boolean} $pristine True if user has not interacted with the form yet.                                    // 19954
 * @property {boolean} $dirty True if user has already interacted with the form.                                       // 19955
 * @property {boolean} $valid True if all of the containing forms and controls are valid.                              // 19956
 * @property {boolean} $invalid True if at least one containing control or form is invalid.                            // 19957
 * @property {boolean} $pending True if at least one containing control or form is pending.                            // 19958
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.                             // 19959
 *                                                                                                                     // 19960
 * @property {Object} $error Is an object hash, containing references to controls or                                   // 19961
 *  forms with failing validators, where:                                                                              // 19962
 *                                                                                                                     // 19963
 *  - keys are validation tokens (error names),                                                                        // 19964
 *  - values are arrays of controls or forms that have a failing validator for given error name.                       // 19965
 *                                                                                                                     // 19966
 *  Built-in validation tokens:                                                                                        // 19967
 *                                                                                                                     // 19968
 *  - `email`                                                                                                          // 19969
 *  - `max`                                                                                                            // 19970
 *  - `maxlength`                                                                                                      // 19971
 *  - `min`                                                                                                            // 19972
 *  - `minlength`                                                                                                      // 19973
 *  - `number`                                                                                                         // 19974
 *  - `pattern`                                                                                                        // 19975
 *  - `required`                                                                                                       // 19976
 *  - `url`                                                                                                            // 19977
 *  - `date`                                                                                                           // 19978
 *  - `datetimelocal`                                                                                                  // 19979
 *  - `time`                                                                                                           // 19980
 *  - `week`                                                                                                           // 19981
 *  - `month`                                                                                                          // 19982
 *                                                                                                                     // 19983
 * @description                                                                                                        // 19984
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,                     // 19985
 * such as being valid/invalid or dirty/pristine.                                                                      // 19986
 *                                                                                                                     // 19987
 * Each {@link ng.directive:form form} directive creates an instance                                                   // 19988
 * of `FormController`.                                                                                                // 19989
 *                                                                                                                     // 19990
 */                                                                                                                    // 19991
//asks for $scope to fool the BC controller module                                                                     // 19992
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];                                 // 19993
function FormController(element, attrs, $scope, $animate, $interpolate) {                                              // 19994
  var form = this,                                                                                                     // 19995
      controls = [];                                                                                                   // 19996
                                                                                                                       // 19997
  // init state                                                                                                        // 19998
  form.$error = {};                                                                                                    // 19999
  form.$$success = {};                                                                                                 // 20000
  form.$pending = undefined;                                                                                           // 20001
  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);                                                 // 20002
  form.$dirty = false;                                                                                                 // 20003
  form.$pristine = true;                                                                                               // 20004
  form.$valid = true;                                                                                                  // 20005
  form.$invalid = false;                                                                                               // 20006
  form.$submitted = false;                                                                                             // 20007
  form.$$parentForm = nullFormCtrl;                                                                                    // 20008
                                                                                                                       // 20009
  /**                                                                                                                  // 20010
   * @ngdoc method                                                                                                     // 20011
   * @name form.FormController#$rollbackViewValue                                                                      // 20012
   *                                                                                                                   // 20013
   * @description                                                                                                      // 20014
   * Rollback all form controls pending updates to the `$modelValue`.                                                  // 20015
   *                                                                                                                   // 20016
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 20017
   * event defined in `ng-model-options`. This method is typically needed by the reset button of                       // 20018
   * a form that uses `ng-model-options` to pend updates.                                                              // 20019
   */                                                                                                                  // 20020
  form.$rollbackViewValue = function() {                                                                               // 20021
    forEach(controls, function(control) {                                                                              // 20022
      control.$rollbackViewValue();                                                                                    // 20023
    });                                                                                                                // 20024
  };                                                                                                                   // 20025
                                                                                                                       // 20026
  /**                                                                                                                  // 20027
   * @ngdoc method                                                                                                     // 20028
   * @name form.FormController#$commitViewValue                                                                        // 20029
   *                                                                                                                   // 20030
   * @description                                                                                                      // 20031
   * Commit all form controls pending updates to the `$modelValue`.                                                    // 20032
   *                                                                                                                   // 20033
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 20034
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`                          // 20035
   * usually handles calling this in response to input events.                                                         // 20036
   */                                                                                                                  // 20037
  form.$commitViewValue = function() {                                                                                 // 20038
    forEach(controls, function(control) {                                                                              // 20039
      control.$commitViewValue();                                                                                      // 20040
    });                                                                                                                // 20041
  };                                                                                                                   // 20042
                                                                                                                       // 20043
  /**                                                                                                                  // 20044
   * @ngdoc method                                                                                                     // 20045
   * @name form.FormController#$addControl                                                                             // 20046
   * @param {object} control control object, either a {@link form.FormController} or an                                // 20047
   * {@link ngModel.NgModelController}                                                                                 // 20048
   *                                                                                                                   // 20049
   * @description                                                                                                      // 20050
   * Register a control with the form. Input elements using ngModelController do this automatically                    // 20051
   * when they are linked.                                                                                             // 20052
   *                                                                                                                   // 20053
   * Note that the current state of the control will not be reflected on the new parent form. This                     // 20054
   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`                     // 20055
   * state.                                                                                                            // 20056
   *                                                                                                                   // 20057
   * However, if the method is used programmatically, for example by adding dynamically created controls,              // 20058
   * or controls that have been previously removed without destroying their corresponding DOM element,                 // 20059
   * it's the developers responsiblity to make sure the current state propagates to the parent form.                   // 20060
   *                                                                                                                   // 20061
   * For example, if an input control is added that is already `$dirty` and has `$error` properties,                   // 20062
   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.                   // 20063
   */                                                                                                                  // 20064
  form.$addControl = function(control) {                                                                               // 20065
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored                           // 20066
    // and not added to the scope.  Now we throw an error.                                                             // 20067
    assertNotHasOwnProperty(control.$name, 'input');                                                                   // 20068
    controls.push(control);                                                                                            // 20069
                                                                                                                       // 20070
    if (control.$name) {                                                                                               // 20071
      form[control.$name] = control;                                                                                   // 20072
    }                                                                                                                  // 20073
                                                                                                                       // 20074
    control.$$parentForm = form;                                                                                       // 20075
  };                                                                                                                   // 20076
                                                                                                                       // 20077
  // Private API: rename a form control                                                                                // 20078
  form.$$renameControl = function(control, newName) {                                                                  // 20079
    var oldName = control.$name;                                                                                       // 20080
                                                                                                                       // 20081
    if (form[oldName] === control) {                                                                                   // 20082
      delete form[oldName];                                                                                            // 20083
    }                                                                                                                  // 20084
    form[newName] = control;                                                                                           // 20085
    control.$name = newName;                                                                                           // 20086
  };                                                                                                                   // 20087
                                                                                                                       // 20088
  /**                                                                                                                  // 20089
   * @ngdoc method                                                                                                     // 20090
   * @name form.FormController#$removeControl                                                                          // 20091
   * @param {object} control control object, either a {@link form.FormController} or an                                // 20092
   * {@link ngModel.NgModelController}                                                                                 // 20093
   *                                                                                                                   // 20094
   * @description                                                                                                      // 20095
   * Deregister a control from the form.                                                                               // 20096
   *                                                                                                                   // 20097
   * Input elements using ngModelController do this automatically when they are destroyed.                             // 20098
   *                                                                                                                   // 20099
   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the                    // 20100
   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be                     // 20101
   * different from case to case. For example, removing the only `$dirty` control from a form may or                   // 20102
   * may not mean that the form is still `$dirty`.                                                                     // 20103
   */                                                                                                                  // 20104
  form.$removeControl = function(control) {                                                                            // 20105
    if (control.$name && form[control.$name] === control) {                                                            // 20106
      delete form[control.$name];                                                                                      // 20107
    }                                                                                                                  // 20108
    forEach(form.$pending, function(value, name) {                                                                     // 20109
      form.$setValidity(name, null, control);                                                                          // 20110
    });                                                                                                                // 20111
    forEach(form.$error, function(value, name) {                                                                       // 20112
      form.$setValidity(name, null, control);                                                                          // 20113
    });                                                                                                                // 20114
    forEach(form.$$success, function(value, name) {                                                                    // 20115
      form.$setValidity(name, null, control);                                                                          // 20116
    });                                                                                                                // 20117
                                                                                                                       // 20118
    arrayRemove(controls, control);                                                                                    // 20119
    control.$$parentForm = nullFormCtrl;                                                                               // 20120
  };                                                                                                                   // 20121
                                                                                                                       // 20122
                                                                                                                       // 20123
  /**                                                                                                                  // 20124
   * @ngdoc method                                                                                                     // 20125
   * @name form.FormController#$setValidity                                                                            // 20126
   *                                                                                                                   // 20127
   * @description                                                                                                      // 20128
   * Sets the validity of a form control.                                                                              // 20129
   *                                                                                                                   // 20130
   * This method will also propagate to parent forms.                                                                  // 20131
   */                                                                                                                  // 20132
  addSetValidityMethod({                                                                                               // 20133
    ctrl: this,                                                                                                        // 20134
    $element: element,                                                                                                 // 20135
    set: function(object, property, controller) {                                                                      // 20136
      var list = object[property];                                                                                     // 20137
      if (!list) {                                                                                                     // 20138
        object[property] = [controller];                                                                               // 20139
      } else {                                                                                                         // 20140
        var index = list.indexOf(controller);                                                                          // 20141
        if (index === -1) {                                                                                            // 20142
          list.push(controller);                                                                                       // 20143
        }                                                                                                              // 20144
      }                                                                                                                // 20145
    },                                                                                                                 // 20146
    unset: function(object, property, controller) {                                                                    // 20147
      var list = object[property];                                                                                     // 20148
      if (!list) {                                                                                                     // 20149
        return;                                                                                                        // 20150
      }                                                                                                                // 20151
      arrayRemove(list, controller);                                                                                   // 20152
      if (list.length === 0) {                                                                                         // 20153
        delete object[property];                                                                                       // 20154
      }                                                                                                                // 20155
    },                                                                                                                 // 20156
    $animate: $animate                                                                                                 // 20157
  });                                                                                                                  // 20158
                                                                                                                       // 20159
  /**                                                                                                                  // 20160
   * @ngdoc method                                                                                                     // 20161
   * @name form.FormController#$setDirty                                                                               // 20162
   *                                                                                                                   // 20163
   * @description                                                                                                      // 20164
   * Sets the form to a dirty state.                                                                                   // 20165
   *                                                                                                                   // 20166
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty                                 // 20167
   * state (ng-dirty class). This method will also propagate to parent forms.                                          // 20168
   */                                                                                                                  // 20169
  form.$setDirty = function() {                                                                                        // 20170
    $animate.removeClass(element, PRISTINE_CLASS);                                                                     // 20171
    $animate.addClass(element, DIRTY_CLASS);                                                                           // 20172
    form.$dirty = true;                                                                                                // 20173
    form.$pristine = false;                                                                                            // 20174
    form.$$parentForm.$setDirty();                                                                                     // 20175
  };                                                                                                                   // 20176
                                                                                                                       // 20177
  /**                                                                                                                  // 20178
   * @ngdoc method                                                                                                     // 20179
   * @name form.FormController#$setPristine                                                                            // 20180
   *                                                                                                                   // 20181
   * @description                                                                                                      // 20182
   * Sets the form to its pristine state.                                                                              // 20183
   *                                                                                                                   // 20184
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine                         // 20185
   * state (ng-pristine class). This method will also propagate to all the controls contained                          // 20186
   * in this form.                                                                                                     // 20187
   *                                                                                                                   // 20188
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after                      // 20189
   * saving or resetting it.                                                                                           // 20190
   */                                                                                                                  // 20191
  form.$setPristine = function() {                                                                                     // 20192
    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);                                   // 20193
    form.$dirty = false;                                                                                               // 20194
    form.$pristine = true;                                                                                             // 20195
    form.$submitted = false;                                                                                           // 20196
    forEach(controls, function(control) {                                                                              // 20197
      control.$setPristine();                                                                                          // 20198
    });                                                                                                                // 20199
  };                                                                                                                   // 20200
                                                                                                                       // 20201
  /**                                                                                                                  // 20202
   * @ngdoc method                                                                                                     // 20203
   * @name form.FormController#$setUntouched                                                                           // 20204
   *                                                                                                                   // 20205
   * @description                                                                                                      // 20206
   * Sets the form to its untouched state.                                                                             // 20207
   *                                                                                                                   // 20208
   * This method can be called to remove the 'ng-touched' class and set the form controls to their                     // 20209
   * untouched state (ng-untouched class).                                                                             // 20210
   *                                                                                                                   // 20211
   * Setting a form controls back to their untouched state is often useful when setting the form                       // 20212
   * back to its pristine state.                                                                                       // 20213
   */                                                                                                                  // 20214
  form.$setUntouched = function() {                                                                                    // 20215
    forEach(controls, function(control) {                                                                              // 20216
      control.$setUntouched();                                                                                         // 20217
    });                                                                                                                // 20218
  };                                                                                                                   // 20219
                                                                                                                       // 20220
  /**                                                                                                                  // 20221
   * @ngdoc method                                                                                                     // 20222
   * @name form.FormController#$setSubmitted                                                                           // 20223
   *                                                                                                                   // 20224
   * @description                                                                                                      // 20225
   * Sets the form to its submitted state.                                                                             // 20226
   */                                                                                                                  // 20227
  form.$setSubmitted = function() {                                                                                    // 20228
    $animate.addClass(element, SUBMITTED_CLASS);                                                                       // 20229
    form.$submitted = true;                                                                                            // 20230
    form.$$parentForm.$setSubmitted();                                                                                 // 20231
  };                                                                                                                   // 20232
}                                                                                                                      // 20233
                                                                                                                       // 20234
/**                                                                                                                    // 20235
 * @ngdoc directive                                                                                                    // 20236
 * @name ngForm                                                                                                        // 20237
 * @restrict EAC                                                                                                       // 20238
 *                                                                                                                     // 20239
 * @description                                                                                                        // 20240
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML                                                  // 20241
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a               // 20242
 * sub-group of controls needs to be determined.                                                                       // 20243
 *                                                                                                                     // 20244
 * Note: the purpose of `ngForm` is to group controls,                                                                 // 20245
 * but not to be a replacement for the `<form>` tag with all of its capabilities                                       // 20246
 * (e.g. posting to the server, ...).                                                                                  // 20247
 *                                                                                                                     // 20248
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into             // 20249
 *                       related scope, under this name.                                                               // 20250
 *                                                                                                                     // 20251
 */                                                                                                                    // 20252
                                                                                                                       // 20253
 /**                                                                                                                   // 20254
 * @ngdoc directive                                                                                                    // 20255
 * @name form                                                                                                          // 20256
 * @restrict E                                                                                                         // 20257
 *                                                                                                                     // 20258
 * @description                                                                                                        // 20259
 * Directive that instantiates                                                                                         // 20260
 * {@link form.FormController FormController}.                                                                         // 20261
 *                                                                                                                     // 20262
 * If the `name` attribute is specified, the form controller is published onto the current scope under                 // 20263
 * this name.                                                                                                          // 20264
 *                                                                                                                     // 20265
 * # Alias: {@link ng.directive:ngForm `ngForm`}                                                                       // 20266
 *                                                                                                                     // 20267
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child                      // 20268
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so                            // 20269
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to                    // 20270
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when                        // 20271
 * using Angular validation directives in forms that are dynamically generated using the                               // 20272
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`                // 20273
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an                 // 20274
 * `ngForm` directive and nest these in an outer `form` element.                                                       // 20275
 *                                                                                                                     // 20276
 *                                                                                                                     // 20277
 * # CSS classes                                                                                                       // 20278
 *  - `ng-valid` is set if the form is valid.                                                                          // 20279
 *  - `ng-invalid` is set if the form is invalid.                                                                      // 20280
 *  - `ng-pending` is set if the form is pending.                                                                      // 20281
 *  - `ng-pristine` is set if the form is pristine.                                                                    // 20282
 *  - `ng-dirty` is set if the form is dirty.                                                                          // 20283
 *  - `ng-submitted` is set if the form was submitted.                                                                 // 20284
 *                                                                                                                     // 20285
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 20286
 *                                                                                                                     // 20287
 *                                                                                                                     // 20288
 * # Submitting a form and preventing the default action                                                               // 20289
 *                                                                                                                     // 20290
 * Since the role of forms in client-side Angular applications is different than in classical                          // 20291
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full                    // 20292
 * page reload that sends the data to the server. Instead some javascript logic should be triggered                    // 20293
 * to handle the form submission in an application-specific way.                                                       // 20294
 *                                                                                                                     // 20295
 * For this reason, Angular prevents the default action (form submission to the server) unless the                     // 20296
 * `<form>` element has an `action` attribute specified.                                                               // 20297
 *                                                                                                                     // 20298
 * You can use one of the following two ways to specify what javascript method should be called when                   // 20299
 * a form is submitted:                                                                                                // 20300
 *                                                                                                                     // 20301
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element                                              // 20302
 * - {@link ng.directive:ngClick ngClick} directive on the first                                                       // 20303
  *  button or input field of type submit (input[type=submit])                                                         // 20304
 *                                                                                                                     // 20305
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}              // 20306
 * or {@link ng.directive:ngClick ngClick} directives.                                                                 // 20307
 * This is because of the following form submission rules in the HTML specification:                                   // 20308
 *                                                                                                                     // 20309
 * - If a form has only one input field then hitting enter in this field triggers form submit                          // 20310
 * (`ngSubmit`)                                                                                                        // 20311
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter                             // 20312
 * doesn't trigger submit                                                                                              // 20313
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then                         // 20314
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or                    // 20315
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)                            // 20316
 *                                                                                                                     // 20317
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is                          // 20318
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                        // 20319
 * to have access to the updated model.                                                                                // 20320
 *                                                                                                                     // 20321
 * ## Animation Hooks                                                                                                  // 20322
 *                                                                                                                     // 20323
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.                    // 20324
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any                        // 20325
 * other validations that are performed within the form. Animations in ngForm are similar to how                       // 20326
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well                     // 20327
 * as JS animations.                                                                                                   // 20328
 *                                                                                                                     // 20329
 * The following example shows a simple way to utilize CSS transitions to style a form element                         // 20330
 * that has been rendered as invalid after it has been validated:                                                      // 20331
 *                                                                                                                     // 20332
 * <pre>                                                                                                               // 20333
 * //be sure to include ngAnimate as a module to hook into more                                                        // 20334
 * //advanced animations                                                                                               // 20335
 * .my-form {                                                                                                          // 20336
 *   transition:0.5s linear all;                                                                                       // 20337
 *   background: white;                                                                                                // 20338
 * }                                                                                                                   // 20339
 * .my-form.ng-invalid {                                                                                               // 20340
 *   background: red;                                                                                                  // 20341
 *   color:white;                                                                                                      // 20342
 * }                                                                                                                   // 20343
 * </pre>                                                                                                              // 20344
 *                                                                                                                     // 20345
 * @example                                                                                                            // 20346
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">                          // 20347
      <file name="index.html">                                                                                         // 20348
       <script>                                                                                                        // 20349
         angular.module('formExample', [])                                                                             // 20350
           .controller('FormController', ['$scope', function($scope) {                                                 // 20351
             $scope.userType = 'guest';                                                                                // 20352
           }]);                                                                                                        // 20353
       </script>                                                                                                       // 20354
       <style>                                                                                                         // 20355
        .my-form {                                                                                                     // 20356
          transition:all linear 0.5s;                                                                                  // 20357
          background: transparent;                                                                                     // 20358
        }                                                                                                              // 20359
        .my-form.ng-invalid {                                                                                          // 20360
          background: red;                                                                                             // 20361
        }                                                                                                              // 20362
       </style>                                                                                                        // 20363
       <form name="myForm" ng-controller="FormController" class="my-form">                                             // 20364
         userType: <input name="input" ng-model="userType" required>                                                   // 20365
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>                               // 20366
         <code>userType = {{userType}}</code><br>                                                                      // 20367
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>                                                // 20368
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>                                                // 20369
         <code>myForm.$valid = {{myForm.$valid}}</code><br>                                                            // 20370
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>                                        // 20371
        </form>                                                                                                        // 20372
      </file>                                                                                                          // 20373
      <file name="protractor.js" type="protractor">                                                                    // 20374
        it('should initialize to model', function() {                                                                  // 20375
          var userType = element(by.binding('userType'));                                                              // 20376
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20377
                                                                                                                       // 20378
          expect(userType.getText()).toContain('guest');                                                               // 20379
          expect(valid.getText()).toContain('true');                                                                   // 20380
        });                                                                                                            // 20381
                                                                                                                       // 20382
        it('should be invalid if empty', function() {                                                                  // 20383
          var userType = element(by.binding('userType'));                                                              // 20384
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20385
          var userInput = element(by.model('userType'));                                                               // 20386
                                                                                                                       // 20387
          userInput.clear();                                                                                           // 20388
          userInput.sendKeys('');                                                                                      // 20389
                                                                                                                       // 20390
          expect(userType.getText()).toEqual('userType =');                                                            // 20391
          expect(valid.getText()).toContain('false');                                                                  // 20392
        });                                                                                                            // 20393
      </file>                                                                                                          // 20394
    </example>                                                                                                         // 20395
 *                                                                                                                     // 20396
 * @param {string=} name Name of the form. If specified, the form controller will be published into                    // 20397
 *                       related scope, under this name.                                                               // 20398
 */                                                                                                                    // 20399
var formDirectiveFactory = function(isNgForm) {                                                                        // 20400
  return ['$timeout', '$parse', function($timeout, $parse) {                                                           // 20401
    var formDirective = {                                                                                              // 20402
      name: 'form',                                                                                                    // 20403
      restrict: isNgForm ? 'EAC' : 'E',                                                                                // 20404
      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form                  // 20405
      controller: FormController,                                                                                      // 20406
      compile: function ngFormCompile(formElement, attr) {                                                             // 20407
        // Setup initial state of the control                                                                          // 20408
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);                                                    // 20409
                                                                                                                       // 20410
        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);                              // 20411
                                                                                                                       // 20412
        return {                                                                                                       // 20413
          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {                                               // 20414
            var controller = ctrls[0];                                                                                 // 20415
                                                                                                                       // 20416
            // if `action` attr is not present on the form, prevent the default action (submission)                    // 20417
            if (!('action' in attr)) {                                                                                 // 20418
              // we can't use jq events because if a form is destroyed during submission the default                   // 20419
              // action is not prevented. see #1238                                                                    // 20420
              //                                                                                                       // 20421
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full                      // 20422
              // page reload if the form was destroyed by submission of the form via a click handler                   // 20423
              // on a button in the form. Looks like an IE9 specific bug.                                              // 20424
              var handleFormSubmission = function(event) {                                                             // 20425
                scope.$apply(function() {                                                                              // 20426
                  controller.$commitViewValue();                                                                       // 20427
                  controller.$setSubmitted();                                                                          // 20428
                });                                                                                                    // 20429
                                                                                                                       // 20430
                event.preventDefault();                                                                                // 20431
              };                                                                                                       // 20432
                                                                                                                       // 20433
              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);                                      // 20434
                                                                                                                       // 20435
              // unregister the preventDefault listener so that we don't not leak memory but in a                      // 20436
              // way that will achieve the prevention of the default action.                                           // 20437
              formElement.on('$destroy', function() {                                                                  // 20438
                $timeout(function() {                                                                                  // 20439
                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);                               // 20440
                }, 0, false);                                                                                          // 20441
              });                                                                                                      // 20442
            }                                                                                                          // 20443
                                                                                                                       // 20444
            var parentFormCtrl = ctrls[1] || controller.$$parentForm;                                                  // 20445
            parentFormCtrl.$addControl(controller);                                                                    // 20446
                                                                                                                       // 20447
            var setter = nameAttr ? getSetter(controller.$name) : noop;                                                // 20448
                                                                                                                       // 20449
            if (nameAttr) {                                                                                            // 20450
              setter(scope, controller);                                                                               // 20451
              attr.$observe(nameAttr, function(newValue) {                                                             // 20452
                if (controller.$name === newValue) return;                                                             // 20453
                setter(scope, undefined);                                                                              // 20454
                controller.$$parentForm.$$renameControl(controller, newValue);                                         // 20455
                setter = getSetter(controller.$name);                                                                  // 20456
                setter(scope, controller);                                                                             // 20457
              });                                                                                                      // 20458
            }                                                                                                          // 20459
            formElement.on('$destroy', function() {                                                                    // 20460
              controller.$$parentForm.$removeControl(controller);                                                      // 20461
              setter(scope, undefined);                                                                                // 20462
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards                  // 20463
            });                                                                                                        // 20464
          }                                                                                                            // 20465
        };                                                                                                             // 20466
      }                                                                                                                // 20467
    };                                                                                                                 // 20468
                                                                                                                       // 20469
    return formDirective;                                                                                              // 20470
                                                                                                                       // 20471
    function getSetter(expression) {                                                                                   // 20472
      if (expression === '') {                                                                                         // 20473
        //create an assignable expression, so forms with an empty name can be renamed later                            // 20474
        return $parse('this[""]').assign;                                                                              // 20475
      }                                                                                                                // 20476
      return $parse(expression).assign || noop;                                                                        // 20477
    }                                                                                                                  // 20478
  }];                                                                                                                  // 20479
};                                                                                                                     // 20480
                                                                                                                       // 20481
var formDirective = formDirectiveFactory();                                                                            // 20482
var ngFormDirective = formDirectiveFactory(true);                                                                      // 20483
                                                                                                                       // 20484
/* global VALID_CLASS: false,                                                                                          // 20485
  INVALID_CLASS: false,                                                                                                // 20486
  PRISTINE_CLASS: false,                                                                                               // 20487
  DIRTY_CLASS: false,                                                                                                  // 20488
  UNTOUCHED_CLASS: false,                                                                                              // 20489
  TOUCHED_CLASS: false,                                                                                                // 20490
  ngModelMinErr: false,                                                                                                // 20491
*/                                                                                                                     // 20492
                                                                                                                       // 20493
// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;                      // 20495
var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;                // 20496
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;                                               // 20498
var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;                                                                         // 20499
var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                            // 20500
var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;                                                                                 // 20501
var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;                                                                                 // 20502
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                                                           // 20503
                                                                                                                       // 20504
var inputType = {                                                                                                      // 20505
                                                                                                                       // 20506
  /**                                                                                                                  // 20507
   * @ngdoc input                                                                                                      // 20508
   * @name input[text]                                                                                                 // 20509
   *                                                                                                                   // 20510
   * @description                                                                                                      // 20511
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.                    // 20512
   *                                                                                                                   // 20513
   *                                                                                                                   // 20514
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20515
   * @param {string=} name Property name of the form under which the control is published.                             // 20516
   * @param {string=} required Adds `required` validation error key if the value is not entered.                       // 20517
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20518
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20519
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20520
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 20521
   *    minlength.                                                                                                     // 20522
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 20523
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 20524
   *    any length.                                                                                                    // 20525
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 20526
   *    that contains the regular expression body that will be converted to a regular expression                       // 20527
   *    as in the ngPattern directive.                                                                                 // 20528
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 20529
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 20530
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 20531
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 20532
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 20533
   *    `new RegExp('^abc$')`.<br />                                                                                   // 20534
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 20535
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 20536
   *    account.                                                                                                       // 20537
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20538
   *    interaction with the input element.                                                                            // 20539
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                    // 20540
   *    This parameter is ignored for input[type=password] controls, which will never trim the                         // 20541
   *    input.                                                                                                         // 20542
   *                                                                                                                   // 20543
   * @example                                                                                                          // 20544
      <example name="text-input-directive" module="textInputExample">                                                  // 20545
        <file name="index.html">                                                                                       // 20546
         <script>                                                                                                      // 20547
           angular.module('textInputExample', [])                                                                      // 20548
             .controller('ExampleController', ['$scope', function($scope) {                                            // 20549
               $scope.example = {                                                                                      // 20550
                 text: 'guest',                                                                                        // 20551
                 word: /^\s*\w*\s*$/                                                                                   // 20552
               };                                                                                                      // 20553
             }]);                                                                                                      // 20554
         </script>                                                                                                     // 20555
         <form name="myForm" ng-controller="ExampleController">                                                        // 20556
           <label>Single word:                                                                                         // 20557
             <input type="text" name="input" ng-model="example.text"                                                   // 20558
                    ng-pattern="example.word" required ng-trim="false">                                                // 20559
           </label>                                                                                                    // 20560
           <div role="alert">                                                                                          // 20561
             <span class="error" ng-show="myForm.input.$error.required">                                               // 20562
               Required!</span>                                                                                        // 20563
             <span class="error" ng-show="myForm.input.$error.pattern">                                                // 20564
               Single word only!</span>                                                                                // 20565
           </div>                                                                                                      // 20566
           <tt>text = {{example.text}}</tt><br/>                                                                       // 20567
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20568
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20569
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20570
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20571
          </form>                                                                                                      // 20572
        </file>                                                                                                        // 20573
        <file name="protractor.js" type="protractor">                                                                  // 20574
          var text = element(by.binding('example.text'));                                                              // 20575
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20576
          var input = element(by.model('example.text'));                                                               // 20577
                                                                                                                       // 20578
          it('should initialize to model', function() {                                                                // 20579
            expect(text.getText()).toContain('guest');                                                                 // 20580
            expect(valid.getText()).toContain('true');                                                                 // 20581
          });                                                                                                          // 20582
                                                                                                                       // 20583
          it('should be invalid if empty', function() {                                                                // 20584
            input.clear();                                                                                             // 20585
            input.sendKeys('');                                                                                        // 20586
                                                                                                                       // 20587
            expect(text.getText()).toEqual('text =');                                                                  // 20588
            expect(valid.getText()).toContain('false');                                                                // 20589
          });                                                                                                          // 20590
                                                                                                                       // 20591
          it('should be invalid if multi word', function() {                                                           // 20592
            input.clear();                                                                                             // 20593
            input.sendKeys('hello world');                                                                             // 20594
                                                                                                                       // 20595
            expect(valid.getText()).toContain('false');                                                                // 20596
          });                                                                                                          // 20597
        </file>                                                                                                        // 20598
      </example>                                                                                                       // 20599
   */                                                                                                                  // 20600
  'text': textInputType,                                                                                               // 20601
                                                                                                                       // 20602
    /**                                                                                                                // 20603
     * @ngdoc input                                                                                                    // 20604
     * @name input[date]                                                                                               // 20605
     *                                                                                                                 // 20606
     * @description                                                                                                    // 20607
     * Input with date validation and transformation. In browsers that do not yet support                              // 20608
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601       // 20609
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many                                                 // 20610
     * modern browsers do not yet support this input type, it is important to provide cues to users on the             // 20611
     * expected input format via a placeholder or label.                                                               // 20612
     *                                                                                                                 // 20613
     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 20614
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 20615
     *                                                                                                                 // 20616
     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 20617
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 20618
     *                                                                                                                 // 20619
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 20620
     * @param {string=} name Property name of the form under which the control is published.                           // 20621
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute                      // 20623
     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5                    // 20624
     *   constraint validation.                                                                                        // 20625
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute                    // 20627
     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5                    // 20628
     *   constraint validation.                                                                                        // 20629
     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string                // 20630
     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                           // 20631
     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string                // 20632
     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                           // 20633
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 20634
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 20635
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 20636
     *    `required` when you want to data-bind to the `required` attribute.                                           // 20637
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 20638
     *    interaction with the input element.                                                                          // 20639
     *                                                                                                                 // 20640
     * @example                                                                                                        // 20641
     <example name="date-input-directive" module="dateInputExample">                                                   // 20642
     <file name="index.html">                                                                                          // 20643
       <script>                                                                                                        // 20644
          angular.module('dateInputExample', [])                                                                       // 20645
            .controller('DateController', ['$scope', function($scope) {                                                // 20646
              $scope.example = {                                                                                       // 20647
                value: new Date(2013, 9, 22)                                                                           // 20648
              };                                                                                                       // 20649
            }]);                                                                                                       // 20650
       </script>                                                                                                       // 20651
       <form name="myForm" ng-controller="DateController as dateCtrl">                                                 // 20652
          <label for="exampleInput">Pick a date in 2013:</label>                                                       // 20653
          <input type="date" id="exampleInput" name="input" ng-model="example.value"                                   // 20654
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />                                   // 20655
          <div role="alert">                                                                                           // 20656
            <span class="error" ng-show="myForm.input.$error.required">                                                // 20657
                Required!</span>                                                                                       // 20658
            <span class="error" ng-show="myForm.input.$error.date">                                                    // 20659
                Not a valid date!</span>                                                                               // 20660
           </div>                                                                                                      // 20661
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>                                                // 20662
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20663
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20664
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20665
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20666
       </form>                                                                                                         // 20667
     </file>                                                                                                           // 20668
     <file name="protractor.js" type="protractor">                                                                     // 20669
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));                                         // 20670
        var valid = element(by.binding('myForm.input.$valid'));                                                        // 20671
        var input = element(by.model('example.value'));                                                                // 20672
                                                                                                                       // 20673
        // currently protractor/webdriver does not support                                                             // 20674
        // sending keys to all known HTML5 input controls                                                              // 20675
        // for various browsers (see https://github.com/angular/protractor/issues/562).                                // 20676
        function setInput(val) {                                                                                       // 20677
          // set the value of the element and force validation.                                                        // 20678
          var scr = "var ipt = document.getElementById('exampleInput'); " +                                            // 20679
          "ipt.value = '" + val + "';" +                                                                               // 20680
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";    // 20681
          browser.executeScript(scr);                                                                                  // 20682
        }                                                                                                              // 20683
                                                                                                                       // 20684
        it('should initialize to model', function() {                                                                  // 20685
          expect(value.getText()).toContain('2013-10-22');                                                             // 20686
          expect(valid.getText()).toContain('myForm.input.$valid = true');                                             // 20687
        });                                                                                                            // 20688
                                                                                                                       // 20689
        it('should be invalid if empty', function() {                                                                  // 20690
          setInput('');                                                                                                // 20691
          expect(value.getText()).toEqual('value =');                                                                  // 20692
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20693
        });                                                                                                            // 20694
                                                                                                                       // 20695
        it('should be invalid if over max', function() {                                                               // 20696
          setInput('2015-01-01');                                                                                      // 20697
          expect(value.getText()).toContain('');                                                                       // 20698
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20699
        });                                                                                                            // 20700
     </file>                                                                                                           // 20701
     </example>                                                                                                        // 20702
     */                                                                                                                // 20703
  'date': createDateInputType('date', DATE_REGEXP,                                                                     // 20704
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),                                                          // 20705
         'yyyy-MM-dd'),                                                                                                // 20706
                                                                                                                       // 20707
   /**                                                                                                                 // 20708
    * @ngdoc input                                                                                                     // 20709
    * @name input[datetime-local]                                                                                      // 20710
    *                                                                                                                  // 20711
    * @description                                                                                                     // 20712
    * Input with datetime validation and transformation. In browsers that do not yet support                           // 20713
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20714
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.                                 // 20715
    *                                                                                                                  // 20716
    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20717
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20718
    *                                                                                                                  // 20719
    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20720
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20721
    *                                                                                                                  // 20722
    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20723
    * @param {string=} name Property name of the form under which the control is published.                            // 20724
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                // 20725
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation                 // 20726
    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).                        // 20727
    *   Note that `min` will also add native HTML5 constraint validation.                                              // 20728
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.             // 20729
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation                 // 20730
    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).                        // 20731
    *   Note that `max` will also add native HTML5 constraint validation.                                              // 20732
    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string              // 20733
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                            // 20734
    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string              // 20735
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                            // 20736
    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 20737
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 20738
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 20739
    *    `required` when you want to data-bind to the `required` attribute.                                            // 20740
    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 20741
    *    interaction with the input element.                                                                           // 20742
    *                                                                                                                  // 20743
    * @example                                                                                                         // 20744
    <example name="datetimelocal-input-directive" module="dateExample">                                                // 20745
    <file name="index.html">                                                                                           // 20746
      <script>                                                                                                         // 20747
        angular.module('dateExample', [])                                                                              // 20748
          .controller('DateController', ['$scope', function($scope) {                                                  // 20749
            $scope.example = {                                                                                         // 20750
              value: new Date(2010, 11, 28, 14, 57)                                                                    // 20751
            };                                                                                                         // 20752
          }]);                                                                                                         // 20753
      </script>                                                                                                        // 20754
      <form name="myForm" ng-controller="DateController as dateCtrl">                                                  // 20755
        <label for="exampleInput">Pick a date between in 2013:</label>                                                 // 20756
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"                           // 20757
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />          // 20758
        <div role="alert">                                                                                             // 20759
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20760
              Required!</span>                                                                                         // 20761
          <span class="error" ng-show="myForm.input.$error.datetimelocal">                                             // 20762
              Not a valid date!</span>                                                                                 // 20763
        </div>                                                                                                         // 20764
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>                                          // 20765
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20766
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20767
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20768
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20769
      </form>                                                                                                          // 20770
    </file>                                                                                                            // 20771
    <file name="protractor.js" type="protractor">                                                                      // 20772
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));                                  // 20773
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20774
      var input = element(by.model('example.value'));                                                                  // 20775
                                                                                                                       // 20776
      // currently protractor/webdriver does not support                                                               // 20777
      // sending keys to all known HTML5 input controls                                                                // 20778
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20779
      function setInput(val) {                                                                                         // 20780
        // set the value of the element and force validation.                                                          // 20781
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20782
        "ipt.value = '" + val + "';" +                                                                                 // 20783
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20784
        browser.executeScript(scr);                                                                                    // 20785
      }                                                                                                                // 20786
                                                                                                                       // 20787
      it('should initialize to model', function() {                                                                    // 20788
        expect(value.getText()).toContain('2010-12-28T14:57:00');                                                      // 20789
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20790
      });                                                                                                              // 20791
                                                                                                                       // 20792
      it('should be invalid if empty', function() {                                                                    // 20793
        setInput('');                                                                                                  // 20794
        expect(value.getText()).toEqual('value =');                                                                    // 20795
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20796
      });                                                                                                              // 20797
                                                                                                                       // 20798
      it('should be invalid if over max', function() {                                                                 // 20799
        setInput('2015-01-01T23:59:00');                                                                               // 20800
        expect(value.getText()).toContain('');                                                                         // 20801
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20802
      });                                                                                                              // 20803
    </file>                                                                                                            // 20804
    </example>                                                                                                         // 20805
    */                                                                                                                 // 20806
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,                                         // 20807
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),                           // 20808
      'yyyy-MM-ddTHH:mm:ss.sss'),                                                                                      // 20809
                                                                                                                       // 20810
  /**                                                                                                                  // 20811
   * @ngdoc input                                                                                                      // 20812
   * @name input[time]                                                                                                 // 20813
   *                                                                                                                   // 20814
   * @description                                                                                                      // 20815
   * Input with time validation and transformation. In browsers that do not yet support                                // 20816
   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601     // 20817
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.                    // 20819
   *                                                                                                                   // 20820
   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 20821
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 20822
   *                                                                                                                   // 20823
   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 20824
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 20825
   *                                                                                                                   // 20826
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20827
   * @param {string=} name Property name of the form under which the control is published.                             // 20828
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 20829
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this                     // 20830
   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add                           // 20831
   *   native HTML5 constraint validation.                                                                             // 20832
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 20833
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this                     // 20834
   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add                           // 20835
   *   native HTML5 constraint validation.                                                                             // 20836
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the              // 20837
   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                                 // 20838
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the              // 20839
   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                                 // 20840
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 20841
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20842
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20843
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20844
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20845
   *    interaction with the input element.                                                                            // 20846
   *                                                                                                                   // 20847
   * @example                                                                                                          // 20848
   <example name="time-input-directive" module="timeExample">                                                          // 20849
   <file name="index.html">                                                                                            // 20850
     <script>                                                                                                          // 20851
      angular.module('timeExample', [])                                                                                // 20852
        .controller('DateController', ['$scope', function($scope) {                                                    // 20853
          $scope.example = {                                                                                           // 20854
            value: new Date(1970, 0, 1, 14, 57, 0)                                                                     // 20855
          };                                                                                                           // 20856
        }]);                                                                                                           // 20857
     </script>                                                                                                         // 20858
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 20859
        <label for="exampleInput">Pick a between 8am and 5pm:</label>                                                  // 20860
        <input type="time" id="exampleInput" name="input" ng-model="example.value"                                     // 20861
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />                                           // 20862
        <div role="alert">                                                                                             // 20863
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20864
              Required!</span>                                                                                         // 20865
          <span class="error" ng-show="myForm.input.$error.time">                                                      // 20866
              Not a valid date!</span>                                                                                 // 20867
        </div>                                                                                                         // 20868
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>                                                     // 20869
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20870
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20871
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20872
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20873
     </form>                                                                                                           // 20874
   </file>                                                                                                             // 20875
   <file name="protractor.js" type="protractor">                                                                       // 20876
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));                                             // 20877
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20878
      var input = element(by.model('example.value'));                                                                  // 20879
                                                                                                                       // 20880
      // currently protractor/webdriver does not support                                                               // 20881
      // sending keys to all known HTML5 input controls                                                                // 20882
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20883
      function setInput(val) {                                                                                         // 20884
        // set the value of the element and force validation.                                                          // 20885
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20886
        "ipt.value = '" + val + "';" +                                                                                 // 20887
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20888
        browser.executeScript(scr);                                                                                    // 20889
      }                                                                                                                // 20890
                                                                                                                       // 20891
      it('should initialize to model', function() {                                                                    // 20892
        expect(value.getText()).toContain('14:57:00');                                                                 // 20893
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20894
      });                                                                                                              // 20895
                                                                                                                       // 20896
      it('should be invalid if empty', function() {                                                                    // 20897
        setInput('');                                                                                                  // 20898
        expect(value.getText()).toEqual('value =');                                                                    // 20899
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20900
      });                                                                                                              // 20901
                                                                                                                       // 20902
      it('should be invalid if over max', function() {                                                                 // 20903
        setInput('23:59:00');                                                                                          // 20904
        expect(value.getText()).toContain('');                                                                         // 20905
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20906
      });                                                                                                              // 20907
   </file>                                                                                                             // 20908
   </example>                                                                                                          // 20909
   */                                                                                                                  // 20910
  'time': createDateInputType('time', TIME_REGEXP,                                                                     // 20911
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),                                                        // 20912
     'HH:mm:ss.sss'),                                                                                                  // 20913
                                                                                                                       // 20914
   /**                                                                                                                 // 20915
    * @ngdoc input                                                                                                     // 20916
    * @name input[week]                                                                                                // 20917
    *                                                                                                                  // 20918
    * @description                                                                                                     // 20919
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support           // 20920
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20921
    * week format (yyyy-W##), for example: `2013-W02`.                                                                 // 20922
    *                                                                                                                  // 20923
    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20924
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20925
    *                                                                                                                  // 20926
    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20927
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20928
    *                                                                                                                  // 20929
    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20930
    * @param {string=} name Property name of the form under which the control is published.                            // 20931
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                // 20932
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this                    // 20933
    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add                          // 20934
    *   native HTML5 constraint validation.                                                                            // 20935
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.             // 20936
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this                    // 20937
    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add                          // 20938
    *   native HTML5 constraint validation.                                                                            // 20939
    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string                 // 20940
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                            // 20941
    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string                 // 20942
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                            // 20943
    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 20944
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 20945
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 20946
    *    `required` when you want to data-bind to the `required` attribute.                                            // 20947
    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 20948
    *    interaction with the input element.                                                                           // 20949
    *                                                                                                                  // 20950
    * @example                                                                                                         // 20951
    <example name="week-input-directive" module="weekExample">                                                         // 20952
    <file name="index.html">                                                                                           // 20953
      <script>                                                                                                         // 20954
      angular.module('weekExample', [])                                                                                // 20955
        .controller('DateController', ['$scope', function($scope) {                                                    // 20956
          $scope.example = {                                                                                           // 20957
            value: new Date(2013, 0, 3)                                                                                // 20958
          };                                                                                                           // 20959
        }]);                                                                                                           // 20960
      </script>                                                                                                        // 20961
      <form name="myForm" ng-controller="DateController as dateCtrl">                                                  // 20962
        <label>Pick a date between in 2013:                                                                            // 20963
          <input id="exampleInput" type="week" name="input" ng-model="example.value"                                   // 20964
                 placeholder="YYYY-W##" min="2012-W32"                                                                 // 20965
                 max="2013-W52" required />                                                                            // 20966
        </label>                                                                                                       // 20967
        <div role="alert">                                                                                             // 20968
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20969
              Required!</span>                                                                                         // 20970
          <span class="error" ng-show="myForm.input.$error.week">                                                      // 20971
              Not a valid date!</span>                                                                                 // 20972
        </div>                                                                                                         // 20973
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>                                                     // 20974
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20975
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20976
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20977
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20978
      </form>                                                                                                          // 20979
    </file>                                                                                                            // 20980
    <file name="protractor.js" type="protractor">                                                                      // 20981
      var value = element(by.binding('example.value | date: "yyyy-Www"'));                                             // 20982
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20983
      var input = element(by.model('example.value'));                                                                  // 20984
                                                                                                                       // 20985
      // currently protractor/webdriver does not support                                                               // 20986
      // sending keys to all known HTML5 input controls                                                                // 20987
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20988
      function setInput(val) {                                                                                         // 20989
        // set the value of the element and force validation.                                                          // 20990
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20991
        "ipt.value = '" + val + "';" +                                                                                 // 20992
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20993
        browser.executeScript(scr);                                                                                    // 20994
      }                                                                                                                // 20995
                                                                                                                       // 20996
      it('should initialize to model', function() {                                                                    // 20997
        expect(value.getText()).toContain('2013-W01');                                                                 // 20998
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20999
      });                                                                                                              // 21000
                                                                                                                       // 21001
      it('should be invalid if empty', function() {                                                                    // 21002
        setInput('');                                                                                                  // 21003
        expect(value.getText()).toEqual('value =');                                                                    // 21004
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21005
      });                                                                                                              // 21006
                                                                                                                       // 21007
      it('should be invalid if over max', function() {                                                                 // 21008
        setInput('2015-W01');                                                                                          // 21009
        expect(value.getText()).toContain('');                                                                         // 21010
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21011
      });                                                                                                              // 21012
    </file>                                                                                                            // 21013
    </example>                                                                                                         // 21014
    */                                                                                                                 // 21015
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),                                            // 21016
                                                                                                                       // 21017
  /**                                                                                                                  // 21018
   * @ngdoc input                                                                                                      // 21019
   * @name input[month]                                                                                                // 21020
   *                                                                                                                   // 21021
   * @description                                                                                                      // 21022
   * Input with month validation and transformation. In browsers that do not yet support                               // 21023
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 21024
   * month format (yyyy-MM), for example: `2009-01`.                                                                   // 21025
   *                                                                                                                   // 21026
   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 21027
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 21028
   * If the model is not set to the first of the month, the next view to model update will set it                      // 21029
   * to the first of the month.                                                                                        // 21030
   *                                                                                                                   // 21031
   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 21032
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 21033
   *                                                                                                                   // 21034
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21035
   * @param {string=} name Property name of the form under which the control is published.                             // 21036
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 21037
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this                     // 21038
   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add                           // 21039
   *   native HTML5 constraint validation.                                                                             // 21040
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 21041
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this                     // 21042
   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add                           // 21043
   *   native HTML5 constraint validation.                                                                             // 21044
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string                  // 21045
   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.                             // 21046
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string                  // 21047
   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.                             // 21048
                                                                                                                       // 21049
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21050
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21051
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21052
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21053
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21054
   *    interaction with the input element.                                                                            // 21055
   *                                                                                                                   // 21056
   * @example                                                                                                          // 21057
   <example name="month-input-directive" module="monthExample">                                                        // 21058
   <file name="index.html">                                                                                            // 21059
     <script>                                                                                                          // 21060
      angular.module('monthExample', [])                                                                               // 21061
        .controller('DateController', ['$scope', function($scope) {                                                    // 21062
          $scope.example = {                                                                                           // 21063
            value: new Date(2013, 9, 1)                                                                                // 21064
          };                                                                                                           // 21065
        }]);                                                                                                           // 21066
     </script>                                                                                                         // 21067
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 21068
       <label for="exampleInput">Pick a month in 2013:</label>                                                         // 21069
       <input id="exampleInput" type="month" name="input" ng-model="example.value"                                     // 21070
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />                                                // 21071
       <div role="alert">                                                                                              // 21072
         <span class="error" ng-show="myForm.input.$error.required">                                                   // 21073
            Required!</span>                                                                                           // 21074
         <span class="error" ng-show="myForm.input.$error.month">                                                      // 21075
            Not a valid month!</span>                                                                                  // 21076
       </div>                                                                                                          // 21077
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>                                                       // 21078
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                     // 21079
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                     // 21080
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                 // 21081
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                             // 21082
     </form>                                                                                                           // 21083
   </file>                                                                                                             // 21084
   <file name="protractor.js" type="protractor">                                                                       // 21085
      var value = element(by.binding('example.value | date: "yyyy-MM"'));                                              // 21086
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 21087
      var input = element(by.model('example.value'));                                                                  // 21088
                                                                                                                       // 21089
      // currently protractor/webdriver does not support                                                               // 21090
      // sending keys to all known HTML5 input controls                                                                // 21091
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 21092
      function setInput(val) {                                                                                         // 21093
        // set the value of the element and force validation.                                                          // 21094
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 21095
        "ipt.value = '" + val + "';" +                                                                                 // 21096
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 21097
        browser.executeScript(scr);                                                                                    // 21098
      }                                                                                                                // 21099
                                                                                                                       // 21100
      it('should initialize to model', function() {                                                                    // 21101
        expect(value.getText()).toContain('2013-10');                                                                  // 21102
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 21103
      });                                                                                                              // 21104
                                                                                                                       // 21105
      it('should be invalid if empty', function() {                                                                    // 21106
        setInput('');                                                                                                  // 21107
        expect(value.getText()).toEqual('value =');                                                                    // 21108
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21109
      });                                                                                                              // 21110
                                                                                                                       // 21111
      it('should be invalid if over max', function() {                                                                 // 21112
        setInput('2015-01');                                                                                           // 21113
        expect(value.getText()).toContain('');                                                                         // 21114
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21115
      });                                                                                                              // 21116
   </file>                                                                                                             // 21117
   </example>                                                                                                          // 21118
   */                                                                                                                  // 21119
  'month': createDateInputType('month', MONTH_REGEXP,                                                                  // 21120
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),                                                                   // 21121
     'yyyy-MM'),                                                                                                       // 21122
                                                                                                                       // 21123
  /**                                                                                                                  // 21124
   * @ngdoc input                                                                                                      // 21125
   * @name input[number]                                                                                               // 21126
   *                                                                                                                   // 21127
   * @description                                                                                                      // 21128
   * Text input with number validation and transformation. Sets the `number` validation                                // 21129
   * error if not a valid number.                                                                                      // 21130
   *                                                                                                                   // 21131
   * <div class="alert alert-warning">                                                                                 // 21132
   * The model must always be of type `number` otherwise Angular will throw an error.                                  // 21133
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}                          // 21134
   * error docs for more information and an example of how to convert your model if necessary.                         // 21135
   * </div>                                                                                                            // 21136
   *                                                                                                                   // 21137
   * ## Issues with HTML5 constraint validation                                                                        // 21138
   *                                                                                                                   // 21139
   * In browsers that follow the                                                                                       // 21140
   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),          // 21141
   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.              // 21142
   * If a non-number is entered in the input, the browser will report the value as an empty string,                    // 21143
   * which means the view / model values in `ngModel` and subsequently the scope value                                 // 21144
   * will also be an empty string.                                                                                     // 21145
   *                                                                                                                   // 21146
   *                                                                                                                   // 21147
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21148
   * @param {string=} name Property name of the form under which the control is published.                             // 21149
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 21150
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 21151
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21152
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21153
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21154
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21155
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21156
   *    minlength.                                                                                                     // 21157
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21158
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21159
   *    any length.                                                                                                    // 21160
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21161
   *    that contains the regular expression body that will be converted to a regular expression                       // 21162
   *    as in the ngPattern directive.                                                                                 // 21163
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21164
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21165
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21166
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21167
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21168
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21169
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21170
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21171
   *    account.                                                                                                       // 21172
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21173
   *    interaction with the input element.                                                                            // 21174
   *                                                                                                                   // 21175
   * @example                                                                                                          // 21176
      <example name="number-input-directive" module="numberExample">                                                   // 21177
        <file name="index.html">                                                                                       // 21178
         <script>                                                                                                      // 21179
           angular.module('numberExample', [])                                                                         // 21180
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21181
               $scope.example = {                                                                                      // 21182
                 value: 12                                                                                             // 21183
               };                                                                                                      // 21184
             }]);                                                                                                      // 21185
         </script>                                                                                                     // 21186
         <form name="myForm" ng-controller="ExampleController">                                                        // 21187
           <label>Number:                                                                                              // 21188
             <input type="number" name="input" ng-model="example.value"                                                // 21189
                    min="0" max="99" required>                                                                         // 21190
          </label>                                                                                                     // 21191
           <div role="alert">                                                                                          // 21192
             <span class="error" ng-show="myForm.input.$error.required">                                               // 21193
               Required!</span>                                                                                        // 21194
             <span class="error" ng-show="myForm.input.$error.number">                                                 // 21195
               Not valid number!</span>                                                                                // 21196
           </div>                                                                                                      // 21197
           <tt>value = {{example.value}}</tt><br/>                                                                     // 21198
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21199
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21200
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21201
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21202
          </form>                                                                                                      // 21203
        </file>                                                                                                        // 21204
        <file name="protractor.js" type="protractor">                                                                  // 21205
          var value = element(by.binding('example.value'));                                                            // 21206
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21207
          var input = element(by.model('example.value'));                                                              // 21208
                                                                                                                       // 21209
          it('should initialize to model', function() {                                                                // 21210
            expect(value.getText()).toContain('12');                                                                   // 21211
            expect(valid.getText()).toContain('true');                                                                 // 21212
          });                                                                                                          // 21213
                                                                                                                       // 21214
          it('should be invalid if empty', function() {                                                                // 21215
            input.clear();                                                                                             // 21216
            input.sendKeys('');                                                                                        // 21217
            expect(value.getText()).toEqual('value =');                                                                // 21218
            expect(valid.getText()).toContain('false');                                                                // 21219
          });                                                                                                          // 21220
                                                                                                                       // 21221
          it('should be invalid if over max', function() {                                                             // 21222
            input.clear();                                                                                             // 21223
            input.sendKeys('123');                                                                                     // 21224
            expect(value.getText()).toEqual('value =');                                                                // 21225
            expect(valid.getText()).toContain('false');                                                                // 21226
          });                                                                                                          // 21227
        </file>                                                                                                        // 21228
      </example>                                                                                                       // 21229
   */                                                                                                                  // 21230
  'number': numberInputType,                                                                                           // 21231
                                                                                                                       // 21232
                                                                                                                       // 21233
  /**                                                                                                                  // 21234
   * @ngdoc input                                                                                                      // 21235
   * @name input[url]                                                                                                  // 21236
   *                                                                                                                   // 21237
   * @description                                                                                                      // 21238
   * Text input with URL validation. Sets the `url` validation error key if the content is not a                       // 21239
   * valid URL.                                                                                                        // 21240
   *                                                                                                                   // 21241
   * <div class="alert alert-warning">                                                                                 // 21242
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex                               // 21243
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify                             // 21244
   * the built-in validators (see the {@link guide/forms Forms guide})                                                 // 21245
   * </div>                                                                                                            // 21246
   *                                                                                                                   // 21247
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21248
   * @param {string=} name Property name of the form under which the control is published.                             // 21249
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21250
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21251
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21252
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21253
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21254
   *    minlength.                                                                                                     // 21255
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21256
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21257
   *    any length.                                                                                                    // 21258
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21259
   *    that contains the regular expression body that will be converted to a regular expression                       // 21260
   *    as in the ngPattern directive.                                                                                 // 21261
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21262
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21263
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21264
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21265
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21266
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21267
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21268
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21269
   *    account.                                                                                                       // 21270
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21271
   *    interaction with the input element.                                                                            // 21272
   *                                                                                                                   // 21273
   * @example                                                                                                          // 21274
      <example name="url-input-directive" module="urlExample">                                                         // 21275
        <file name="index.html">                                                                                       // 21276
         <script>                                                                                                      // 21277
           angular.module('urlExample', [])                                                                            // 21278
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21279
               $scope.url = {                                                                                          // 21280
                 text: 'http://google.com'                                                                             // 21281
               };                                                                                                      // 21282
             }]);                                                                                                      // 21283
         </script>                                                                                                     // 21284
         <form name="myForm" ng-controller="ExampleController">                                                        // 21285
           <label>URL:                                                                                                 // 21286
             <input type="url" name="input" ng-model="url.text" required>                                              // 21287
           <label>                                                                                                     // 21288
           <div role="alert">                                                                                          // 21289
             <span class="error" ng-show="myForm.input.$error.required">                                               // 21290
               Required!</span>                                                                                        // 21291
             <span class="error" ng-show="myForm.input.$error.url">                                                    // 21292
               Not valid url!</span>                                                                                   // 21293
           </div>                                                                                                      // 21294
           <tt>text = {{url.text}}</tt><br/>                                                                           // 21295
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21296
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21297
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21298
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21299
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>                                                   // 21300
          </form>                                                                                                      // 21301
        </file>                                                                                                        // 21302
        <file name="protractor.js" type="protractor">                                                                  // 21303
          var text = element(by.binding('url.text'));                                                                  // 21304
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21305
          var input = element(by.model('url.text'));                                                                   // 21306
                                                                                                                       // 21307
          it('should initialize to model', function() {                                                                // 21308
            expect(text.getText()).toContain('http://google.com');                                                     // 21309
            expect(valid.getText()).toContain('true');                                                                 // 21310
          });                                                                                                          // 21311
                                                                                                                       // 21312
          it('should be invalid if empty', function() {                                                                // 21313
            input.clear();                                                                                             // 21314
            input.sendKeys('');                                                                                        // 21315
                                                                                                                       // 21316
            expect(text.getText()).toEqual('text =');                                                                  // 21317
            expect(valid.getText()).toContain('false');                                                                // 21318
          });                                                                                                          // 21319
                                                                                                                       // 21320
          it('should be invalid if not url', function() {                                                              // 21321
            input.clear();                                                                                             // 21322
            input.sendKeys('box');                                                                                     // 21323
                                                                                                                       // 21324
            expect(valid.getText()).toContain('false');                                                                // 21325
          });                                                                                                          // 21326
        </file>                                                                                                        // 21327
      </example>                                                                                                       // 21328
   */                                                                                                                  // 21329
  'url': urlInputType,                                                                                                 // 21330
                                                                                                                       // 21331
                                                                                                                       // 21332
  /**                                                                                                                  // 21333
   * @ngdoc input                                                                                                      // 21334
   * @name input[email]                                                                                                // 21335
   *                                                                                                                   // 21336
   * @description                                                                                                      // 21337
   * Text input with email validation. Sets the `email` validation error key if not a valid email                      // 21338
   * address.                                                                                                          // 21339
   *                                                                                                                   // 21340
   * <div class="alert alert-warning">                                                                                 // 21341
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex                  // 21342
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can                    // 21343
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})                      // 21344
   * </div>                                                                                                            // 21345
   *                                                                                                                   // 21346
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21347
   * @param {string=} name Property name of the form under which the control is published.                             // 21348
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21349
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21350
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21351
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21352
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21353
   *    minlength.                                                                                                     // 21354
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21355
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21356
   *    any length.                                                                                                    // 21357
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21358
   *    that contains the regular expression body that will be converted to a regular expression                       // 21359
   *    as in the ngPattern directive.                                                                                 // 21360
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21361
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21362
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21363
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21364
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21365
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21366
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21367
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21368
   *    account.                                                                                                       // 21369
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21370
   *    interaction with the input element.                                                                            // 21371
   *                                                                                                                   // 21372
   * @example                                                                                                          // 21373
      <example name="email-input-directive" module="emailExample">                                                     // 21374
        <file name="index.html">                                                                                       // 21375
         <script>                                                                                                      // 21376
           angular.module('emailExample', [])                                                                          // 21377
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21378
               $scope.email = {                                                                                        // 21379
                 text: 'me@example.com'                                                                                // 21380
               };                                                                                                      // 21381
             }]);                                                                                                      // 21382
         </script>                                                                                                     // 21383
           <form name="myForm" ng-controller="ExampleController">                                                      // 21384
             <label>Email:                                                                                             // 21385
               <input type="email" name="input" ng-model="email.text" required>                                        // 21386
             </label>                                                                                                  // 21387
             <div role="alert">                                                                                        // 21388
               <span class="error" ng-show="myForm.input.$error.required">                                             // 21389
                 Required!</span>                                                                                      // 21390
               <span class="error" ng-show="myForm.input.$error.email">                                                // 21391
                 Not valid email!</span>                                                                               // 21392
             </div>                                                                                                    // 21393
             <tt>text = {{email.text}}</tt><br/>                                                                       // 21394
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                               // 21395
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                               // 21396
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                           // 21397
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                       // 21398
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>                                             // 21399
           </form>                                                                                                     // 21400
         </file>                                                                                                       // 21401
        <file name="protractor.js" type="protractor">                                                                  // 21402
          var text = element(by.binding('email.text'));                                                                // 21403
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21404
          var input = element(by.model('email.text'));                                                                 // 21405
                                                                                                                       // 21406
          it('should initialize to model', function() {                                                                // 21407
            expect(text.getText()).toContain('me@example.com');                                                        // 21408
            expect(valid.getText()).toContain('true');                                                                 // 21409
          });                                                                                                          // 21410
                                                                                                                       // 21411
          it('should be invalid if empty', function() {                                                                // 21412
            input.clear();                                                                                             // 21413
            input.sendKeys('');                                                                                        // 21414
            expect(text.getText()).toEqual('text =');                                                                  // 21415
            expect(valid.getText()).toContain('false');                                                                // 21416
          });                                                                                                          // 21417
                                                                                                                       // 21418
          it('should be invalid if not email', function() {                                                            // 21419
            input.clear();                                                                                             // 21420
            input.sendKeys('xxx');                                                                                     // 21421
                                                                                                                       // 21422
            expect(valid.getText()).toContain('false');                                                                // 21423
          });                                                                                                          // 21424
        </file>                                                                                                        // 21425
      </example>                                                                                                       // 21426
   */                                                                                                                  // 21427
  'email': emailInputType,                                                                                             // 21428
                                                                                                                       // 21429
                                                                                                                       // 21430
  /**                                                                                                                  // 21431
   * @ngdoc input                                                                                                      // 21432
   * @name input[radio]                                                                                                // 21433
   *                                                                                                                   // 21434
   * @description                                                                                                      // 21435
   * HTML radio button.                                                                                                // 21436
   *                                                                                                                   // 21437
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21438
   * @param {string} value The value to which the `ngModel` expression should be set when selected.                    // 21439
   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,                    // 21440
   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).                                       // 21441
   * @param {string=} name Property name of the form under which the control is published.                             // 21442
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21443
   *    interaction with the input element.                                                                            // 21444
   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio                       // 21445
   *    is selected. Should be used instead of the `value` attribute if you need                                       // 21446
   *    a non-string `ngModel` (`boolean`, `array`, ...).                                                              // 21447
   *                                                                                                                   // 21448
   * @example                                                                                                          // 21449
      <example name="radio-input-directive" module="radioExample">                                                     // 21450
        <file name="index.html">                                                                                       // 21451
         <script>                                                                                                      // 21452
           angular.module('radioExample', [])                                                                          // 21453
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21454
               $scope.color = {                                                                                        // 21455
                 name: 'blue'                                                                                          // 21456
               };                                                                                                      // 21457
               $scope.specialValue = {                                                                                 // 21458
                 "id": "12345",                                                                                        // 21459
                 "value": "green"                                                                                      // 21460
               };                                                                                                      // 21461
             }]);                                                                                                      // 21462
         </script>                                                                                                     // 21463
         <form name="myForm" ng-controller="ExampleController">                                                        // 21464
           <label>                                                                                                     // 21465
             <input type="radio" ng-model="color.name" value="red">                                                    // 21466
             Red                                                                                                       // 21467
           </label><br/>                                                                                               // 21468
           <label>                                                                                                     // 21469
             <input type="radio" ng-model="color.name" ng-value="specialValue">                                        // 21470
             Green                                                                                                     // 21471
           </label><br/>                                                                                               // 21472
           <label>                                                                                                     // 21473
             <input type="radio" ng-model="color.name" value="blue">                                                   // 21474
             Blue                                                                                                      // 21475
           </label><br/>                                                                                               // 21476
           <tt>color = {{color.name | json}}</tt><br/>                                                                 // 21477
          </form>                                                                                                      // 21478
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.        // 21479
        </file>                                                                                                        // 21480
        <file name="protractor.js" type="protractor">                                                                  // 21481
          it('should change state', function() {                                                                       // 21482
            var color = element(by.binding('color.name'));                                                             // 21483
                                                                                                                       // 21484
            expect(color.getText()).toContain('blue');                                                                 // 21485
                                                                                                                       // 21486
            element.all(by.model('color.name')).get(0).click();                                                        // 21487
                                                                                                                       // 21488
            expect(color.getText()).toContain('red');                                                                  // 21489
          });                                                                                                          // 21490
        </file>                                                                                                        // 21491
      </example>                                                                                                       // 21492
   */                                                                                                                  // 21493
  'radio': radioInputType,                                                                                             // 21494
                                                                                                                       // 21495
                                                                                                                       // 21496
  /**                                                                                                                  // 21497
   * @ngdoc input                                                                                                      // 21498
   * @name input[checkbox]                                                                                             // 21499
   *                                                                                                                   // 21500
   * @description                                                                                                      // 21501
   * HTML checkbox.                                                                                                    // 21502
   *                                                                                                                   // 21503
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21504
   * @param {string=} name Property name of the form under which the control is published.                             // 21505
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.                   // 21506
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.              // 21507
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21508
   *    interaction with the input element.                                                                            // 21509
   *                                                                                                                   // 21510
   * @example                                                                                                          // 21511
      <example name="checkbox-input-directive" module="checkboxExample">                                               // 21512
        <file name="index.html">                                                                                       // 21513
         <script>                                                                                                      // 21514
           angular.module('checkboxExample', [])                                                                       // 21515
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21516
               $scope.checkboxModel = {                                                                                // 21517
                value1 : true,                                                                                         // 21518
                value2 : 'YES'                                                                                         // 21519
              };                                                                                                       // 21520
             }]);                                                                                                      // 21521
         </script>                                                                                                     // 21522
         <form name="myForm" ng-controller="ExampleController">                                                        // 21523
           <label>Value1:                                                                                              // 21524
             <input type="checkbox" ng-model="checkboxModel.value1">                                                   // 21525
           </label><br/>                                                                                               // 21526
           <label>Value2:                                                                                              // 21527
             <input type="checkbox" ng-model="checkboxModel.value2"                                                    // 21528
                    ng-true-value="'YES'" ng-false-value="'NO'">                                                       // 21529
            </label><br/>                                                                                              // 21530
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>                                                             // 21531
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>                                                             // 21532
          </form>                                                                                                      // 21533
        </file>                                                                                                        // 21534
        <file name="protractor.js" type="protractor">                                                                  // 21535
          it('should change state', function() {                                                                       // 21536
            var value1 = element(by.binding('checkboxModel.value1'));                                                  // 21537
            var value2 = element(by.binding('checkboxModel.value2'));                                                  // 21538
                                                                                                                       // 21539
            expect(value1.getText()).toContain('true');                                                                // 21540
            expect(value2.getText()).toContain('YES');                                                                 // 21541
                                                                                                                       // 21542
            element(by.model('checkboxModel.value1')).click();                                                         // 21543
            element(by.model('checkboxModel.value2')).click();                                                         // 21544
                                                                                                                       // 21545
            expect(value1.getText()).toContain('false');                                                               // 21546
            expect(value2.getText()).toContain('NO');                                                                  // 21547
          });                                                                                                          // 21548
        </file>                                                                                                        // 21549
      </example>                                                                                                       // 21550
   */                                                                                                                  // 21551
  'checkbox': checkboxInputType,                                                                                       // 21552
                                                                                                                       // 21553
  'hidden': noop,                                                                                                      // 21554
  'button': noop,                                                                                                      // 21555
  'submit': noop,                                                                                                      // 21556
  'reset': noop,                                                                                                       // 21557
  'file': noop                                                                                                         // 21558
};                                                                                                                     // 21559
                                                                                                                       // 21560
function stringBasedInputType(ctrl) {                                                                                  // 21561
  ctrl.$formatters.push(function(value) {                                                                              // 21562
    return ctrl.$isEmpty(value) ? value : value.toString();                                                            // 21563
  });                                                                                                                  // 21564
}                                                                                                                      // 21565
                                                                                                                       // 21566
function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21567
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21568
  stringBasedInputType(ctrl);                                                                                          // 21569
}                                                                                                                      // 21570
                                                                                                                       // 21571
function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21572
  var type = lowercase(element[0].type);                                                                               // 21573
                                                                                                                       // 21574
  // In composition mode, users are still inputing intermediate text buffer,                                           // 21575
  // hold the listener until composition is done.                                                                      // 21576
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent                  // 21577
  if (!$sniffer.android) {                                                                                             // 21578
    var composing = false;                                                                                             // 21579
                                                                                                                       // 21580
    element.on('compositionstart', function(data) {                                                                    // 21581
      composing = true;                                                                                                // 21582
    });                                                                                                                // 21583
                                                                                                                       // 21584
    element.on('compositionend', function() {                                                                          // 21585
      composing = false;                                                                                               // 21586
      listener();                                                                                                      // 21587
    });                                                                                                                // 21588
  }                                                                                                                    // 21589
                                                                                                                       // 21590
  var listener = function(ev) {                                                                                        // 21591
    if (timeout) {                                                                                                     // 21592
      $browser.defer.cancel(timeout);                                                                                  // 21593
      timeout = null;                                                                                                  // 21594
    }                                                                                                                  // 21595
    if (composing) return;                                                                                             // 21596
    var value = element.val(),                                                                                         // 21597
        event = ev && ev.type;                                                                                         // 21598
                                                                                                                       // 21599
    // By default we will trim the value                                                                               // 21600
    // If the attribute ng-trim exists we will avoid trimming                                                          // 21601
    // If input type is 'password', the value is never trimmed                                                         // 21602
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {                                            // 21603
      value = trim(value);                                                                                             // 21604
    }                                                                                                                  // 21605
                                                                                                                       // 21606
    // If a control is suffering from bad input (due to native validators), browsers discard its                       // 21607
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the                        // 21608
    // control's value is the same empty value twice in a row.                                                         // 21609
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {                                   // 21610
      ctrl.$setViewValue(value, event);                                                                                // 21611
    }                                                                                                                  // 21612
  };                                                                                                                   // 21613
                                                                                                                       // 21614
  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the                     // 21615
  // input event on backspace, delete or cut                                                                           // 21616
  if ($sniffer.hasEvent('input')) {                                                                                    // 21617
    element.on('input', listener);                                                                                     // 21618
  } else {                                                                                                             // 21619
    var timeout;                                                                                                       // 21620
                                                                                                                       // 21621
    var deferListener = function(ev, input, origValue) {                                                               // 21622
      if (!timeout) {                                                                                                  // 21623
        timeout = $browser.defer(function() {                                                                          // 21624
          timeout = null;                                                                                              // 21625
          if (!input || input.value !== origValue) {                                                                   // 21626
            listener(ev);                                                                                              // 21627
          }                                                                                                            // 21628
        });                                                                                                            // 21629
      }                                                                                                                // 21630
    };                                                                                                                 // 21631
                                                                                                                       // 21632
    element.on('keydown', function(event) {                                                                            // 21633
      var key = event.keyCode;                                                                                         // 21634
                                                                                                                       // 21635
      // ignore                                                                                                        // 21636
      //    command            modifiers                   arrows                                                      // 21637
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;                                    // 21638
                                                                                                                       // 21639
      deferListener(event, this, this.value);                                                                          // 21640
    });                                                                                                                // 21641
                                                                                                                       // 21642
    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it             // 21643
    if ($sniffer.hasEvent('paste')) {                                                                                  // 21644
      element.on('paste cut', deferListener);                                                                          // 21645
    }                                                                                                                  // 21646
  }                                                                                                                    // 21647
                                                                                                                       // 21648
  // if user paste into input using mouse on older browser                                                             // 21649
  // or form autocomplete on newer browser, we need "change" event to catch it                                         // 21650
  element.on('change', listener);                                                                                      // 21651
                                                                                                                       // 21652
  ctrl.$render = function() {                                                                                          // 21653
    // Workaround for Firefox validation #12102.                                                                       // 21654
    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;                                                 // 21655
    if (element.val() !== value) {                                                                                     // 21656
      element.val(value);                                                                                              // 21657
    }                                                                                                                  // 21658
  };                                                                                                                   // 21659
}                                                                                                                      // 21660
                                                                                                                       // 21661
function weekParser(isoWeek, existingDate) {                                                                           // 21662
  if (isDate(isoWeek)) {                                                                                               // 21663
    return isoWeek;                                                                                                    // 21664
  }                                                                                                                    // 21665
                                                                                                                       // 21666
  if (isString(isoWeek)) {                                                                                             // 21667
    WEEK_REGEXP.lastIndex = 0;                                                                                         // 21668
    var parts = WEEK_REGEXP.exec(isoWeek);                                                                             // 21669
    if (parts) {                                                                                                       // 21670
      var year = +parts[1],                                                                                            // 21671
          week = +parts[2],                                                                                            // 21672
          hours = 0,                                                                                                   // 21673
          minutes = 0,                                                                                                 // 21674
          seconds = 0,                                                                                                 // 21675
          milliseconds = 0,                                                                                            // 21676
          firstThurs = getFirstThursdayOfYear(year),                                                                   // 21677
          addDays = (week - 1) * 7;                                                                                    // 21678
                                                                                                                       // 21679
      if (existingDate) {                                                                                              // 21680
        hours = existingDate.getHours();                                                                               // 21681
        minutes = existingDate.getMinutes();                                                                           // 21682
        seconds = existingDate.getSeconds();                                                                           // 21683
        milliseconds = existingDate.getMilliseconds();                                                                 // 21684
      }                                                                                                                // 21685
                                                                                                                       // 21686
      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);                 // 21687
    }                                                                                                                  // 21688
  }                                                                                                                    // 21689
                                                                                                                       // 21690
  return NaN;                                                                                                          // 21691
}                                                                                                                      // 21692
                                                                                                                       // 21693
function createDateParser(regexp, mapping) {                                                                           // 21694
  return function(iso, date) {                                                                                         // 21695
    var parts, map;                                                                                                    // 21696
                                                                                                                       // 21697
    if (isDate(iso)) {                                                                                                 // 21698
      return iso;                                                                                                      // 21699
    }                                                                                                                  // 21700
                                                                                                                       // 21701
    if (isString(iso)) {                                                                                               // 21702
      // When a date is JSON'ified to wraps itself inside of an extra                                                  // 21703
      // set of double quotes. This makes the date parsing code unable                                                 // 21704
      // to match the date string and parse it as a date.                                                              // 21705
      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {                                                 // 21706
        iso = iso.substring(1, iso.length - 1);                                                                        // 21707
      }                                                                                                                // 21708
      if (ISO_DATE_REGEXP.test(iso)) {                                                                                 // 21709
        return new Date(iso);                                                                                          // 21710
      }                                                                                                                // 21711
      regexp.lastIndex = 0;                                                                                            // 21712
      parts = regexp.exec(iso);                                                                                        // 21713
                                                                                                                       // 21714
      if (parts) {                                                                                                     // 21715
        parts.shift();                                                                                                 // 21716
        if (date) {                                                                                                    // 21717
          map = {                                                                                                      // 21718
            yyyy: date.getFullYear(),                                                                                  // 21719
            MM: date.getMonth() + 1,                                                                                   // 21720
            dd: date.getDate(),                                                                                        // 21721
            HH: date.getHours(),                                                                                       // 21722
            mm: date.getMinutes(),                                                                                     // 21723
            ss: date.getSeconds(),                                                                                     // 21724
            sss: date.getMilliseconds() / 1000                                                                         // 21725
          };                                                                                                           // 21726
        } else {                                                                                                       // 21727
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };                                             // 21728
        }                                                                                                              // 21729
                                                                                                                       // 21730
        forEach(parts, function(part, index) {                                                                         // 21731
          if (index < mapping.length) {                                                                                // 21732
            map[mapping[index]] = +part;                                                                               // 21733
          }                                                                                                            // 21734
        });                                                                                                            // 21735
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);               // 21736
      }                                                                                                                // 21737
    }                                                                                                                  // 21738
                                                                                                                       // 21739
    return NaN;                                                                                                        // 21740
  };                                                                                                                   // 21741
}                                                                                                                      // 21742
                                                                                                                       // 21743
function createDateInputType(type, regexp, parseDate, format) {                                                        // 21744
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {                      // 21745
    badInputChecker(scope, element, attr, ctrl);                                                                       // 21746
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                     // 21747
    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;                                                    // 21748
    var previousDate;                                                                                                  // 21749
                                                                                                                       // 21750
    ctrl.$$parserName = type;                                                                                          // 21751
    ctrl.$parsers.push(function(value) {                                                                               // 21752
      if (ctrl.$isEmpty(value)) return null;                                                                           // 21753
      if (regexp.test(value)) {                                                                                        // 21754
        // Note: We cannot read ctrl.$modelValue, as there might be a different                                        // 21755
        // parser/formatter in the processing chain so that the model                                                  // 21756
        // contains some different data format!                                                                        // 21757
        var parsedDate = parseDate(value, previousDate);                                                               // 21758
        if (timezone) {                                                                                                // 21759
          parsedDate = convertTimezoneToLocal(parsedDate, timezone);                                                   // 21760
        }                                                                                                              // 21761
        return parsedDate;                                                                                             // 21762
      }                                                                                                                // 21763
      return undefined;                                                                                                // 21764
    });                                                                                                                // 21765
                                                                                                                       // 21766
    ctrl.$formatters.push(function(value) {                                                                            // 21767
      if (value && !isDate(value)) {                                                                                   // 21768
        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);                                          // 21769
      }                                                                                                                // 21770
      if (isValidDate(value)) {                                                                                        // 21771
        previousDate = value;                                                                                          // 21772
        if (previousDate && timezone) {                                                                                // 21773
          previousDate = convertTimezoneToLocal(previousDate, timezone, true);                                         // 21774
        }                                                                                                              // 21775
        return $filter('date')(value, format, timezone);                                                               // 21776
      } else {                                                                                                         // 21777
        previousDate = null;                                                                                           // 21778
        return '';                                                                                                     // 21779
      }                                                                                                                // 21780
    });                                                                                                                // 21781
                                                                                                                       // 21782
    if (isDefined(attr.min) || attr.ngMin) {                                                                           // 21783
      var minVal;                                                                                                      // 21784
      ctrl.$validators.min = function(value) {                                                                         // 21785
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;                               // 21786
      };                                                                                                               // 21787
      attr.$observe('min', function(val) {                                                                             // 21788
        minVal = parseObservedDateValue(val);                                                                          // 21789
        ctrl.$validate();                                                                                              // 21790
      });                                                                                                              // 21791
    }                                                                                                                  // 21792
                                                                                                                       // 21793
    if (isDefined(attr.max) || attr.ngMax) {                                                                           // 21794
      var maxVal;                                                                                                      // 21795
      ctrl.$validators.max = function(value) {                                                                         // 21796
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;                               // 21797
      };                                                                                                               // 21798
      attr.$observe('max', function(val) {                                                                             // 21799
        maxVal = parseObservedDateValue(val);                                                                          // 21800
        ctrl.$validate();                                                                                              // 21801
      });                                                                                                              // 21802
    }                                                                                                                  // 21803
                                                                                                                       // 21804
    function isValidDate(value) {                                                                                      // 21805
      // Invalid Date: getTime() returns NaN                                                                           // 21806
      return value && !(value.getTime && value.getTime() !== value.getTime());                                         // 21807
    }                                                                                                                  // 21808
                                                                                                                       // 21809
    function parseObservedDateValue(val) {                                                                             // 21810
      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;                                       // 21811
    }                                                                                                                  // 21812
  };                                                                                                                   // 21813
}                                                                                                                      // 21814
                                                                                                                       // 21815
function badInputChecker(scope, element, attr, ctrl) {                                                                 // 21816
  var node = element[0];                                                                                               // 21817
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);                                         // 21818
  if (nativeValidation) {                                                                                              // 21819
    ctrl.$parsers.push(function(value) {                                                                               // 21820
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};                                                      // 21821
      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):                   // 21822
      // - also sets validity.badInput (should only be validity.typeMismatch).                                         // 21823
      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)        // 21824
      // - can ignore this case as we can still read out the erroneous email...                                        // 21825
      return validity.badInput && !validity.typeMismatch ? undefined : value;                                          // 21826
    });                                                                                                                // 21827
  }                                                                                                                    // 21828
}                                                                                                                      // 21829
                                                                                                                       // 21830
function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                             // 21831
  badInputChecker(scope, element, attr, ctrl);                                                                         // 21832
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21833
                                                                                                                       // 21834
  ctrl.$$parserName = 'number';                                                                                        // 21835
  ctrl.$parsers.push(function(value) {                                                                                 // 21836
    if (ctrl.$isEmpty(value))      return null;                                                                        // 21837
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);                                                           // 21838
    return undefined;                                                                                                  // 21839
  });                                                                                                                  // 21840
                                                                                                                       // 21841
  ctrl.$formatters.push(function(value) {                                                                              // 21842
    if (!ctrl.$isEmpty(value)) {                                                                                       // 21843
      if (!isNumber(value)) {                                                                                          // 21844
        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);                                         // 21845
      }                                                                                                                // 21846
      value = value.toString();                                                                                        // 21847
    }                                                                                                                  // 21848
    return value;                                                                                                      // 21849
  });                                                                                                                  // 21850
                                                                                                                       // 21851
  if (isDefined(attr.min) || attr.ngMin) {                                                                             // 21852
    var minVal;                                                                                                        // 21853
    ctrl.$validators.min = function(value) {                                                                           // 21854
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;                                           // 21855
    };                                                                                                                 // 21856
                                                                                                                       // 21857
    attr.$observe('min', function(val) {                                                                               // 21858
      if (isDefined(val) && !isNumber(val)) {                                                                          // 21859
        val = parseFloat(val, 10);                                                                                     // 21860
      }                                                                                                                // 21861
      minVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21862
      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21863
      ctrl.$validate();                                                                                                // 21864
    });                                                                                                                // 21865
  }                                                                                                                    // 21866
                                                                                                                       // 21867
  if (isDefined(attr.max) || attr.ngMax) {                                                                             // 21868
    var maxVal;                                                                                                        // 21869
    ctrl.$validators.max = function(value) {                                                                           // 21870
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;                                           // 21871
    };                                                                                                                 // 21872
                                                                                                                       // 21873
    attr.$observe('max', function(val) {                                                                               // 21874
      if (isDefined(val) && !isNumber(val)) {                                                                          // 21875
        val = parseFloat(val, 10);                                                                                     // 21876
      }                                                                                                                // 21877
      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21878
      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21879
      ctrl.$validate();                                                                                                // 21880
    });                                                                                                                // 21881
  }                                                                                                                    // 21882
}                                                                                                                      // 21883
                                                                                                                       // 21884
function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                                // 21885
  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 21886
  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 21887
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21888
  stringBasedInputType(ctrl);                                                                                          // 21889
                                                                                                                       // 21890
  ctrl.$$parserName = 'url';                                                                                           // 21891
  ctrl.$validators.url = function(modelValue, viewValue) {                                                             // 21892
    var value = modelValue || viewValue;                                                                               // 21893
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);                                                             // 21894
  };                                                                                                                   // 21895
}                                                                                                                      // 21896
                                                                                                                       // 21897
function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                              // 21898
  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 21899
  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 21900
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21901
  stringBasedInputType(ctrl);                                                                                          // 21902
                                                                                                                       // 21903
  ctrl.$$parserName = 'email';                                                                                         // 21904
  ctrl.$validators.email = function(modelValue, viewValue) {                                                           // 21905
    var value = modelValue || viewValue;                                                                               // 21906
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);                                                           // 21907
  };                                                                                                                   // 21908
}                                                                                                                      // 21909
                                                                                                                       // 21910
function radioInputType(scope, element, attr, ctrl) {                                                                  // 21911
  // make the name unique, if not defined                                                                              // 21912
  if (isUndefined(attr.name)) {                                                                                        // 21913
    element.attr('name', nextUid());                                                                                   // 21914
  }                                                                                                                    // 21915
                                                                                                                       // 21916
  var listener = function(ev) {                                                                                        // 21917
    if (element[0].checked) {                                                                                          // 21918
      ctrl.$setViewValue(attr.value, ev && ev.type);                                                                   // 21919
    }                                                                                                                  // 21920
  };                                                                                                                   // 21921
                                                                                                                       // 21922
  element.on('click', listener);                                                                                       // 21923
                                                                                                                       // 21924
  ctrl.$render = function() {                                                                                          // 21925
    var value = attr.value;                                                                                            // 21926
    element[0].checked = (value == ctrl.$viewValue);                                                                   // 21927
  };                                                                                                                   // 21928
                                                                                                                       // 21929
  attr.$observe('value', ctrl.$render);                                                                                // 21930
}                                                                                                                      // 21931
                                                                                                                       // 21932
function parseConstantExpr($parse, context, name, expression, fallback) {                                              // 21933
  var parseFn;                                                                                                         // 21934
  if (isDefined(expression)) {                                                                                         // 21935
    parseFn = $parse(expression);                                                                                      // 21936
    if (!parseFn.constant) {                                                                                           // 21937
      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +                            // 21938
                                   '`{1}`.', name, expression);                                                        // 21939
    }                                                                                                                  // 21940
    return parseFn(context);                                                                                           // 21941
  }                                                                                                                    // 21942
  return fallback;                                                                                                     // 21943
}                                                                                                                      // 21944
                                                                                                                       // 21945
function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {                          // 21946
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);                             // 21947
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);                         // 21948
                                                                                                                       // 21949
  var listener = function(ev) {                                                                                        // 21950
    ctrl.$setViewValue(element[0].checked, ev && ev.type);                                                             // 21951
  };                                                                                                                   // 21952
                                                                                                                       // 21953
  element.on('click', listener);                                                                                       // 21954
                                                                                                                       // 21955
  ctrl.$render = function() {                                                                                          // 21956
    element[0].checked = ctrl.$viewValue;                                                                              // 21957
  };                                                                                                                   // 21958
                                                                                                                       // 21959
  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`             // 21960
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert                 // 21961
  // it to a boolean.                                                                                                  // 21962
  ctrl.$isEmpty = function(value) {                                                                                    // 21963
    return value === false;                                                                                            // 21964
  };                                                                                                                   // 21965
                                                                                                                       // 21966
  ctrl.$formatters.push(function(value) {                                                                              // 21967
    return equals(value, trueValue);                                                                                   // 21968
  });                                                                                                                  // 21969
                                                                                                                       // 21970
  ctrl.$parsers.push(function(value) {                                                                                 // 21971
    return value ? trueValue : falseValue;                                                                             // 21972
  });                                                                                                                  // 21973
}                                                                                                                      // 21974
                                                                                                                       // 21975
                                                                                                                       // 21976
/**                                                                                                                    // 21977
 * @ngdoc directive                                                                                                    // 21978
 * @name textarea                                                                                                      // 21979
 * @restrict E                                                                                                         // 21980
 *                                                                                                                     // 21981
 * @description                                                                                                        // 21982
 * HTML textarea element control with angular data-binding. The data-binding and validation                            // 21983
 * properties of this element are exactly the same as those of the                                                     // 21984
 * {@link ng.directive:input input element}.                                                                           // 21985
 *                                                                                                                     // 21986
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 21987
 * @param {string=} name Property name of the form under which the control is published.                               // 21988
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 21989
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 21990
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 21991
 *    `required` when you want to data-bind to the `required` attribute.                                               // 21992
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 21993
 *    minlength.                                                                                                       // 21994
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 21995
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 21996
 *    length.                                                                                                          // 21997
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 21998
 *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 21999
 *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 22000
 *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 22001
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                          // 22002
 *    `new RegExp('^abc$')`.<br />                                                                                     // 22003
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 22004
 *    start at the index of the last search's match, thus not taking the whole input value into                        // 22005
 *    account.                                                                                                         // 22006
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 22007
 *    interaction with the input element.                                                                              // 22008
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 22009
 */                                                                                                                    // 22010
                                                                                                                       // 22011
                                                                                                                       // 22012
/**                                                                                                                    // 22013
 * @ngdoc directive                                                                                                    // 22014
 * @name input                                                                                                         // 22015
 * @restrict E                                                                                                         // 22016
 *                                                                                                                     // 22017
 * @description                                                                                                        // 22018
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,            // 22019
 * input state control, and validation.                                                                                // 22020
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.             // 22021
 *                                                                                                                     // 22022
 * <div class="alert alert-warning">                                                                                   // 22023
 * **Note:** Not every feature offered is available for all input types.                                               // 22024
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.                      // 22025
 * </div>                                                                                                              // 22026
 *                                                                                                                     // 22027
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 22028
 * @param {string=} name Property name of the form under which the control is published.                               // 22029
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 22030
 * @param {boolean=} ngRequired Sets `required` attribute if set to true                                               // 22031
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 22032
 *    minlength.                                                                                                       // 22033
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 22034
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 22035
 *    length.                                                                                                          // 22036
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 22037
 *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 22038
 *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 22039
 *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 22040
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                          // 22041
 *    `new RegExp('^abc$')`.<br />                                                                                     // 22042
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 22043
 *    start at the index of the last search's match, thus not taking the whole input value into                        // 22044
 *    account.                                                                                                         // 22045
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 22046
 *    interaction with the input element.                                                                              // 22047
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 22048
 *    This parameter is ignored for input[type=password] controls, which will never trim the                           // 22049
 *    input.                                                                                                           // 22050
 *                                                                                                                     // 22051
 * @example                                                                                                            // 22052
    <example name="input-directive" module="inputExample">                                                             // 22053
      <file name="index.html">                                                                                         // 22054
       <script>                                                                                                        // 22055
          angular.module('inputExample', [])                                                                           // 22056
            .controller('ExampleController', ['$scope', function($scope) {                                             // 22057
              $scope.user = {name: 'guest', last: 'visitor'};                                                          // 22058
            }]);                                                                                                       // 22059
       </script>                                                                                                       // 22060
       <div ng-controller="ExampleController">                                                                         // 22061
         <form name="myForm">                                                                                          // 22062
           <label>                                                                                                     // 22063
              User name:                                                                                               // 22064
              <input type="text" name="userName" ng-model="user.name" required>                                        // 22065
           </label>                                                                                                    // 22066
           <div role="alert">                                                                                          // 22067
             <span class="error" ng-show="myForm.userName.$error.required">                                            // 22068
              Required!</span>                                                                                         // 22069
           </div>                                                                                                      // 22070
           <label>                                                                                                     // 22071
              Last name:                                                                                               // 22072
              <input type="text" name="lastName" ng-model="user.last"                                                  // 22073
              ng-minlength="3" ng-maxlength="10">                                                                      // 22074
           </label>                                                                                                    // 22075
           <div role="alert">                                                                                          // 22076
             <span class="error" ng-show="myForm.lastName.$error.minlength">                                           // 22077
               Too short!</span>                                                                                       // 22078
             <span class="error" ng-show="myForm.lastName.$error.maxlength">                                           // 22079
               Too long!</span>                                                                                        // 22080
           </div>                                                                                                      // 22081
         </form>                                                                                                       // 22082
         <hr>                                                                                                          // 22083
         <tt>user = {{user}}</tt><br/>                                                                                 // 22084
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>                                             // 22085
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>                                             // 22086
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>                                             // 22087
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>                                             // 22088
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                               // 22089
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                           // 22090
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>                                         // 22091
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>                                         // 22092
       </div>                                                                                                          // 22093
      </file>                                                                                                          // 22094
      <file name="protractor.js" type="protractor">                                                                    // 22095
        var user = element(by.exactBinding('user'));                                                                   // 22096
        var userNameValid = element(by.binding('myForm.userName.$valid'));                                             // 22097
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));                                             // 22098
        var lastNameError = element(by.binding('myForm.lastName.$error'));                                             // 22099
        var formValid = element(by.binding('myForm.$valid'));                                                          // 22100
        var userNameInput = element(by.model('user.name'));                                                            // 22101
        var userLastInput = element(by.model('user.last'));                                                            // 22102
                                                                                                                       // 22103
        it('should initialize to model', function() {                                                                  // 22104
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');                                       // 22105
          expect(userNameValid.getText()).toContain('true');                                                           // 22106
          expect(formValid.getText()).toContain('true');                                                               // 22107
        });                                                                                                            // 22108
                                                                                                                       // 22109
        it('should be invalid if empty when required', function() {                                                    // 22110
          userNameInput.clear();                                                                                       // 22111
          userNameInput.sendKeys('');                                                                                  // 22112
                                                                                                                       // 22113
          expect(user.getText()).toContain('{"last":"visitor"}');                                                      // 22114
          expect(userNameValid.getText()).toContain('false');                                                          // 22115
          expect(formValid.getText()).toContain('false');                                                              // 22116
        });                                                                                                            // 22117
                                                                                                                       // 22118
        it('should be valid if empty when min length is set', function() {                                             // 22119
          userLastInput.clear();                                                                                       // 22120
          userLastInput.sendKeys('');                                                                                  // 22121
                                                                                                                       // 22122
          expect(user.getText()).toContain('{"name":"guest","last":""}');                                              // 22123
          expect(lastNameValid.getText()).toContain('true');                                                           // 22124
          expect(formValid.getText()).toContain('true');                                                               // 22125
        });                                                                                                            // 22126
                                                                                                                       // 22127
        it('should be invalid if less than required min length', function() {                                          // 22128
          userLastInput.clear();                                                                                       // 22129
          userLastInput.sendKeys('xx');                                                                                // 22130
                                                                                                                       // 22131
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 22132
          expect(lastNameValid.getText()).toContain('false');                                                          // 22133
          expect(lastNameError.getText()).toContain('minlength');                                                      // 22134
          expect(formValid.getText()).toContain('false');                                                              // 22135
        });                                                                                                            // 22136
                                                                                                                       // 22137
        it('should be invalid if longer than max length', function() {                                                 // 22138
          userLastInput.clear();                                                                                       // 22139
          userLastInput.sendKeys('some ridiculously long name');                                                       // 22140
                                                                                                                       // 22141
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 22142
          expect(lastNameValid.getText()).toContain('false');                                                          // 22143
          expect(lastNameError.getText()).toContain('maxlength');                                                      // 22144
          expect(formValid.getText()).toContain('false');                                                              // 22145
        });                                                                                                            // 22146
      </file>                                                                                                          // 22147
    </example>                                                                                                         // 22148
 */                                                                                                                    // 22149
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',                                                     // 22150
    function($browser, $sniffer, $filter, $parse) {                                                                    // 22151
  return {                                                                                                             // 22152
    restrict: 'E',                                                                                                     // 22153
    require: ['?ngModel'],                                                                                             // 22154
    link: {                                                                                                            // 22155
      pre: function(scope, element, attr, ctrls) {                                                                     // 22156
        if (ctrls[0]) {                                                                                                // 22157
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,                // 22158
                                                              $browser, $filter, $parse);                              // 22159
        }                                                                                                              // 22160
      }                                                                                                                // 22161
    }                                                                                                                  // 22162
  };                                                                                                                   // 22163
}];                                                                                                                    // 22164
                                                                                                                       // 22165
                                                                                                                       // 22166
                                                                                                                       // 22167
var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;                                                                      // 22168
/**                                                                                                                    // 22169
 * @ngdoc directive                                                                                                    // 22170
 * @name ngValue                                                                                                       // 22171
 *                                                                                                                     // 22172
 * @description                                                                                                        // 22173
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},                       // 22174
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to                       // 22175
 * the bound value.                                                                                                    // 22176
 *                                                                                                                     // 22177
 * `ngValue` is useful when dynamically generating lists of radio buttons using                                        // 22178
 * {@link ngRepeat `ngRepeat`}, as shown below.                                                                        // 22179
 *                                                                                                                     // 22180
 * Likewise, `ngValue` can be used to generate `<option>` elements for                                                 // 22181
 * the {@link select `select`} element. In that case however, only strings are supported                               // 22182
 * for the `value `attribute, so the resulting `ngModel` will always be a string.                                      // 22183
 * Support for `select` models with non-string values is available via `ngOptions`.                                    // 22184
 *                                                                                                                     // 22185
 * @element input                                                                                                      // 22186
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute                     // 22187
 *   of the `input` element                                                                                            // 22188
 *                                                                                                                     // 22189
 * @example                                                                                                            // 22190
    <example name="ngValue-directive" module="valueExample">                                                           // 22191
      <file name="index.html">                                                                                         // 22192
       <script>                                                                                                        // 22193
          angular.module('valueExample', [])                                                                           // 22194
            .controller('ExampleController', ['$scope', function($scope) {                                             // 22195
              $scope.names = ['pizza', 'unicorns', 'robots'];                                                          // 22196
              $scope.my = { favorite: 'unicorns' };                                                                    // 22197
            }]);                                                                                                       // 22198
       </script>                                                                                                       // 22199
        <form ng-controller="ExampleController">                                                                       // 22200
          <h2>Which is your favorite?</h2>                                                                             // 22201
            <label ng-repeat="name in names" for="{{name}}">                                                           // 22202
              {{name}}                                                                                                 // 22203
              <input type="radio"                                                                                      // 22204
                     ng-model="my.favorite"                                                                            // 22205
                     ng-value="name"                                                                                   // 22206
                     id="{{name}}"                                                                                     // 22207
                     name="favorite">                                                                                  // 22208
            </label>                                                                                                   // 22209
          <div>You chose {{my.favorite}}</div>                                                                         // 22210
        </form>                                                                                                        // 22211
      </file>                                                                                                          // 22212
      <file name="protractor.js" type="protractor">                                                                    // 22213
        var favorite = element(by.binding('my.favorite'));                                                             // 22214
                                                                                                                       // 22215
        it('should initialize to model', function() {                                                                  // 22216
          expect(favorite.getText()).toContain('unicorns');                                                            // 22217
        });                                                                                                            // 22218
        it('should bind the values to the inputs', function() {                                                        // 22219
          element.all(by.model('my.favorite')).get(0).click();                                                         // 22220
          expect(favorite.getText()).toContain('pizza');                                                               // 22221
        });                                                                                                            // 22222
      </file>                                                                                                          // 22223
    </example>                                                                                                         // 22224
 */                                                                                                                    // 22225
var ngValueDirective = function() {                                                                                    // 22226
  return {                                                                                                             // 22227
    restrict: 'A',                                                                                                     // 22228
    priority: 100,                                                                                                     // 22229
    compile: function(tpl, tplAttr) {                                                                                  // 22230
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {                                                               // 22231
        return function ngValueConstantLink(scope, elm, attr) {                                                        // 22232
          attr.$set('value', scope.$eval(attr.ngValue));                                                               // 22233
        };                                                                                                             // 22234
      } else {                                                                                                         // 22235
        return function ngValueLink(scope, elm, attr) {                                                                // 22236
          scope.$watch(attr.ngValue, function valueWatchAction(value) {                                                // 22237
            attr.$set('value', value);                                                                                 // 22238
          });                                                                                                          // 22239
        };                                                                                                             // 22240
      }                                                                                                                // 22241
    }                                                                                                                  // 22242
  };                                                                                                                   // 22243
};                                                                                                                     // 22244
                                                                                                                       // 22245
/**                                                                                                                    // 22246
 * @ngdoc directive                                                                                                    // 22247
 * @name ngBind                                                                                                        // 22248
 * @restrict AC                                                                                                        // 22249
 *                                                                                                                     // 22250
 * @description                                                                                                        // 22251
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element                      // 22252
 * with the value of a given expression, and to update the text content when the value of that                         // 22253
 * expression changes.                                                                                                 // 22254
 *                                                                                                                     // 22255
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like                        // 22256
 * `{{ expression }}` which is similar but less verbose.                                                               // 22257
 *                                                                                                                     // 22258
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily                         // 22259
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an                          // 22260
 * element attribute, it makes the bindings invisible to the user while the page is loading.                           // 22261
 *                                                                                                                     // 22262
 * An alternative solution to this problem would be using the                                                          // 22263
 * {@link ng.directive:ngCloak ngCloak} directive.                                                                     // 22264
 *                                                                                                                     // 22265
 *                                                                                                                     // 22266
 * @element ANY                                                                                                        // 22267
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.                                         // 22268
 *                                                                                                                     // 22269
 * @example                                                                                                            // 22270
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.                       // 22271
   <example module="bindExample">                                                                                      // 22272
     <file name="index.html">                                                                                          // 22273
       <script>                                                                                                        // 22274
         angular.module('bindExample', [])                                                                             // 22275
           .controller('ExampleController', ['$scope', function($scope) {                                              // 22276
             $scope.name = 'Whirled';                                                                                  // 22277
           }]);                                                                                                        // 22278
       </script>                                                                                                       // 22279
       <div ng-controller="ExampleController">                                                                         // 22280
         <label>Enter name: <input type="text" ng-model="name"></label><br>                                            // 22281
         Hello <span ng-bind="name"></span>!                                                                           // 22282
       </div>                                                                                                          // 22283
     </file>                                                                                                           // 22284
     <file name="protractor.js" type="protractor">                                                                     // 22285
       it('should check ng-bind', function() {                                                                         // 22286
         var nameInput = element(by.model('name'));                                                                    // 22287
                                                                                                                       // 22288
         expect(element(by.binding('name')).getText()).toBe('Whirled');                                                // 22289
         nameInput.clear();                                                                                            // 22290
         nameInput.sendKeys('world');                                                                                  // 22291
         expect(element(by.binding('name')).getText()).toBe('world');                                                  // 22292
       });                                                                                                             // 22293
     </file>                                                                                                           // 22294
   </example>                                                                                                          // 22295
 */                                                                                                                    // 22296
var ngBindDirective = ['$compile', function($compile) {                                                                // 22297
  return {                                                                                                             // 22298
    restrict: 'AC',                                                                                                    // 22299
    compile: function ngBindCompile(templateElement) {                                                                 // 22300
      $compile.$$addBindingClass(templateElement);                                                                     // 22301
      return function ngBindLink(scope, element, attr) {                                                               // 22302
        $compile.$$addBindingInfo(element, attr.ngBind);                                                               // 22303
        element = element[0];                                                                                          // 22304
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {                                                  // 22305
          element.textContent = isUndefined(value) ? '' : value;                                                       // 22306
        });                                                                                                            // 22307
      };                                                                                                               // 22308
    }                                                                                                                  // 22309
  };                                                                                                                   // 22310
}];                                                                                                                    // 22311
                                                                                                                       // 22312
                                                                                                                       // 22313
/**                                                                                                                    // 22314
 * @ngdoc directive                                                                                                    // 22315
 * @name ngBindTemplate                                                                                                // 22316
 *                                                                                                                     // 22317
 * @description                                                                                                        // 22318
 * The `ngBindTemplate` directive specifies that the element                                                           // 22319
 * text content should be replaced with the interpolation of the template                                              // 22320
 * in the `ngBindTemplate` attribute.                                                                                  // 22321
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`                                                // 22322
 * expressions. This directive is needed since some HTML elements                                                      // 22323
 * (such as TITLE and OPTION) cannot contain SPAN elements.                                                            // 22324
 *                                                                                                                     // 22325
 * @element ANY                                                                                                        // 22326
 * @param {string} ngBindTemplate template of form                                                                     // 22327
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.                                                              // 22328
 *                                                                                                                     // 22329
 * @example                                                                                                            // 22330
 * Try it here: enter text in text box and watch the greeting change.                                                  // 22331
   <example module="bindExample">                                                                                      // 22332
     <file name="index.html">                                                                                          // 22333
       <script>                                                                                                        // 22334
         angular.module('bindExample', [])                                                                             // 22335
           .controller('ExampleController', ['$scope', function($scope) {                                              // 22336
             $scope.salutation = 'Hello';                                                                              // 22337
             $scope.name = 'World';                                                                                    // 22338
           }]);                                                                                                        // 22339
       </script>                                                                                                       // 22340
       <div ng-controller="ExampleController">                                                                         // 22341
        <label>Salutation: <input type="text" ng-model="salutation"></label><br>                                       // 22342
        <label>Name: <input type="text" ng-model="name"></label><br>                                                   // 22343
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>                                                        // 22344
       </div>                                                                                                          // 22345
     </file>                                                                                                           // 22346
     <file name="protractor.js" type="protractor">                                                                     // 22347
       it('should check ng-bind', function() {                                                                         // 22348
         var salutationElem = element(by.binding('salutation'));                                                       // 22349
         var salutationInput = element(by.model('salutation'));                                                        // 22350
         var nameInput = element(by.model('name'));                                                                    // 22351
                                                                                                                       // 22352
         expect(salutationElem.getText()).toBe('Hello World!');                                                        // 22353
                                                                                                                       // 22354
         salutationInput.clear();                                                                                      // 22355
         salutationInput.sendKeys('Greetings');                                                                        // 22356
         nameInput.clear();                                                                                            // 22357
         nameInput.sendKeys('user');                                                                                   // 22358
                                                                                                                       // 22359
         expect(salutationElem.getText()).toBe('Greetings user!');                                                     // 22360
       });                                                                                                             // 22361
     </file>                                                                                                           // 22362
   </example>                                                                                                          // 22363
 */                                                                                                                    // 22364
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {                          // 22365
  return {                                                                                                             // 22366
    compile: function ngBindTemplateCompile(templateElement) {                                                         // 22367
      $compile.$$addBindingClass(templateElement);                                                                     // 22368
      return function ngBindTemplateLink(scope, element, attr) {                                                       // 22369
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));                                     // 22370
        $compile.$$addBindingInfo(element, interpolateFn.expressions);                                                 // 22371
        element = element[0];                                                                                          // 22372
        attr.$observe('ngBindTemplate', function(value) {                                                              // 22373
          element.textContent = isUndefined(value) ? '' : value;                                                       // 22374
        });                                                                                                            // 22375
      };                                                                                                               // 22376
    }                                                                                                                  // 22377
  };                                                                                                                   // 22378
}];                                                                                                                    // 22379
                                                                                                                       // 22380
                                                                                                                       // 22381
/**                                                                                                                    // 22382
 * @ngdoc directive                                                                                                    // 22383
 * @name ngBindHtml                                                                                                    // 22384
 *                                                                                                                     // 22385
 * @description                                                                                                        // 22386
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,               // 22387
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.              // 22388
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link               // 22389
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}                 // 22390
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.                       // 22391
 *                                                                                                                     // 22392
 * You may also bypass sanitization for values you know are safe. To do so, bind to                                    // 22393
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example                      // 22394
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.                               // 22395
 *                                                                                                                     // 22396
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you                     // 22397
 * will have an exception (instead of an exploit.)                                                                     // 22398
 *                                                                                                                     // 22399
 * @element ANY                                                                                                        // 22400
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.                                     // 22401
 *                                                                                                                     // 22402
 * @example                                                                                                            // 22403
                                                                                                                       // 22404
   <example module="bindHtmlExample" deps="angular-sanitize.js">                                                       // 22405
     <file name="index.html">                                                                                          // 22406
       <div ng-controller="ExampleController">                                                                         // 22407
        <p ng-bind-html="myHTML"></p>                                                                                  // 22408
       </div>                                                                                                          // 22409
     </file>                                                                                                           // 22410
                                                                                                                       // 22411
     <file name="script.js">                                                                                           // 22412
       angular.module('bindHtmlExample', ['ngSanitize'])                                                               // 22413
         .controller('ExampleController', ['$scope', function($scope) {                                                // 22414
           $scope.myHTML =                                                                                             // 22415
              'I am an <code>HTML</code>string with ' +                                                                // 22416
              '<a href="#">links!</a> and other <em>stuff</em>';                                                       // 22417
         }]);                                                                                                          // 22418
     </file>                                                                                                           // 22419
                                                                                                                       // 22420
     <file name="protractor.js" type="protractor">                                                                     // 22421
       it('should check ng-bind-html', function() {                                                                    // 22422
         expect(element(by.binding('myHTML')).getText()).toBe(                                                         // 22423
             'I am an HTMLstring with links! and other stuff');                                                        // 22424
       });                                                                                                             // 22425
     </file>                                                                                                           // 22426
   </example>                                                                                                          // 22427
 */                                                                                                                    // 22428
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {                            // 22429
  return {                                                                                                             // 22430
    restrict: 'A',                                                                                                     // 22431
    compile: function ngBindHtmlCompile(tElement, tAttrs) {                                                            // 22432
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);                                                                // 22433
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {                                 // 22434
        return (value || '').toString();                                                                               // 22435
      });                                                                                                              // 22436
      $compile.$$addBindingClass(tElement);                                                                            // 22437
                                                                                                                       // 22438
      return function ngBindHtmlLink(scope, element, attr) {                                                           // 22439
        $compile.$$addBindingInfo(element, attr.ngBindHtml);                                                           // 22440
                                                                                                                       // 22441
        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {                                               // 22442
          // we re-evaluate the expr because we want a TrustedValueHolderType                                          // 22443
          // for $sce, not a string                                                                                    // 22444
          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');                                            // 22445
        });                                                                                                            // 22446
      };                                                                                                               // 22447
    }                                                                                                                  // 22448
  };                                                                                                                   // 22449
}];                                                                                                                    // 22450
                                                                                                                       // 22451
/**                                                                                                                    // 22452
 * @ngdoc directive                                                                                                    // 22453
 * @name ngChange                                                                                                      // 22454
 *                                                                                                                     // 22455
 * @description                                                                                                        // 22456
 * Evaluate the given expression when the user changes the input.                                                      // 22457
 * The expression is evaluated immediately, unlike the JavaScript onchange event                                       // 22458
 * which only triggers at the end of a change (usually, when the user leaves the                                       // 22459
 * form element or presses the return key).                                                                            // 22460
 *                                                                                                                     // 22461
 * The `ngChange` expression is only evaluated when a change in the input value causes                                 // 22462
 * a new value to be committed to the model.                                                                           // 22463
 *                                                                                                                     // 22464
 * It will not be evaluated:                                                                                           // 22465
 * * if the value returned from the `$parsers` transformation pipeline has not changed                                 // 22466
 * * if the input has continued to be invalid since the model will stay `null`                                         // 22467
 * * if the model is changed programmatically and not by a change to the input value                                   // 22468
 *                                                                                                                     // 22469
 *                                                                                                                     // 22470
 * Note, this directive requires `ngModel` to be present.                                                              // 22471
 *                                                                                                                     // 22472
 * @element input                                                                                                      // 22473
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change                            // 22474
 * in input value.                                                                                                     // 22475
 *                                                                                                                     // 22476
 * @example                                                                                                            // 22477
 * <example name="ngChange-directive" module="changeExample">                                                          // 22478
 *   <file name="index.html">                                                                                          // 22479
 *     <script>                                                                                                        // 22480
 *       angular.module('changeExample', [])                                                                           // 22481
 *         .controller('ExampleController', ['$scope', function($scope) {                                              // 22482
 *           $scope.counter = 0;                                                                                       // 22483
 *           $scope.change = function() {                                                                              // 22484
 *             $scope.counter++;                                                                                       // 22485
 *           };                                                                                                        // 22486
 *         }]);                                                                                                        // 22487
 *     </script>                                                                                                       // 22488
 *     <div ng-controller="ExampleController">                                                                         // 22489
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />                   // 22490
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />                                        // 22491
 *       <label for="ng-change-example2">Confirmed</label><br />                                                       // 22492
 *       <tt>debug = {{confirmed}}</tt><br/>                                                                           // 22493
 *       <tt>counter = {{counter}}</tt><br/>                                                                           // 22494
 *     </div>                                                                                                          // 22495
 *   </file>                                                                                                           // 22496
 *   <file name="protractor.js" type="protractor">                                                                     // 22497
 *     var counter = element(by.binding('counter'));                                                                   // 22498
 *     var debug = element(by.binding('confirmed'));                                                                   // 22499
 *                                                                                                                     // 22500
 *     it('should evaluate the expression if changing from view', function() {                                         // 22501
 *       expect(counter.getText()).toContain('0');                                                                     // 22502
 *                                                                                                                     // 22503
 *       element(by.id('ng-change-example1')).click();                                                                 // 22504
 *                                                                                                                     // 22505
 *       expect(counter.getText()).toContain('1');                                                                     // 22506
 *       expect(debug.getText()).toContain('true');                                                                    // 22507
 *     });                                                                                                             // 22508
 *                                                                                                                     // 22509
 *     it('should not evaluate the expression if changing from model', function() {                                    // 22510
 *       element(by.id('ng-change-example2')).click();                                                                 // 22511
                                                                                                                       // 22512
 *       expect(counter.getText()).toContain('0');                                                                     // 22513
 *       expect(debug.getText()).toContain('true');                                                                    // 22514
 *     });                                                                                                             // 22515
 *   </file>                                                                                                           // 22516
 * </example>                                                                                                          // 22517
 */                                                                                                                    // 22518
var ngChangeDirective = valueFn({                                                                                      // 22519
  restrict: 'A',                                                                                                       // 22520
  require: 'ngModel',                                                                                                  // 22521
  link: function(scope, element, attr, ctrl) {                                                                         // 22522
    ctrl.$viewChangeListeners.push(function() {                                                                        // 22523
      scope.$eval(attr.ngChange);                                                                                      // 22524
    });                                                                                                                // 22525
  }                                                                                                                    // 22526
});                                                                                                                    // 22527
                                                                                                                       // 22528
function classDirective(name, selector) {                                                                              // 22529
  name = 'ngClass' + name;                                                                                             // 22530
  return ['$animate', function($animate) {                                                                             // 22531
    return {                                                                                                           // 22532
      restrict: 'AC',                                                                                                  // 22533
      link: function(scope, element, attr) {                                                                           // 22534
        var oldVal;                                                                                                    // 22535
                                                                                                                       // 22536
        scope.$watch(attr[name], ngClassWatchAction, true);                                                            // 22537
                                                                                                                       // 22538
        attr.$observe('class', function(value) {                                                                       // 22539
          ngClassWatchAction(scope.$eval(attr[name]));                                                                 // 22540
        });                                                                                                            // 22541
                                                                                                                       // 22542
                                                                                                                       // 22543
        if (name !== 'ngClass') {                                                                                      // 22544
          scope.$watch('$index', function($index, old$index) {                                                         // 22545
            // jshint bitwise: false                                                                                   // 22546
            var mod = $index & 1;                                                                                      // 22547
            if (mod !== (old$index & 1)) {                                                                             // 22548
              var classes = arrayClasses(scope.$eval(attr[name]));                                                     // 22549
              mod === selector ?                                                                                       // 22550
                addClasses(classes) :                                                                                  // 22551
                removeClasses(classes);                                                                                // 22552
            }                                                                                                          // 22553
          });                                                                                                          // 22554
        }                                                                                                              // 22555
                                                                                                                       // 22556
        function addClasses(classes) {                                                                                 // 22557
          var newClasses = digestClassCounts(classes, 1);                                                              // 22558
          attr.$addClass(newClasses);                                                                                  // 22559
        }                                                                                                              // 22560
                                                                                                                       // 22561
        function removeClasses(classes) {                                                                              // 22562
          var newClasses = digestClassCounts(classes, -1);                                                             // 22563
          attr.$removeClass(newClasses);                                                                               // 22564
        }                                                                                                              // 22565
                                                                                                                       // 22566
        function digestClassCounts(classes, count) {                                                                   // 22567
          // Use createMap() to prevent class assumptions involving property                                           // 22568
          // names in Object.prototype                                                                                 // 22569
          var classCounts = element.data('$classCounts') || createMap();                                               // 22570
          var classesToUpdate = [];                                                                                    // 22571
          forEach(classes, function(className) {                                                                       // 22572
            if (count > 0 || classCounts[className]) {                                                                 // 22573
              classCounts[className] = (classCounts[className] || 0) + count;                                          // 22574
              if (classCounts[className] === +(count > 0)) {                                                           // 22575
                classesToUpdate.push(className);                                                                       // 22576
              }                                                                                                        // 22577
            }                                                                                                          // 22578
          });                                                                                                          // 22579
          element.data('$classCounts', classCounts);                                                                   // 22580
          return classesToUpdate.join(' ');                                                                            // 22581
        }                                                                                                              // 22582
                                                                                                                       // 22583
        function updateClasses(oldClasses, newClasses) {                                                               // 22584
          var toAdd = arrayDifference(newClasses, oldClasses);                                                         // 22585
          var toRemove = arrayDifference(oldClasses, newClasses);                                                      // 22586
          toAdd = digestClassCounts(toAdd, 1);                                                                         // 22587
          toRemove = digestClassCounts(toRemove, -1);                                                                  // 22588
          if (toAdd && toAdd.length) {                                                                                 // 22589
            $animate.addClass(element, toAdd);                                                                         // 22590
          }                                                                                                            // 22591
          if (toRemove && toRemove.length) {                                                                           // 22592
            $animate.removeClass(element, toRemove);                                                                   // 22593
          }                                                                                                            // 22594
        }                                                                                                              // 22595
                                                                                                                       // 22596
        function ngClassWatchAction(newVal) {                                                                          // 22597
          if (selector === true || scope.$index % 2 === selector) {                                                    // 22598
            var newClasses = arrayClasses(newVal || []);                                                               // 22599
            if (!oldVal) {                                                                                             // 22600
              addClasses(newClasses);                                                                                  // 22601
            } else if (!equals(newVal,oldVal)) {                                                                       // 22602
              var oldClasses = arrayClasses(oldVal);                                                                   // 22603
              updateClasses(oldClasses, newClasses);                                                                   // 22604
            }                                                                                                          // 22605
          }                                                                                                            // 22606
          oldVal = shallowCopy(newVal);                                                                                // 22607
        }                                                                                                              // 22608
      }                                                                                                                // 22609
    };                                                                                                                 // 22610
                                                                                                                       // 22611
    function arrayDifference(tokens1, tokens2) {                                                                       // 22612
      var values = [];                                                                                                 // 22613
                                                                                                                       // 22614
      outer:                                                                                                           // 22615
      for (var i = 0; i < tokens1.length; i++) {                                                                       // 22616
        var token = tokens1[i];                                                                                        // 22617
        for (var j = 0; j < tokens2.length; j++) {                                                                     // 22618
          if (token == tokens2[j]) continue outer;                                                                     // 22619
        }                                                                                                              // 22620
        values.push(token);                                                                                            // 22621
      }                                                                                                                // 22622
      return values;                                                                                                   // 22623
    }                                                                                                                  // 22624
                                                                                                                       // 22625
    function arrayClasses(classVal) {                                                                                  // 22626
      var classes = [];                                                                                                // 22627
      if (isArray(classVal)) {                                                                                         // 22628
        forEach(classVal, function(v) {                                                                                // 22629
          classes = classes.concat(arrayClasses(v));                                                                   // 22630
        });                                                                                                            // 22631
        return classes;                                                                                                // 22632
      } else if (isString(classVal)) {                                                                                 // 22633
        return classVal.split(' ');                                                                                    // 22634
      } else if (isObject(classVal)) {                                                                                 // 22635
        forEach(classVal, function(v, k) {                                                                             // 22636
          if (v) {                                                                                                     // 22637
            classes = classes.concat(k.split(' '));                                                                    // 22638
          }                                                                                                            // 22639
        });                                                                                                            // 22640
        return classes;                                                                                                // 22641
      }                                                                                                                // 22642
      return classVal;                                                                                                 // 22643
    }                                                                                                                  // 22644
  }];                                                                                                                  // 22645
}                                                                                                                      // 22646
                                                                                                                       // 22647
/**                                                                                                                    // 22648
 * @ngdoc directive                                                                                                    // 22649
 * @name ngClass                                                                                                       // 22650
 * @restrict AC                                                                                                        // 22651
 *                                                                                                                     // 22652
 * @description                                                                                                        // 22653
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding                 // 22654
 * an expression that represents all classes to be added.                                                              // 22655
 *                                                                                                                     // 22656
 * The directive operates in three different ways, depending on which of three types the expression                    // 22657
 * evaluates to:                                                                                                       // 22658
 *                                                                                                                     // 22659
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class                  // 22660
 * names.                                                                                                              // 22661
 *                                                                                                                     // 22662
 * 2. If the expression evaluates to an object, then for each key-value pair of the                                    // 22663
 * object with a truthy value the corresponding key is used as a class name.                                           // 22664
 *                                                                                                                     // 22665
 * 3. If the expression evaluates to an array, each element of the array should either be a string as in               // 22666
 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array              // 22667
 * to give you more control over what CSS classes appear. See the code below for an example of this.                   // 22668
 *                                                                                                                     // 22669
 *                                                                                                                     // 22670
 * The directive won't add duplicate classes if a particular class was already set.                                    // 22671
 *                                                                                                                     // 22672
 * When the expression changes, the previously added classes are removed and only then are the                         // 22673
 * new classes added.                                                                                                  // 22674
 *                                                                                                                     // 22675
 * @animations                                                                                                         // 22676
 * **add** - happens just before the class is applied to the elements                                                  // 22677
 *                                                                                                                     // 22678
 * **remove** - happens just before the class is removed from the element                                              // 22679
 *                                                                                                                     // 22680
 * @element ANY                                                                                                        // 22681
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result                                 // 22682
 *   of the evaluation can be a string representing space delimited class                                              // 22683
 *   names, an array, or a map of class names to boolean values. In the case of a map, the                             // 22684
 *   names of the properties whose values are truthy will be added as css classes to the                               // 22685
 *   element.                                                                                                          // 22686
 *                                                                                                                     // 22687
 * @example Example that demonstrates basic bindings via ngClass directive.                                            // 22688
   <example>                                                                                                           // 22689
     <file name="index.html">                                                                                          // 22690
       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>                     // 22691
       <label>                                                                                                         // 22692
          <input type="checkbox" ng-model="deleted">                                                                   // 22693
          deleted (apply "strike" class)                                                                               // 22694
       </label><br>                                                                                                    // 22695
       <label>                                                                                                         // 22696
          <input type="checkbox" ng-model="important">                                                                 // 22697
          important (apply "bold" class)                                                                               // 22698
       </label><br>                                                                                                    // 22699
       <label>                                                                                                         // 22700
          <input type="checkbox" ng-model="error">                                                                     // 22701
          error (apply "has-error" class)                                                                              // 22702
       </label>                                                                                                        // 22703
       <hr>                                                                                                            // 22704
       <p ng-class="style">Using String Syntax</p>                                                                     // 22705
       <input type="text" ng-model="style"                                                                             // 22706
              placeholder="Type: bold strike red" aria-label="Type: bold strike red">                                  // 22707
       <hr>                                                                                                            // 22708
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>                                                   // 22709
       <input ng-model="style1"                                                                                        // 22710
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>                      // 22711
       <input ng-model="style2"                                                                                        // 22712
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>                    // 22713
       <input ng-model="style3"                                                                                        // 22714
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>                    // 22715
       <hr>                                                                                                            // 22716
       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>                                        // 22717
       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>                  // 22718
       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>                        // 22719
     </file>                                                                                                           // 22720
     <file name="style.css">                                                                                           // 22721
       .strike {                                                                                                       // 22722
           text-decoration: line-through;                                                                              // 22723
       }                                                                                                               // 22724
       .bold {                                                                                                         // 22725
           font-weight: bold;                                                                                          // 22726
       }                                                                                                               // 22727
       .red {                                                                                                          // 22728
           color: red;                                                                                                 // 22729
       }                                                                                                               // 22730
       .has-error {                                                                                                    // 22731
           color: red;                                                                                                 // 22732
           background-color: yellow;                                                                                   // 22733
       }                                                                                                               // 22734
       .orange {                                                                                                       // 22735
           color: orange;                                                                                              // 22736
       }                                                                                                               // 22737
     </file>                                                                                                           // 22738
     <file name="protractor.js" type="protractor">                                                                     // 22739
       var ps = element.all(by.css('p'));                                                                              // 22740
                                                                                                                       // 22741
       it('should let you toggle the class', function() {                                                              // 22742
                                                                                                                       // 22743
         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);                                                 // 22744
         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);                                            // 22745
                                                                                                                       // 22746
         element(by.model('important')).click();                                                                       // 22747
         expect(ps.first().getAttribute('class')).toMatch(/bold/);                                                     // 22748
                                                                                                                       // 22749
         element(by.model('error')).click();                                                                           // 22750
         expect(ps.first().getAttribute('class')).toMatch(/has-error/);                                                // 22751
       });                                                                                                             // 22752
                                                                                                                       // 22753
       it('should let you toggle string example', function() {                                                         // 22754
         expect(ps.get(1).getAttribute('class')).toBe('');                                                             // 22755
         element(by.model('style')).clear();                                                                           // 22756
         element(by.model('style')).sendKeys('red');                                                                   // 22757
         expect(ps.get(1).getAttribute('class')).toBe('red');                                                          // 22758
       });                                                                                                             // 22759
                                                                                                                       // 22760
       it('array example should have 3 classes', function() {                                                          // 22761
         expect(ps.get(2).getAttribute('class')).toBe('');                                                             // 22762
         element(by.model('style1')).sendKeys('bold');                                                                 // 22763
         element(by.model('style2')).sendKeys('strike');                                                               // 22764
         element(by.model('style3')).sendKeys('red');                                                                  // 22765
         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');                                              // 22766
       });                                                                                                             // 22767
                                                                                                                       // 22768
       it('array with map example should have 2 classes', function() {                                                 // 22769
         expect(ps.last().getAttribute('class')).toBe('');                                                             // 22770
         element(by.model('style4')).sendKeys('bold');                                                                 // 22771
         element(by.model('warning')).click();                                                                         // 22772
         expect(ps.last().getAttribute('class')).toBe('bold orange');                                                  // 22773
       });                                                                                                             // 22774
     </file>                                                                                                           // 22775
   </example>                                                                                                          // 22776
                                                                                                                       // 22777
   ## Animations                                                                                                       // 22778
                                                                                                                       // 22779
   The example below demonstrates how to perform animations using ngClass.                                             // 22780
                                                                                                                       // 22781
   <example module="ngAnimate" deps="angular-animate.js" animations="true">                                            // 22782
     <file name="index.html">                                                                                          // 22783
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">                                        // 22784
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">                                            // 22785
      <br>                                                                                                             // 22786
      <span class="base-class" ng-class="myVar">Sample Text</span>                                                     // 22787
     </file>                                                                                                           // 22788
     <file name="style.css">                                                                                           // 22789
       .base-class {                                                                                                   // 22790
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                 // 22791
       }                                                                                                               // 22792
                                                                                                                       // 22793
       .base-class.my-class {                                                                                          // 22794
         color: red;                                                                                                   // 22795
         font-size:3em;                                                                                                // 22796
       }                                                                                                               // 22797
     </file>                                                                                                           // 22798
     <file name="protractor.js" type="protractor">                                                                     // 22799
       it('should check ng-class', function() {                                                                        // 22800
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22801
           toMatch(/my-class/);                                                                                        // 22802
                                                                                                                       // 22803
         element(by.id('setbtn')).click();                                                                             // 22804
                                                                                                                       // 22805
         expect(element(by.css('.base-class')).getAttribute('class')).                                                 // 22806
           toMatch(/my-class/);                                                                                        // 22807
                                                                                                                       // 22808
         element(by.id('clearbtn')).click();                                                                           // 22809
                                                                                                                       // 22810
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22811
           toMatch(/my-class/);                                                                                        // 22812
       });                                                                                                             // 22813
     </file>                                                                                                           // 22814
   </example>                                                                                                          // 22815
                                                                                                                       // 22816
                                                                                                                       // 22817
   ## ngClass and pre-existing CSS3 Transitions/Animations                                                             // 22818
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link $animate#addClass $animate.addClass} and                                 // 22822
   {@link $animate#removeClass $animate.removeClass}.                                                                  // 22823
 */                                                                                                                    // 22824
var ngClassDirective = classDirective('', true);                                                                       // 22825
                                                                                                                       // 22826
/**                                                                                                                    // 22827
 * @ngdoc directive                                                                                                    // 22828
 * @name ngClassOdd                                                                                                    // 22829
 * @restrict AC                                                                                                        // 22830
 *                                                                                                                     // 22831
 * @description                                                                                                        // 22832
 * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22833
 * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22834
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22835
 *                                                                                                                     // 22836
 * This directive can be applied only within the scope of an                                                           // 22837
 * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22838
 *                                                                                                                     // 22839
 * @element ANY                                                                                                        // 22840
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result                              // 22841
 *   of the evaluation can be a string representing space delimited class names or an array.                           // 22842
 *                                                                                                                     // 22843
 * @example                                                                                                            // 22844
   <example>                                                                                                           // 22845
     <file name="index.html">                                                                                          // 22846
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                           // 22847
          <li ng-repeat="name in names">                                                                               // 22848
           <span ng-class-odd="'odd'" ng-class-even="'even'">                                                          // 22849
             {{name}}                                                                                                  // 22850
           </span>                                                                                                     // 22851
          </li>                                                                                                        // 22852
        </ol>                                                                                                          // 22853
     </file>                                                                                                           // 22854
     <file name="style.css">                                                                                           // 22855
       .odd {                                                                                                          // 22856
         color: red;                                                                                                   // 22857
       }                                                                                                               // 22858
       .even {                                                                                                         // 22859
         color: blue;                                                                                                  // 22860
       }                                                                                                               // 22861
     </file>                                                                                                           // 22862
     <file name="protractor.js" type="protractor">                                                                     // 22863
       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22864
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22865
           toMatch(/odd/);                                                                                             // 22866
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22867
           toMatch(/even/);                                                                                            // 22868
       });                                                                                                             // 22869
     </file>                                                                                                           // 22870
   </example>                                                                                                          // 22871
 */                                                                                                                    // 22872
var ngClassOddDirective = classDirective('Odd', 0);                                                                    // 22873
                                                                                                                       // 22874
/**                                                                                                                    // 22875
 * @ngdoc directive                                                                                                    // 22876
 * @name ngClassEven                                                                                                   // 22877
 * @restrict AC                                                                                                        // 22878
 *                                                                                                                     // 22879
 * @description                                                                                                        // 22880
 * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22881
 * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22882
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22883
 *                                                                                                                     // 22884
 * This directive can be applied only within the scope of an                                                           // 22885
 * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22886
 *                                                                                                                     // 22887
 * @element ANY                                                                                                        // 22888
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The                                    // 22889
 *   result of the evaluation can be a string representing space delimited class names or an array.                    // 22890
 *                                                                                                                     // 22891
 * @example                                                                                                            // 22892
   <example>                                                                                                           // 22893
     <file name="index.html">                                                                                          // 22894
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                           // 22895
          <li ng-repeat="name in names">                                                                               // 22896
           <span ng-class-odd="'odd'" ng-class-even="'even'">                                                          // 22897
             {{name}} &nbsp; &nbsp; &nbsp;                                                                             // 22898
           </span>                                                                                                     // 22899
          </li>                                                                                                        // 22900
        </ol>                                                                                                          // 22901
     </file>                                                                                                           // 22902
     <file name="style.css">                                                                                           // 22903
       .odd {                                                                                                          // 22904
         color: red;                                                                                                   // 22905
       }                                                                                                               // 22906
       .even {                                                                                                         // 22907
         color: blue;                                                                                                  // 22908
       }                                                                                                               // 22909
     </file>                                                                                                           // 22910
     <file name="protractor.js" type="protractor">                                                                     // 22911
       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22912
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22913
           toMatch(/odd/);                                                                                             // 22914
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22915
           toMatch(/even/);                                                                                            // 22916
       });                                                                                                             // 22917
     </file>                                                                                                           // 22918
   </example>                                                                                                          // 22919
 */                                                                                                                    // 22920
var ngClassEvenDirective = classDirective('Even', 1);                                                                  // 22921
                                                                                                                       // 22922
/**                                                                                                                    // 22923
 * @ngdoc directive                                                                                                    // 22924
 * @name ngCloak                                                                                                       // 22925
 * @restrict AC                                                                                                        // 22926
 *                                                                                                                     // 22927
 * @description                                                                                                        // 22928
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly                             // 22929
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this                   // 22930
 * directive to avoid the undesirable flicker effect caused by the html template display.                              // 22931
 *                                                                                                                     // 22932
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply                           // 22933
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering                         // 22934
 * of the browser view.                                                                                                // 22935
 *                                                                                                                     // 22936
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and                         // 22937
 * `angular.min.js`.                                                                                                   // 22938
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 22939
 *                                                                                                                     // 22940
 * ```css                                                                                                              // 22941
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {                                    // 22942
 *   display: none !important;                                                                                         // 22943
 * }                                                                                                                   // 22944
 * ```                                                                                                                 // 22945
 *                                                                                                                     // 22946
 * When this css rule is loaded by the browser, all html elements (including their children) that                      // 22947
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive                          // 22948
 * during the compilation of the template it deletes the `ngCloak` element attribute, making                           // 22949
 * the compiled element visible.                                                                                       // 22950
 *                                                                                                                     // 22951
 * For the best result, the `angular.js` script must be loaded in the head section of the html                         // 22952
 * document; alternatively, the css rule above must be included in the external stylesheet of the                      // 22953
 * application.                                                                                                        // 22954
 *                                                                                                                     // 22955
 * @element ANY                                                                                                        // 22956
 *                                                                                                                     // 22957
 * @example                                                                                                            // 22958
   <example>                                                                                                           // 22959
     <file name="index.html">                                                                                          // 22960
        <div id="template1" ng-cloak>{{ 'hello' }}</div>                                                               // 22961
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>                                                       // 22962
     </file>                                                                                                           // 22963
     <file name="protractor.js" type="protractor">                                                                     // 22964
       it('should remove the template directive and css class', function() {                                           // 22965
         expect($('#template1').getAttribute('ng-cloak')).                                                             // 22966
           toBeNull();                                                                                                 // 22967
         expect($('#template2').getAttribute('ng-cloak')).                                                             // 22968
           toBeNull();                                                                                                 // 22969
       });                                                                                                             // 22970
     </file>                                                                                                           // 22971
   </example>                                                                                                          // 22972
 *                                                                                                                     // 22973
 */                                                                                                                    // 22974
var ngCloakDirective = ngDirective({                                                                                   // 22975
  compile: function(element, attr) {                                                                                   // 22976
    attr.$set('ngCloak', undefined);                                                                                   // 22977
    element.removeClass('ng-cloak');                                                                                   // 22978
  }                                                                                                                    // 22979
});                                                                                                                    // 22980
                                                                                                                       // 22981
/**                                                                                                                    // 22982
 * @ngdoc directive                                                                                                    // 22983
 * @name ngController                                                                                                  // 22984
 *                                                                                                                     // 22985
 * @description                                                                                                        // 22986
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular           // 22987
 * supports the principles behind the Model-View-Controller design pattern.                                            // 22988
 *                                                                                                                     // 22989
 * MVC components in angular:                                                                                          // 22990
 *                                                                                                                     // 22991
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties               // 22992
 *   are accessed through bindings.                                                                                    // 22993
 * * View — The template (HTML with data bindings) that is rendered into the View.                                     // 22994
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business               // 22995
 *   logic behind the application to decorate the scope with functions and values                                      // 22996
 *                                                                                                                     // 22997
 * Note that you can also attach controllers to the DOM by declaring it in a route definition                          // 22998
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller                        // 22999
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached                  // 23000
 * and executed twice.                                                                                                 // 23001
 *                                                                                                                     // 23002
 * @element ANY                                                                                                        // 23003
 * @scope                                                                                                              // 23004
 * @priority 500                                                                                                       // 23005
 * @param {expression} ngController Name of a constructor function registered with the current                         // 23006
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}                        // 23007
 * that on the current scope evaluates to a constructor function.                                                      // 23008
 *                                                                                                                     // 23009
 * The controller instance can be published into a scope property by specifying                                        // 23010
 * `ng-controller="as propertyName"`.                                                                                  // 23011
 *                                                                                                                     // 23012
 * If the current `$controllerProvider` is configured to use globals (via                                              // 23013
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may                        // 23014
 * also be the name of a globally accessible constructor function (not recommended).                                   // 23015
 *                                                                                                                     // 23016
 * @example                                                                                                            // 23017
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and                         // 23018
 * greeting are methods declared on the controller (see source tab). These methods can                                 // 23019
 * easily be called from the angular markup. Any changes to the data are automatically reflected                       // 23020
 * in the View without the need for a manual update.                                                                   // 23021
 *                                                                                                                     // 23022
 * Two different declaration styles are included below:                                                                // 23023
 *                                                                                                                     // 23024
 * * one binds methods and properties directly onto the controller using `this`:                                       // 23025
 * `ng-controller="SettingsController1 as settings"`                                                                   // 23026
 * * one injects `$scope` into the controller:                                                                         // 23027
 * `ng-controller="SettingsController2"`                                                                               // 23028
 *                                                                                                                     // 23029
 * The second option is more common in the Angular community, and is generally used in boilerplates                    // 23030
 * and in this guide. However, there are advantages to binding properties directly to the controller                   // 23031
 * and avoiding scope.                                                                                                 // 23032
 *                                                                                                                     // 23033
 * * Using `controller as` makes it obvious which controller you are accessing in the template when                    // 23034
 * multiple controllers apply to an element.                                                                           // 23035
 * * If you are writing your controllers as classes you have easier access to the properties and                       // 23036
 * methods, which will appear on the scope, from inside the controller code.                                           // 23037
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal                             // 23038
 * inheritance masking primitives.                                                                                     // 23039
 *                                                                                                                     // 23040
 * This example demonstrates the `controller as` syntax.                                                               // 23041
 *                                                                                                                     // 23042
 * <example name="ngControllerAs" module="controllerAsExample">                                                        // 23043
 *   <file name="index.html">                                                                                          // 23044
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">                                         // 23045
 *      <label>Name: <input type="text" ng-model="settings.name"/></label>                                             // 23046
 *      <button ng-click="settings.greet()">greet</button><br/>                                                        // 23047
 *      Contact:                                                                                                       // 23048
 *      <ul>                                                                                                           // 23049
 *        <li ng-repeat="contact in settings.contacts">                                                                // 23050
 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">                        // 23051
 *             <option>phone</option>                                                                                  // 23052
 *             <option>email</option>                                                                                  // 23053
 *          </select>                                                                                                  // 23054
 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />                         // 23055
 *          <button ng-click="settings.clearContact(contact)">clear</button>                                           // 23056
 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>                          // 23057
 *        </li>                                                                                                        // 23058
 *        <li><button ng-click="settings.addContact()">add</button></li>                                               // 23059
 *     </ul>                                                                                                           // 23060
 *    </div>                                                                                                           // 23061
 *   </file>                                                                                                           // 23062
 *   <file name="app.js">                                                                                              // 23063
 *    angular.module('controllerAsExample', [])                                                                        // 23064
 *      .controller('SettingsController1', SettingsController1);                                                       // 23065
 *                                                                                                                     // 23066
 *    function SettingsController1() {                                                                                 // 23067
 *      this.name = "John Smith";                                                                                      // 23068
 *      this.contacts = [                                                                                              // 23069
 *        {type: 'phone', value: '408 555 1212'},                                                                      // 23070
 *        {type: 'email', value: 'john.smith@example.org'} ];                                                          // 23071
 *    }                                                                                                                // 23072
 *                                                                                                                     // 23073
 *    SettingsController1.prototype.greet = function() {                                                               // 23074
 *      alert(this.name);                                                                                              // 23075
 *    };                                                                                                               // 23076
 *                                                                                                                     // 23077
 *    SettingsController1.prototype.addContact = function() {                                                          // 23078
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});                                            // 23079
 *    };                                                                                                               // 23080
 *                                                                                                                     // 23081
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {                                        // 23082
 *     var index = this.contacts.indexOf(contactToRemove);                                                             // 23083
 *      this.contacts.splice(index, 1);                                                                                // 23084
 *    };                                                                                                               // 23085
 *                                                                                                                     // 23086
 *    SettingsController1.prototype.clearContact = function(contact) {                                                 // 23087
 *      contact.type = 'phone';                                                                                        // 23088
 *      contact.value = '';                                                                                            // 23089
 *    };                                                                                                               // 23090
 *   </file>                                                                                                           // 23091
 *   <file name="protractor.js" type="protractor">                                                                     // 23092
 *     it('should check controller as', function() {                                                                   // 23093
 *       var container = element(by.id('ctrl-as-exmpl'));                                                              // 23094
 *         expect(container.element(by.model('settings.name'))                                                         // 23095
 *           .getAttribute('value')).toBe('John Smith');                                                               // 23096
 *                                                                                                                     // 23097
 *       var firstRepeat =                                                                                             // 23098
 *           container.element(by.repeater('contact in settings.contacts').row(0));                                    // 23099
 *       var secondRepeat =                                                                                            // 23100
 *           container.element(by.repeater('contact in settings.contacts').row(1));                                    // 23101
 *                                                                                                                     // 23102
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23103
 *           .toBe('408 555 1212');                                                                                    // 23104
 *                                                                                                                     // 23105
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                 // 23106
 *           .toBe('john.smith@example.org');                                                                          // 23107
 *                                                                                                                     // 23108
 *       firstRepeat.element(by.buttonText('clear')).click();                                                          // 23109
 *                                                                                                                     // 23110
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23111
 *           .toBe('');                                                                                                // 23112
 *                                                                                                                     // 23113
 *       container.element(by.buttonText('add')).click();                                                              // 23114
 *                                                                                                                     // 23115
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))                                  // 23116
 *           .element(by.model('contact.value'))                                                                       // 23117
 *           .getAttribute('value'))                                                                                   // 23118
 *           .toBe('yourname@example.org');                                                                            // 23119
 *     });                                                                                                             // 23120
 *   </file>                                                                                                           // 23121
 * </example>                                                                                                          // 23122
 *                                                                                                                     // 23123
 * This example demonstrates the "attach to `$scope`" style of controller.                                             // 23124
 *                                                                                                                     // 23125
 * <example name="ngController" module="controllerExample">                                                            // 23126
 *  <file name="index.html">                                                                                           // 23127
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">                                                         // 23128
 *     <label>Name: <input type="text" ng-model="name"/></label>                                                       // 23129
 *     <button ng-click="greet()">greet</button><br/>                                                                  // 23130
 *     Contact:                                                                                                        // 23131
 *     <ul>                                                                                                            // 23132
 *       <li ng-repeat="contact in contacts">                                                                          // 23133
 *         <select ng-model="contact.type" id="select_{{$index}}">                                                     // 23134
 *            <option>phone</option>                                                                                   // 23135
 *            <option>email</option>                                                                                   // 23136
 *         </select>                                                                                                   // 23137
 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />                          // 23138
 *         <button ng-click="clearContact(contact)">clear</button>                                                     // 23139
 *         <button ng-click="removeContact(contact)">X</button>                                                        // 23140
 *       </li>                                                                                                         // 23141
 *       <li>[ <button ng-click="addContact()">add</button> ]</li>                                                     // 23142
 *    </ul>                                                                                                            // 23143
 *   </div>                                                                                                            // 23144
 *  </file>                                                                                                            // 23145
 *  <file name="app.js">                                                                                               // 23146
 *   angular.module('controllerExample', [])                                                                           // 23147
 *     .controller('SettingsController2', ['$scope', SettingsController2]);                                            // 23148
 *                                                                                                                     // 23149
 *   function SettingsController2($scope) {                                                                            // 23150
 *     $scope.name = "John Smith";                                                                                     // 23151
 *     $scope.contacts = [                                                                                             // 23152
 *       {type:'phone', value:'408 555 1212'},                                                                         // 23153
 *       {type:'email', value:'john.smith@example.org'} ];                                                             // 23154
 *                                                                                                                     // 23155
 *     $scope.greet = function() {                                                                                     // 23156
 *       alert($scope.name);                                                                                           // 23157
 *     };                                                                                                              // 23158
 *                                                                                                                     // 23159
 *     $scope.addContact = function() {                                                                                // 23160
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});                                           // 23161
 *     };                                                                                                              // 23162
 *                                                                                                                     // 23163
 *     $scope.removeContact = function(contactToRemove) {                                                              // 23164
 *       var index = $scope.contacts.indexOf(contactToRemove);                                                         // 23165
 *       $scope.contacts.splice(index, 1);                                                                             // 23166
 *     };                                                                                                              // 23167
 *                                                                                                                     // 23168
 *     $scope.clearContact = function(contact) {                                                                       // 23169
 *       contact.type = 'phone';                                                                                       // 23170
 *       contact.value = '';                                                                                           // 23171
 *     };                                                                                                              // 23172
 *   }                                                                                                                 // 23173
 *  </file>                                                                                                            // 23174
 *  <file name="protractor.js" type="protractor">                                                                      // 23175
 *    it('should check controller', function() {                                                                       // 23176
 *      var container = element(by.id('ctrl-exmpl'));                                                                  // 23177
 *                                                                                                                     // 23178
 *      expect(container.element(by.model('name'))                                                                     // 23179
 *          .getAttribute('value')).toBe('John Smith');                                                                // 23180
 *                                                                                                                     // 23181
 *      var firstRepeat =                                                                                              // 23182
 *          container.element(by.repeater('contact in contacts').row(0));                                              // 23183
 *      var secondRepeat =                                                                                             // 23184
 *          container.element(by.repeater('contact in contacts').row(1));                                              // 23185
 *                                                                                                                     // 23186
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23187
 *          .toBe('408 555 1212');                                                                                     // 23188
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23189
 *          .toBe('john.smith@example.org');                                                                           // 23190
 *                                                                                                                     // 23191
 *      firstRepeat.element(by.buttonText('clear')).click();                                                           // 23192
 *                                                                                                                     // 23193
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23194
 *          .toBe('');                                                                                                 // 23195
 *                                                                                                                     // 23196
 *      container.element(by.buttonText('add')).click();                                                               // 23197
 *                                                                                                                     // 23198
 *      expect(container.element(by.repeater('contact in contacts').row(2))                                            // 23199
 *          .element(by.model('contact.value'))                                                                        // 23200
 *          .getAttribute('value'))                                                                                    // 23201
 *          .toBe('yourname@example.org');                                                                             // 23202
 *    });                                                                                                              // 23203
 *  </file>                                                                                                            // 23204
 *</example>                                                                                                           // 23205
                                                                                                                       // 23206
 */                                                                                                                    // 23207
var ngControllerDirective = [function() {                                                                              // 23208
  return {                                                                                                             // 23209
    restrict: 'A',                                                                                                     // 23210
    scope: true,                                                                                                       // 23211
    controller: '@',                                                                                                   // 23212
    priority: 500                                                                                                      // 23213
  };                                                                                                                   // 23214
}];                                                                                                                    // 23215
                                                                                                                       // 23216
/**                                                                                                                    // 23217
 * @ngdoc directive                                                                                                    // 23218
 * @name ngCsp                                                                                                         // 23219
 *                                                                                                                     // 23220
 * @element html                                                                                                       // 23221
 * @description                                                                                                        // 23222
 *                                                                                                                     // 23223
 * Angular has some features that can break certain                                                                    // 23224
 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.                               // 23225
 *                                                                                                                     // 23226
 * If you intend to implement these rules then you must tell Angular not to use these features.                        // 23227
 *                                                                                                                     // 23228
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.                   // 23229
 *                                                                                                                     // 23230
 *                                                                                                                     // 23231
 * The following rules affect Angular:                                                                                 // 23232
 *                                                                                                                     // 23233
 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions                     // 23234
 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%                      // 23235
 * increase in the speed of evaluating Angular expressions.                                                            // 23236
 *                                                                                                                     // 23237
 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular                      // 23238
 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).                              // 23239
 * To make these directives work when a CSP rule is blocking inline styles, you must link to the                       // 23240
 * `angular-csp.css` in your HTML manually.                                                                            // 23241
 *                                                                                                                     // 23242
 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval                       // 23243
 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,                       // 23244
 * however, triggers a CSP error to be logged in the console:                                                          // 23245
 *                                                                                                                     // 23246
 * ```                                                                                                                 // 23247
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of                        // 23248
 * script in the following Content Security Policy directive: "default-src 'self'". Note that                          // 23249
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.                                        // 23250
 * ```                                                                                                                 // 23251
 *                                                                                                                     // 23252
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`                          // 23253
 * directive on an element of the HTML document that appears before the `<script>` tag that loads                      // 23254
 * the `angular.js` file.                                                                                              // 23255
 *                                                                                                                     // 23256
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*                          // 23257
 *                                                                                                                     // 23258
 * You can specify which of the CSP related Angular features should be deactivated by providing                        // 23259
 * a value for the `ng-csp` attribute. The options are as follows:                                                     // 23260
 *                                                                                                                     // 23261
 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM                                        // 23262
 *                                                                                                                     // 23263
 * * no-unsafe-eval: this stops Angular from optimising $parse with unsafe eval of strings                             // 23264
 *                                                                                                                     // 23265
 * You can use these values in the following combinations:                                                             // 23266
 *                                                                                                                     // 23267
 *                                                                                                                     // 23268
 * * No declaration means that Angular will assume that you can do inline styles, but it will do                       // 23269
 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions                // 23270
 * of Angular.                                                                                                         // 23271
 *                                                                                                                     // 23272
 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline                        // 23273
 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions                  // 23274
 * of Angular.                                                                                                         // 23275
 *                                                                                                                     // 23276
 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject                  // 23277
 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.                                                               // 23278
 *                                                                                                                     // 23279
 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can                   // 23280
 * run eval - no automcatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`                   // 23281
 *                                                                                                                     // 23282
 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject                      // 23283
 * styles nor use eval, which is the same as an empty: ng-csp.                                                         // 23284
 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`                                                                // 23285
 *                                                                                                                     // 23286
 * @example                                                                                                            // 23287
 * This example shows how to apply the `ngCsp` directive to the `html` tag.                                            // 23288
   ```html                                                                                                             // 23289
     <!doctype html>                                                                                                   // 23290
     <html ng-app ng-csp>                                                                                              // 23291
     ...                                                                                                               // 23292
     ...                                                                                                               // 23293
     </html>                                                                                                           // 23294
   ```                                                                                                                 // 23295
  * @example                                                                                                           // 23296
      // Note: the suffix `.csp` in the example name triggers                                                          // 23297
      // csp mode in our http server!                                                                                  // 23298
      <example name="example.csp" module="cspExample" ng-csp="true">                                                   // 23299
        <file name="index.html">                                                                                       // 23300
          <div ng-controller="MainController as ctrl">                                                                 // 23301
            <div>                                                                                                      // 23302
              <button ng-click="ctrl.inc()" id="inc">Increment</button>                                                // 23303
              <span id="counter">                                                                                      // 23304
                {{ctrl.counter}}                                                                                       // 23305
              </span>                                                                                                  // 23306
            </div>                                                                                                     // 23307
                                                                                                                       // 23308
            <div>                                                                                                      // 23309
              <button ng-click="ctrl.evil()" id="evil">Evil</button>                                                   // 23310
              <span id="evilError">                                                                                    // 23311
                {{ctrl.evilError}}                                                                                     // 23312
              </span>                                                                                                  // 23313
            </div>                                                                                                     // 23314
          </div>                                                                                                       // 23315
        </file>                                                                                                        // 23316
        <file name="script.js">                                                                                        // 23317
           angular.module('cspExample', [])                                                                            // 23318
             .controller('MainController', function() {                                                                // 23319
                this.counter = 0;                                                                                      // 23320
                this.inc = function() {                                                                                // 23321
                  this.counter++;                                                                                      // 23322
                };                                                                                                     // 23323
                this.evil = function() {                                                                               // 23324
                  // jshint evil:true                                                                                  // 23325
                  try {                                                                                                // 23326
                    eval('1+2');                                                                                       // 23327
                  } catch (e) {                                                                                        // 23328
                    this.evilError = e.message;                                                                        // 23329
                  }                                                                                                    // 23330
                };                                                                                                     // 23331
              });                                                                                                      // 23332
        </file>                                                                                                        // 23333
        <file name="protractor.js" type="protractor">                                                                  // 23334
          var util, webdriver;                                                                                         // 23335
                                                                                                                       // 23336
          var incBtn = element(by.id('inc'));                                                                          // 23337
          var counter = element(by.id('counter'));                                                                     // 23338
          var evilBtn = element(by.id('evil'));                                                                        // 23339
          var evilError = element(by.id('evilError'));                                                                 // 23340
                                                                                                                       // 23341
          function getAndClearSevereErrors() {                                                                         // 23342
            return browser.manage().logs().get('browser').then(function(browserLog) {                                  // 23343
              return browserLog.filter(function(logEntry) {                                                            // 23344
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;                                   // 23345
              });                                                                                                      // 23346
            });                                                                                                        // 23347
          }                                                                                                            // 23348
                                                                                                                       // 23349
          function clearErrors() {                                                                                     // 23350
            getAndClearSevereErrors();                                                                                 // 23351
          }                                                                                                            // 23352
                                                                                                                       // 23353
          function expectNoErrors() {                                                                                  // 23354
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23355
              expect(filteredLog.length).toEqual(0);                                                                   // 23356
              if (filteredLog.length) {                                                                                // 23357
                console.log('browser console errors: ' + util.inspect(filteredLog));                                   // 23358
              }                                                                                                        // 23359
            });                                                                                                        // 23360
          }                                                                                                            // 23361
                                                                                                                       // 23362
          function expectError(regex) {                                                                                // 23363
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23364
              var found = false;                                                                                       // 23365
              filteredLog.forEach(function(log) {                                                                      // 23366
                if (log.message.match(regex)) {                                                                        // 23367
                  found = true;                                                                                        // 23368
                }                                                                                                      // 23369
              });                                                                                                      // 23370
              if (!found) {                                                                                            // 23371
                throw new Error('expected an error that matches ' + regex);                                            // 23372
              }                                                                                                        // 23373
            });                                                                                                        // 23374
          }                                                                                                            // 23375
                                                                                                                       // 23376
          beforeEach(function() {                                                                                      // 23377
            util = require('util');                                                                                    // 23378
            webdriver = require('protractor/node_modules/selenium-webdriver');                                         // 23379
          });                                                                                                          // 23380
                                                                                                                       // 23381
          // For now, we only test on Chrome,                                                                          // 23382
          // as Safari does not load the page with Protractor's injected scripts,                                      // 23383
          // and Firefox webdriver always disables content security policy (#6358)                                     // 23384
          if (browser.params.browser !== 'chrome') {                                                                   // 23385
            return;                                                                                                    // 23386
          }                                                                                                            // 23387
                                                                                                                       // 23388
          it('should not report errors when the page is loaded', function() {                                          // 23389
            // clear errors so we are not dependent on previous tests                                                  // 23390
            clearErrors();                                                                                             // 23391
            // Need to reload the page as the page is already loaded when                                              // 23392
            // we come here                                                                                            // 23393
            browser.driver.getCurrentUrl().then(function(url) {                                                        // 23394
              browser.get(url);                                                                                        // 23395
            });                                                                                                        // 23396
            expectNoErrors();                                                                                          // 23397
          });                                                                                                          // 23398
                                                                                                                       // 23399
          it('should evaluate expressions', function() {                                                               // 23400
            expect(counter.getText()).toEqual('0');                                                                    // 23401
            incBtn.click();                                                                                            // 23402
            expect(counter.getText()).toEqual('1');                                                                    // 23403
            expectNoErrors();                                                                                          // 23404
          });                                                                                                          // 23405
                                                                                                                       // 23406
          it('should throw and report an error when using "eval"', function() {                                        // 23407
            evilBtn.click();                                                                                           // 23408
            expect(evilError.getText()).toMatch(/Content Security Policy/);                                            // 23409
            expectError(/Content Security Policy/);                                                                    // 23410
          });                                                                                                          // 23411
        </file>                                                                                                        // 23412
      </example>                                                                                                       // 23413
  */                                                                                                                   // 23414
                                                                                                                       // 23415
// ngCsp is not implemented as a proper directive any more, because we need it be processed while we                   // 23416
// bootstrap the system (before $parse is instantiated), for this reason we just have                                  // 23417
// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc                                      // 23418
                                                                                                                       // 23419
/**                                                                                                                    // 23420
 * @ngdoc directive                                                                                                    // 23421
 * @name ngClick                                                                                                       // 23422
 *                                                                                                                     // 23423
 * @description                                                                                                        // 23424
 * The ngClick directive allows you to specify custom behavior when                                                    // 23425
 * an element is clicked.                                                                                              // 23426
 *                                                                                                                     // 23427
 * @element ANY                                                                                                        // 23428
 * @priority 0                                                                                                         // 23429
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon                                    // 23430
 * click. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23431
 *                                                                                                                     // 23432
 * @example                                                                                                            // 23433
   <example>                                                                                                           // 23434
     <file name="index.html">                                                                                          // 23435
      <button ng-click="count = count + 1" ng-init="count=0">                                                          // 23436
        Increment                                                                                                      // 23437
      </button>                                                                                                        // 23438
      <span>                                                                                                           // 23439
        count: {{count}}                                                                                               // 23440
      </span>                                                                                                          // 23441
     </file>                                                                                                           // 23442
     <file name="protractor.js" type="protractor">                                                                     // 23443
       it('should check ng-click', function() {                                                                        // 23444
         expect(element(by.binding('count')).getText()).toMatch('0');                                                  // 23445
         element(by.css('button')).click();                                                                            // 23446
         expect(element(by.binding('count')).getText()).toMatch('1');                                                  // 23447
       });                                                                                                             // 23448
     </file>                                                                                                           // 23449
   </example>                                                                                                          // 23450
 */                                                                                                                    // 23451
/*                                                                                                                     // 23452
 * A collection of directives that allows creation of custom event handlers that are defined as                        // 23453
 * angular expressions and are compiled and executed within the current scope.                                         // 23454
 */                                                                                                                    // 23455
var ngEventDirectives = {};                                                                                            // 23456
                                                                                                                       // 23457
// For events that might fire synchronously during DOM manipulation                                                    // 23458
// we need to execute their event handlers asynchronously using $evalAsync,                                            // 23459
// so that they are not executed in an inconsistent state.                                                             // 23460
var forceAsyncEvents = {                                                                                               // 23461
  'blur': true,                                                                                                        // 23462
  'focus': true                                                                                                        // 23463
};                                                                                                                     // 23464
forEach(                                                                                                               // 23465
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {                                                                                                // 23467
    var directiveName = directiveNormalize('ng-' + eventName);                                                         // 23468
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {                         // 23469
      return {                                                                                                         // 23470
        restrict: 'A',                                                                                                 // 23471
        compile: function($element, attr) {                                                                            // 23472
          // We expose the powerful $event object on the scope that provides access to the Window,                     // 23473
          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better                      // 23474
          // checks at the cost of speed since event handler expressions are not executed as                           // 23475
          // frequently as regular change detection.                                                                   // 23476
          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);                  // 23477
          return function ngEventHandler(scope, element) {                                                             // 23478
            element.on(eventName, function(event) {                                                                    // 23479
              var callback = function() {                                                                              // 23480
                fn(scope, {$event:event});                                                                             // 23481
              };                                                                                                       // 23482
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {                                                 // 23483
                scope.$evalAsync(callback);                                                                            // 23484
              } else {                                                                                                 // 23485
                scope.$apply(callback);                                                                                // 23486
              }                                                                                                        // 23487
            });                                                                                                        // 23488
          };                                                                                                           // 23489
        }                                                                                                              // 23490
      };                                                                                                               // 23491
    }];                                                                                                                // 23492
  }                                                                                                                    // 23493
);                                                                                                                     // 23494
                                                                                                                       // 23495
/**                                                                                                                    // 23496
 * @ngdoc directive                                                                                                    // 23497
 * @name ngDblclick                                                                                                    // 23498
 *                                                                                                                     // 23499
 * @description                                                                                                        // 23500
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.                               // 23501
 *                                                                                                                     // 23502
 * @element ANY                                                                                                        // 23503
 * @priority 0                                                                                                         // 23504
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon                                 // 23505
 * a dblclick. (The Event object is available as `$event`)                                                             // 23506
 *                                                                                                                     // 23507
 * @example                                                                                                            // 23508
   <example>                                                                                                           // 23509
     <file name="index.html">                                                                                          // 23510
      <button ng-dblclick="count = count + 1" ng-init="count=0">                                                       // 23511
        Increment (on double click)                                                                                    // 23512
      </button>                                                                                                        // 23513
      count: {{count}}                                                                                                 // 23514
     </file>                                                                                                           // 23515
   </example>                                                                                                          // 23516
 */                                                                                                                    // 23517
                                                                                                                       // 23518
                                                                                                                       // 23519
/**                                                                                                                    // 23520
 * @ngdoc directive                                                                                                    // 23521
 * @name ngMousedown                                                                                                   // 23522
 *                                                                                                                     // 23523
 * @description                                                                                                        // 23524
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.                                 // 23525
 *                                                                                                                     // 23526
 * @element ANY                                                                                                        // 23527
 * @priority 0                                                                                                         // 23528
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon                                // 23529
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23530
 *                                                                                                                     // 23531
 * @example                                                                                                            // 23532
   <example>                                                                                                           // 23533
     <file name="index.html">                                                                                          // 23534
      <button ng-mousedown="count = count + 1" ng-init="count=0">                                                      // 23535
        Increment (on mouse down)                                                                                      // 23536
      </button>                                                                                                        // 23537
      count: {{count}}                                                                                                 // 23538
     </file>                                                                                                           // 23539
   </example>                                                                                                          // 23540
 */                                                                                                                    // 23541
                                                                                                                       // 23542
                                                                                                                       // 23543
/**                                                                                                                    // 23544
 * @ngdoc directive                                                                                                    // 23545
 * @name ngMouseup                                                                                                     // 23546
 *                                                                                                                     // 23547
 * @description                                                                                                        // 23548
 * Specify custom behavior on mouseup event.                                                                           // 23549
 *                                                                                                                     // 23550
 * @element ANY                                                                                                        // 23551
 * @priority 0                                                                                                         // 23552
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon                                  // 23553
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})                                   // 23554
 *                                                                                                                     // 23555
 * @example                                                                                                            // 23556
   <example>                                                                                                           // 23557
     <file name="index.html">                                                                                          // 23558
      <button ng-mouseup="count = count + 1" ng-init="count=0">                                                        // 23559
        Increment (on mouse up)                                                                                        // 23560
      </button>                                                                                                        // 23561
      count: {{count}}                                                                                                 // 23562
     </file>                                                                                                           // 23563
   </example>                                                                                                          // 23564
 */                                                                                                                    // 23565
                                                                                                                       // 23566
/**                                                                                                                    // 23567
 * @ngdoc directive                                                                                                    // 23568
 * @name ngMouseover                                                                                                   // 23569
 *                                                                                                                     // 23570
 * @description                                                                                                        // 23571
 * Specify custom behavior on mouseover event.                                                                         // 23572
 *                                                                                                                     // 23573
 * @element ANY                                                                                                        // 23574
 * @priority 0                                                                                                         // 23575
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon                                // 23576
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23577
 *                                                                                                                     // 23578
 * @example                                                                                                            // 23579
   <example>                                                                                                           // 23580
     <file name="index.html">                                                                                          // 23581
      <button ng-mouseover="count = count + 1" ng-init="count=0">                                                      // 23582
        Increment (when mouse is over)                                                                                 // 23583
      </button>                                                                                                        // 23584
      count: {{count}}                                                                                                 // 23585
     </file>                                                                                                           // 23586
   </example>                                                                                                          // 23587
 */                                                                                                                    // 23588
                                                                                                                       // 23589
                                                                                                                       // 23590
/**                                                                                                                    // 23591
 * @ngdoc directive                                                                                                    // 23592
 * @name ngMouseenter                                                                                                  // 23593
 *                                                                                                                     // 23594
 * @description                                                                                                        // 23595
 * Specify custom behavior on mouseenter event.                                                                        // 23596
 *                                                                                                                     // 23597
 * @element ANY                                                                                                        // 23598
 * @priority 0                                                                                                         // 23599
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon                               // 23600
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23601
 *                                                                                                                     // 23602
 * @example                                                                                                            // 23603
   <example>                                                                                                           // 23604
     <file name="index.html">                                                                                          // 23605
      <button ng-mouseenter="count = count + 1" ng-init="count=0">                                                     // 23606
        Increment (when mouse enters)                                                                                  // 23607
      </button>                                                                                                        // 23608
      count: {{count}}                                                                                                 // 23609
     </file>                                                                                                           // 23610
   </example>                                                                                                          // 23611
 */                                                                                                                    // 23612
                                                                                                                       // 23613
                                                                                                                       // 23614
/**                                                                                                                    // 23615
 * @ngdoc directive                                                                                                    // 23616
 * @name ngMouseleave                                                                                                  // 23617
 *                                                                                                                     // 23618
 * @description                                                                                                        // 23619
 * Specify custom behavior on mouseleave event.                                                                        // 23620
 *                                                                                                                     // 23621
 * @element ANY                                                                                                        // 23622
 * @priority 0                                                                                                         // 23623
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon                               // 23624
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23625
 *                                                                                                                     // 23626
 * @example                                                                                                            // 23627
   <example>                                                                                                           // 23628
     <file name="index.html">                                                                                          // 23629
      <button ng-mouseleave="count = count + 1" ng-init="count=0">                                                     // 23630
        Increment (when mouse leaves)                                                                                  // 23631
      </button>                                                                                                        // 23632
      count: {{count}}                                                                                                 // 23633
     </file>                                                                                                           // 23634
   </example>                                                                                                          // 23635
 */                                                                                                                    // 23636
                                                                                                                       // 23637
                                                                                                                       // 23638
/**                                                                                                                    // 23639
 * @ngdoc directive                                                                                                    // 23640
 * @name ngMousemove                                                                                                   // 23641
 *                                                                                                                     // 23642
 * @description                                                                                                        // 23643
 * Specify custom behavior on mousemove event.                                                                         // 23644
 *                                                                                                                     // 23645
 * @element ANY                                                                                                        // 23646
 * @priority 0                                                                                                         // 23647
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon                                // 23648
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23649
 *                                                                                                                     // 23650
 * @example                                                                                                            // 23651
   <example>                                                                                                           // 23652
     <file name="index.html">                                                                                          // 23653
      <button ng-mousemove="count = count + 1" ng-init="count=0">                                                      // 23654
        Increment (when mouse moves)                                                                                   // 23655
      </button>                                                                                                        // 23656
      count: {{count}}                                                                                                 // 23657
     </file>                                                                                                           // 23658
   </example>                                                                                                          // 23659
 */                                                                                                                    // 23660
                                                                                                                       // 23661
                                                                                                                       // 23662
/**                                                                                                                    // 23663
 * @ngdoc directive                                                                                                    // 23664
 * @name ngKeydown                                                                                                     // 23665
 *                                                                                                                     // 23666
 * @description                                                                                                        // 23667
 * Specify custom behavior on keydown event.                                                                           // 23668
 *                                                                                                                     // 23669
 * @element ANY                                                                                                        // 23670
 * @priority 0                                                                                                         // 23671
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon                                  // 23672
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                  // 23673
 *                                                                                                                     // 23674
 * @example                                                                                                            // 23675
   <example>                                                                                                           // 23676
     <file name="index.html">                                                                                          // 23677
      <input ng-keydown="count = count + 1" ng-init="count=0">                                                         // 23678
      key down count: {{count}}                                                                                        // 23679
     </file>                                                                                                           // 23680
   </example>                                                                                                          // 23681
 */                                                                                                                    // 23682
                                                                                                                       // 23683
                                                                                                                       // 23684
/**                                                                                                                    // 23685
 * @ngdoc directive                                                                                                    // 23686
 * @name ngKeyup                                                                                                       // 23687
 *                                                                                                                     // 23688
 * @description                                                                                                        // 23689
 * Specify custom behavior on keyup event.                                                                             // 23690
 *                                                                                                                     // 23691
 * @element ANY                                                                                                        // 23692
 * @priority 0                                                                                                         // 23693
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon                                    // 23694
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                    // 23695
 *                                                                                                                     // 23696
 * @example                                                                                                            // 23697
   <example>                                                                                                           // 23698
     <file name="index.html">                                                                                          // 23699
       <p>Typing in the input box below updates the key count</p>                                                      // 23700
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}                                  // 23701
                                                                                                                       // 23702
       <p>Typing in the input box below updates the keycode</p>                                                        // 23703
       <input ng-keyup="event=$event">                                                                                 // 23704
       <p>event keyCode: {{ event.keyCode }}</p>                                                                       // 23705
       <p>event altKey: {{ event.altKey }}</p>                                                                         // 23706
     </file>                                                                                                           // 23707
   </example>                                                                                                          // 23708
 */                                                                                                                    // 23709
                                                                                                                       // 23710
                                                                                                                       // 23711
/**                                                                                                                    // 23712
 * @ngdoc directive                                                                                                    // 23713
 * @name ngKeypress                                                                                                    // 23714
 *                                                                                                                     // 23715
 * @description                                                                                                        // 23716
 * Specify custom behavior on keypress event.                                                                          // 23717
 *                                                                                                                     // 23718
 * @element ANY                                                                                                        // 23719
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon                                 // 23720
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}                                   // 23721
 * and can be interrogated for keyCode, altKey, etc.)                                                                  // 23722
 *                                                                                                                     // 23723
 * @example                                                                                                            // 23724
   <example>                                                                                                           // 23725
     <file name="index.html">                                                                                          // 23726
      <input ng-keypress="count = count + 1" ng-init="count=0">                                                        // 23727
      key press count: {{count}}                                                                                       // 23728
     </file>                                                                                                           // 23729
   </example>                                                                                                          // 23730
 */                                                                                                                    // 23731
                                                                                                                       // 23732
                                                                                                                       // 23733
/**                                                                                                                    // 23734
 * @ngdoc directive                                                                                                    // 23735
 * @name ngSubmit                                                                                                      // 23736
 *                                                                                                                     // 23737
 * @description                                                                                                        // 23738
 * Enables binding angular expressions to onsubmit events.                                                             // 23739
 *                                                                                                                     // 23740
 * Additionally it prevents the default action (which for form means sending the request to the                        // 23741
 * server and reloading the current page), but only if the form does not contain `action`,                             // 23742
 * `data-action`, or `x-action` attributes.                                                                            // 23743
 *                                                                                                                     // 23744
 * <div class="alert alert-warning">                                                                                   // 23745
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and                            // 23746
 * `ngSubmit` handlers together. See the                                                                               // 23747
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}                     // 23748
 * for a detailed discussion of when `ngSubmit` may be triggered.                                                      // 23749
 * </div>                                                                                                              // 23750
 *                                                                                                                     // 23751
 * @element form                                                                                                       // 23752
 * @priority 0                                                                                                         // 23753
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.                                           // 23754
 * ({@link guide/expression#-event- Event object is available as `$event`})                                            // 23755
 *                                                                                                                     // 23756
 * @example                                                                                                            // 23757
   <example module="submitExample">                                                                                    // 23758
     <file name="index.html">                                                                                          // 23759
      <script>                                                                                                         // 23760
        angular.module('submitExample', [])                                                                            // 23761
          .controller('ExampleController', ['$scope', function($scope) {                                               // 23762
            $scope.list = [];                                                                                          // 23763
            $scope.text = 'hello';                                                                                     // 23764
            $scope.submit = function() {                                                                               // 23765
              if ($scope.text) {                                                                                       // 23766
                $scope.list.push(this.text);                                                                           // 23767
                $scope.text = '';                                                                                      // 23768
              }                                                                                                        // 23769
            };                                                                                                         // 23770
          }]);                                                                                                         // 23771
      </script>                                                                                                        // 23772
      <form ng-submit="submit()" ng-controller="ExampleController">                                                    // 23773
        Enter text and hit enter:                                                                                      // 23774
        <input type="text" ng-model="text" name="text" />                                                              // 23775
        <input type="submit" id="submit" value="Submit" />                                                             // 23776
        <pre>list={{list}}</pre>                                                                                       // 23777
      </form>                                                                                                          // 23778
     </file>                                                                                                           // 23779
     <file name="protractor.js" type="protractor">                                                                     // 23780
       it('should check ng-submit', function() {                                                                       // 23781
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23782
         element(by.css('#submit')).click();                                                                           // 23783
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23784
         expect(element(by.model('text')).getAttribute('value')).toBe('');                                             // 23785
       });                                                                                                             // 23786
       it('should ignore empty strings', function() {                                                                  // 23787
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23788
         element(by.css('#submit')).click();                                                                           // 23789
         element(by.css('#submit')).click();                                                                           // 23790
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23791
        });                                                                                                            // 23792
     </file>                                                                                                           // 23793
   </example>                                                                                                          // 23794
 */                                                                                                                    // 23795
                                                                                                                       // 23796
/**                                                                                                                    // 23797
 * @ngdoc directive                                                                                                    // 23798
 * @name ngFocus                                                                                                       // 23799
 *                                                                                                                     // 23800
 * @description                                                                                                        // 23801
 * Specify custom behavior on focus event.                                                                             // 23802
 *                                                                                                                     // 23803
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`                                   // 23804
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23805
 * during an `$apply` to ensure a consistent state.                                                                    // 23806
 *                                                                                                                     // 23807
 * @element window, input, select, textarea, a                                                                         // 23808
 * @priority 0                                                                                                         // 23809
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon                                    // 23810
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23811
 *                                                                                                                     // 23812
 * @example                                                                                                            // 23813
 * See {@link ng.directive:ngClick ngClick}                                                                            // 23814
 */                                                                                                                    // 23815
                                                                                                                       // 23816
/**                                                                                                                    // 23817
 * @ngdoc directive                                                                                                    // 23818
 * @name ngBlur                                                                                                        // 23819
 *                                                                                                                     // 23820
 * @description                                                                                                        // 23821
 * Specify custom behavior on blur event.                                                                              // 23822
 *                                                                                                                     // 23823
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when                                 // 23824
 * an element has lost focus.                                                                                          // 23825
 *                                                                                                                     // 23826
 * Note: As the `blur` event is executed synchronously also during DOM manipulations                                   // 23827
 * (e.g. removing a focussed input),                                                                                   // 23828
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23829
 * during an `$apply` to ensure a consistent state.                                                                    // 23830
 *                                                                                                                     // 23831
 * @element window, input, select, textarea, a                                                                         // 23832
 * @priority 0                                                                                                         // 23833
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon                                     // 23834
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23835
 *                                                                                                                     // 23836
 * @example                                                                                                            // 23837
 * See {@link ng.directive:ngClick ngClick}                                                                            // 23838
 */                                                                                                                    // 23839
                                                                                                                       // 23840
/**                                                                                                                    // 23841
 * @ngdoc directive                                                                                                    // 23842
 * @name ngCopy                                                                                                        // 23843
 *                                                                                                                     // 23844
 * @description                                                                                                        // 23845
 * Specify custom behavior on copy event.                                                                              // 23846
 *                                                                                                                     // 23847
 * @element window, input, select, textarea, a                                                                         // 23848
 * @priority 0                                                                                                         // 23849
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon                                     // 23850
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23851
 *                                                                                                                     // 23852
 * @example                                                                                                            // 23853
   <example>                                                                                                           // 23854
     <file name="index.html">                                                                                          // 23855
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">                           // 23856
      copied: {{copied}}                                                                                               // 23857
     </file>                                                                                                           // 23858
   </example>                                                                                                          // 23859
 */                                                                                                                    // 23860
                                                                                                                       // 23861
/**                                                                                                                    // 23862
 * @ngdoc directive                                                                                                    // 23863
 * @name ngCut                                                                                                         // 23864
 *                                                                                                                     // 23865
 * @description                                                                                                        // 23866
 * Specify custom behavior on cut event.                                                                               // 23867
 *                                                                                                                     // 23868
 * @element window, input, select, textarea, a                                                                         // 23869
 * @priority 0                                                                                                         // 23870
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon                                      // 23871
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})                                       // 23872
 *                                                                                                                     // 23873
 * @example                                                                                                            // 23874
   <example>                                                                                                           // 23875
     <file name="index.html">                                                                                          // 23876
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">                                   // 23877
      cut: {{cut}}                                                                                                     // 23878
     </file>                                                                                                           // 23879
   </example>                                                                                                          // 23880
 */                                                                                                                    // 23881
                                                                                                                       // 23882
/**                                                                                                                    // 23883
 * @ngdoc directive                                                                                                    // 23884
 * @name ngPaste                                                                                                       // 23885
 *                                                                                                                     // 23886
 * @description                                                                                                        // 23887
 * Specify custom behavior on paste event.                                                                             // 23888
 *                                                                                                                     // 23889
 * @element window, input, select, textarea, a                                                                         // 23890
 * @priority 0                                                                                                         // 23891
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon                                    // 23892
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23893
 *                                                                                                                     // 23894
 * @example                                                                                                            // 23895
   <example>                                                                                                           // 23896
     <file name="index.html">                                                                                          // 23897
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>                                     // 23898
      pasted: {{paste}}                                                                                                // 23899
     </file>                                                                                                           // 23900
   </example>                                                                                                          // 23901
 */                                                                                                                    // 23902
                                                                                                                       // 23903
/**                                                                                                                    // 23904
 * @ngdoc directive                                                                                                    // 23905
 * @name ngIf                                                                                                          // 23906
 * @restrict A                                                                                                         // 23907
 * @multiElement                                                                                                       // 23908
 *                                                                                                                     // 23909
 * @description                                                                                                        // 23910
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an                                     // 23911
 * {expression}. If the expression assigned to `ngIf` evaluates to a false                                             // 23912
 * value then the element is removed from the DOM, otherwise a clone of the                                            // 23913
 * element is reinserted into the DOM.                                                                                 // 23914
 *                                                                                                                     // 23915
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the                       // 23916
 * element in the DOM rather than changing its visibility via the `display` css property.  A common                    // 23917
 * case when this difference is significant is when using css selectors that rely on an element's                      // 23918
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.                                // 23919
 *                                                                                                                     // 23920
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope                            // 23921
 * is created when the element is restored.  The scope created within `ngIf` inherits from                             // 23922
 * its parent scope using                                                                                              // 23923
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to                                   // 23925
 * a javascript primitive defined in the parent scope. In this case any modifications made to the                      // 23926
 * variable within the child scope will override (hide) the value in the parent scope.                                 // 23927
 *                                                                                                                     // 23928
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior                             // 23929
 * is if an element's class attribute is directly modified after it's compiled, using something like                   // 23930
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element                  // 23931
 * the added class will be lost because the original compiled state is used to regenerate the element.                 // 23932
 *                                                                                                                     // 23933
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`                          // 23934
 * and `leave` effects.                                                                                                // 23935
 *                                                                                                                     // 23936
 * @animations                                                                                                         // 23937
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM                                            // 23939
 *                                                                                                                     // 23940
 * @element ANY                                                                                                        // 23941
 * @scope                                                                                                              // 23942
 * @priority 600                                                                                                       // 23943
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then                                   // 23944
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled                                // 23945
 *     element is added to the DOM tree.                                                                               // 23946
 *                                                                                                                     // 23947
 * @example                                                                                                            // 23948
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 23949
    <file name="index.html">                                                                                           // 23950
      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>                // 23951
      Show when checked:                                                                                               // 23952
      <span ng-if="checked" class="animate-if">                                                                        // 23953
        This is removed when the checkbox is unchecked.                                                                // 23954
      </span>                                                                                                          // 23955
    </file>                                                                                                            // 23956
    <file name="animations.css">                                                                                       // 23957
      .animate-if {                                                                                                    // 23958
        background:white;                                                                                              // 23959
        border:1px solid black;                                                                                        // 23960
        padding:10px;                                                                                                  // 23961
      }                                                                                                                // 23962
                                                                                                                       // 23963
      .animate-if.ng-enter, .animate-if.ng-leave {                                                                     // 23964
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 23965
      }                                                                                                                // 23966
                                                                                                                       // 23967
      .animate-if.ng-enter,                                                                                            // 23968
      .animate-if.ng-leave.ng-leave-active {                                                                           // 23969
        opacity:0;                                                                                                     // 23970
      }                                                                                                                // 23971
                                                                                                                       // 23972
      .animate-if.ng-leave,                                                                                            // 23973
      .animate-if.ng-enter.ng-enter-active {                                                                           // 23974
        opacity:1;                                                                                                     // 23975
      }                                                                                                                // 23976
    </file>                                                                                                            // 23977
  </example>                                                                                                           // 23978
 */                                                                                                                    // 23979
var ngIfDirective = ['$animate', function($animate) {                                                                  // 23980
  return {                                                                                                             // 23981
    multiElement: true,                                                                                                // 23982
    transclude: 'element',                                                                                             // 23983
    priority: 600,                                                                                                     // 23984
    terminal: true,                                                                                                    // 23985
    restrict: 'A',                                                                                                     // 23986
    $$tlb: true,                                                                                                       // 23987
    link: function($scope, $element, $attr, ctrl, $transclude) {                                                       // 23988
        var block, childScope, previousElements;                                                                       // 23989
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {                                                    // 23990
                                                                                                                       // 23991
          if (value) {                                                                                                 // 23992
            if (!childScope) {                                                                                         // 23993
              $transclude(function(clone, newScope) {                                                                  // 23994
                childScope = newScope;                                                                                 // 23995
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');                      // 23996
                // Note: We only need the first/last node of the cloned nodes.                                         // 23997
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 23998
                // by a directive with templateUrl when its template arrives.                                          // 23999
                block = {                                                                                              // 24000
                  clone: clone                                                                                         // 24001
                };                                                                                                     // 24002
                $animate.enter(clone, $element.parent(), $element);                                                    // 24003
              });                                                                                                      // 24004
            }                                                                                                          // 24005
          } else {                                                                                                     // 24006
            if (previousElements) {                                                                                    // 24007
              previousElements.remove();                                                                               // 24008
              previousElements = null;                                                                                 // 24009
            }                                                                                                          // 24010
            if (childScope) {                                                                                          // 24011
              childScope.$destroy();                                                                                   // 24012
              childScope = null;                                                                                       // 24013
            }                                                                                                          // 24014
            if (block) {                                                                                               // 24015
              previousElements = getBlockNodes(block.clone);                                                           // 24016
              $animate.leave(previousElements).then(function() {                                                       // 24017
                previousElements = null;                                                                               // 24018
              });                                                                                                      // 24019
              block = null;                                                                                            // 24020
            }                                                                                                          // 24021
          }                                                                                                            // 24022
        });                                                                                                            // 24023
    }                                                                                                                  // 24024
  };                                                                                                                   // 24025
}];                                                                                                                    // 24026
                                                                                                                       // 24027
/**                                                                                                                    // 24028
 * @ngdoc directive                                                                                                    // 24029
 * @name ngInclude                                                                                                     // 24030
 * @restrict ECA                                                                                                       // 24031
 *                                                                                                                     // 24032
 * @description                                                                                                        // 24033
 * Fetches, compiles and includes an external HTML fragment.                                                           // 24034
 *                                                                                                                     // 24035
 * By default, the template URL is restricted to the same domain and protocol as the                                   // 24036
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl                                     // 24037
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols                                // 24038
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or                               // 24039
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link                              // 24040
 * ng.$sce Strict Contextual Escaping}.                                                                                // 24041
 *                                                                                                                     // 24042
 * In addition, the browser's                                                                                          // 24043
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 24044
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 24045
 * policy may further restrict whether the template is successfully loaded.                                            // 24046
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`                     // 24047
 * access on some browsers.                                                                                            // 24048
 *                                                                                                                     // 24049
 * @animations                                                                                                         // 24050
 * enter - animation is used to bring new content into the browser.                                                    // 24051
 * leave - animation is used to animate existing content away.                                                         // 24052
 *                                                                                                                     // 24053
 * The enter and leave animation occur concurrently.                                                                   // 24054
 *                                                                                                                     // 24055
 * @scope                                                                                                              // 24056
 * @priority 400                                                                                                       // 24057
 *                                                                                                                     // 24058
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,             // 24059
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.                  // 24060
 * @param {string=} onload Expression to evaluate when a new partial is loaded.                                        // 24061
 *                                                                                                                     // 24062
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll                                 // 24063
 *                  $anchorScroll} to scroll the viewport after the content is loaded.                                 // 24064
 *                                                                                                                     // 24065
 *                  - If the attribute is not set, disable scrolling.                                                  // 24066
 *                  - If the attribute is set without value, enable scrolling.                                         // 24067
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.                     // 24068
 *                                                                                                                     // 24069
 * @example                                                                                                            // 24070
  <example module="includeExample" deps="angular-animate.js" animations="true">                                        // 24071
    <file name="index.html">                                                                                           // 24072
     <div ng-controller="ExampleController">                                                                           // 24073
       <select ng-model="template" ng-options="t.name for t in templates">                                             // 24074
        <option value="">(blank)</option>                                                                              // 24075
       </select>                                                                                                       // 24076
       url of the template: <code>{{template.url}}</code>                                                              // 24077
       <hr/>                                                                                                           // 24078
       <div class="slide-animate-container">                                                                           // 24079
         <div class="slide-animate" ng-include="template.url"></div>                                                   // 24080
       </div>                                                                                                          // 24081
     </div>                                                                                                            // 24082
    </file>                                                                                                            // 24083
    <file name="script.js">                                                                                            // 24084
      angular.module('includeExample', ['ngAnimate'])                                                                  // 24085
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 24086
          $scope.templates =                                                                                           // 24087
            [ { name: 'template1.html', url: 'template1.html'},                                                        // 24088
              { name: 'template2.html', url: 'template2.html'} ];                                                      // 24089
          $scope.template = $scope.templates[0];                                                                       // 24090
        }]);                                                                                                           // 24091
     </file>                                                                                                           // 24092
    <file name="template1.html">                                                                                       // 24093
      Content of template1.html                                                                                        // 24094
    </file>                                                                                                            // 24095
    <file name="template2.html">                                                                                       // 24096
      Content of template2.html                                                                                        // 24097
    </file>                                                                                                            // 24098
    <file name="animations.css">                                                                                       // 24099
      .slide-animate-container {                                                                                       // 24100
        position:relative;                                                                                             // 24101
        background:white;                                                                                              // 24102
        border:1px solid black;                                                                                        // 24103
        height:40px;                                                                                                   // 24104
        overflow:hidden;                                                                                               // 24105
      }                                                                                                                // 24106
                                                                                                                       // 24107
      .slide-animate {                                                                                                 // 24108
        padding:10px;                                                                                                  // 24109
      }                                                                                                                // 24110
                                                                                                                       // 24111
      .slide-animate.ng-enter, .slide-animate.ng-leave {                                                               // 24112
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 24113
                                                                                                                       // 24114
        position:absolute;                                                                                             // 24115
        top:0;                                                                                                         // 24116
        left:0;                                                                                                        // 24117
        right:0;                                                                                                       // 24118
        bottom:0;                                                                                                      // 24119
        display:block;                                                                                                 // 24120
        padding:10px;                                                                                                  // 24121
      }                                                                                                                // 24122
                                                                                                                       // 24123
      .slide-animate.ng-enter {                                                                                        // 24124
        top:-50px;                                                                                                     // 24125
      }                                                                                                                // 24126
      .slide-animate.ng-enter.ng-enter-active {                                                                        // 24127
        top:0;                                                                                                         // 24128
      }                                                                                                                // 24129
                                                                                                                       // 24130
      .slide-animate.ng-leave {                                                                                        // 24131
        top:0;                                                                                                         // 24132
      }                                                                                                                // 24133
      .slide-animate.ng-leave.ng-leave-active {                                                                        // 24134
        top:50px;                                                                                                      // 24135
      }                                                                                                                // 24136
    </file>                                                                                                            // 24137
    <file name="protractor.js" type="protractor">                                                                      // 24138
      var templateSelect = element(by.model('template'));                                                              // 24139
      var includeElem = element(by.css('[ng-include]'));                                                               // 24140
                                                                                                                       // 24141
      it('should load template1.html', function() {                                                                    // 24142
        expect(includeElem.getText()).toMatch(/Content of template1.html/);                                            // 24143
      });                                                                                                              // 24144
                                                                                                                       // 24145
      it('should load template2.html', function() {                                                                    // 24146
        if (browser.params.browser == 'firefox') {                                                                     // 24147
          // Firefox can't handle using selects                                                                        // 24148
          // See https://github.com/angular/protractor/issues/480                                                      // 24149
          return;                                                                                                      // 24150
        }                                                                                                              // 24151
        templateSelect.click();                                                                                        // 24152
        templateSelect.all(by.css('option')).get(2).click();                                                           // 24153
        expect(includeElem.getText()).toMatch(/Content of template2.html/);                                            // 24154
      });                                                                                                              // 24155
                                                                                                                       // 24156
      it('should change to blank', function() {                                                                        // 24157
        if (browser.params.browser == 'firefox') {                                                                     // 24158
          // Firefox can't handle using selects                                                                        // 24159
          return;                                                                                                      // 24160
        }                                                                                                              // 24161
        templateSelect.click();                                                                                        // 24162
        templateSelect.all(by.css('option')).get(0).click();                                                           // 24163
        expect(includeElem.isPresent()).toBe(false);                                                                   // 24164
      });                                                                                                              // 24165
    </file>                                                                                                            // 24166
  </example>                                                                                                           // 24167
 */                                                                                                                    // 24168
                                                                                                                       // 24169
                                                                                                                       // 24170
/**                                                                                                                    // 24171
 * @ngdoc event                                                                                                        // 24172
 * @name ngInclude#$includeContentRequested                                                                            // 24173
 * @eventType emit on the scope ngInclude was declared in                                                              // 24174
 * @description                                                                                                        // 24175
 * Emitted every time the ngInclude content is requested.                                                              // 24176
 *                                                                                                                     // 24177
 * @param {Object} angularEvent Synthetic event object.                                                                // 24178
 * @param {String} src URL of content to load.                                                                         // 24179
 */                                                                                                                    // 24180
                                                                                                                       // 24181
                                                                                                                       // 24182
/**                                                                                                                    // 24183
 * @ngdoc event                                                                                                        // 24184
 * @name ngInclude#$includeContentLoaded                                                                               // 24185
 * @eventType emit on the current ngInclude scope                                                                      // 24186
 * @description                                                                                                        // 24187
 * Emitted every time the ngInclude content is reloaded.                                                               // 24188
 *                                                                                                                     // 24189
 * @param {Object} angularEvent Synthetic event object.                                                                // 24190
 * @param {String} src URL of content to load.                                                                         // 24191
 */                                                                                                                    // 24192
                                                                                                                       // 24193
                                                                                                                       // 24194
/**                                                                                                                    // 24195
 * @ngdoc event                                                                                                        // 24196
 * @name ngInclude#$includeContentError                                                                                // 24197
 * @eventType emit on the scope ngInclude was declared in                                                              // 24198
 * @description                                                                                                        // 24199
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)                    // 24200
 *                                                                                                                     // 24201
 * @param {Object} angularEvent Synthetic event object.                                                                // 24202
 * @param {String} src URL of content to load.                                                                         // 24203
 */                                                                                                                    // 24204
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',                                             // 24205
                  function($templateRequest,   $anchorScroll,   $animate) {                                            // 24206
  return {                                                                                                             // 24207
    restrict: 'ECA',                                                                                                   // 24208
    priority: 400,                                                                                                     // 24209
    terminal: true,                                                                                                    // 24210
    transclude: 'element',                                                                                             // 24211
    controller: angular.noop,                                                                                          // 24212
    compile: function(element, attr) {                                                                                 // 24213
      var srcExp = attr.ngInclude || attr.src,                                                                         // 24214
          onloadExp = attr.onload || '',                                                                               // 24215
          autoScrollExp = attr.autoscroll;                                                                             // 24216
                                                                                                                       // 24217
      return function(scope, $element, $attr, ctrl, $transclude) {                                                     // 24218
        var changeCounter = 0,                                                                                         // 24219
            currentScope,                                                                                              // 24220
            previousElement,                                                                                           // 24221
            currentElement;                                                                                            // 24222
                                                                                                                       // 24223
        var cleanupLastIncludeContent = function() {                                                                   // 24224
          if (previousElement) {                                                                                       // 24225
            previousElement.remove();                                                                                  // 24226
            previousElement = null;                                                                                    // 24227
          }                                                                                                            // 24228
          if (currentScope) {                                                                                          // 24229
            currentScope.$destroy();                                                                                   // 24230
            currentScope = null;                                                                                       // 24231
          }                                                                                                            // 24232
          if (currentElement) {                                                                                        // 24233
            $animate.leave(currentElement).then(function() {                                                           // 24234
              previousElement = null;                                                                                  // 24235
            });                                                                                                        // 24236
            previousElement = currentElement;                                                                          // 24237
            currentElement = null;                                                                                     // 24238
          }                                                                                                            // 24239
        };                                                                                                             // 24240
                                                                                                                       // 24241
        scope.$watch(srcExp, function ngIncludeWatchAction(src) {                                                      // 24242
          var afterAnimation = function() {                                                                            // 24243
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {                          // 24244
              $anchorScroll();                                                                                         // 24245
            }                                                                                                          // 24246
          };                                                                                                           // 24247
          var thisChangeId = ++changeCounter;                                                                          // 24248
                                                                                                                       // 24249
          if (src) {                                                                                                   // 24250
            //set the 2nd param to true to ignore the template request error so that the inner                         // 24251
            //contents and scope can be cleaned up.                                                                    // 24252
            $templateRequest(src, true).then(function(response) {                                                      // 24253
              if (thisChangeId !== changeCounter) return;                                                              // 24254
              var newScope = scope.$new();                                                                             // 24255
              ctrl.template = response;                                                                                // 24256
                                                                                                                       // 24257
              // Note: This will also link all children of ng-include that were contained in the original              // 24258
              // html. If that content contains controllers, ... they could pollute/change the scope.                  // 24259
              // However, using ng-include on an element with additional content does not make sense...                // 24260
              // Note: We can't remove them in the cloneAttchFn of $transclude as that                                 // 24261
              // function is called before linking the content, which would apply child                                // 24262
              // directives to non existing elements.                                                                  // 24263
              var clone = $transclude(newScope, function(clone) {                                                      // 24264
                cleanupLastIncludeContent();                                                                           // 24265
                $animate.enter(clone, null, $element).then(afterAnimation);                                            // 24266
              });                                                                                                      // 24267
                                                                                                                       // 24268
              currentScope = newScope;                                                                                 // 24269
              currentElement = clone;                                                                                  // 24270
                                                                                                                       // 24271
              currentScope.$emit('$includeContentLoaded', src);                                                        // 24272
              scope.$eval(onloadExp);                                                                                  // 24273
            }, function() {                                                                                            // 24274
              if (thisChangeId === changeCounter) {                                                                    // 24275
                cleanupLastIncludeContent();                                                                           // 24276
                scope.$emit('$includeContentError', src);                                                              // 24277
              }                                                                                                        // 24278
            });                                                                                                        // 24279
            scope.$emit('$includeContentRequested', src);                                                              // 24280
          } else {                                                                                                     // 24281
            cleanupLastIncludeContent();                                                                               // 24282
            ctrl.template = null;                                                                                      // 24283
          }                                                                                                            // 24284
        });                                                                                                            // 24285
      };                                                                                                               // 24286
    }                                                                                                                  // 24287
  };                                                                                                                   // 24288
}];                                                                                                                    // 24289
                                                                                                                       // 24290
// This directive is called during the $transclude call of the first `ngInclude` directive.                            // 24291
// It will replace and compile the content of the element with the loaded template.                                    // 24292
// We need this directive so that the element content is already filled when                                           // 24293
// the link function of another directive on the same element as ngInclude                                             // 24294
// is called.                                                                                                          // 24295
var ngIncludeFillContentDirective = ['$compile',                                                                       // 24296
  function($compile) {                                                                                                 // 24297
    return {                                                                                                           // 24298
      restrict: 'ECA',                                                                                                 // 24299
      priority: -400,                                                                                                  // 24300
      require: 'ngInclude',                                                                                            // 24301
      link: function(scope, $element, $attr, ctrl) {                                                                   // 24302
        if (/SVG/.test($element[0].toString())) {                                                                      // 24303
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not                            // 24304
          // support innerHTML, so detect this here and try to generate the contents                                   // 24305
          // specially.                                                                                                // 24306
          $element.empty();                                                                                            // 24307
          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,                                     // 24308
              function namespaceAdaptedClone(clone) {                                                                  // 24309
            $element.append(clone);                                                                                    // 24310
          }, {futureParentElement: $element});                                                                         // 24311
          return;                                                                                                      // 24312
        }                                                                                                              // 24313
                                                                                                                       // 24314
        $element.html(ctrl.template);                                                                                  // 24315
        $compile($element.contents())(scope);                                                                          // 24316
      }                                                                                                                // 24317
    };                                                                                                                 // 24318
  }];                                                                                                                  // 24319
                                                                                                                       // 24320
/**                                                                                                                    // 24321
 * @ngdoc directive                                                                                                    // 24322
 * @name ngInit                                                                                                        // 24323
 * @restrict AC                                                                                                        // 24324
 *                                                                                                                     // 24325
 * @description                                                                                                        // 24326
 * The `ngInit` directive allows you to evaluate an expression in the                                                  // 24327
 * current scope.                                                                                                      // 24328
 *                                                                                                                     // 24329
 * <div class="alert alert-danger">                                                                                    // 24330
 * This directive can be abused to add unnecessary amounts of logic into your templates.                               // 24331
 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of                       // 24332
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via                     // 24333
 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}                 // 24334
 * rather than `ngInit` to initialize values on a scope.                                                               // 24335
 * </div>                                                                                                              // 24336
 *                                                                                                                     // 24337
 * <div class="alert alert-warning">                                                                                   // 24338
 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make                         // 24339
 * sure you have parentheses to ensure correct operator precedence:                                                    // 24340
 * <pre class="prettyprint">                                                                                           // 24341
 * `<div ng-init="test1 = ($index | toString)"></div>`                                                                 // 24342
 * </pre>                                                                                                              // 24343
 * </div>                                                                                                              // 24344
 *                                                                                                                     // 24345
 * @priority 450                                                                                                       // 24346
 *                                                                                                                     // 24347
 * @element ANY                                                                                                        // 24348
 * @param {expression} ngInit {@link guide/expression Expression} to eval.                                             // 24349
 *                                                                                                                     // 24350
 * @example                                                                                                            // 24351
   <example module="initExample">                                                                                      // 24352
     <file name="index.html">                                                                                          // 24353
   <script>                                                                                                            // 24354
     angular.module('initExample', [])                                                                                 // 24355
       .controller('ExampleController', ['$scope', function($scope) {                                                  // 24356
         $scope.list = [['a', 'b'], ['c', 'd']];                                                                       // 24357
       }]);                                                                                                            // 24358
   </script>                                                                                                           // 24359
   <div ng-controller="ExampleController">                                                                             // 24360
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">                                                 // 24361
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">                                              // 24362
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>                      // 24363
       </div>                                                                                                          // 24364
     </div>                                                                                                            // 24365
   </div>                                                                                                              // 24366
     </file>                                                                                                           // 24367
     <file name="protractor.js" type="protractor">                                                                     // 24368
       it('should alias index positions', function() {                                                                 // 24369
         var elements = element.all(by.css('.example-init'));                                                          // 24370
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');                                                // 24371
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');                                                // 24372
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');                                                // 24373
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');                                                // 24374
       });                                                                                                             // 24375
     </file>                                                                                                           // 24376
   </example>                                                                                                          // 24377
 */                                                                                                                    // 24378
var ngInitDirective = ngDirective({                                                                                    // 24379
  priority: 450,                                                                                                       // 24380
  compile: function() {                                                                                                // 24381
    return {                                                                                                           // 24382
      pre: function(scope, element, attrs) {                                                                           // 24383
        scope.$eval(attrs.ngInit);                                                                                     // 24384
      }                                                                                                                // 24385
    };                                                                                                                 // 24386
  }                                                                                                                    // 24387
});                                                                                                                    // 24388
                                                                                                                       // 24389
/**                                                                                                                    // 24390
 * @ngdoc directive                                                                                                    // 24391
 * @name ngList                                                                                                        // 24392
 *                                                                                                                     // 24393
 * @description                                                                                                        // 24394
 * Text input that converts between a delimited string and an array of strings. The default                            // 24395
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom                   // 24396
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.                                    // 24397
 *                                                                                                                     // 24398
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.                                    // 24399
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each                                // 24400
 *   list item is respected. This implies that the user of the directive is responsible for                            // 24401
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a                           // 24402
 *   tab or newline character.                                                                                         // 24403
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected                     // 24404
 *   when joining the list items back together) and whitespace around each list item is stripped                       // 24405
 *   before it is added to the model.                                                                                  // 24406
 *                                                                                                                     // 24407
 * ### Example with Validation                                                                                         // 24408
 *                                                                                                                     // 24409
 * <example name="ngList-directive" module="listExample">                                                              // 24410
 *   <file name="app.js">                                                                                              // 24411
 *      angular.module('listExample', [])                                                                              // 24412
 *        .controller('ExampleController', ['$scope', function($scope) {                                               // 24413
 *          $scope.names = ['morpheus', 'neo', 'trinity'];                                                             // 24414
 *        }]);                                                                                                         // 24415
 *   </file>                                                                                                           // 24416
 *   <file name="index.html">                                                                                          // 24417
 *    <form name="myForm" ng-controller="ExampleController">                                                           // 24418
 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>                               // 24419
 *      <span role="alert">                                                                                            // 24420
 *        <span class="error" ng-show="myForm.namesInput.$error.required">                                             // 24421
 *        Required!</span>                                                                                             // 24422
 *      </span>                                                                                                        // 24423
 *      <br>                                                                                                           // 24424
 *      <tt>names = {{names}}</tt><br/>                                                                                // 24425
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>                                          // 24426
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>                                          // 24427
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 24428
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 24429
 *     </form>                                                                                                         // 24430
 *   </file>                                                                                                           // 24431
 *   <file name="protractor.js" type="protractor">                                                                     // 24432
 *     var listInput = element(by.model('names'));                                                                     // 24433
 *     var names = element(by.exactBinding('names'));                                                                  // 24434
 *     var valid = element(by.binding('myForm.namesInput.$valid'));                                                    // 24435
 *     var error = element(by.css('span.error'));                                                                      // 24436
 *                                                                                                                     // 24437
 *     it('should initialize to model', function() {                                                                   // 24438
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');                                            // 24439
 *       expect(valid.getText()).toContain('true');                                                                    // 24440
 *       expect(error.getCssValue('display')).toBe('none');                                                            // 24441
 *     });                                                                                                             // 24442
 *                                                                                                                     // 24443
 *     it('should be invalid if empty', function() {                                                                   // 24444
 *       listInput.clear();                                                                                            // 24445
 *       listInput.sendKeys('');                                                                                       // 24446
 *                                                                                                                     // 24447
 *       expect(names.getText()).toContain('');                                                                        // 24448
 *       expect(valid.getText()).toContain('false');                                                                   // 24449
 *       expect(error.getCssValue('display')).not.toBe('none');                                                        // 24450
 *     });                                                                                                             // 24451
 *   </file>                                                                                                           // 24452
 * </example>                                                                                                          // 24453
 *                                                                                                                     // 24454
 * ### Example - splitting on whitespace                                                                               // 24455
 * <example name="ngList-directive-newlines">                                                                          // 24456
 *   <file name="index.html">                                                                                          // 24457
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>                                            // 24458
 *    <pre>{{ list | json }}</pre>                                                                                     // 24459
 *   </file>                                                                                                           // 24460
 *   <file name="protractor.js" type="protractor">                                                                     // 24461
 *     it("should split the text by newlines", function() {                                                            // 24462
 *       var listInput = element(by.model('list'));                                                                    // 24463
 *       var output = element(by.binding('list | json'));                                                              // 24464
 *       listInput.sendKeys('abc\ndef\nghi');                                                                          // 24465
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');                                      // 24466
 *     });                                                                                                             // 24467
 *   </file>                                                                                                           // 24468
 * </example>                                                                                                          // 24469
 *                                                                                                                     // 24470
 * @element input                                                                                                      // 24471
 * @param {string=} ngList optional delimiter that should be used to split the value.                                  // 24472
 */                                                                                                                    // 24473
var ngListDirective = function() {                                                                                     // 24474
  return {                                                                                                             // 24475
    restrict: 'A',                                                                                                     // 24476
    priority: 100,                                                                                                     // 24477
    require: 'ngModel',                                                                                                // 24478
    link: function(scope, element, attr, ctrl) {                                                                       // 24479
      // We want to control whitespace trimming so we use this convoluted approach                                     // 24480
      // to access the ngList attribute, which doesn't pre-trim the attribute                                          // 24481
      var ngList = element.attr(attr.$attr.ngList) || ', ';                                                            // 24482
      var trimValues = attr.ngTrim !== 'false';                                                                        // 24483
      var separator = trimValues ? trim(ngList) : ngList;                                                              // 24484
                                                                                                                       // 24485
      var parse = function(viewValue) {                                                                                // 24486
        // If the viewValue is invalid (say required but empty) it will be `undefined`                                 // 24487
        if (isUndefined(viewValue)) return;                                                                            // 24488
                                                                                                                       // 24489
        var list = [];                                                                                                 // 24490
                                                                                                                       // 24491
        if (viewValue) {                                                                                               // 24492
          forEach(viewValue.split(separator), function(value) {                                                        // 24493
            if (value) list.push(trimValues ? trim(value) : value);                                                    // 24494
          });                                                                                                          // 24495
        }                                                                                                              // 24496
                                                                                                                       // 24497
        return list;                                                                                                   // 24498
      };                                                                                                               // 24499
                                                                                                                       // 24500
      ctrl.$parsers.push(parse);                                                                                       // 24501
      ctrl.$formatters.push(function(value) {                                                                          // 24502
        if (isArray(value)) {                                                                                          // 24503
          return value.join(ngList);                                                                                   // 24504
        }                                                                                                              // 24505
                                                                                                                       // 24506
        return undefined;                                                                                              // 24507
      });                                                                                                              // 24508
                                                                                                                       // 24509
      // Override the standard $isEmpty because an empty array means the input is empty.                               // 24510
      ctrl.$isEmpty = function(value) {                                                                                // 24511
        return !value || !value.length;                                                                                // 24512
      };                                                                                                               // 24513
    }                                                                                                                  // 24514
  };                                                                                                                   // 24515
};                                                                                                                     // 24516
                                                                                                                       // 24517
/* global VALID_CLASS: true,                                                                                           // 24518
  INVALID_CLASS: true,                                                                                                 // 24519
  PRISTINE_CLASS: true,                                                                                                // 24520
  DIRTY_CLASS: true,                                                                                                   // 24521
  UNTOUCHED_CLASS: true,                                                                                               // 24522
  TOUCHED_CLASS: true,                                                                                                 // 24523
*/                                                                                                                     // 24524
                                                                                                                       // 24525
var VALID_CLASS = 'ng-valid',                                                                                          // 24526
    INVALID_CLASS = 'ng-invalid',                                                                                      // 24527
    PRISTINE_CLASS = 'ng-pristine',                                                                                    // 24528
    DIRTY_CLASS = 'ng-dirty',                                                                                          // 24529
    UNTOUCHED_CLASS = 'ng-untouched',                                                                                  // 24530
    TOUCHED_CLASS = 'ng-touched',                                                                                      // 24531
    PENDING_CLASS = 'ng-pending';                                                                                      // 24532
                                                                                                                       // 24533
var ngModelMinErr = minErr('ngModel');                                                                                 // 24534
                                                                                                                       // 24535
/**                                                                                                                    // 24536
 * @ngdoc type                                                                                                         // 24537
 * @name ngModel.NgModelController                                                                                     // 24538
 *                                                                                                                     // 24539
 * @property {string} $viewValue Actual string value in the view.                                                      // 24540
 * @property {*} $modelValue The value in the model that the control is bound to.                                      // 24541
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever                        // 24542
       the control reads value from the DOM. The functions are called in array order, each passing                     // 24543
       its return value through to the next. The last return value is forwarded to the                                 // 24544
       {@link ngModel.NgModelController#$validators `$validators`} collection.                                         // 24545
                                                                                                                       // 24546
Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue                                 // 24547
`$viewValue`}.                                                                                                         // 24548
                                                                                                                       // 24549
Returning `undefined` from a parser means a parse error occurred. In that case,                                        // 24550
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`                              // 24551
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}                                 // 24552
is set to `true`. The parse error is stored in `ngModel.$error.parse`.                                                 // 24553
                                                                                                                       // 24554
 *                                                                                                                     // 24555
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever                     // 24556
       the model value changes. The functions are called in reverse array order, each passing the value through to the // 24557
       next. The last return value is used as the actual DOM value.                                                    // 24558
       Used to format / convert values for display in the control.                                                     // 24559
 * ```js                                                                                                               // 24560
 * function formatter(value) {                                                                                         // 24561
 *   if (value) {                                                                                                      // 24562
 *     return value.toUpperCase();                                                                                     // 24563
 *   }                                                                                                                 // 24564
 * }                                                                                                                   // 24565
 * ngModel.$formatters.push(formatter);                                                                                // 24566
 * ```                                                                                                                 // 24567
 *                                                                                                                     // 24568
 * @property {Object.<string, function>} $validators A collection of validators that are applied                       // 24569
 *      whenever the model value changes. The key value within the object refers to the name of the                    // 24570
 *      validator while the function refers to the validation operation. The validation operation is                   // 24571
 *      provided with the model value as an argument and must return a true or false value depending                   // 24572
 *      on the response of that validation.                                                                            // 24573
 *                                                                                                                     // 24574
 * ```js                                                                                                               // 24575
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {                                             // 24576
 *   var value = modelValue || viewValue;                                                                              // 24577
 *   return /[0-9]+/.test(value) &&                                                                                    // 24578
 *          /[a-z]+/.test(value) &&                                                                                    // 24579
 *          /[A-Z]+/.test(value) &&                                                                                    // 24580
 *          /\W+/.test(value);                                                                                         // 24581
 * };                                                                                                                  // 24582
 * ```                                                                                                                 // 24583
 *                                                                                                                     // 24584
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to             // 24585
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided             // 24586
 *      is expected to return a promise when it is run during the model validation process. Once the promise           // 24587
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.            // 24588
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model      // 24589
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator       // 24590
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.                                                     // 24592
 *                                                                                                                     // 24593
 * Please note that if $http is used then it is important that the server returns a success HTTP response code         // 24594
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.                   // 24595
 *                                                                                                                     // 24596
 * ```js                                                                                                               // 24597
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {                                         // 24598
 *   var value = modelValue || viewValue;                                                                              // 24599
 *                                                                                                                     // 24600
 *   // Lookup user by username                                                                                        // 24601
 *   return $http.get('/api/users/' + value).                                                                          // 24602
 *      then(function resolved() {                                                                                     // 24603
 *        //username exists, this means validation fails                                                               // 24604
 *        return $q.reject('exists');                                                                                  // 24605
 *      }, function rejected() {                                                                                       // 24606
 *        //username does not exist, therefore this validation passes                                                  // 24607
 *        return true;                                                                                                 // 24608
 *      });                                                                                                            // 24609
 * };                                                                                                                  // 24610
 * ```                                                                                                                 // 24611
 *                                                                                                                     // 24612
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the                        // 24613
 *     view value has changed. It is called with no arguments, and its return value is ignored.                        // 24614
 *     This can be used in place of additional $watches against the model value.                                       // 24615
 *                                                                                                                     // 24616
 * @property {Object} $error An object hash with all failing validator ids as keys.                                    // 24617
 * @property {Object} $pending An object hash with all pending validator ids as keys.                                  // 24618
 *                                                                                                                     // 24619
 * @property {boolean} $untouched True if control has not lost focus yet.                                              // 24620
 * @property {boolean} $touched True if control has lost focus.                                                        // 24621
 * @property {boolean} $pristine True if user has not interacted with the control yet.                                 // 24622
 * @property {boolean} $dirty True if user has already interacted with the control.                                    // 24623
 * @property {boolean} $valid True if there is no error.                                                               // 24624
 * @property {boolean} $invalid True if at least one error on the control.                                             // 24625
 * @property {string} $name The name attribute of the control.                                                         // 24626
 *                                                                                                                     // 24627
 * @description                                                                                                        // 24628
 *                                                                                                                     // 24629
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.                                       // 24630
 * The controller contains services for data-binding, validation, CSS updates, and value formatting                    // 24631
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or                           // 24632
 * listening to DOM events.                                                                                            // 24633
 * Such DOM related logic should be provided by other directives which make use of                                     // 24634
 * `NgModelController` for data-binding to control elements.                                                           // 24635
 * Angular provides this DOM logic for most {@link input `input`} elements.                                            // 24636
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example                      // 24637
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.                        // 24638
 *                                                                                                                     // 24639
 * @example                                                                                                            // 24640
 * ### Custom Control Example                                                                                          // 24641
 * This example shows how to use `NgModelController` with a custom control to achieve                                  // 24642
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)                       // 24643
 * collaborate together to achieve the desired result.                                                                 // 24644
 *                                                                                                                     // 24645
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element                                 // 24646
 * contents be edited in place by the user.                                                                            // 24647
 *                                                                                                                     // 24648
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}             // 24649
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).              // 24650
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks                    // 24651
 * that content using the `$sce` service.                                                                              // 24652
 *                                                                                                                     // 24653
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">                                // 24654
    <file name="style.css">                                                                                            // 24655
      [contenteditable] {                                                                                              // 24656
        border: 1px solid black;                                                                                       // 24657
        background-color: white;                                                                                       // 24658
        min-height: 20px;                                                                                              // 24659
      }                                                                                                                // 24660
                                                                                                                       // 24661
      .ng-invalid {                                                                                                    // 24662
        border: 1px solid red;                                                                                         // 24663
      }                                                                                                                // 24664
                                                                                                                       // 24665
    </file>                                                                                                            // 24666
    <file name="script.js">                                                                                            // 24667
      angular.module('customControl', ['ngSanitize']).                                                                 // 24668
        directive('contenteditable', ['$sce', function($sce) {                                                         // 24669
          return {                                                                                                     // 24670
            restrict: 'A', // only activate on element attribute                                                       // 24671
            require: '?ngModel', // get a hold of NgModelController                                                    // 24672
            link: function(scope, element, attrs, ngModel) {                                                           // 24673
              if (!ngModel) return; // do nothing if no ng-model                                                       // 24674
                                                                                                                       // 24675
              // Specify how UI should be updated                                                                      // 24676
              ngModel.$render = function() {                                                                           // 24677
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));                                           // 24678
              };                                                                                                       // 24679
                                                                                                                       // 24680
              // Listen for change events to enable binding                                                            // 24681
              element.on('blur keyup change', function() {                                                             // 24682
                scope.$evalAsync(read);                                                                                // 24683
              });                                                                                                      // 24684
              read(); // initialize                                                                                    // 24685
                                                                                                                       // 24686
              // Write data to the model                                                                               // 24687
              function read() {                                                                                        // 24688
                var html = element.html();                                                                             // 24689
                // When we clear the content editable the browser leaves a <br> behind                                 // 24690
                // If strip-br attribute is provided then we strip this out                                            // 24691
                if ( attrs.stripBr && html == '<br>' ) {                                                               // 24692
                  html = '';                                                                                           // 24693
                }                                                                                                      // 24694
                ngModel.$setViewValue(html);                                                                           // 24695
              }                                                                                                        // 24696
            }                                                                                                          // 24697
          };                                                                                                           // 24698
        }]);                                                                                                           // 24699
    </file>                                                                                                            // 24700
    <file name="index.html">                                                                                           // 24701
      <form name="myForm">                                                                                             // 24702
       <div contenteditable                                                                                            // 24703
            name="myWidget" ng-model="userContent"                                                                     // 24704
            strip-br="true"                                                                                            // 24705
            required>Change me!</div>                                                                                  // 24706
        <span ng-show="myForm.myWidget.$error.required">Required!</span>                                               // 24707
       <hr>                                                                                                            // 24708
       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>                                      // 24709
      </form>                                                                                                          // 24710
    </file>                                                                                                            // 24711
    <file name="protractor.js" type="protractor">                                                                      // 24712
    it('should data-bind and become invalid', function() {                                                             // 24713
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {                                 // 24714
        // SafariDriver can't handle contenteditable                                                                   // 24715
        // and Firefox driver can't clear contenteditables very well                                                   // 24716
        return;                                                                                                        // 24717
      }                                                                                                                // 24718
      var contentEditable = element(by.css('[contenteditable]'));                                                      // 24719
      var content = 'Change me!';                                                                                      // 24720
                                                                                                                       // 24721
      expect(contentEditable.getText()).toEqual(content);                                                              // 24722
                                                                                                                       // 24723
      contentEditable.clear();                                                                                         // 24724
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);                                                             // 24725
      expect(contentEditable.getText()).toEqual('');                                                                   // 24726
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);                                    // 24727
    });                                                                                                                // 24728
    </file>                                                                                                            // 24729
 * </example>                                                                                                          // 24730
 *                                                                                                                     // 24731
 *                                                                                                                     // 24732
 */                                                                                                                    // 24733
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {   // 24735
  this.$viewValue = Number.NaN;                                                                                        // 24736
  this.$modelValue = Number.NaN;                                                                                       // 24737
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.     // 24738
  this.$validators = {};                                                                                               // 24739
  this.$asyncValidators = {};                                                                                          // 24740
  this.$parsers = [];                                                                                                  // 24741
  this.$formatters = [];                                                                                               // 24742
  this.$viewChangeListeners = [];                                                                                      // 24743
  this.$untouched = true;                                                                                              // 24744
  this.$touched = false;                                                                                               // 24745
  this.$pristine = true;                                                                                               // 24746
  this.$dirty = false;                                                                                                 // 24747
  this.$valid = true;                                                                                                  // 24748
  this.$invalid = false;                                                                                               // 24749
  this.$error = {}; // keep invalid keys here                                                                          // 24750
  this.$$success = {}; // keep valid keys here                                                                         // 24751
  this.$pending = undefined; // keep pending keys here                                                                 // 24752
  this.$name = $interpolate($attr.name || '', false)($scope);                                                          // 24753
  this.$$parentForm = nullFormCtrl;                                                                                    // 24754
                                                                                                                       // 24755
  var parsedNgModel = $parse($attr.ngModel),                                                                           // 24756
      parsedNgModelAssign = parsedNgModel.assign,                                                                      // 24757
      ngModelGet = parsedNgModel,                                                                                      // 24758
      ngModelSet = parsedNgModelAssign,                                                                                // 24759
      pendingDebounce = null,                                                                                          // 24760
      parserValid,                                                                                                     // 24761
      ctrl = this;                                                                                                     // 24762
                                                                                                                       // 24763
  this.$$setOptions = function(options) {                                                                              // 24764
    ctrl.$options = options;                                                                                           // 24765
    if (options && options.getterSetter) {                                                                             // 24766
      var invokeModelGetter = $parse($attr.ngModel + '()'),                                                            // 24767
          invokeModelSetter = $parse($attr.ngModel + '($$$p)');                                                        // 24768
                                                                                                                       // 24769
      ngModelGet = function($scope) {                                                                                  // 24770
        var modelValue = parsedNgModel($scope);                                                                        // 24771
        if (isFunction(modelValue)) {                                                                                  // 24772
          modelValue = invokeModelGetter($scope);                                                                      // 24773
        }                                                                                                              // 24774
        return modelValue;                                                                                             // 24775
      };                                                                                                               // 24776
      ngModelSet = function($scope, newValue) {                                                                        // 24777
        if (isFunction(parsedNgModel($scope))) {                                                                       // 24778
          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});                                                         // 24779
        } else {                                                                                                       // 24780
          parsedNgModelAssign($scope, ctrl.$modelValue);                                                               // 24781
        }                                                                                                              // 24782
      };                                                                                                               // 24783
    } else if (!parsedNgModel.assign) {                                                                                // 24784
      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",                             // 24785
          $attr.ngModel, startingTag($element));                                                                       // 24786
    }                                                                                                                  // 24787
  };                                                                                                                   // 24788
                                                                                                                       // 24789
  /**                                                                                                                  // 24790
   * @ngdoc method                                                                                                     // 24791
   * @name ngModel.NgModelController#$render                                                                           // 24792
   *                                                                                                                   // 24793
   * @description                                                                                                      // 24794
   * Called when the view needs to be updated. It is expected that the user of the ng-model                            // 24795
   * directive will implement this method.                                                                             // 24796
   *                                                                                                                   // 24797
   * The `$render()` method is invoked in the following situations:                                                    // 24798
   *                                                                                                                   // 24799
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last                            // 24800
   *   committed value then `$render()` is called to update the input control.                                         // 24801
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and                   // 24802
   *   the `$viewValue` are different from last time.                                                                  // 24803
   *                                                                                                                   // 24804
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of                           // 24805
   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`                 // 24806
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be                         // 24807
   * invoked if you only change a property on the objects.                                                             // 24808
   */                                                                                                                  // 24809
  this.$render = noop;                                                                                                 // 24810
                                                                                                                       // 24811
  /**                                                                                                                  // 24812
   * @ngdoc method                                                                                                     // 24813
   * @name ngModel.NgModelController#$isEmpty                                                                          // 24814
   *                                                                                                                   // 24815
   * @description                                                                                                      // 24816
   * This is called when we need to determine if the value of an input is empty.                                       // 24817
   *                                                                                                                   // 24818
   * For instance, the required directive does this to work out if the input has data or not.                          // 24819
   *                                                                                                                   // 24820
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.                   // 24821
   *                                                                                                                   // 24822
   * You can override this for input directives whose concept of being empty is different from the                     // 24823
   * default. The `checkboxInputType` directive does this because in its case a value of `false`                       // 24824
   * implies empty.                                                                                                    // 24825
   *                                                                                                                   // 24826
   * @param {*} value The value of the input to check for emptiness.                                                   // 24827
   * @returns {boolean} True if `value` is "empty".                                                                    // 24828
   */                                                                                                                  // 24829
  this.$isEmpty = function(value) {                                                                                    // 24830
    return isUndefined(value) || value === '' || value === null || value !== value;                                    // 24831
  };                                                                                                                   // 24832
                                                                                                                       // 24833
  var currentValidationRunId = 0;                                                                                      // 24834
                                                                                                                       // 24835
  /**                                                                                                                  // 24836
   * @ngdoc method                                                                                                     // 24837
   * @name ngModel.NgModelController#$setValidity                                                                      // 24838
   *                                                                                                                   // 24839
   * @description                                                                                                      // 24840
   * Change the validity state, and notify the form.                                                                   // 24841
   *                                                                                                                   // 24842
   * This method can be called within $parsers/$formatters or a custom validation implementation.                      // 24843
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and                               // 24844
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.                              // 24845
   *                                                                                                                   // 24846
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned               // 24847
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`                                   // 24848
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.                            // 24849
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case                      // 24850
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`            // 24851
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .                                  // 24852
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),         // 24853
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.                   // 24854
   *                          Skipped is used by Angular when validators do not run because of parse errors and        // 24855
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.              // 24856
   */                                                                                                                  // 24857
  addSetValidityMethod({                                                                                               // 24858
    ctrl: this,                                                                                                        // 24859
    $element: $element,                                                                                                // 24860
    set: function(object, property) {                                                                                  // 24861
      object[property] = true;                                                                                         // 24862
    },                                                                                                                 // 24863
    unset: function(object, property) {                                                                                // 24864
      delete object[property];                                                                                         // 24865
    },                                                                                                                 // 24866
    $animate: $animate                                                                                                 // 24867
  });                                                                                                                  // 24868
                                                                                                                       // 24869
  /**                                                                                                                  // 24870
   * @ngdoc method                                                                                                     // 24871
   * @name ngModel.NgModelController#$setPristine                                                                      // 24872
   *                                                                                                                   // 24873
   * @description                                                                                                      // 24874
   * Sets the control to its pristine state.                                                                           // 24875
   *                                                                                                                   // 24876
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine                      // 24877
   * state (`ng-pristine` class). A model is considered to be pristine when the control                                // 24878
   * has not been changed from when first compiled.                                                                    // 24879
   */                                                                                                                  // 24880
  this.$setPristine = function() {                                                                                     // 24881
    ctrl.$dirty = false;                                                                                               // 24882
    ctrl.$pristine = true;                                                                                             // 24883
    $animate.removeClass($element, DIRTY_CLASS);                                                                       // 24884
    $animate.addClass($element, PRISTINE_CLASS);                                                                       // 24885
  };                                                                                                                   // 24886
                                                                                                                       // 24887
  /**                                                                                                                  // 24888
   * @ngdoc method                                                                                                     // 24889
   * @name ngModel.NgModelController#$setDirty                                                                         // 24890
   *                                                                                                                   // 24891
   * @description                                                                                                      // 24892
   * Sets the control to its dirty state.                                                                              // 24893
   *                                                                                                                   // 24894
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty                      // 24895
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed                     // 24896
   * from when first compiled.                                                                                         // 24897
   */                                                                                                                  // 24898
  this.$setDirty = function() {                                                                                        // 24899
    ctrl.$dirty = true;                                                                                                // 24900
    ctrl.$pristine = false;                                                                                            // 24901
    $animate.removeClass($element, PRISTINE_CLASS);                                                                    // 24902
    $animate.addClass($element, DIRTY_CLASS);                                                                          // 24903
    ctrl.$$parentForm.$setDirty();                                                                                     // 24904
  };                                                                                                                   // 24905
                                                                                                                       // 24906
  /**                                                                                                                  // 24907
   * @ngdoc method                                                                                                     // 24908
   * @name ngModel.NgModelController#$setUntouched                                                                     // 24909
   *                                                                                                                   // 24910
   * @description                                                                                                      // 24911
   * Sets the control to its untouched state.                                                                          // 24912
   *                                                                                                                   // 24913
   * This method can be called to remove the `ng-touched` class and set the control to its                             // 24914
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched                             // 24915
   * by default, however this function can be used to restore that state if the model has                              // 24916
   * already been touched by the user.                                                                                 // 24917
   */                                                                                                                  // 24918
  this.$setUntouched = function() {                                                                                    // 24919
    ctrl.$touched = false;                                                                                             // 24920
    ctrl.$untouched = true;                                                                                            // 24921
    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);                                                       // 24922
  };                                                                                                                   // 24923
                                                                                                                       // 24924
  /**                                                                                                                  // 24925
   * @ngdoc method                                                                                                     // 24926
   * @name ngModel.NgModelController#$setTouched                                                                       // 24927
   *                                                                                                                   // 24928
   * @description                                                                                                      // 24929
   * Sets the control to its touched state.                                                                            // 24930
   *                                                                                                                   // 24931
   * This method can be called to remove the `ng-untouched` class and set the control to its                           // 24932
   * touched state (`ng-touched` class). A model is considered to be touched when the user has                         // 24933
   * first focused the control element and then shifted focus away from the control (blur event).                      // 24934
   */                                                                                                                  // 24935
  this.$setTouched = function() {                                                                                      // 24936
    ctrl.$touched = true;                                                                                              // 24937
    ctrl.$untouched = false;                                                                                           // 24938
    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);                                                       // 24939
  };                                                                                                                   // 24940
                                                                                                                       // 24941
  /**                                                                                                                  // 24942
   * @ngdoc method                                                                                                     // 24943
   * @name ngModel.NgModelController#$rollbackViewValue                                                                // 24944
   *                                                                                                                   // 24945
   * @description                                                                                                      // 24946
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,                   // 24947
   * which may be caused by a pending debounced event or because the input is waiting for a some                       // 24948
   * future event.                                                                                                     // 24949
   *                                                                                                                   // 24950
   * If you have an input that uses `ng-model-options` to set up debounced events or events such                       // 24951
   * as blur you can have a situation where there is a period when the `$viewValue`                                    // 24952
   * is out of synch with the ngModel's `$modelValue`.                                                                 // 24953
   *                                                                                                                   // 24954
   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`                      // 24955
   * programmatically before these debounced/future events have resolved/occurred, because Angular's                   // 24956
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.                       // 24957
   *                                                                                                                   // 24958
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an               // 24959
   * input which may have such events pending. This is important in order to make sure that the                        // 24960
   * input field will be updated with the new model value and any pending operations are cancelled.                    // 24961
   *                                                                                                                   // 24962
   * <example name="ng-model-cancel-update" module="cancel-update-example">                                            // 24963
   *   <file name="app.js">                                                                                            // 24964
   *     angular.module('cancel-update-example', [])                                                                   // 24965
   *                                                                                                                   // 24966
   *     .controller('CancelUpdateController', ['$scope', function($scope) {                                           // 24967
   *       $scope.resetWithCancel = function(e) {                                                                      // 24968
   *         if (e.keyCode == 27) {                                                                                    // 24969
   *           $scope.myForm.myInput1.$rollbackViewValue();                                                            // 24970
   *           $scope.myValue = '';                                                                                    // 24971
   *         }                                                                                                         // 24972
   *       };                                                                                                          // 24973
   *       $scope.resetWithoutCancel = function(e) {                                                                   // 24974
   *         if (e.keyCode == 27) {                                                                                    // 24975
   *           $scope.myValue = '';                                                                                    // 24976
   *         }                                                                                                         // 24977
   *       };                                                                                                          // 24978
   *     }]);                                                                                                          // 24979
   *   </file>                                                                                                         // 24980
   *   <file name="index.html">                                                                                        // 24981
   *     <div ng-controller="CancelUpdateController">                                                                  // 24982
   *       <p>Try typing something in each input.  See that the model only updates when you                            // 24983
   *          blur off the input.                                                                                      // 24984
   *        </p>                                                                                                       // 24985
   *        <p>Now see what happens if you start typing then press the Escape key</p>                                  // 24986
   *                                                                                                                   // 24987
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">                                                // 24988
   *         <p id="inputDescription1">With $rollbackViewValue()</p>                                                   // 24989
   *         <input name="myInput1" aria-describedby="inputDescription1" ng-model="myValue"                            // 24990
   *                ng-keydown="resetWithCancel($event)"><br/>                                                         // 24991
   *         myValue: "{{ myValue }}"                                                                                  // 24992
   *                                                                                                                   // 24993
   *         <p id="inputDescription2">Without $rollbackViewValue()</p>                                                // 24994
   *         <input name="myInput2" aria-describedby="inputDescription2" ng-model="myValue"                            // 24995
   *                ng-keydown="resetWithoutCancel($event)"><br/>                                                      // 24996
   *         myValue: "{{ myValue }}"                                                                                  // 24997
   *       </form>                                                                                                     // 24998
   *     </div>                                                                                                        // 24999
   *   </file>                                                                                                         // 25000
   * </example>                                                                                                        // 25001
   */                                                                                                                  // 25002
  this.$rollbackViewValue = function() {                                                                               // 25003
    $timeout.cancel(pendingDebounce);                                                                                  // 25004
    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;                                                                   // 25005
    ctrl.$render();                                                                                                    // 25006
  };                                                                                                                   // 25007
                                                                                                                       // 25008
  /**                                                                                                                  // 25009
   * @ngdoc method                                                                                                     // 25010
   * @name ngModel.NgModelController#$validate                                                                         // 25011
   *                                                                                                                   // 25012
   * @description                                                                                                      // 25013
   * Runs each of the registered validators (first synchronous validators and then                                     // 25014
   * asynchronous validators).                                                                                         // 25015
   * If the validity changes to invalid, the model will be set to `undefined`,                                         // 25016
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.                                            // 25017
   * If the validity changes to valid, it will set the model to the last available valid                               // 25018
   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.                            // 25019
   */                                                                                                                  // 25020
  this.$validate = function() {                                                                                        // 25021
    // ignore $validate before model is initialized                                                                    // 25022
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 25023
      return;                                                                                                          // 25024
    }                                                                                                                  // 25025
                                                                                                                       // 25026
    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 25027
    // Note: we use the $$rawModelValue as $modelValue might have been                                                 // 25028
    // set to undefined during a view -> model update that found validation                                            // 25029
    // errors. We can't parse the view here, since that could change                                                   // 25030
    // the model although neither viewValue nor the model on the scope changed                                         // 25031
    var modelValue = ctrl.$$rawModelValue;                                                                             // 25032
                                                                                                                       // 25033
    var prevValid = ctrl.$valid;                                                                                       // 25034
    var prevModelValue = ctrl.$modelValue;                                                                             // 25035
                                                                                                                       // 25036
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 25037
                                                                                                                       // 25038
    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {                                                   // 25039
      // If there was no change in validity, don't update the model                                                    // 25040
      // This prevents changing an invalid modelValue to undefined                                                     // 25041
      if (!allowInvalid && prevValid !== allValid) {                                                                   // 25042
        // Note: Don't check ctrl.$valid here, as we could have                                                        // 25043
        // external validators (e.g. calculated on the server),                                                        // 25044
        // that just call $setValidity and need the model value                                                        // 25045
        // to calculate their validity.                                                                                // 25046
        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 25047
                                                                                                                       // 25048
        if (ctrl.$modelValue !== prevModelValue) {                                                                     // 25049
          ctrl.$$writeModelToScope();                                                                                  // 25050
        }                                                                                                              // 25051
      }                                                                                                                // 25052
    });                                                                                                                // 25053
                                                                                                                       // 25054
  };                                                                                                                   // 25055
                                                                                                                       // 25056
  this.$$runValidators = function(modelValue, viewValue, doneCallback) {                                               // 25057
    currentValidationRunId++;                                                                                          // 25058
    var localValidationRunId = currentValidationRunId;                                                                 // 25059
                                                                                                                       // 25060
    // check parser error                                                                                              // 25061
    if (!processParseErrors()) {                                                                                       // 25062
      validationDone(false);                                                                                           // 25063
      return;                                                                                                          // 25064
    }                                                                                                                  // 25065
    if (!processSyncValidators()) {                                                                                    // 25066
      validationDone(false);                                                                                           // 25067
      return;                                                                                                          // 25068
    }                                                                                                                  // 25069
    processAsyncValidators();                                                                                          // 25070
                                                                                                                       // 25071
    function processParseErrors() {                                                                                    // 25072
      var errorKey = ctrl.$$parserName || 'parse';                                                                     // 25073
      if (isUndefined(parserValid)) {                                                                                  // 25074
        setValidity(errorKey, null);                                                                                   // 25075
      } else {                                                                                                         // 25076
        if (!parserValid) {                                                                                            // 25077
          forEach(ctrl.$validators, function(v, name) {                                                                // 25078
            setValidity(name, null);                                                                                   // 25079
          });                                                                                                          // 25080
          forEach(ctrl.$asyncValidators, function(v, name) {                                                           // 25081
            setValidity(name, null);                                                                                   // 25082
          });                                                                                                          // 25083
        }                                                                                                              // 25084
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName                   // 25085
        setValidity(errorKey, parserValid);                                                                            // 25086
        return parserValid;                                                                                            // 25087
      }                                                                                                                // 25088
      return true;                                                                                                     // 25089
    }                                                                                                                  // 25090
                                                                                                                       // 25091
    function processSyncValidators() {                                                                                 // 25092
      var syncValidatorsValid = true;                                                                                  // 25093
      forEach(ctrl.$validators, function(validator, name) {                                                            // 25094
        var result = validator(modelValue, viewValue);                                                                 // 25095
        syncValidatorsValid = syncValidatorsValid && result;                                                           // 25096
        setValidity(name, result);                                                                                     // 25097
      });                                                                                                              // 25098
      if (!syncValidatorsValid) {                                                                                      // 25099
        forEach(ctrl.$asyncValidators, function(v, name) {                                                             // 25100
          setValidity(name, null);                                                                                     // 25101
        });                                                                                                            // 25102
        return false;                                                                                                  // 25103
      }                                                                                                                // 25104
      return true;                                                                                                     // 25105
    }                                                                                                                  // 25106
                                                                                                                       // 25107
    function processAsyncValidators() {                                                                                // 25108
      var validatorPromises = [];                                                                                      // 25109
      var allValid = true;                                                                                             // 25110
      forEach(ctrl.$asyncValidators, function(validator, name) {                                                       // 25111
        var promise = validator(modelValue, viewValue);                                                                // 25112
        if (!isPromiseLike(promise)) {                                                                                 // 25113
          throw ngModelMinErr("$asyncValidators",                                                                      // 25114
            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);                    // 25115
        }                                                                                                              // 25116
        setValidity(name, undefined);                                                                                  // 25117
        validatorPromises.push(promise.then(function() {                                                               // 25118
          setValidity(name, true);                                                                                     // 25119
        }, function(error) {                                                                                           // 25120
          allValid = false;                                                                                            // 25121
          setValidity(name, false);                                                                                    // 25122
        }));                                                                                                           // 25123
      });                                                                                                              // 25124
      if (!validatorPromises.length) {                                                                                 // 25125
        validationDone(true);                                                                                          // 25126
      } else {                                                                                                         // 25127
        $q.all(validatorPromises).then(function() {                                                                    // 25128
          validationDone(allValid);                                                                                    // 25129
        }, noop);                                                                                                      // 25130
      }                                                                                                                // 25131
    }                                                                                                                  // 25132
                                                                                                                       // 25133
    function setValidity(name, isValid) {                                                                              // 25134
      if (localValidationRunId === currentValidationRunId) {                                                           // 25135
        ctrl.$setValidity(name, isValid);                                                                              // 25136
      }                                                                                                                // 25137
    }                                                                                                                  // 25138
                                                                                                                       // 25139
    function validationDone(allValid) {                                                                                // 25140
      if (localValidationRunId === currentValidationRunId) {                                                           // 25141
                                                                                                                       // 25142
        doneCallback(allValid);                                                                                        // 25143
      }                                                                                                                // 25144
    }                                                                                                                  // 25145
  };                                                                                                                   // 25146
                                                                                                                       // 25147
  /**                                                                                                                  // 25148
   * @ngdoc method                                                                                                     // 25149
   * @name ngModel.NgModelController#$commitViewValue                                                                  // 25150
   *                                                                                                                   // 25151
   * @description                                                                                                      // 25152
   * Commit a pending update to the `$modelValue`.                                                                     // 25153
   *                                                                                                                   // 25154
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 25155
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`                          // 25156
   * usually handles calling this in response to input events.                                                         // 25157
   */                                                                                                                  // 25158
  this.$commitViewValue = function() {                                                                                 // 25159
    var viewValue = ctrl.$viewValue;                                                                                   // 25160
                                                                                                                       // 25161
    $timeout.cancel(pendingDebounce);                                                                                  // 25162
                                                                                                                       // 25163
    // If the view value has not changed then we should just exit, except in the case where there is                   // 25164
    // a native validator on the element. In this case the validation state may have changed even though               // 25165
    // the viewValue has stayed empty.                                                                                 // 25166
    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {            // 25167
      return;                                                                                                          // 25168
    }                                                                                                                  // 25169
    ctrl.$$lastCommittedViewValue = viewValue;                                                                         // 25170
                                                                                                                       // 25171
    // change to dirty                                                                                                 // 25172
    if (ctrl.$pristine) {                                                                                              // 25173
      this.$setDirty();                                                                                                // 25174
    }                                                                                                                  // 25175
    this.$$parseAndValidate();                                                                                         // 25176
  };                                                                                                                   // 25177
                                                                                                                       // 25178
  this.$$parseAndValidate = function() {                                                                               // 25179
    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 25180
    var modelValue = viewValue;                                                                                        // 25181
    parserValid = isUndefined(modelValue) ? undefined : true;                                                          // 25182
                                                                                                                       // 25183
    if (parserValid) {                                                                                                 // 25184
      for (var i = 0; i < ctrl.$parsers.length; i++) {                                                                 // 25185
        modelValue = ctrl.$parsers[i](modelValue);                                                                     // 25186
        if (isUndefined(modelValue)) {                                                                                 // 25187
          parserValid = false;                                                                                         // 25188
          break;                                                                                                       // 25189
        }                                                                                                              // 25190
      }                                                                                                                // 25191
    }                                                                                                                  // 25192
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 25193
      // ctrl.$modelValue has not been touched yet...                                                                  // 25194
      ctrl.$modelValue = ngModelGet($scope);                                                                           // 25195
    }                                                                                                                  // 25196
    var prevModelValue = ctrl.$modelValue;                                                                             // 25197
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 25198
    ctrl.$$rawModelValue = modelValue;                                                                                 // 25199
                                                                                                                       // 25200
    if (allowInvalid) {                                                                                                // 25201
      ctrl.$modelValue = modelValue;                                                                                   // 25202
      writeToModelIfNeeded();                                                                                          // 25203
    }                                                                                                                  // 25204
                                                                                                                       // 25205
    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.                      // 25206
    // This can happen if e.g. $setViewValue is called from inside a parser                                            // 25207
    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {                               // 25208
      if (!allowInvalid) {                                                                                             // 25209
        // Note: Don't check ctrl.$valid here, as we could have                                                        // 25210
        // external validators (e.g. calculated on the server),                                                        // 25211
        // that just call $setValidity and need the model value                                                        // 25212
        // to calculate their validity.                                                                                // 25213
        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 25214
        writeToModelIfNeeded();                                                                                        // 25215
      }                                                                                                                // 25216
    });                                                                                                                // 25217
                                                                                                                       // 25218
    function writeToModelIfNeeded() {                                                                                  // 25219
      if (ctrl.$modelValue !== prevModelValue) {                                                                       // 25220
        ctrl.$$writeModelToScope();                                                                                    // 25221
      }                                                                                                                // 25222
    }                                                                                                                  // 25223
  };                                                                                                                   // 25224
                                                                                                                       // 25225
  this.$$writeModelToScope = function() {                                                                              // 25226
    ngModelSet($scope, ctrl.$modelValue);                                                                              // 25227
    forEach(ctrl.$viewChangeListeners, function(listener) {                                                            // 25228
      try {                                                                                                            // 25229
        listener();                                                                                                    // 25230
      } catch (e) {                                                                                                    // 25231
        $exceptionHandler(e);                                                                                          // 25232
      }                                                                                                                // 25233
    });                                                                                                                // 25234
  };                                                                                                                   // 25235
                                                                                                                       // 25236
  /**                                                                                                                  // 25237
   * @ngdoc method                                                                                                     // 25238
   * @name ngModel.NgModelController#$setViewValue                                                                     // 25239
   *                                                                                                                   // 25240
   * @description                                                                                                      // 25241
   * Update the view value.                                                                                            // 25242
   *                                                                                                                   // 25243
   * This method should be called when a control wants to change the view value; typically,                            // 25244
   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}                   // 25245
   * directive calls it when the value of the input changes and {@link ng.directive:select select}                     // 25246
   * calls it when an option is selected.                                                                              // 25247
   *                                                                                                                   // 25248
   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`              // 25249
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged             // 25250
   * value sent directly for processing, finally to be applied to `$modelValue` and then the                           // 25251
   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,                // 25252
   * in the `$viewChangeListeners` list, are called.                                                                   // 25253
   *                                                                                                                   // 25254
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`                  // 25255
   * and the `default` trigger is not listed, all those actions will remain pending until one of the                   // 25256
   * `updateOn` events is triggered on the DOM element.                                                                // 25257
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}                     // 25258
   * directive is used with a custom debounce for this particular event.                                               // 25259
   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`                    // 25260
   * is specified, once the timer runs out.                                                                            // 25261
   *                                                                                                                   // 25262
   * When used with standard inputs, the view value will always be a string (which is in some cases                    // 25263
   * parsed into another type, such as a `Date` object for `input[date]`.)                                             // 25264
   * However, custom controls might also pass objects to this method. In this case, we should make                     // 25265
   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not                     // 25266
   * perform a deep watch of objects, it only looks for a change of identity. If you only change                       // 25267
   * the property of the object then ngModel will not realise that the object has changed and                          // 25268
   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should                           // 25269
   * not change properties of the copy once it has been passed to `$setViewValue`.                                     // 25270
   * Otherwise you may cause the model value on the scope to change incorrectly.                                       // 25271
   *                                                                                                                   // 25272
   * <div class="alert alert-info">                                                                                    // 25273
   * In any case, the value passed to the method should always reflect the current value                               // 25274
   * of the control. For example, if you are calling `$setViewValue` for an input element,                             // 25275
   * you should pass the input DOM value. Otherwise, the control and the scope model become                            // 25276
   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change                   // 25277
   * the control's DOM value in any way. If we want to change the control's DOM value                                  // 25278
   * programmatically, we should update the `ngModel` scope expression. Its new value will be                          // 25279
   * picked up by the model controller, which will run it through the `$formatters`, `$render` it                      // 25280
   * to update the DOM, and finally call `$validate` on it.                                                            // 25281
   * </div>                                                                                                            // 25282
   *                                                                                                                   // 25283
   * @param {*} value value from the view.                                                                             // 25284
   * @param {string} trigger Event that triggered the update.                                                          // 25285
   */                                                                                                                  // 25286
  this.$setViewValue = function(value, trigger) {                                                                      // 25287
    ctrl.$viewValue = value;                                                                                           // 25288
    if (!ctrl.$options || ctrl.$options.updateOnDefault) {                                                             // 25289
      ctrl.$$debounceViewValueCommit(trigger);                                                                         // 25290
    }                                                                                                                  // 25291
  };                                                                                                                   // 25292
                                                                                                                       // 25293
  this.$$debounceViewValueCommit = function(trigger) {                                                                 // 25294
    var debounceDelay = 0,                                                                                             // 25295
        options = ctrl.$options,                                                                                       // 25296
        debounce;                                                                                                      // 25297
                                                                                                                       // 25298
    if (options && isDefined(options.debounce)) {                                                                      // 25299
      debounce = options.debounce;                                                                                     // 25300
      if (isNumber(debounce)) {                                                                                        // 25301
        debounceDelay = debounce;                                                                                      // 25302
      } else if (isNumber(debounce[trigger])) {                                                                        // 25303
        debounceDelay = debounce[trigger];                                                                             // 25304
      } else if (isNumber(debounce['default'])) {                                                                      // 25305
        debounceDelay = debounce['default'];                                                                           // 25306
      }                                                                                                                // 25307
    }                                                                                                                  // 25308
                                                                                                                       // 25309
    $timeout.cancel(pendingDebounce);                                                                                  // 25310
    if (debounceDelay) {                                                                                               // 25311
      pendingDebounce = $timeout(function() {                                                                          // 25312
        ctrl.$commitViewValue();                                                                                       // 25313
      }, debounceDelay);                                                                                               // 25314
    } else if ($rootScope.$$phase) {                                                                                   // 25315
      ctrl.$commitViewValue();                                                                                         // 25316
    } else {                                                                                                           // 25317
      $scope.$apply(function() {                                                                                       // 25318
        ctrl.$commitViewValue();                                                                                       // 25319
      });                                                                                                              // 25320
    }                                                                                                                  // 25321
  };                                                                                                                   // 25322
                                                                                                                       // 25323
  // model -> value                                                                                                    // 25324
  // Note: we cannot use a normal scope.$watch as we want to detect the following:                                     // 25325
  // 1. scope value is 'a'                                                                                             // 25326
  // 2. user enters 'b'                                                                                                // 25327
  // 3. ng-change kicks in and reverts scope value to 'a'                                                              // 25328
  //    -> scope value did not change since the last digest as                                                         // 25329
  //       ng-change executes in apply phase                                                                           // 25330
  // 4. view should be changed back to 'a'                                                                             // 25331
  $scope.$watch(function ngModelWatch() {                                                                              // 25332
    var modelValue = ngModelGet($scope);                                                                               // 25333
                                                                                                                       // 25334
    // if scope model value and ngModel value are out of sync                                                          // 25335
    // TODO(perf): why not move this to the action fn?                                                                 // 25336
    if (modelValue !== ctrl.$modelValue &&                                                                             // 25337
       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator                    // 25338
       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)                                            // 25339
    ) {                                                                                                                // 25340
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;                                                            // 25341
      parserValid = undefined;                                                                                         // 25342
                                                                                                                       // 25343
      var formatters = ctrl.$formatters,                                                                               // 25344
          idx = formatters.length;                                                                                     // 25345
                                                                                                                       // 25346
      var viewValue = modelValue;                                                                                      // 25347
      while (idx--) {                                                                                                  // 25348
        viewValue = formatters[idx](viewValue);                                                                        // 25349
      }                                                                                                                // 25350
      if (ctrl.$viewValue !== viewValue) {                                                                             // 25351
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;                                                   // 25352
        ctrl.$render();                                                                                                // 25353
                                                                                                                       // 25354
        ctrl.$$runValidators(modelValue, viewValue, noop);                                                             // 25355
      }                                                                                                                // 25356
    }                                                                                                                  // 25357
                                                                                                                       // 25358
    return modelValue;                                                                                                 // 25359
  });                                                                                                                  // 25360
}];                                                                                                                    // 25361
                                                                                                                       // 25362
                                                                                                                       // 25363
/**                                                                                                                    // 25364
 * @ngdoc directive                                                                                                    // 25365
 * @name ngModel                                                                                                       // 25366
 *                                                                                                                     // 25367
 * @element input                                                                                                      // 25368
 * @priority 1                                                                                                         // 25369
 *                                                                                                                     // 25370
 * @description                                                                                                        // 25371
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a                         // 25372
 * property on the scope using {@link ngModel.NgModelController NgModelController},                                    // 25373
 * which is created and exposed by this directive.                                                                     // 25374
 *                                                                                                                     // 25375
 * `ngModel` is responsible for:                                                                                       // 25376
 *                                                                                                                     // 25377
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`                   // 25378
 *   require.                                                                                                          // 25379
 * - Providing validation behavior (i.e. required, number, email, url).                                                // 25380
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).           // 25381
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.                                           // 25383
 *                                                                                                                     // 25384
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the                          // 25385
 * current scope. If the property doesn't already exist on this scope, it will be created                              // 25386
 * implicitly and added to the scope.                                                                                  // 25387
 *                                                                                                                     // 25388
 * For best practices on using `ngModel`, see:                                                                         // 25389
 *                                                                                                                     // 25390
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)                          // 25391
 *                                                                                                                     // 25392
 * For basic examples, how to use `ngModel`, see:                                                                      // 25393
 *                                                                                                                     // 25394
 *  - {@link ng.directive:input input}                                                                                 // 25395
 *    - {@link input[text] text}                                                                                       // 25396
 *    - {@link input[checkbox] checkbox}                                                                               // 25397
 *    - {@link input[radio] radio}                                                                                     // 25398
 *    - {@link input[number] number}                                                                                   // 25399
 *    - {@link input[email] email}                                                                                     // 25400
 *    - {@link input[url] url}                                                                                         // 25401
 *    - {@link input[date] date}                                                                                       // 25402
 *    - {@link input[datetime-local] datetime-local}                                                                   // 25403
 *    - {@link input[time] time}                                                                                       // 25404
 *    - {@link input[month] month}                                                                                     // 25405
 *    - {@link input[week] week}                                                                                       // 25406
 *  - {@link ng.directive:select select}                                                                               // 25407
 *  - {@link ng.directive:textarea textarea}                                                                           // 25408
 *                                                                                                                     // 25409
 * # CSS classes                                                                                                       // 25410
 * The following CSS classes are added and removed on the associated input/select/textarea element                     // 25411
 * depending on the validity of the model.                                                                             // 25412
 *                                                                                                                     // 25413
 *  - `ng-valid`: the model is valid                                                                                   // 25414
 *  - `ng-invalid`: the model is invalid                                                                               // 25415
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`                                                     // 25416
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`                                                 // 25417
 *  - `ng-pristine`: the control hasn't been interacted with yet                                                       // 25418
 *  - `ng-dirty`: the control has been interacted with                                                                 // 25419
 *  - `ng-touched`: the control has been blurred                                                                       // 25420
 *  - `ng-untouched`: the control hasn't been blurred                                                                  // 25421
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled                                                             // 25422
 *                                                                                                                     // 25423
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 25424
 *                                                                                                                     // 25425
 * ## Animation Hooks                                                                                                  // 25426
 *                                                                                                                     // 25427
 * Animations within models are triggered when any of the associated CSS classes are added and removed                 // 25428
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,                // 25429
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.              // 25430
 * The animations that are triggered within ngModel are similar to how they work in ngClass and                        // 25431
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.                            // 25432
 *                                                                                                                     // 25433
 * The following example shows a simple way to utilize CSS transitions to style an input element                       // 25434
 * that has been rendered as invalid after it has been validated:                                                      // 25435
 *                                                                                                                     // 25436
 * <pre>                                                                                                               // 25437
 * //be sure to include ngAnimate as a module to hook into more                                                        // 25438
 * //advanced animations                                                                                               // 25439
 * .my-input {                                                                                                         // 25440
 *   transition:0.5s linear all;                                                                                       // 25441
 *   background: white;                                                                                                // 25442
 * }                                                                                                                   // 25443
 * .my-input.ng-invalid {                                                                                              // 25444
 *   background: red;                                                                                                  // 25445
 *   color:white;                                                                                                      // 25446
 * }                                                                                                                   // 25447
 * </pre>                                                                                                              // 25448
 *                                                                                                                     // 25449
 * @example                                                                                                            // 25450
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">                          // 25451
     <file name="index.html">                                                                                          // 25452
       <script>                                                                                                        // 25453
        angular.module('inputExample', [])                                                                             // 25454
          .controller('ExampleController', ['$scope', function($scope) {                                               // 25455
            $scope.val = '1';                                                                                          // 25456
          }]);                                                                                                         // 25457
       </script>                                                                                                       // 25458
       <style>                                                                                                         // 25459
         .my-input {                                                                                                   // 25460
           transition:all linear 0.5s;                                                                                 // 25461
           background: transparent;                                                                                    // 25462
         }                                                                                                             // 25463
         .my-input.ng-invalid {                                                                                        // 25464
           color:white;                                                                                                // 25465
           background: red;                                                                                            // 25466
         }                                                                                                             // 25467
       </style>                                                                                                        // 25468
       <p id="inputDescription">                                                                                       // 25469
        Update input to see transitions when valid/invalid.                                                            // 25470
        Integer is a valid value.                                                                                      // 25471
       </p>                                                                                                            // 25472
       <form name="testForm" ng-controller="ExampleController">                                                        // 25473
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"                                       // 25474
                aria-describedby="inputDescription" />                                                                 // 25475
       </form>                                                                                                         // 25476
     </file>                                                                                                           // 25477
 * </example>                                                                                                          // 25478
 *                                                                                                                     // 25479
 * ## Binding to a getter/setter                                                                                       // 25480
 *                                                                                                                     // 25481
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a                         // 25482
 * function that returns a representation of the model when called with zero arguments, and sets                       // 25483
 * the internal state of a model when called with an argument. It's sometimes useful to use this                       // 25484
 * for models that have an internal representation that's different from what the model exposes                        // 25485
 * to the view.                                                                                                        // 25486
 *                                                                                                                     // 25487
 * <div class="alert alert-success">                                                                                   // 25488
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more                       // 25489
 * frequently than other parts of your code.                                                                           // 25490
 * </div>                                                                                                              // 25491
 *                                                                                                                     // 25492
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that                      // 25493
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to                      // 25494
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See                                       // 25495
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.                                                      // 25496
 *                                                                                                                     // 25497
 * The following example shows how to use `ngModel` with a getter/setter:                                              // 25498
 *                                                                                                                     // 25499
 * @example                                                                                                            // 25500
 * <example name="ngModel-getter-setter" module="getterSetterExample">                                                 // 25501
     <file name="index.html">                                                                                          // 25502
       <div ng-controller="ExampleController">                                                                         // 25503
         <form name="userForm">                                                                                        // 25504
           <label>Name:                                                                                                // 25505
             <input type="text" name="userName"                                                                        // 25506
                    ng-model="user.name"                                                                               // 25507
                    ng-model-options="{ getterSetter: true }" />                                                       // 25508
           </label>                                                                                                    // 25509
         </form>                                                                                                       // 25510
         <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                    // 25511
       </div>                                                                                                          // 25512
     </file>                                                                                                           // 25513
     <file name="app.js">                                                                                              // 25514
       angular.module('getterSetterExample', [])                                                                       // 25515
         .controller('ExampleController', ['$scope', function($scope) {                                                // 25516
           var _name = 'Brian';                                                                                        // 25517
           $scope.user = {                                                                                             // 25518
             name: function(newName) {                                                                                 // 25519
              // Note that newName can be undefined for two reasons:                                                   // 25520
              // 1. Because it is called as a getter and thus called with no arguments                                 // 25521
              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25522
              //    input is invalid                                                                                   // 25523
              return arguments.length ? (_name = newName) : _name;                                                     // 25524
             }                                                                                                         // 25525
           };                                                                                                          // 25526
         }]);                                                                                                          // 25527
     </file>                                                                                                           // 25528
 * </example>                                                                                                          // 25529
 */                                                                                                                    // 25530
var ngModelDirective = ['$rootScope', function($rootScope) {                                                           // 25531
  return {                                                                                                             // 25532
    restrict: 'A',                                                                                                     // 25533
    require: ['ngModel', '^?form', '^?ngModelOptions'],                                                                // 25534
    controller: NgModelController,                                                                                     // 25535
    // Prelink needs to run before any input directive                                                                 // 25536
    // so that we can set the NgModelOptions in NgModelController                                                      // 25537
    // before anyone else uses it.                                                                                     // 25538
    priority: 1,                                                                                                       // 25539
    compile: function ngModelCompile(element) {                                                                        // 25540
      // Setup initial state of the control                                                                            // 25541
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);                                // 25542
                                                                                                                       // 25543
      return {                                                                                                         // 25544
        pre: function ngModelPreLink(scope, element, attr, ctrls) {                                                    // 25545
          var modelCtrl = ctrls[0],                                                                                    // 25546
              formCtrl = ctrls[1] || modelCtrl.$$parentForm;                                                           // 25547
                                                                                                                       // 25548
          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);                                                       // 25549
                                                                                                                       // 25550
          // notify others, especially parent forms                                                                    // 25551
          formCtrl.$addControl(modelCtrl);                                                                             // 25552
                                                                                                                       // 25553
          attr.$observe('name', function(newValue) {                                                                   // 25554
            if (modelCtrl.$name !== newValue) {                                                                        // 25555
              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);                                             // 25556
            }                                                                                                          // 25557
          });                                                                                                          // 25558
                                                                                                                       // 25559
          scope.$on('$destroy', function() {                                                                           // 25560
            modelCtrl.$$parentForm.$removeControl(modelCtrl);                                                          // 25561
          });                                                                                                          // 25562
        },                                                                                                             // 25563
        post: function ngModelPostLink(scope, element, attr, ctrls) {                                                  // 25564
          var modelCtrl = ctrls[0];                                                                                    // 25565
          if (modelCtrl.$options && modelCtrl.$options.updateOn) {                                                     // 25566
            element.on(modelCtrl.$options.updateOn, function(ev) {                                                     // 25567
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);                                                      // 25568
            });                                                                                                        // 25569
          }                                                                                                            // 25570
                                                                                                                       // 25571
          element.on('blur', function(ev) {                                                                            // 25572
            if (modelCtrl.$touched) return;                                                                            // 25573
                                                                                                                       // 25574
            if ($rootScope.$$phase) {                                                                                  // 25575
              scope.$evalAsync(modelCtrl.$setTouched);                                                                 // 25576
            } else {                                                                                                   // 25577
              scope.$apply(modelCtrl.$setTouched);                                                                     // 25578
            }                                                                                                          // 25579
          });                                                                                                          // 25580
        }                                                                                                              // 25581
      };                                                                                                               // 25582
    }                                                                                                                  // 25583
  };                                                                                                                   // 25584
}];                                                                                                                    // 25585
                                                                                                                       // 25586
var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;                                                                          // 25587
                                                                                                                       // 25588
/**                                                                                                                    // 25589
 * @ngdoc directive                                                                                                    // 25590
 * @name ngModelOptions                                                                                                // 25591
 *                                                                                                                     // 25592
 * @description                                                                                                        // 25593
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of                   // 25594
 * events that will trigger a model update and/or a debouncing delay so that the actual update only                    // 25595
 * takes place when a timer expires; this timer will be reset after another change takes place.                        // 25596
 *                                                                                                                     // 25597
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might                     // 25598
 * be different from the value in the actual model. This means that if you update the model you                        // 25599
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in            // 25600
 * order to make sure it is synchronized with the model and that any debounced action is canceled.                     // 25601
 *                                                                                                                     // 25602
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}                   // 25603
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is                     // 25604
 * important because `form` controllers are published to the related scope under the name in their                     // 25605
 * `name` attribute.                                                                                                   // 25606
 *                                                                                                                     // 25607
 * Any pending changes will take place immediately when an enclosing form is submitted via the                         // 25608
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                   // 25609
 * to have access to the updated model.                                                                                // 25610
 *                                                                                                                     // 25611
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.                                 // 25612
 *                                                                                                                     // 25613
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:                               // 25614
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several                     // 25615
 *     events using an space delimited list. There is a special event called `default` that                            // 25616
 *     matches the default events belonging of the control.                                                            // 25617
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A                     // 25618
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a                    // 25619
 *     custom value for each event. For example:                                                                       // 25620
 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`                      // 25621
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did                    // 25622
 *     not validate correctly instead of the default behavior of setting the model to undefined.                       // 25623
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to                       // 25624
       `ngModel` as getters/setters.                                                                                   // 25625
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for                  // 25626
 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the                              // 25627
 *     continental US time zone abbreviations, but for general use, use a time zone offset, for                        // 25628
 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                         // 25629
 *     If not specified, the timezone of the browser will be used.                                                     // 25630
 *                                                                                                                     // 25631
 * @example                                                                                                            // 25632
                                                                                                                       // 25633
  The following example shows how to override immediate updates. Changes on the inputs within the                      // 25634
  form will update the model only when the control loses focus (blur event). If `escape` key is                        // 25635
  pressed while the input field is focused, the value is reset to the value in the current model.                      // 25636
                                                                                                                       // 25637
  <example name="ngModelOptions-directive-blur" module="optionsExample">                                               // 25638
    <file name="index.html">                                                                                           // 25639
      <div ng-controller="ExampleController">                                                                          // 25640
        <form name="userForm">                                                                                         // 25641
          <label>Name:                                                                                                 // 25642
            <input type="text" name="userName"                                                                         // 25643
                   ng-model="user.name"                                                                                // 25644
                   ng-model-options="{ updateOn: 'blur' }"                                                             // 25645
                   ng-keyup="cancel($event)" />                                                                        // 25646
          </label><br />                                                                                               // 25647
          <label>Other data:                                                                                           // 25648
            <input type="text" ng-model="user.data" />                                                                 // 25649
          </label><br />                                                                                               // 25650
        </form>                                                                                                        // 25651
        <pre>user.name = <span ng-bind="user.name"></span></pre>                                                       // 25652
      </div>                                                                                                           // 25653
    </file>                                                                                                            // 25654
    <file name="app.js">                                                                                               // 25655
      angular.module('optionsExample', [])                                                                             // 25656
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25657
          $scope.user = { name: 'say', data: '' };                                                                     // 25658
                                                                                                                       // 25659
          $scope.cancel = function(e) {                                                                                // 25660
            if (e.keyCode == 27) {                                                                                     // 25661
              $scope.userForm.userName.$rollbackViewValue();                                                           // 25662
            }                                                                                                          // 25663
          };                                                                                                           // 25664
        }]);                                                                                                           // 25665
    </file>                                                                                                            // 25666
    <file name="protractor.js" type="protractor">                                                                      // 25667
      var model = element(by.binding('user.name'));                                                                    // 25668
      var input = element(by.model('user.name'));                                                                      // 25669
      var other = element(by.model('user.data'));                                                                      // 25670
                                                                                                                       // 25671
      it('should allow custom events', function() {                                                                    // 25672
        input.sendKeys(' hello');                                                                                      // 25673
        input.click();                                                                                                 // 25674
        expect(model.getText()).toEqual('say');                                                                        // 25675
        other.click();                                                                                                 // 25676
        expect(model.getText()).toEqual('say hello');                                                                  // 25677
      });                                                                                                              // 25678
                                                                                                                       // 25679
      it('should $rollbackViewValue when model changes', function() {                                                  // 25680
        input.sendKeys(' hello');                                                                                      // 25681
        expect(input.getAttribute('value')).toEqual('say hello');                                                      // 25682
        input.sendKeys(protractor.Key.ESCAPE);                                                                         // 25683
        expect(input.getAttribute('value')).toEqual('say');                                                            // 25684
        other.click();                                                                                                 // 25685
        expect(model.getText()).toEqual('say');                                                                        // 25686
      });                                                                                                              // 25687
    </file>                                                                                                            // 25688
  </example>                                                                                                           // 25689
                                                                                                                       // 25690
  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.                    // 25691
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.                      // 25692
                                                                                                                       // 25693
  <example name="ngModelOptions-directive-debounce" module="optionsExample">                                           // 25694
    <file name="index.html">                                                                                           // 25695
      <div ng-controller="ExampleController">                                                                          // 25696
        <form name="userForm">                                                                                         // 25697
          <label>Name:                                                                                                 // 25698
            <input type="text" name="userName"                                                                         // 25699
                   ng-model="user.name"                                                                                // 25700
                   ng-model-options="{ debounce: 1000 }" />                                                            // 25701
          </label>                                                                                                     // 25702
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>                       // 25703
          <br />                                                                                                       // 25704
        </form>                                                                                                        // 25705
        <pre>user.name = <span ng-bind="user.name"></span></pre>                                                       // 25706
      </div>                                                                                                           // 25707
    </file>                                                                                                            // 25708
    <file name="app.js">                                                                                               // 25709
      angular.module('optionsExample', [])                                                                             // 25710
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25711
          $scope.user = { name: 'say' };                                                                               // 25712
        }]);                                                                                                           // 25713
    </file>                                                                                                            // 25714
  </example>                                                                                                           // 25715
                                                                                                                       // 25716
  This one shows how to bind to getter/setters:                                                                        // 25717
                                                                                                                       // 25718
  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">                                 // 25719
    <file name="index.html">                                                                                           // 25720
      <div ng-controller="ExampleController">                                                                          // 25721
        <form name="userForm">                                                                                         // 25722
          <label>Name:                                                                                                 // 25723
            <input type="text" name="userName"                                                                         // 25724
                   ng-model="user.name"                                                                                // 25725
                   ng-model-options="{ getterSetter: true }" />                                                        // 25726
          </label>                                                                                                     // 25727
        </form>                                                                                                        // 25728
        <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                     // 25729
      </div>                                                                                                           // 25730
    </file>                                                                                                            // 25731
    <file name="app.js">                                                                                               // 25732
      angular.module('getterSetterExample', [])                                                                        // 25733
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25734
          var _name = 'Brian';                                                                                         // 25735
          $scope.user = {                                                                                              // 25736
            name: function(newName) {                                                                                  // 25737
              // Note that newName can be undefined for two reasons:                                                   // 25738
              // 1. Because it is called as a getter and thus called with no arguments                                 // 25739
              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25740
              //    input is invalid                                                                                   // 25741
              return arguments.length ? (_name = newName) : _name;                                                     // 25742
            }                                                                                                          // 25743
          };                                                                                                           // 25744
        }]);                                                                                                           // 25745
    </file>                                                                                                            // 25746
  </example>                                                                                                           // 25747
 */                                                                                                                    // 25748
var ngModelOptionsDirective = function() {                                                                             // 25749
  return {                                                                                                             // 25750
    restrict: 'A',                                                                                                     // 25751
    controller: ['$scope', '$attrs', function($scope, $attrs) {                                                        // 25752
      var that = this;                                                                                                 // 25753
      this.$options = copy($scope.$eval($attrs.ngModelOptions));                                                       // 25754
      // Allow adding/overriding bound events                                                                          // 25755
      if (isDefined(this.$options.updateOn)) {                                                                         // 25756
        this.$options.updateOnDefault = false;                                                                         // 25757
        // extract "default" pseudo-event from list of events that can trigger a model update                          // 25758
        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {                      // 25759
          that.$options.updateOnDefault = true;                                                                        // 25760
          return ' ';                                                                                                  // 25761
        }));                                                                                                           // 25762
      } else {                                                                                                         // 25763
        this.$options.updateOnDefault = true;                                                                          // 25764
      }                                                                                                                // 25765
    }]                                                                                                                 // 25766
  };                                                                                                                   // 25767
};                                                                                                                     // 25768
                                                                                                                       // 25769
                                                                                                                       // 25770
                                                                                                                       // 25771
// helper methods                                                                                                      // 25772
function addSetValidityMethod(context) {                                                                               // 25773
  var ctrl = context.ctrl,                                                                                             // 25774
      $element = context.$element,                                                                                     // 25775
      classCache = {},                                                                                                 // 25776
      set = context.set,                                                                                               // 25777
      unset = context.unset,                                                                                           // 25778
      $animate = context.$animate;                                                                                     // 25779
                                                                                                                       // 25780
  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));                             // 25781
                                                                                                                       // 25782
  ctrl.$setValidity = setValidity;                                                                                     // 25783
                                                                                                                       // 25784
  function setValidity(validationErrorKey, state, controller) {                                                        // 25785
    if (isUndefined(state)) {                                                                                          // 25786
      createAndSet('$pending', validationErrorKey, controller);                                                        // 25787
    } else {                                                                                                           // 25788
      unsetAndCleanup('$pending', validationErrorKey, controller);                                                     // 25789
    }                                                                                                                  // 25790
    if (!isBoolean(state)) {                                                                                           // 25791
      unset(ctrl.$error, validationErrorKey, controller);                                                              // 25792
      unset(ctrl.$$success, validationErrorKey, controller);                                                           // 25793
    } else {                                                                                                           // 25794
      if (state) {                                                                                                     // 25795
        unset(ctrl.$error, validationErrorKey, controller);                                                            // 25796
        set(ctrl.$$success, validationErrorKey, controller);                                                           // 25797
      } else {                                                                                                         // 25798
        set(ctrl.$error, validationErrorKey, controller);                                                              // 25799
        unset(ctrl.$$success, validationErrorKey, controller);                                                         // 25800
      }                                                                                                                // 25801
    }                                                                                                                  // 25802
    if (ctrl.$pending) {                                                                                               // 25803
      cachedToggleClass(PENDING_CLASS, true);                                                                          // 25804
      ctrl.$valid = ctrl.$invalid = undefined;                                                                         // 25805
      toggleValidationCss('', null);                                                                                   // 25806
    } else {                                                                                                           // 25807
      cachedToggleClass(PENDING_CLASS, false);                                                                         // 25808
      ctrl.$valid = isObjectEmpty(ctrl.$error);                                                                        // 25809
      ctrl.$invalid = !ctrl.$valid;                                                                                    // 25810
      toggleValidationCss('', ctrl.$valid);                                                                            // 25811
    }                                                                                                                  // 25812
                                                                                                                       // 25813
    // re-read the state as the set/unset methods could have                                                           // 25814
    // combined state in ctrl.$error[validationError] (used for forms),                                                // 25815
    // where setting/unsetting only increments/decrements the value,                                                   // 25816
    // and does not replace it.                                                                                        // 25817
    var combinedState;                                                                                                 // 25818
    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {                                                          // 25819
      combinedState = undefined;                                                                                       // 25820
    } else if (ctrl.$error[validationErrorKey]) {                                                                      // 25821
      combinedState = false;                                                                                           // 25822
    } else if (ctrl.$$success[validationErrorKey]) {                                                                   // 25823
      combinedState = true;                                                                                            // 25824
    } else {                                                                                                           // 25825
      combinedState = null;                                                                                            // 25826
    }                                                                                                                  // 25827
                                                                                                                       // 25828
    toggleValidationCss(validationErrorKey, combinedState);                                                            // 25829
    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);                                           // 25830
  }                                                                                                                    // 25831
                                                                                                                       // 25832
  function createAndSet(name, value, controller) {                                                                     // 25833
    if (!ctrl[name]) {                                                                                                 // 25834
      ctrl[name] = {};                                                                                                 // 25835
    }                                                                                                                  // 25836
    set(ctrl[name], value, controller);                                                                                // 25837
  }                                                                                                                    // 25838
                                                                                                                       // 25839
  function unsetAndCleanup(name, value, controller) {                                                                  // 25840
    if (ctrl[name]) {                                                                                                  // 25841
      unset(ctrl[name], value, controller);                                                                            // 25842
    }                                                                                                                  // 25843
    if (isObjectEmpty(ctrl[name])) {                                                                                   // 25844
      ctrl[name] = undefined;                                                                                          // 25845
    }                                                                                                                  // 25846
  }                                                                                                                    // 25847
                                                                                                                       // 25848
  function cachedToggleClass(className, switchValue) {                                                                 // 25849
    if (switchValue && !classCache[className]) {                                                                       // 25850
      $animate.addClass($element, className);                                                                          // 25851
      classCache[className] = true;                                                                                    // 25852
    } else if (!switchValue && classCache[className]) {                                                                // 25853
      $animate.removeClass($element, className);                                                                       // 25854
      classCache[className] = false;                                                                                   // 25855
    }                                                                                                                  // 25856
  }                                                                                                                    // 25857
                                                                                                                       // 25858
  function toggleValidationCss(validationErrorKey, isValid) {                                                          // 25859
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';                          // 25860
                                                                                                                       // 25861
    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);                                             // 25862
    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);                                          // 25863
  }                                                                                                                    // 25864
}                                                                                                                      // 25865
                                                                                                                       // 25866
function isObjectEmpty(obj) {                                                                                          // 25867
  if (obj) {                                                                                                           // 25868
    for (var prop in obj) {                                                                                            // 25869
      if (obj.hasOwnProperty(prop)) {                                                                                  // 25870
        return false;                                                                                                  // 25871
      }                                                                                                                // 25872
    }                                                                                                                  // 25873
  }                                                                                                                    // 25874
  return true;                                                                                                         // 25875
}                                                                                                                      // 25876
                                                                                                                       // 25877
/**                                                                                                                    // 25878
 * @ngdoc directive                                                                                                    // 25879
 * @name ngNonBindable                                                                                                 // 25880
 * @restrict AC                                                                                                        // 25881
 * @priority 1000                                                                                                      // 25882
 *                                                                                                                     // 25883
 * @description                                                                                                        // 25884
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current                      // 25885
 * DOM element. This is useful if the element contains what appears to be Angular directives and                       // 25886
 * bindings but which should be ignored by Angular. This could be the case if you have a site that                     // 25887
 * displays snippets of code, for instance.                                                                            // 25888
 *                                                                                                                     // 25889
 * @element ANY                                                                                                        // 25890
 *                                                                                                                     // 25891
 * @example                                                                                                            // 25892
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,                   // 25893
 * but the one wrapped in `ngNonBindable` is left alone.                                                               // 25894
 *                                                                                                                     // 25895
 * @example                                                                                                            // 25896
    <example>                                                                                                          // 25897
      <file name="index.html">                                                                                         // 25898
        <div>Normal: {{1 + 2}}</div>                                                                                   // 25899
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>                                                                  // 25900
      </file>                                                                                                          // 25901
      <file name="protractor.js" type="protractor">                                                                    // 25902
       it('should check ng-non-bindable', function() {                                                                 // 25903
         expect(element(by.binding('1 + 2')).getText()).toContain('3');                                                // 25904
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);                                        // 25905
       });                                                                                                             // 25906
      </file>                                                                                                          // 25907
    </example>                                                                                                         // 25908
 */                                                                                                                    // 25909
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });                                          // 25910
                                                                                                                       // 25911
/* global jqLiteRemove */                                                                                              // 25912
                                                                                                                       // 25913
var ngOptionsMinErr = minErr('ngOptions');                                                                             // 25914
                                                                                                                       // 25915
/**                                                                                                                    // 25916
 * @ngdoc directive                                                                                                    // 25917
 * @name ngOptions                                                                                                     // 25918
 * @restrict A                                                                                                         // 25919
 *                                                                                                                     // 25920
 * @description                                                                                                        // 25921
 *                                                                                                                     // 25922
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`                                  // 25923
 * elements for the `<select>` element using the array or object obtained by evaluating the                            // 25924
 * `ngOptions` comprehension expression.                                                                               // 25925
 *                                                                                                                     // 25926
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a                    // 25927
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and                             // 25928
 * increasing speed by not creating a new scope for each repeated instance, as well as providing                       // 25929
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 25930
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound                    // 25931
 *  to a non-string value. This is because an option element can only be bound to string values at                     // 25932
 * present.                                                                                                            // 25933
 *                                                                                                                     // 25934
 * When an item in the `<select>` menu is selected, the array element or object property                               // 25935
 * represented by the selected option will be bound to the model identified by the `ngModel`                           // 25936
 * directive.                                                                                                          // 25937
 *                                                                                                                     // 25938
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 25939
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"                // 25940
 * option. See example below for demonstration.                                                                        // 25941
 *                                                                                                                     // 25942
 * ## Complex Models (objects or collections)                                                                          // 25943
 *                                                                                                                     // 25944
 * **Note:** By default, `ngModel` watches the model by reference, not value. This is important when                   // 25945
 * binding any input directive to a model that is an object or a collection.                                           // 25946
 *                                                                                                                     // 25947
 * Since this is a common situation for `ngOptions` the directive additionally watches the model using                 // 25948
 * `$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in             // 25949
 * the options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual           // 25950
 * object/collection has not changed identity but only a property on the object or an item in the collection           // 25951
 * changes.                                                                                                            // 25952
 *                                                                                                                     // 25953
 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
 * if the model is an array). This means that changing a property deeper inside the object/collection that the         // 25955
 * first level will not trigger a re-rendering.                                                                        // 25956
 *                                                                                                                     // 25957
 *                                                                                                                     // 25958
 * ## `select` **`as`**                                                                                                // 25959
 *                                                                                                                     // 25960
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but                           // 25961
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)          // 25962
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression       // 25963
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.              // 25964
 *                                                                                                                     // 25965
 *                                                                                                                     // 25966
 * ### `select` **`as`** and **`track by`**                                                                            // 25967
 *                                                                                                                     // 25968
 * <div class="alert alert-warning">                                                                                   // 25969
 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.     // 25970
 * </div>                                                                                                              // 25971
 *                                                                                                                     // 25972
 * Consider the following example:                                                                                     // 25973
 *                                                                                                                     // 25974
 * ```html                                                                                                             // 25975
 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected"></select>   // 25976
 * ```                                                                                                                 // 25977
 *                                                                                                                     // 25978
 * ```js                                                                                                               // 25979
 * $scope.values = [{                                                                                                  // 25980
 *   id: 1,                                                                                                            // 25981
 *   label: 'aLabel',                                                                                                  // 25982
 *   subItem: { name: 'aSubItem' }                                                                                     // 25983
 * }, {                                                                                                                // 25984
 *   id: 2,                                                                                                            // 25985
 *   label: 'bLabel',                                                                                                  // 25986
 *   subItem: { name: 'bSubItem' }                                                                                     // 25987
 * }];                                                                                                                 // 25988
 *                                                                                                                     // 25989
 * $scope.selected = { name: 'aSubItem' };                                                                             // 25990
 * ```                                                                                                                 // 25991
 *                                                                                                                     // 25992
 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element        // 25993
 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the              // 25994
 * following:                                                                                                          // 25995
 *                                                                                                                     // 25996
 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`                                      // 25997
 * 2. Apply **`track by`** to the already selected value in `ngModel`.                                                 // 25998
 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected                     // 25999
 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to                     // 26000
 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not                      // 26001
 *    selected" option.                                                                                                // 26002
 *                                                                                                                     // 26003
 *                                                                                                                     // 26004
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 26005
 * @param {string=} name Property name of the form under which the control is published.                               // 26006
 * @param {string=} required The control is considered valid only if value is entered.                                 // 26007
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 26008
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 26009
 *    `required` when you want to data-bind to the `required` attribute.                                               // 26010
 * @param {comprehension_expression=} ngOptions in one of the following forms:                                         // 26011
 *                                                                                                                     // 26012
 *   * for array data sources:                                                                                         // 26013
 *     * `label` **`for`** `value` **`in`** `array`                                                                    // 26014
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`                                                  // 26015
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`                                             // 26016
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`                                       // 26017
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`                  // 26018
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`            // 26019
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`                   // 26020
 *        (for including a filter with `track by`)                                                                     // 26021
 *   * for object data sources:                                                                                        // 26022
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                                   // 26023
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                 // 26024
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`                             // 26025
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`                       // 26026
 *     * `select` **`as`** `label` **`group by`** `group`                                                              // 26027
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 26028
 *     * `select` **`as`** `label` **`disable when`** `disable`                                                        // 26029
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 26030
 *                                                                                                                     // 26031
 * Where:                                                                                                              // 26032
 *                                                                                                                     // 26033
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.                         // 26034
 *   * `value`: local variable which will refer to each item in the `array` or each property value                     // 26035
 *      of `object` during iteration.                                                                                  // 26036
 *   * `key`: local variable which will refer to a property name in `object` during iteration.                         // 26037
 *   * `label`: The result of this expression will be the label for `<option>` element. The                            // 26038
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).                        // 26039
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`                     // 26040
 *      element. If not specified, `select` expression will default to `value`.                                        // 26041
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`                     // 26042
 *      DOM element.                                                                                                   // 26043
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`                        // 26044
 *      element. Return `true` to disable.                                                                             // 26045
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be                  // 26046
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the                       // 26047
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved                              // 26048
 *      even when the options are recreated (e.g. reloaded from the server).                                           // 26049
 *                                                                                                                     // 26050
 * @example                                                                                                            // 26051
    <example module="selectExample">                                                                                   // 26052
      <file name="index.html">                                                                                         // 26053
        <script>                                                                                                       // 26054
        angular.module('selectExample', [])                                                                            // 26055
          .controller('ExampleController', ['$scope', function($scope) {                                               // 26056
            $scope.colors = [                                                                                          // 26057
              {name:'black', shade:'dark'},                                                                            // 26058
              {name:'white', shade:'light', notAnOption: true},                                                        // 26059
              {name:'red', shade:'dark'},                                                                              // 26060
              {name:'blue', shade:'dark', notAnOption: true},                                                          // 26061
              {name:'yellow', shade:'light', notAnOption: false}                                                       // 26062
            ];                                                                                                         // 26063
            $scope.myColor = $scope.colors[2]; // red                                                                  // 26064
          }]);                                                                                                         // 26065
        </script>                                                                                                      // 26066
        <div ng-controller="ExampleController">                                                                        // 26067
          <ul>                                                                                                         // 26068
            <li ng-repeat="color in colors">                                                                           // 26069
              <label>Name: <input ng-model="color.name"></label>                                                       // 26070
              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>                            // 26071
              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>                               // 26072
            </li>                                                                                                      // 26073
            <li>                                                                                                       // 26074
              <button ng-click="colors.push({})">add</button>                                                          // 26075
            </li>                                                                                                      // 26076
          </ul>                                                                                                        // 26077
          <hr/>                                                                                                        // 26078
          <label>Color (null not allowed):                                                                             // 26079
            <select ng-model="myColor" ng-options="color.name for color in colors"></select>                           // 26080
          </label><br/>                                                                                                // 26081
          <label>Color (null allowed):                                                                                 // 26082
          <span  class="nullable">                                                                                     // 26083
            <select ng-model="myColor" ng-options="color.name for color in colors">                                    // 26084
              <option value="">-- choose color --</option>                                                             // 26085
            </select>                                                                                                  // 26086
          </span></label><br/>                                                                                         // 26087
                                                                                                                       // 26088
          <label>Color grouped by shade:                                                                               // 26089
            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">               // 26090
            </select>                                                                                                  // 26091
          </label><br/>                                                                                                // 26092
                                                                                                                       // 26093
          <label>Color grouped by shade, with some disabled:                                                           // 26094
            <select ng-model="myColor"                                                                                 // 26095
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">     // 26096
            </select>                                                                                                  // 26097
          </label><br/>                                                                                                // 26098
                                                                                                                       // 26099
                                                                                                                       // 26100
                                                                                                                       // 26101
          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.                   // 26102
          <br/>                                                                                                        // 26103
          <hr/>                                                                                                        // 26104
          Currently selected: {{ {selected_color:myColor} }}                                                           // 26105
          <div style="border:solid 1px black; height:20px"                                                             // 26106
               ng-style="{'background-color':myColor.name}">                                                           // 26107
          </div>                                                                                                       // 26108
        </div>                                                                                                         // 26109
      </file>                                                                                                          // 26110
      <file name="protractor.js" type="protractor">                                                                    // 26111
         it('should check ng-options', function() {                                                                    // 26112
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');                           // 26113
           element.all(by.model('myColor')).first().click();                                                           // 26114
           element.all(by.css('select[ng-model="myColor"] option')).first().click();                                   // 26115
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');                         // 26116
           element(by.css('.nullable select[ng-model="myColor"]')).click();                                            // 26117
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();                         // 26118
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');                          // 26119
         });                                                                                                           // 26120
      </file>                                                                                                          // 26121
    </example>                                                                                                         // 26122
 */                                                                                                                    // 26123
                                                                                                                       // 26124
// jshint maxlen: false                                                                                                // 26125
//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
                        // 1: value expression (valueFn)                                                               // 26128
                        // 2: label expression (displayFn)                                                             // 26129
                        // 3: group by expression (groupByFn)                                                          // 26130
                        // 4: disable when expression (disableWhenFn)                                                  // 26131
                        // 5: array item variable name                                                                 // 26132
                        // 6: object item key variable name                                                            // 26133
                        // 7: object item value variable name                                                          // 26134
                        // 8: collection expression                                                                    // 26135
                        // 9: track by expression                                                                      // 26136
// jshint maxlen: 100                                                                                                  // 26137
                                                                                                                       // 26138
                                                                                                                       // 26139
var ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {                                           // 26140
                                                                                                                       // 26141
  function parseOptionsExpression(optionsExp, selectElement, scope) {                                                  // 26142
                                                                                                                       // 26143
    var match = optionsExp.match(NG_OPTIONS_REGEXP);                                                                   // 26144
    if (!(match)) {                                                                                                    // 26145
      throw ngOptionsMinErr('iexp',                                                                                    // 26146
        "Expected expression in form of " +                                                                            // 26147
        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +                                              // 26148
        " but got '{0}'. Element: {1}",                                                                                // 26149
        optionsExp, startingTag(selectElement));                                                                       // 26150
    }                                                                                                                  // 26151
                                                                                                                       // 26152
    // Extract the parts from the ngOptions expression                                                                 // 26153
                                                                                                                       // 26154
    // The variable name for the value of the item in the collection                                                   // 26155
    var valueName = match[5] || match[7];                                                                              // 26156
    // The variable name for the key of the item in the collection                                                     // 26157
    var keyName = match[6];                                                                                            // 26158
                                                                                                                       // 26159
    // An expression that generates the viewValue for an option if there is a label expression                         // 26160
    var selectAs = / as /.test(match[0]) && match[1];                                                                  // 26161
    // An expression that is used to track the id of each object in the options collection                             // 26162
    var trackBy = match[9];                                                                                            // 26163
    // An expression that generates the viewValue for an option if there is no label expression                        // 26164
    var valueFn = $parse(match[2] ? match[1] : valueName);                                                             // 26165
    var selectAsFn = selectAs && $parse(selectAs);                                                                     // 26166
    var viewValueFn = selectAsFn || valueFn;                                                                           // 26167
    var trackByFn = trackBy && $parse(trackBy);                                                                        // 26168
                                                                                                                       // 26169
    // Get the value by which we are going to track the option                                                         // 26170
    // if we have a trackFn then use that (passing scope and locals)                                                   // 26171
    // otherwise just hash the given viewValue                                                                         // 26172
    var getTrackByValueFn = trackBy ?                                                                                  // 26173
                              function(value, locals) { return trackByFn(scope, locals); } :                           // 26174
                              function getHashOfValue(value) { return hashKey(value); };                               // 26175
    var getTrackByValue = function(value, key) {                                                                       // 26176
      return getTrackByValueFn(value, getLocals(value, key));                                                          // 26177
    };                                                                                                                 // 26178
                                                                                                                       // 26179
    var displayFn = $parse(match[2] || match[1]);                                                                      // 26180
    var groupByFn = $parse(match[3] || '');                                                                            // 26181
    var disableWhenFn = $parse(match[4] || '');                                                                        // 26182
    var valuesFn = $parse(match[8]);                                                                                   // 26183
                                                                                                                       // 26184
    var locals = {};                                                                                                   // 26185
    var getLocals = keyName ? function(value, key) {                                                                   // 26186
      locals[keyName] = key;                                                                                           // 26187
      locals[valueName] = value;                                                                                       // 26188
      return locals;                                                                                                   // 26189
    } : function(value) {                                                                                              // 26190
      locals[valueName] = value;                                                                                       // 26191
      return locals;                                                                                                   // 26192
    };                                                                                                                 // 26193
                                                                                                                       // 26194
                                                                                                                       // 26195
    function Option(selectValue, viewValue, label, group, disabled) {                                                  // 26196
      this.selectValue = selectValue;                                                                                  // 26197
      this.viewValue = viewValue;                                                                                      // 26198
      this.label = label;                                                                                              // 26199
      this.group = group;                                                                                              // 26200
      this.disabled = disabled;                                                                                        // 26201
    }                                                                                                                  // 26202
                                                                                                                       // 26203
    function getOptionValuesKeys(optionValues) {                                                                       // 26204
      var optionValuesKeys;                                                                                            // 26205
                                                                                                                       // 26206
      if (!keyName && isArrayLike(optionValues)) {                                                                     // 26207
        optionValuesKeys = optionValues;                                                                               // 26208
      } else {                                                                                                         // 26209
        // if object, extract keys, in enumeration order, unsorted                                                     // 26210
        optionValuesKeys = [];                                                                                         // 26211
        for (var itemKey in optionValues) {                                                                            // 26212
          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {                                     // 26213
            optionValuesKeys.push(itemKey);                                                                            // 26214
          }                                                                                                            // 26215
        }                                                                                                              // 26216
      }                                                                                                                // 26217
      return optionValuesKeys;                                                                                         // 26218
    }                                                                                                                  // 26219
                                                                                                                       // 26220
    return {                                                                                                           // 26221
      trackBy: trackBy,                                                                                                // 26222
      getTrackByValue: getTrackByValue,                                                                                // 26223
      getWatchables: $parse(valuesFn, function(optionValues) {                                                         // 26224
        // Create a collection of things that we would like to watch (watchedArray)                                    // 26225
        // so that they can all be watched using a single $watchCollection                                             // 26226
        // that only runs the handler once if anything changes                                                         // 26227
        var watchedArray = [];                                                                                         // 26228
        optionValues = optionValues || [];                                                                             // 26229
                                                                                                                       // 26230
        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26231
        var optionValuesLength = optionValuesKeys.length;                                                              // 26232
        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26233
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26234
          var value = optionValues[key];                                                                               // 26235
                                                                                                                       // 26236
          var locals = getLocals(optionValues[key], key);                                                              // 26237
          var selectValue = getTrackByValueFn(optionValues[key], locals);                                              // 26238
          watchedArray.push(selectValue);                                                                              // 26239
                                                                                                                       // 26240
          // Only need to watch the displayFn if there is a specific label expression                                  // 26241
          if (match[2] || match[1]) {                                                                                  // 26242
            var label = displayFn(scope, locals);                                                                      // 26243
            watchedArray.push(label);                                                                                  // 26244
          }                                                                                                            // 26245
                                                                                                                       // 26246
          // Only need to watch the disableWhenFn if there is a specific disable expression                            // 26247
          if (match[4]) {                                                                                              // 26248
            var disableWhen = disableWhenFn(scope, locals);                                                            // 26249
            watchedArray.push(disableWhen);                                                                            // 26250
          }                                                                                                            // 26251
        }                                                                                                              // 26252
        return watchedArray;                                                                                           // 26253
      }),                                                                                                              // 26254
                                                                                                                       // 26255
      getOptions: function() {                                                                                         // 26256
                                                                                                                       // 26257
        var optionItems = [];                                                                                          // 26258
        var selectValueMap = {};                                                                                       // 26259
                                                                                                                       // 26260
        // The option values were already computed in the `getWatchables` fn,                                          // 26261
        // which must have been called to trigger `getOptions`                                                         // 26262
        var optionValues = valuesFn(scope) || [];                                                                      // 26263
        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26264
        var optionValuesLength = optionValuesKeys.length;                                                              // 26265
                                                                                                                       // 26266
        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26267
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26268
          var value = optionValues[key];                                                                               // 26269
          var locals = getLocals(value, key);                                                                          // 26270
          var viewValue = viewValueFn(scope, locals);                                                                  // 26271
          var selectValue = getTrackByValueFn(viewValue, locals);                                                      // 26272
          var label = displayFn(scope, locals);                                                                        // 26273
          var group = groupByFn(scope, locals);                                                                        // 26274
          var disabled = disableWhenFn(scope, locals);                                                                 // 26275
          var optionItem = new Option(selectValue, viewValue, label, group, disabled);                                 // 26276
                                                                                                                       // 26277
          optionItems.push(optionItem);                                                                                // 26278
          selectValueMap[selectValue] = optionItem;                                                                    // 26279
        }                                                                                                              // 26280
                                                                                                                       // 26281
        return {                                                                                                       // 26282
          items: optionItems,                                                                                          // 26283
          selectValueMap: selectValueMap,                                                                              // 26284
          getOptionFromViewValue: function(value) {                                                                    // 26285
            return selectValueMap[getTrackByValue(value)];                                                             // 26286
          },                                                                                                           // 26287
          getViewValueFromOption: function(option) {                                                                   // 26288
            // If the viewValue could be an object that may be mutated by the application,                             // 26289
            // we need to make a copy and not return the reference to the value on the option.                         // 26290
            return trackBy ? angular.copy(option.viewValue) : option.viewValue;                                        // 26291
          }                                                                                                            // 26292
        };                                                                                                             // 26293
      }                                                                                                                // 26294
    };                                                                                                                 // 26295
  }                                                                                                                    // 26296
                                                                                                                       // 26297
                                                                                                                       // 26298
  // we can't just jqLite('<option>') since jqLite is not smart enough                                                 // 26299
  // to create it in <select> and IE barfs otherwise.                                                                  // 26300
  var optionTemplate = document.createElement('option'),                                                               // 26301
      optGroupTemplate = document.createElement('optgroup');                                                           // 26302
                                                                                                                       // 26303
  return {                                                                                                             // 26304
    restrict: 'A',                                                                                                     // 26305
    terminal: true,                                                                                                    // 26306
    require: ['select', '?ngModel'],                                                                                   // 26307
    link: function(scope, selectElement, attr, ctrls) {                                                                // 26308
                                                                                                                       // 26309
      // if ngModel is not defined, we don't need to do anything                                                       // 26310
      var ngModelCtrl = ctrls[1];                                                                                      // 26311
      if (!ngModelCtrl) return;                                                                                        // 26312
                                                                                                                       // 26313
      var selectCtrl = ctrls[0];                                                                                       // 26314
      var multiple = attr.multiple;                                                                                    // 26315
                                                                                                                       // 26316
      // The emptyOption allows the application developer to provide their own custom "empty"                          // 26317
      // option when the viewValue does not match any of the option values.                                            // 26318
      var emptyOption;                                                                                                 // 26319
      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {                        // 26320
        if (children[i].value === '') {                                                                                // 26321
          emptyOption = children.eq(i);                                                                                // 26322
          break;                                                                                                       // 26323
        }                                                                                                              // 26324
      }                                                                                                                // 26325
                                                                                                                       // 26326
      var providedEmptyOption = !!emptyOption;                                                                         // 26327
                                                                                                                       // 26328
      var unknownOption = jqLite(optionTemplate.cloneNode(false));                                                     // 26329
      unknownOption.val('?');                                                                                          // 26330
                                                                                                                       // 26331
      var options;                                                                                                     // 26332
      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);                                    // 26333
                                                                                                                       // 26334
                                                                                                                       // 26335
      var renderEmptyOption = function() {                                                                             // 26336
        if (!providedEmptyOption) {                                                                                    // 26337
          selectElement.prepend(emptyOption);                                                                          // 26338
        }                                                                                                              // 26339
        selectElement.val('');                                                                                         // 26340
        emptyOption.prop('selected', true); // needed for IE                                                           // 26341
        emptyOption.attr('selected', true);                                                                            // 26342
      };                                                                                                               // 26343
                                                                                                                       // 26344
      var removeEmptyOption = function() {                                                                             // 26345
        if (!providedEmptyOption) {                                                                                    // 26346
          emptyOption.remove();                                                                                        // 26347
        }                                                                                                              // 26348
      };                                                                                                               // 26349
                                                                                                                       // 26350
                                                                                                                       // 26351
      var renderUnknownOption = function() {                                                                           // 26352
        selectElement.prepend(unknownOption);                                                                          // 26353
        selectElement.val('?');                                                                                        // 26354
        unknownOption.prop('selected', true); // needed for IE                                                         // 26355
        unknownOption.attr('selected', true);                                                                          // 26356
      };                                                                                                               // 26357
                                                                                                                       // 26358
      var removeUnknownOption = function() {                                                                           // 26359
        unknownOption.remove();                                                                                        // 26360
      };                                                                                                               // 26361
                                                                                                                       // 26362
                                                                                                                       // 26363
      // Update the controller methods for multiple selectable options                                                 // 26364
      if (!multiple) {                                                                                                 // 26365
                                                                                                                       // 26366
        selectCtrl.writeValue = function writeNgOptionsValue(value) {                                                  // 26367
          var option = options.getOptionFromViewValue(value);                                                          // 26368
                                                                                                                       // 26369
          if (option && !option.disabled) {                                                                            // 26370
            if (selectElement[0].value !== option.selectValue) {                                                       // 26371
              removeUnknownOption();                                                                                   // 26372
              removeEmptyOption();                                                                                     // 26373
                                                                                                                       // 26374
              selectElement[0].value = option.selectValue;                                                             // 26375
              option.element.selected = true;                                                                          // 26376
              option.element.setAttribute('selected', 'selected');                                                     // 26377
            }                                                                                                          // 26378
          } else {                                                                                                     // 26379
            if (value === null || providedEmptyOption) {                                                               // 26380
              removeUnknownOption();                                                                                   // 26381
              renderEmptyOption();                                                                                     // 26382
            } else {                                                                                                   // 26383
              removeEmptyOption();                                                                                     // 26384
              renderUnknownOption();                                                                                   // 26385
            }                                                                                                          // 26386
          }                                                                                                            // 26387
        };                                                                                                             // 26388
                                                                                                                       // 26389
        selectCtrl.readValue = function readNgOptionsValue() {                                                         // 26390
                                                                                                                       // 26391
          var selectedOption = options.selectValueMap[selectElement.val()];                                            // 26392
                                                                                                                       // 26393
          if (selectedOption && !selectedOption.disabled) {                                                            // 26394
            removeEmptyOption();                                                                                       // 26395
            removeUnknownOption();                                                                                     // 26396
            return options.getViewValueFromOption(selectedOption);                                                     // 26397
          }                                                                                                            // 26398
          return null;                                                                                                 // 26399
        };                                                                                                             // 26400
                                                                                                                       // 26401
        // If we are using `track by` then we must watch the tracked value on the model                                // 26402
        // since ngModel only watches for object identity change                                                       // 26403
        if (ngOptions.trackBy) {                                                                                       // 26404
          scope.$watch(                                                                                                // 26405
            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },                                  // 26406
            function() { ngModelCtrl.$render(); }                                                                      // 26407
          );                                                                                                           // 26408
        }                                                                                                              // 26409
                                                                                                                       // 26410
      } else {                                                                                                         // 26411
                                                                                                                       // 26412
        ngModelCtrl.$isEmpty = function(value) {                                                                       // 26413
          return !value || value.length === 0;                                                                         // 26414
        };                                                                                                             // 26415
                                                                                                                       // 26416
                                                                                                                       // 26417
        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {                                               // 26418
          options.items.forEach(function(option) {                                                                     // 26419
            option.element.selected = false;                                                                           // 26420
          });                                                                                                          // 26421
                                                                                                                       // 26422
          if (value) {                                                                                                 // 26423
            value.forEach(function(item) {                                                                             // 26424
              var option = options.getOptionFromViewValue(item);                                                       // 26425
              if (option && !option.disabled) option.element.selected = true;                                          // 26426
            });                                                                                                        // 26427
          }                                                                                                            // 26428
        };                                                                                                             // 26429
                                                                                                                       // 26430
                                                                                                                       // 26431
        selectCtrl.readValue = function readNgOptionsMultiple() {                                                      // 26432
          var selectedValues = selectElement.val() || [],                                                              // 26433
              selections = [];                                                                                         // 26434
                                                                                                                       // 26435
          forEach(selectedValues, function(value) {                                                                    // 26436
            var option = options.selectValueMap[value];                                                                // 26437
            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));                   // 26438
          });                                                                                                          // 26439
                                                                                                                       // 26440
          return selections;                                                                                           // 26441
        };                                                                                                             // 26442
                                                                                                                       // 26443
        // If we are using `track by` then we must watch these tracked values on the model                             // 26444
        // since ngModel only watches for object identity change                                                       // 26445
        if (ngOptions.trackBy) {                                                                                       // 26446
                                                                                                                       // 26447
          scope.$watchCollection(function() {                                                                          // 26448
            if (isArray(ngModelCtrl.$viewValue)) {                                                                     // 26449
              return ngModelCtrl.$viewValue.map(function(value) {                                                      // 26450
                return ngOptions.getTrackByValue(value);                                                               // 26451
              });                                                                                                      // 26452
            }                                                                                                          // 26453
          }, function() {                                                                                              // 26454
            ngModelCtrl.$render();                                                                                     // 26455
          });                                                                                                          // 26456
                                                                                                                       // 26457
        }                                                                                                              // 26458
      }                                                                                                                // 26459
                                                                                                                       // 26460
                                                                                                                       // 26461
      if (providedEmptyOption) {                                                                                       // 26462
                                                                                                                       // 26463
        // we need to remove it before calling selectElement.empty() because otherwise IE will                         // 26464
        // remove the label from the element. wtf?                                                                     // 26465
        emptyOption.remove();                                                                                          // 26466
                                                                                                                       // 26467
        // compile the element since there might be bindings in it                                                     // 26468
        $compile(emptyOption)(scope);                                                                                  // 26469
                                                                                                                       // 26470
        // remove the class, which is added automatically because we recompile the element and it                      // 26471
        // becomes the compilation root                                                                                // 26472
        emptyOption.removeClass('ng-scope');                                                                           // 26473
      } else {                                                                                                         // 26474
        emptyOption = jqLite(optionTemplate.cloneNode(false));                                                         // 26475
      }                                                                                                                // 26476
                                                                                                                       // 26477
      // We need to do this here to ensure that the options object is defined                                          // 26478
      // when we first hit it in writeNgOptionsValue                                                                   // 26479
      updateOptions();                                                                                                 // 26480
                                                                                                                       // 26481
      // We will re-render the option elements if the option values or labels change                                   // 26482
      scope.$watchCollection(ngOptions.getWatchables, updateOptions);                                                  // 26483
                                                                                                                       // 26484
      // ------------------------------------------------------------------ //                                         // 26485
                                                                                                                       // 26486
                                                                                                                       // 26487
      function updateOptionElement(option, element) {                                                                  // 26488
        option.element = element;                                                                                      // 26489
        element.disabled = option.disabled;                                                                            // 26490
        if (option.value !== element.value) element.value = option.selectValue;                                        // 26491
        if (option.label !== element.label) {                                                                          // 26492
          element.label = option.label;                                                                                // 26493
          element.textContent = option.label;                                                                          // 26494
        }                                                                                                              // 26495
      }                                                                                                                // 26496
                                                                                                                       // 26497
      function addOrReuseElement(parent, current, type, templateElement) {                                             // 26498
        var element;                                                                                                   // 26499
        // Check whether we can reuse the next element                                                                 // 26500
        if (current && lowercase(current.nodeName) === type) {                                                         // 26501
          // The next element is the right type so reuse it                                                            // 26502
          element = current;                                                                                           // 26503
        } else {                                                                                                       // 26504
          // The next element is not the right type so create a new one                                                // 26505
          element = templateElement.cloneNode(false);                                                                  // 26506
          if (!current) {                                                                                              // 26507
            // There are no more elements so just append it to the select                                              // 26508
            parent.appendChild(element);                                                                               // 26509
          } else {                                                                                                     // 26510
            // The next element is not a group so insert the new one                                                   // 26511
            parent.insertBefore(element, current);                                                                     // 26512
          }                                                                                                            // 26513
        }                                                                                                              // 26514
        return element;                                                                                                // 26515
      }                                                                                                                // 26516
                                                                                                                       // 26517
                                                                                                                       // 26518
      function removeExcessElements(current) {                                                                         // 26519
        var next;                                                                                                      // 26520
        while (current) {                                                                                              // 26521
          next = current.nextSibling;                                                                                  // 26522
          jqLiteRemove(current);                                                                                       // 26523
          current = next;                                                                                              // 26524
        }                                                                                                              // 26525
      }                                                                                                                // 26526
                                                                                                                       // 26527
                                                                                                                       // 26528
      function skipEmptyAndUnknownOptions(current) {                                                                   // 26529
        var emptyOption_ = emptyOption && emptyOption[0];                                                              // 26530
        var unknownOption_ = unknownOption && unknownOption[0];                                                        // 26531
                                                                                                                       // 26532
        if (emptyOption_ || unknownOption_) {                                                                          // 26533
          while (current &&                                                                                            // 26534
                (current === emptyOption_ ||                                                                           // 26535
                current === unknownOption_)) {                                                                         // 26536
            current = current.nextSibling;                                                                             // 26537
          }                                                                                                            // 26538
        }                                                                                                              // 26539
        return current;                                                                                                // 26540
      }                                                                                                                // 26541
                                                                                                                       // 26542
                                                                                                                       // 26543
      function updateOptions() {                                                                                       // 26544
                                                                                                                       // 26545
        var previousValue = options && selectCtrl.readValue();                                                         // 26546
                                                                                                                       // 26547
        options = ngOptions.getOptions();                                                                              // 26548
                                                                                                                       // 26549
        var groupMap = {};                                                                                             // 26550
        var currentElement = selectElement[0].firstChild;                                                              // 26551
                                                                                                                       // 26552
        // Ensure that the empty option is always there if it was explicitly provided                                  // 26553
        if (providedEmptyOption) {                                                                                     // 26554
          selectElement.prepend(emptyOption);                                                                          // 26555
        }                                                                                                              // 26556
                                                                                                                       // 26557
        currentElement = skipEmptyAndUnknownOptions(currentElement);                                                   // 26558
                                                                                                                       // 26559
        options.items.forEach(function updateOption(option) {                                                          // 26560
          var group;                                                                                                   // 26561
          var groupElement;                                                                                            // 26562
          var optionElement;                                                                                           // 26563
                                                                                                                       // 26564
          if (option.group) {                                                                                          // 26565
                                                                                                                       // 26566
            // This option is to live in a group                                                                       // 26567
            // See if we have already created this group                                                               // 26568
            group = groupMap[option.group];                                                                            // 26569
                                                                                                                       // 26570
            if (!group) {                                                                                              // 26571
                                                                                                                       // 26572
              // We have not already created this group                                                                // 26573
              groupElement = addOrReuseElement(selectElement[0],                                                       // 26574
                                               currentElement,                                                         // 26575
                                               'optgroup',                                                             // 26576
                                               optGroupTemplate);                                                      // 26577
              // Move to the next element                                                                              // 26578
              currentElement = groupElement.nextSibling;                                                               // 26579
                                                                                                                       // 26580
              // Update the label on the group element                                                                 // 26581
              groupElement.label = option.group;                                                                       // 26582
                                                                                                                       // 26583
              // Store it for use later                                                                                // 26584
              group = groupMap[option.group] = {                                                                       // 26585
                groupElement: groupElement,                                                                            // 26586
                currentOptionElement: groupElement.firstChild                                                          // 26587
              };                                                                                                       // 26588
                                                                                                                       // 26589
            }                                                                                                          // 26590
                                                                                                                       // 26591
            // So now we have a group for this option we add the option to the group                                   // 26592
            optionElement = addOrReuseElement(group.groupElement,                                                      // 26593
                                              group.currentOptionElement,                                              // 26594
                                              'option',                                                                // 26595
                                              optionTemplate);                                                         // 26596
            updateOptionElement(option, optionElement);                                                                // 26597
            // Move to the next element                                                                                // 26598
            group.currentOptionElement = optionElement.nextSibling;                                                    // 26599
                                                                                                                       // 26600
          } else {                                                                                                     // 26601
                                                                                                                       // 26602
            // This option is not in a group                                                                           // 26603
            optionElement = addOrReuseElement(selectElement[0],                                                        // 26604
                                              currentElement,                                                          // 26605
                                              'option',                                                                // 26606
                                              optionTemplate);                                                         // 26607
            updateOptionElement(option, optionElement);                                                                // 26608
            // Move to the next element                                                                                // 26609
            currentElement = optionElement.nextSibling;                                                                // 26610
          }                                                                                                            // 26611
        });                                                                                                            // 26612
                                                                                                                       // 26613
                                                                                                                       // 26614
        // Now remove all excess options and group                                                                     // 26615
        Object.keys(groupMap).forEach(function(key) {                                                                  // 26616
          removeExcessElements(groupMap[key].currentOptionElement);                                                    // 26617
        });                                                                                                            // 26618
        removeExcessElements(currentElement);                                                                          // 26619
                                                                                                                       // 26620
        ngModelCtrl.$render();                                                                                         // 26621
                                                                                                                       // 26622
        // Check to see if the value has changed due to the update to the options                                      // 26623
        if (!ngModelCtrl.$isEmpty(previousValue)) {                                                                    // 26624
          var nextValue = selectCtrl.readValue();                                                                      // 26625
          if (ngOptions.trackBy ? !equals(previousValue, nextValue) : previousValue !== nextValue) {                   // 26626
            ngModelCtrl.$setViewValue(nextValue);                                                                      // 26627
            ngModelCtrl.$render();                                                                                     // 26628
          }                                                                                                            // 26629
        }                                                                                                              // 26630
                                                                                                                       // 26631
      }                                                                                                                // 26632
                                                                                                                       // 26633
    }                                                                                                                  // 26634
  };                                                                                                                   // 26635
}];                                                                                                                    // 26636
                                                                                                                       // 26637
/**                                                                                                                    // 26638
 * @ngdoc directive                                                                                                    // 26639
 * @name ngPluralize                                                                                                   // 26640
 * @restrict EA                                                                                                        // 26641
 *                                                                                                                     // 26642
 * @description                                                                                                        // 26643
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.                          // 26644
 * These rules are bundled with angular.js, but can be overridden                                                      // 26645
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive                                // 26646
 * by specifying the mappings between                                                                                  // 26647
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26648
 * and the strings to be displayed.                                                                                    // 26649
 *                                                                                                                     // 26650
 * # Plural categories and explicit number rules                                                                       // 26651
 * There are two                                                                                                       // 26652
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26653
 * in Angular's default en-US locale: "one" and "other".                                                               // 26654
 *                                                                                                                     // 26655
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match                     // 26656
 * any number that is not 1), an explicit number rule can only match one number. For example, the                      // 26657
 * explicit number rule for "3" matches the number 3. There are examples of plural categories                          // 26658
 * and explicit number rules throughout the rest of this documentation.                                                // 26659
 *                                                                                                                     // 26660
 * # Configuring ngPluralize                                                                                           // 26661
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.                                            // 26662
 * You can also provide an optional attribute, `offset`.                                                               // 26663
 *                                                                                                                     // 26664
 * The value of the `count` attribute can be either a string or an {@link guide/expression                             // 26665
 * Angular expression}; these are evaluated on the current scope for its bound value.                                  // 26666
 *                                                                                                                     // 26667
 * The `when` attribute specifies the mappings between plural categories and the actual                                // 26668
 * string to be displayed. The value of the attribute should be a JSON object.                                         // 26669
 *                                                                                                                     // 26670
 * The following example shows how to configure ngPluralize:                                                           // 26671
 *                                                                                                                     // 26672
 * ```html                                                                                                             // 26673
 * <ng-pluralize count="personCount"                                                                                   // 26674
                 when="{'0': 'Nobody is viewing.',                                                                     // 26675
 *                      'one': '1 person is viewing.',                                                                 // 26676
 *                      'other': '{} people are viewing.'}">                                                           // 26677
 * </ng-pluralize>                                                                                                     // 26678
 *```                                                                                                                  // 26679
 *                                                                                                                     // 26680
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not                                // 26681
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"                            // 26682
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for                          // 26683
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can                          // 26684
 * show "a dozen people are viewing".                                                                                  // 26685
 *                                                                                                                     // 26686
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted                 // 26687
 * into pluralized strings. In the previous example, Angular will replace `{}` with                                    // 26688
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder                             // 26689
 * for <span ng-non-bindable>{{numberExpression}}</span>.                                                              // 26690
 *                                                                                                                     // 26691
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.                 // 26692
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.  // 26693
 *                                                                                                                     // 26694
 * # Configuring ngPluralize with offset                                                                               // 26695
 * The `offset` attribute allows further customization of pluralized text, which can result in                         // 26696
 * a better user experience. For example, instead of the message "4 people are viewing this document",                 // 26697
 * you might display "John, Kate and 2 others are viewing this document".                                              // 26698
 * The offset attribute allows you to offset a number by any desired value.                                            // 26699
 * Let's take a look at an example:                                                                                    // 26700
 *                                                                                                                     // 26701
 * ```html                                                                                                             // 26702
 * <ng-pluralize count="personCount" offset=2                                                                          // 26703
 *               when="{'0': 'Nobody is viewing.',                                                                     // 26704
 *                      '1': '{{person1}} is viewing.',                                                                // 26705
 *                      '2': '{{person1}} and {{person2}} are viewing.',                                               // 26706
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',                           // 26707
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                        // 26708
 * </ng-pluralize>                                                                                                     // 26709
 * ```                                                                                                                 // 26710
 *                                                                                                                     // 26711
 * Notice that we are still using two plural categories(one, other), but we added                                      // 26712
 * three explicit number rules 0, 1 and 2.                                                                             // 26713
 * When one person, perhaps John, views the document, "John is viewing" will be shown.                                 // 26714
 * When three people view the document, no explicit number rule is found, so                                           // 26715
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.                                    // 26716
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"                    // 26717
 * is shown.                                                                                                           // 26718
 *                                                                                                                     // 26719
 * Note that when you specify offsets, you must provide explicit number rules for                                      // 26720
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,                              // 26721
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for                  // 26722
 * plural categories "one" and "other".                                                                                // 26723
 *                                                                                                                     // 26724
 * @param {string|expression} count The variable to be bound to.                                                       // 26725
 * @param {string} when The mapping between plural category to its corresponding strings.                              // 26726
 * @param {number=} offset Offset to deduct from the total number.                                                     // 26727
 *                                                                                                                     // 26728
 * @example                                                                                                            // 26729
    <example module="pluralizeExample">                                                                                // 26730
      <file name="index.html">                                                                                         // 26731
        <script>                                                                                                       // 26732
          angular.module('pluralizeExample', [])                                                                       // 26733
            .controller('ExampleController', ['$scope', function($scope) {                                             // 26734
              $scope.person1 = 'Igor';                                                                                 // 26735
              $scope.person2 = 'Misko';                                                                                // 26736
              $scope.personCount = 1;                                                                                  // 26737
            }]);                                                                                                       // 26738
        </script>                                                                                                      // 26739
        <div ng-controller="ExampleController">                                                                        // 26740
          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>                           // 26741
          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>                          // 26742
          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>                  // 26743
                                                                                                                       // 26744
          <!--- Example with simple pluralization rules for en locale --->                                             // 26745
          Without Offset:                                                                                              // 26746
          <ng-pluralize count="personCount"                                                                            // 26747
                        when="{'0': 'Nobody is viewing.',                                                              // 26748
                               'one': '1 person is viewing.',                                                          // 26749
                               'other': '{} people are viewing.'}">                                                    // 26750
          </ng-pluralize><br>                                                                                          // 26751
                                                                                                                       // 26752
          <!--- Example with offset --->                                                                               // 26753
          With Offset(2):                                                                                              // 26754
          <ng-pluralize count="personCount" offset=2                                                                   // 26755
                        when="{'0': 'Nobody is viewing.',                                                              // 26756
                               '1': '{{person1}} is viewing.',                                                         // 26757
                               '2': '{{person1}} and {{person2}} are viewing.',                                        // 26758
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',                    // 26759
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                 // 26760
          </ng-pluralize>                                                                                              // 26761
        </div>                                                                                                         // 26762
      </file>                                                                                                          // 26763
      <file name="protractor.js" type="protractor">                                                                    // 26764
        it('should show correct pluralized string', function() {                                                       // 26765
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);                                              // 26766
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26767
          var countInput = element(by.model('personCount'));                                                           // 26768
                                                                                                                       // 26769
          expect(withoutOffset.getText()).toEqual('1 person is viewing.');                                             // 26770
          expect(withOffset.getText()).toEqual('Igor is viewing.');                                                    // 26771
                                                                                                                       // 26772
          countInput.clear();                                                                                          // 26773
          countInput.sendKeys('0');                                                                                    // 26774
                                                                                                                       // 26775
          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');                                               // 26776
          expect(withOffset.getText()).toEqual('Nobody is viewing.');                                                  // 26777
                                                                                                                       // 26778
          countInput.clear();                                                                                          // 26779
          countInput.sendKeys('2');                                                                                    // 26780
                                                                                                                       // 26781
          expect(withoutOffset.getText()).toEqual('2 people are viewing.');                                            // 26782
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');                                         // 26783
                                                                                                                       // 26784
          countInput.clear();                                                                                          // 26785
          countInput.sendKeys('3');                                                                                    // 26786
                                                                                                                       // 26787
          expect(withoutOffset.getText()).toEqual('3 people are viewing.');                                            // 26788
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');                       // 26789
                                                                                                                       // 26790
          countInput.clear();                                                                                          // 26791
          countInput.sendKeys('4');                                                                                    // 26792
                                                                                                                       // 26793
          expect(withoutOffset.getText()).toEqual('4 people are viewing.');                                            // 26794
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');                         // 26795
        });                                                                                                            // 26796
        it('should show data-bound names', function() {                                                                // 26797
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26798
          var personCount = element(by.model('personCount'));                                                          // 26799
          var person1 = element(by.model('person1'));                                                                  // 26800
          var person2 = element(by.model('person2'));                                                                  // 26801
          personCount.clear();                                                                                         // 26802
          personCount.sendKeys('4');                                                                                   // 26803
          person1.clear();                                                                                             // 26804
          person1.sendKeys('Di');                                                                                      // 26805
          person2.clear();                                                                                             // 26806
          person2.sendKeys('Vojta');                                                                                   // 26807
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');                           // 26808
        });                                                                                                            // 26809
      </file>                                                                                                          // 26810
    </example>                                                                                                         // 26811
 */                                                                                                                    // 26812
var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {                 // 26813
  var BRACE = /{}/g,                                                                                                   // 26814
      IS_WHEN = /^when(Minus)?(.+)$/;                                                                                  // 26815
                                                                                                                       // 26816
  return {                                                                                                             // 26817
    link: function(scope, element, attr) {                                                                             // 26818
      var numberExp = attr.count,                                                                                      // 26819
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs                         // 26820
          offset = attr.offset || 0,                                                                                   // 26821
          whens = scope.$eval(whenExp) || {},                                                                          // 26822
          whensExpFns = {},                                                                                            // 26823
          startSymbol = $interpolate.startSymbol(),                                                                    // 26824
          endSymbol = $interpolate.endSymbol(),                                                                        // 26825
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,                                       // 26826
          watchRemover = angular.noop,                                                                                 // 26827
          lastCount;                                                                                                   // 26828
                                                                                                                       // 26829
      forEach(attr, function(expression, attributeName) {                                                              // 26830
        var tmpMatch = IS_WHEN.exec(attributeName);                                                                    // 26831
        if (tmpMatch) {                                                                                                // 26832
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);                                             // 26833
          whens[whenKey] = element.attr(attr.$attr[attributeName]);                                                    // 26834
        }                                                                                                              // 26835
      });                                                                                                              // 26836
      forEach(whens, function(expression, key) {                                                                       // 26837
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));                                  // 26838
                                                                                                                       // 26839
      });                                                                                                              // 26840
                                                                                                                       // 26841
      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {                                                // 26842
        var count = parseFloat(newVal);                                                                                // 26843
        var countIsNaN = isNaN(count);                                                                                 // 26844
                                                                                                                       // 26845
        if (!countIsNaN && !(count in whens)) {                                                                        // 26846
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.                                    // 26847
          // Otherwise, check it against pluralization rules in $locale service.                                       // 26848
          count = $locale.pluralCat(count - offset);                                                                   // 26849
        }                                                                                                              // 26850
                                                                                                                       // 26851
        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.                              // 26852
        // In JS `NaN !== NaN`, so we have to exlicitly check.                                                         // 26853
        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {                       // 26854
          watchRemover();                                                                                              // 26855
          var whenExpFn = whensExpFns[count];                                                                          // 26856
          if (isUndefined(whenExpFn)) {                                                                                // 26857
            if (newVal != null) {                                                                                      // 26858
              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);                            // 26859
            }                                                                                                          // 26860
            watchRemover = noop;                                                                                       // 26861
            updateElementText();                                                                                       // 26862
          } else {                                                                                                     // 26863
            watchRemover = scope.$watch(whenExpFn, updateElementText);                                                 // 26864
          }                                                                                                            // 26865
          lastCount = count;                                                                                           // 26866
        }                                                                                                              // 26867
      });                                                                                                              // 26868
                                                                                                                       // 26869
      function updateElementText(newText) {                                                                            // 26870
        element.text(newText || '');                                                                                   // 26871
      }                                                                                                                // 26872
    }                                                                                                                  // 26873
  };                                                                                                                   // 26874
}];                                                                                                                    // 26875
                                                                                                                       // 26876
/**                                                                                                                    // 26877
 * @ngdoc directive                                                                                                    // 26878
 * @name ngRepeat                                                                                                      // 26879
 * @multiElement                                                                                                       // 26880
 *                                                                                                                     // 26881
 * @description                                                                                                        // 26882
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template                     // 26883
 * instance gets its own scope, where the given loop variable is set to the current collection item,                   // 26884
 * and `$index` is set to the item index or key.                                                                       // 26885
 *                                                                                                                     // 26886
 * Special properties are exposed on the local scope of each template instance, including:                             // 26887
 *                                                                                                                     // 26888
 * | Variable  | Type            | Details                                                                     |       // 26889
 * |-----------|-----------------|-----------------------------------------------------------------------------|       // 26890
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |       // 26891
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |       // 26892
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |       // 26893
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |       // 26894
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |       // 26895
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |       // 26896
 *                                                                                                                     // 26897
 * <div class="alert alert-info">                                                                                      // 26898
 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.                      // 26899
 *   This may be useful when, for instance, nesting ngRepeats.                                                         // 26900
 * </div>                                                                                                              // 26901
 *                                                                                                                     // 26902
 *                                                                                                                     // 26903
 * # Iterating over object properties                                                                                  // 26904
 *                                                                                                                     // 26905
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following                    // 26906
 * syntax:                                                                                                             // 26907
 *                                                                                                                     // 26908
 * ```js                                                                                                               // 26909
 * <div ng-repeat="(key, value) in myObj"> ... </div>                                                                  // 26910
 * ```                                                                                                                 // 26911
 *                                                                                                                     // 26912
 * You need to be aware that the JavaScript specification does not define the order of keys                            // 26913
 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive                                   // 26914
 * used to sort the keys alphabetically.)                                                                              // 26915
 *                                                                                                                     // 26916
 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser                        // 26917
 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing                  // 26918
 * keys in the order in which they were defined, although there are exceptions when keys are deleted                   // 26919
 * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues
 *                                                                                                                     // 26921
 * If this is not desired, the recommended workaround is to convert your object into an array                          // 26922
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could                         // 26923
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)                   // 26924
 * or implement a `$watch` on the object yourself.                                                                     // 26925
 *                                                                                                                     // 26926
 *                                                                                                                     // 26927
 * # Tracking and Duplicates                                                                                           // 26928
 *                                                                                                                     // 26929
 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:                  // 26930
 *                                                                                                                     // 26931
 * * When an item is added, a new instance of the template is added to the DOM.                                        // 26932
 * * When an item is removed, its template instance is removed from the DOM.                                           // 26933
 * * When items are reordered, their respective templates are reordered in the DOM.                                    // 26934
 *                                                                                                                     // 26935
 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when                               // 26936
 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection                        // 26937
 * items and DOM elements.                                                                                             // 26938
 *                                                                                                                     // 26939
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior                          // 26940
 * with your own using the `track by` expression.                                                                      // 26941
 *                                                                                                                     // 26942
 * For example, you may track items by the index of each item in the collection, using the                             // 26943
 * special scope property `$index`:                                                                                    // 26944
 * ```html                                                                                                             // 26945
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">                                                          // 26946
 *      {{n}}                                                                                                          // 26947
 *    </div>                                                                                                           // 26948
 * ```                                                                                                                 // 26949
 *                                                                                                                     // 26950
 * You may use arbitrary expressions in `track by`, including references to custom functions                           // 26951
 * on the scope:                                                                                                       // 26952
 * ```html                                                                                                             // 26953
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">                                           // 26954
 *      {{n}}                                                                                                          // 26955
 *    </div>                                                                                                           // 26956
 * ```                                                                                                                 // 26957
 *                                                                                                                     // 26958
 * If you are working with objects that have an identifier property, you can track                                     // 26959
 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`                        // 26960
 * will not have to rebuild the DOM elements for items it has already rendered, even if the                            // 26961
 * JavaScript objects in the collection have been substituted for new ones:                                            // 26962
 * ```html                                                                                                             // 26963
 *    <div ng-repeat="model in collection track by model.id">                                                          // 26964
 *      {{model.name}}                                                                                                 // 26965
 *    </div>                                                                                                           // 26966
 * ```                                                                                                                 // 26967
 *                                                                                                                     // 26968
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in                             // 26969
 * `$id` function, which tracks items by their identity:                                                               // 26970
 * ```html                                                                                                             // 26971
 *    <div ng-repeat="obj in collection track by $id(obj)">                                                            // 26972
 *      {{obj.prop}}                                                                                                   // 26973
 *    </div>                                                                                                           // 26974
 * ```                                                                                                                 // 26975
 *                                                                                                                     // 26976
 * <div class="alert alert-warning">                                                                                   // 26977
 * **Note:** `track by` must always be the last expression:                                                            // 26978
 * </div>                                                                                                              // 26979
 * ```                                                                                                                 // 26980
 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">                          // 26981
 *     {{model.name}}                                                                                                  // 26982
 * </div>                                                                                                              // 26983
 * ```                                                                                                                 // 26984
 *                                                                                                                     // 26985
 * # Special repeat start and end points                                                                               // 26986
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.                                          // 26990
 *                                                                                                                     // 26991
 * The example below makes use of this feature:                                                                        // 26992
 * ```html                                                                                                             // 26993
 *   <header ng-repeat-start="item in items">                                                                          // 26994
 *     Header {{ item }}                                                                                               // 26995
 *   </header>                                                                                                         // 26996
 *   <div class="body">                                                                                                // 26997
 *     Body {{ item }}                                                                                                 // 26998
 *   </div>                                                                                                            // 26999
 *   <footer ng-repeat-end>                                                                                            // 27000
 *     Footer {{ item }}                                                                                               // 27001
 *   </footer>                                                                                                         // 27002
 * ```                                                                                                                 // 27003
 *                                                                                                                     // 27004
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:    // 27005
 * ```html                                                                                                             // 27006
 *   <header>                                                                                                          // 27007
 *     Header A                                                                                                        // 27008
 *   </header>                                                                                                         // 27009
 *   <div class="body">                                                                                                // 27010
 *     Body A                                                                                                          // 27011
 *   </div>                                                                                                            // 27012
 *   <footer>                                                                                                          // 27013
 *     Footer A                                                                                                        // 27014
 *   </footer>                                                                                                         // 27015
 *   <header>                                                                                                          // 27016
 *     Header B                                                                                                        // 27017
 *   </header>                                                                                                         // 27018
 *   <div class="body">                                                                                                // 27019
 *     Body B                                                                                                          // 27020
 *   </div>                                                                                                            // 27021
 *   <footer>                                                                                                          // 27022
 *     Footer B                                                                                                        // 27023
 *   </footer>                                                                                                         // 27024
 * ```                                                                                                                 // 27025
 *                                                                                                                     // 27026
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).                                        // 27028
 *                                                                                                                     // 27029
 * @animations                                                                                                         // 27030
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter                        // 27031
 *                                                                                                                     // 27032
 * **.leave** - when an item is removed from the list or when an item is filtered out                                  // 27033
 *                                                                                                                     // 27034
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered         // 27035
 *                                                                                                                     // 27036
 * @element ANY                                                                                                        // 27037
 * @scope                                                                                                              // 27038
 * @priority 1000                                                                                                      // 27039
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These                  // 27040
 *   formats are currently supported:                                                                                  // 27041
 *                                                                                                                     // 27042
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`                    // 27043
 *     is a scope expression giving the collection to enumerate.                                                       // 27044
 *                                                                                                                     // 27045
 *     For example: `album in artist.albums`.                                                                          // 27046
 *                                                                                                                     // 27047
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,                     // 27048
 *     and `expression` is the scope expression giving the collection to enumerate.                                    // 27049
 *                                                                                                                     // 27050
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.                                                         // 27051
 *                                                                                                                     // 27052
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression    // 27053
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression   // 27054
 *     is specified, ng-repeat associates elements by identity. It is an error to have                                 // 27055
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are // 27056
 *     mapped to the same DOM element, which is not possible.)                                                         // 27057
 *                                                                                                                     // 27058
 *     Note that the tracking expression must come last, after any filters, and the alias expression.                  // 27059
 *                                                                                                                     // 27060
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.                                                               // 27062
 *                                                                                                                     // 27063
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique     // 27064
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements  // 27065
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM        // 27066
 *     element in the same way in the DOM.                                                                             // 27067
 *                                                                                                                     // 27068
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`           // 27070
 *     property is same.                                                                                               // 27071
 *                                                                                                                     // 27072
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.                                                             // 27074
 *                                                                                                                     // 27075
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.                                  // 27078
 *                                                                                                                     // 27079
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.                                                               // 27081
 *                                                                                                                     // 27082
 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
 *     (and not as operator, inside an expression).                                                                    // 27084
 *                                                                                                                     // 27085
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .                      // 27086
 *                                                                                                                     // 27087
 * @example                                                                                                            // 27088
 * This example initializes the scope to a list of names and                                                           // 27089
 * then uses `ngRepeat` to display every person:                                                                       // 27090
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27091
    <file name="index.html">                                                                                           // 27092
      <div ng-init="friends = [                                                                                        // 27093
        {name:'John', age:25, gender:'boy'},                                                                           // 27094
        {name:'Jessie', age:30, gender:'girl'},                                                                        // 27095
        {name:'Johanna', age:28, gender:'girl'},                                                                       // 27096
        {name:'Joy', age:15, gender:'girl'},                                                                           // 27097
        {name:'Mary', age:28, gender:'girl'},                                                                          // 27098
        {name:'Peter', age:95, gender:'boy'},                                                                          // 27099
        {name:'Sebastian', age:50, gender:'boy'},                                                                      // 27100
        {name:'Erika', age:27, gender:'girl'},                                                                         // 27101
        {name:'Patrick', age:40, gender:'boy'},                                                                        // 27102
        {name:'Samantha', age:60, gender:'girl'}                                                                       // 27103
      ]">                                                                                                              // 27104
        I have {{friends.length}} friends. They are:                                                                   // 27105
        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />               // 27106
        <ul class="example-animate-container">                                                                         // 27107
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">                              // 27108
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.                                          // 27109
          </li>                                                                                                        // 27110
          <li class="animate-repeat" ng-if="results.length == 0">                                                      // 27111
            <strong>No results found...</strong>                                                                       // 27112
          </li>                                                                                                        // 27113
        </ul>                                                                                                          // 27114
      </div>                                                                                                           // 27115
    </file>                                                                                                            // 27116
    <file name="animations.css">                                                                                       // 27117
      .example-animate-container {                                                                                     // 27118
        background:white;                                                                                              // 27119
        border:1px solid black;                                                                                        // 27120
        list-style:none;                                                                                               // 27121
        margin:0;                                                                                                      // 27122
        padding:0 10px;                                                                                                // 27123
      }                                                                                                                // 27124
                                                                                                                       // 27125
      .animate-repeat {                                                                                                // 27126
        line-height:40px;                                                                                              // 27127
        list-style:none;                                                                                               // 27128
        box-sizing:border-box;                                                                                         // 27129
      }                                                                                                                // 27130
                                                                                                                       // 27131
      .animate-repeat.ng-move,                                                                                         // 27132
      .animate-repeat.ng-enter,                                                                                        // 27133
      .animate-repeat.ng-leave {                                                                                       // 27134
        transition:all linear 0.5s;                                                                                    // 27135
      }                                                                                                                // 27136
                                                                                                                       // 27137
      .animate-repeat.ng-leave.ng-leave-active,                                                                        // 27138
      .animate-repeat.ng-move,                                                                                         // 27139
      .animate-repeat.ng-enter {                                                                                       // 27140
        opacity:0;                                                                                                     // 27141
        max-height:0;                                                                                                  // 27142
      }                                                                                                                // 27143
                                                                                                                       // 27144
      .animate-repeat.ng-leave,                                                                                        // 27145
      .animate-repeat.ng-move.ng-move-active,                                                                          // 27146
      .animate-repeat.ng-enter.ng-enter-active {                                                                       // 27147
        opacity:1;                                                                                                     // 27148
        max-height:40px;                                                                                               // 27149
      }                                                                                                                // 27150
    </file>                                                                                                            // 27151
    <file name="protractor.js" type="protractor">                                                                      // 27152
      var friends = element.all(by.repeater('friend in friends'));                                                     // 27153
                                                                                                                       // 27154
      it('should render initial data set', function() {                                                                // 27155
        expect(friends.count()).toBe(10);                                                                              // 27156
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');                                     // 27157
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');                                   // 27158
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');                                // 27159
        expect(element(by.binding('friends.length')).getText())                                                        // 27160
            .toMatch("I have 10 friends. They are:");                                                                  // 27161
      });                                                                                                              // 27162
                                                                                                                       // 27163
       it('should update repeater when filter predicate changes', function() {                                         // 27164
         expect(friends.count()).toBe(10);                                                                             // 27165
                                                                                                                       // 27166
         element(by.model('q')).sendKeys('ma');                                                                        // 27167
                                                                                                                       // 27168
         expect(friends.count()).toBe(2);                                                                              // 27169
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');                                    // 27170
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');                                // 27171
       });                                                                                                             // 27172
      </file>                                                                                                          // 27173
    </example>                                                                                                         // 27174
 */                                                                                                                    // 27175
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {                                            // 27176
  var NG_REMOVED = '$$NG_REMOVED';                                                                                     // 27177
  var ngRepeatMinErr = minErr('ngRepeat');                                                                             // 27178
                                                                                                                       // 27179
  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {                  // 27180
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%                                                       // 27181
    scope[valueIdentifier] = value;                                                                                    // 27182
    if (keyIdentifier) scope[keyIdentifier] = key;                                                                     // 27183
    scope.$index = index;                                                                                              // 27184
    scope.$first = (index === 0);                                                                                      // 27185
    scope.$last = (index === (arrayLength - 1));                                                                       // 27186
    scope.$middle = !(scope.$first || scope.$last);                                                                    // 27187
    // jshint bitwise: false                                                                                           // 27188
    scope.$odd = !(scope.$even = (index&1) === 0);                                                                     // 27189
    // jshint bitwise: true                                                                                            // 27190
  };                                                                                                                   // 27191
                                                                                                                       // 27192
  var getBlockStart = function(block) {                                                                                // 27193
    return block.clone[0];                                                                                             // 27194
  };                                                                                                                   // 27195
                                                                                                                       // 27196
  var getBlockEnd = function(block) {                                                                                  // 27197
    return block.clone[block.clone.length - 1];                                                                        // 27198
  };                                                                                                                   // 27199
                                                                                                                       // 27200
                                                                                                                       // 27201
  return {                                                                                                             // 27202
    restrict: 'A',                                                                                                     // 27203
    multiElement: true,                                                                                                // 27204
    transclude: 'element',                                                                                             // 27205
    priority: 1000,                                                                                                    // 27206
    terminal: true,                                                                                                    // 27207
    $$tlb: true,                                                                                                       // 27208
    compile: function ngRepeatCompile($element, $attr) {                                                               // 27209
      var expression = $attr.ngRepeat;                                                                                 // 27210
      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');                           // 27211
                                                                                                                       // 27212
      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                                                                                                                       // 27214
      if (!match) {                                                                                                    // 27215
        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);                                                                                               // 27217
      }                                                                                                                // 27218
                                                                                                                       // 27219
      var lhs = match[1];                                                                                              // 27220
      var rhs = match[2];                                                                                              // 27221
      var aliasAs = match[3];                                                                                          // 27222
      var trackByExp = match[4];                                                                                       // 27223
                                                                                                                       // 27224
      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);                                     // 27225
                                                                                                                       // 27226
      if (!match) {                                                                                                    // 27227
        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);                                                                                                      // 27229
      }                                                                                                                // 27230
      var valueIdentifier = match[3] || match[1];                                                                      // 27231
      var keyIdentifier = match[2];                                                                                    // 27232
                                                                                                                       // 27233
      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||                                                   // 27234
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
          aliasAs);                                                                                                    // 27237
      }                                                                                                                // 27238
                                                                                                                       // 27239
      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;                                          // 27240
      var hashFnLocals = {$id: hashKey};                                                                               // 27241
                                                                                                                       // 27242
      if (trackByExp) {                                                                                                // 27243
        trackByExpGetter = $parse(trackByExp);                                                                         // 27244
      } else {                                                                                                         // 27245
        trackByIdArrayFn = function(key, value) {                                                                      // 27246
          return hashKey(value);                                                                                       // 27247
        };                                                                                                             // 27248
        trackByIdObjFn = function(key) {                                                                               // 27249
          return key;                                                                                                  // 27250
        };                                                                                                             // 27251
      }                                                                                                                // 27252
                                                                                                                       // 27253
      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {                                       // 27254
                                                                                                                       // 27255
        if (trackByExpGetter) {                                                                                        // 27256
          trackByIdExpFn = function(key, value, index) {                                                               // 27257
            // assign key, value, and $index to the locals so that they can be used in hash functions                  // 27258
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;                                                      // 27259
            hashFnLocals[valueIdentifier] = value;                                                                     // 27260
            hashFnLocals.$index = index;                                                                               // 27261
            return trackByExpGetter($scope, hashFnLocals);                                                             // 27262
          };                                                                                                           // 27263
        }                                                                                                              // 27264
                                                                                                                       // 27265
        // Store a list of elements from previous run. This is a hash where key is the item from the                   // 27266
        // iterator, and the value is objects with following properties.                                               // 27267
        //   - scope: bound scope                                                                                      // 27268
        //   - element: previous element.                                                                              // 27269
        //   - index: position                                                                                         // 27270
        //                                                                                                             // 27271
        // We are using no-proto object so that we don't need to guard against inherited props via                     // 27272
        // hasOwnProperty.                                                                                             // 27273
        var lastBlockMap = createMap();                                                                                // 27274
                                                                                                                       // 27275
        //watch props                                                                                                  // 27276
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {                                             // 27277
          var index, length,                                                                                           // 27278
              previousNode = $element[0],     // node that cloned nodes should be inserted after                       // 27279
                                              // initialized to the comment node anchor                                // 27280
              nextNode,                                                                                                // 27281
              // Same as lastBlockMap but it has the current state. It will become the                                 // 27282
              // lastBlockMap on the next iteration.                                                                   // 27283
              nextBlockMap = createMap(),                                                                              // 27284
              collectionLength,                                                                                        // 27285
              key, value, // key/value of iteration                                                                    // 27286
              trackById,                                                                                               // 27287
              trackByIdFn,                                                                                             // 27288
              collectionKeys,                                                                                          // 27289
              block,       // last object information {scope, element, id}                                             // 27290
              nextBlockOrder,                                                                                          // 27291
              elementsToRemove;                                                                                        // 27292
                                                                                                                       // 27293
          if (aliasAs) {                                                                                               // 27294
            $scope[aliasAs] = collection;                                                                              // 27295
          }                                                                                                            // 27296
                                                                                                                       // 27297
          if (isArrayLike(collection)) {                                                                               // 27298
            collectionKeys = collection;                                                                               // 27299
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;                                                          // 27300
          } else {                                                                                                     // 27301
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;                                                            // 27302
            // if object, extract keys, in enumeration order, unsorted                                                 // 27303
            collectionKeys = [];                                                                                       // 27304
            for (var itemKey in collection) {                                                                          // 27305
              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {                             // 27306
                collectionKeys.push(itemKey);                                                                          // 27307
              }                                                                                                        // 27308
            }                                                                                                          // 27309
          }                                                                                                            // 27310
                                                                                                                       // 27311
          collectionLength = collectionKeys.length;                                                                    // 27312
          nextBlockOrder = new Array(collectionLength);                                                                // 27313
                                                                                                                       // 27314
          // locate existing items                                                                                     // 27315
          for (index = 0; index < collectionLength; index++) {                                                         // 27316
            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27317
            value = collection[key];                                                                                   // 27318
            trackById = trackByIdFn(key, value, index);                                                                // 27319
            if (lastBlockMap[trackById]) {                                                                             // 27320
              // found previously seen block                                                                           // 27321
              block = lastBlockMap[trackById];                                                                         // 27322
              delete lastBlockMap[trackById];                                                                          // 27323
              nextBlockMap[trackById] = block;                                                                         // 27324
              nextBlockOrder[index] = block;                                                                           // 27325
            } else if (nextBlockMap[trackById]) {                                                                      // 27326
              // if collision detected. restore lastBlockMap and throw an error                                        // 27327
              forEach(nextBlockOrder, function(block) {                                                                // 27328
                if (block && block.scope) lastBlockMap[block.id] = block;                                              // 27329
              });                                                                                                      // 27330
              throw ngRepeatMinErr('dupes',                                                                            // 27331
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);                                                                       // 27333
            } else {                                                                                                   // 27334
              // new never before seen block                                                                           // 27335
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};                             // 27336
              nextBlockMap[trackById] = true;                                                                          // 27337
            }                                                                                                          // 27338
          }                                                                                                            // 27339
                                                                                                                       // 27340
          // remove leftover items                                                                                     // 27341
          for (var blockKey in lastBlockMap) {                                                                         // 27342
            block = lastBlockMap[blockKey];                                                                            // 27343
            elementsToRemove = getBlockNodes(block.clone);                                                             // 27344
            $animate.leave(elementsToRemove);                                                                          // 27345
            if (elementsToRemove[0].parentNode) {                                                                      // 27346
              // if the element was not removed yet because of pending animation, mark it as deleted                   // 27347
              // so that we can ignore it later                                                                        // 27348
              for (index = 0, length = elementsToRemove.length; index < length; index++) {                             // 27349
                elementsToRemove[index][NG_REMOVED] = true;                                                            // 27350
              }                                                                                                        // 27351
            }                                                                                                          // 27352
            block.scope.$destroy();                                                                                    // 27353
          }                                                                                                            // 27354
                                                                                                                       // 27355
          // we are not using forEach for perf reasons (trying to avoid #call)                                         // 27356
          for (index = 0; index < collectionLength; index++) {                                                         // 27357
            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27358
            value = collection[key];                                                                                   // 27359
            block = nextBlockOrder[index];                                                                             // 27360
                                                                                                                       // 27361
            if (block.scope) {                                                                                         // 27362
              // if we have already seen this object, then we need to reuse the                                        // 27363
              // associated scope/element                                                                              // 27364
                                                                                                                       // 27365
              nextNode = previousNode;                                                                                 // 27366
                                                                                                                       // 27367
              // skip nodes that are already pending removal via leave animation                                       // 27368
              do {                                                                                                     // 27369
                nextNode = nextNode.nextSibling;                                                                       // 27370
              } while (nextNode && nextNode[NG_REMOVED]);                                                              // 27371
                                                                                                                       // 27372
              if (getBlockStart(block) != nextNode) {                                                                  // 27373
                // existing item which got moved                                                                       // 27374
                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));                                 // 27375
              }                                                                                                        // 27376
              previousNode = getBlockEnd(block);                                                                       // 27377
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);           // 27378
            } else {                                                                                                   // 27379
              // new item which we don't know about                                                                    // 27380
              $transclude(function ngRepeatTransclude(clone, scope) {                                                  // 27381
                block.scope = scope;                                                                                   // 27382
                // http://jsperf.com/clone-vs-createcomment                                                            // 27383
                var endNode = ngRepeatEndComment.cloneNode(false);                                                     // 27384
                clone[clone.length++] = endNode;                                                                       // 27385
                                                                                                                       // 27386
                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?              // 27387
                $animate.enter(clone, null, jqLite(previousNode));                                                     // 27388
                previousNode = endNode;                                                                                // 27389
                // Note: We only need the first/last node of the cloned nodes.                                         // 27390
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 27391
                // by a directive with templateUrl when its template arrives.                                          // 27392
                block.clone = clone;                                                                                   // 27393
                nextBlockMap[block.id] = block;                                                                        // 27394
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);         // 27395
              });                                                                                                      // 27396
            }                                                                                                          // 27397
          }                                                                                                            // 27398
          lastBlockMap = nextBlockMap;                                                                                 // 27399
        });                                                                                                            // 27400
      };                                                                                                               // 27401
    }                                                                                                                  // 27402
  };                                                                                                                   // 27403
}];                                                                                                                    // 27404
                                                                                                                       // 27405
var NG_HIDE_CLASS = 'ng-hide';                                                                                         // 27406
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';                                                                     // 27407
/**                                                                                                                    // 27408
 * @ngdoc directive                                                                                                    // 27409
 * @name ngShow                                                                                                        // 27410
 * @multiElement                                                                                                       // 27411
 *                                                                                                                     // 27412
 * @description                                                                                                        // 27413
 * The `ngShow` directive shows or hides the given HTML element based on the expression                                // 27414
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding                            // 27415
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                   // 27416
 * in AngularJS and sets the display style to none (using an !important flag).                                         // 27417
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27418
 *                                                                                                                     // 27419
 * ```html                                                                                                             // 27420
 * <!-- when $scope.myValue is truthy (element is visible) -->                                                         // 27421
 * <div ng-show="myValue"></div>                                                                                       // 27422
 *                                                                                                                     // 27423
 * <!-- when $scope.myValue is falsy (element is hidden) -->                                                           // 27424
 * <div ng-show="myValue" class="ng-hide"></div>                                                                       // 27425
 * ```                                                                                                                 // 27426
 *                                                                                                                     // 27427
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class         // 27428
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed              // 27429
 * from the element causing the element not to appear hidden.                                                          // 27430
 *                                                                                                                     // 27431
 * ## Why is !important used?                                                                                          // 27432
 *                                                                                                                     // 27433
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27434
 * can be easily overridden by heavier selectors. For example, something as simple                                     // 27435
 * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27436
 * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27437
 *                                                                                                                     // 27438
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27439
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27440
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27441
 *                                                                                                                     // 27442
 * ### Overriding `.ng-hide`                                                                                           // 27443
 *                                                                                                                     // 27444
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27445
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27446
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope        // 27447
 * with extra animation classes that can be added.                                                                     // 27448
 *                                                                                                                     // 27449
 * ```css                                                                                                              // 27450
 * .ng-hide:not(.ng-hide-animate) {                                                                                    // 27451
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27452
 *   display: block!important;                                                                                         // 27453
 *   position: absolute;                                                                                               // 27454
 *   top: -9999px;                                                                                                     // 27455
 *   left: -9999px;                                                                                                    // 27456
 * }                                                                                                                   // 27457
 * ```                                                                                                                 // 27458
 *                                                                                                                     // 27459
 * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27460
 *                                                                                                                     // 27461
 * ## A note about animations with `ngShow`                                                                            // 27462
 *                                                                                                                     // 27463
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27464
 * is true and false. This system works like the animation system present with ngClass except that                     // 27465
 * you must also include the !important flag to override the display property                                          // 27466
 * so that you can perform an animation when the element is hidden during the time of the animation.                   // 27467
 *                                                                                                                     // 27468
 * ```css                                                                                                              // 27469
 * //                                                                                                                  // 27470
 * //a working example can be found at the bottom of this page                                                         // 27471
 * //                                                                                                                  // 27472
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27473
 *   /&#42; this is required as of 1.3x to properly                                                                    // 27474
 *      apply all styling in a show/hide animation &#42;/                                                              // 27475
 *   transition: 0s linear all;                                                                                        // 27476
 * }                                                                                                                   // 27477
 *                                                                                                                     // 27478
 * .my-element.ng-hide-add-active,                                                                                     // 27479
 * .my-element.ng-hide-remove-active {                                                                                 // 27480
 *   /&#42; the transition is defined in the active class &#42;/                                                       // 27481
 *   transition: 1s linear all;                                                                                        // 27482
 * }                                                                                                                   // 27483
 *                                                                                                                     // 27484
 * .my-element.ng-hide-add { ... }                                                                                     // 27485
 * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27486
 * .my-element.ng-hide-remove { ... }                                                                                  // 27487
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27488
 * ```                                                                                                                 // 27489
 *                                                                                                                     // 27490
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27491
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27492
 *                                                                                                                     // 27493
 * @animations                                                                                                         // 27494
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *                                                                                                                     // 27497
 * @element ANY                                                                                                        // 27498
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy                                     // 27499
 *     then the element is shown or hidden respectively.                                                               // 27500
 *                                                                                                                     // 27501
 * @example                                                                                                            // 27502
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27503
    <file name="index.html">                                                                                           // 27504
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>                             // 27505
      <div>                                                                                                            // 27506
        Show:                                                                                                          // 27507
        <div class="check-element animate-show" ng-show="checked">                                                     // 27508
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                 // 27509
        </div>                                                                                                         // 27510
      </div>                                                                                                           // 27511
      <div>                                                                                                            // 27512
        Hide:                                                                                                          // 27513
        <div class="check-element animate-show" ng-hide="checked">                                                     // 27514
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                  // 27515
        </div>                                                                                                         // 27516
      </div>                                                                                                           // 27517
    </file>                                                                                                            // 27518
    <file name="glyphicons.css">                                                                                       // 27519
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27520
    </file>                                                                                                            // 27521
    <file name="animations.css">                                                                                       // 27522
      .animate-show {                                                                                                  // 27523
        line-height: 20px;                                                                                             // 27524
        opacity: 1;                                                                                                    // 27525
        padding: 10px;                                                                                                 // 27526
        border: 1px solid black;                                                                                       // 27527
        background: white;                                                                                             // 27528
      }                                                                                                                // 27529
                                                                                                                       // 27530
      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {                                                        // 27531
        transition: all linear 0.5s;                                                                                   // 27532
      }                                                                                                                // 27533
                                                                                                                       // 27534
      .animate-show.ng-hide {                                                                                          // 27535
        line-height: 0;                                                                                                // 27536
        opacity: 0;                                                                                                    // 27537
        padding: 0 10px;                                                                                               // 27538
      }                                                                                                                // 27539
                                                                                                                       // 27540
      .check-element {                                                                                                 // 27541
        padding: 10px;                                                                                                 // 27542
        border: 1px solid black;                                                                                       // 27543
        background: white;                                                                                             // 27544
      }                                                                                                                // 27545
    </file>                                                                                                            // 27546
    <file name="protractor.js" type="protractor">                                                                      // 27547
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27548
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27549
                                                                                                                       // 27550
      it('should check ng-show / ng-hide', function() {                                                                // 27551
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27552
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27553
                                                                                                                       // 27554
        element(by.model('checked')).click();                                                                          // 27555
                                                                                                                       // 27556
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27557
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27558
      });                                                                                                              // 27559
    </file>                                                                                                            // 27560
  </example>                                                                                                           // 27561
 */                                                                                                                    // 27562
var ngShowDirective = ['$animate', function($animate) {                                                                // 27563
  return {                                                                                                             // 27564
    restrict: 'A',                                                                                                     // 27565
    multiElement: true,                                                                                                // 27566
    link: function(scope, element, attr) {                                                                             // 27567
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {                                                    // 27568
        // we're adding a temporary, animation-specific class for ng-hide since this way                               // 27569
        // we can control when the element is actually displayed on screen without having                              // 27570
        // to have a global/greedy CSS selector that breaks when other animations are run.                             // 27571
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845                               // 27572
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {                                         // 27573
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27574
        });                                                                                                            // 27575
      });                                                                                                              // 27576
    }                                                                                                                  // 27577
  };                                                                                                                   // 27578
}];                                                                                                                    // 27579
                                                                                                                       // 27580
                                                                                                                       // 27581
/**                                                                                                                    // 27582
 * @ngdoc directive                                                                                                    // 27583
 * @name ngHide                                                                                                        // 27584
 * @multiElement                                                                                                       // 27585
 *                                                                                                                     // 27586
 * @description                                                                                                        // 27587
 * The `ngHide` directive shows or hides the given HTML element based on the expression                                // 27588
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding                            // 27589
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                    // 27590
 * in AngularJS and sets the display style to none (using an !important flag).                                         // 27591
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27592
 *                                                                                                                     // 27593
 * ```html                                                                                                             // 27594
 * <!-- when $scope.myValue is truthy (element is hidden) -->                                                          // 27595
 * <div ng-hide="myValue" class="ng-hide"></div>                                                                       // 27596
 *                                                                                                                     // 27597
 * <!-- when $scope.myValue is falsy (element is visible) -->                                                          // 27598
 * <div ng-hide="myValue"></div>                                                                                       // 27599
 * ```                                                                                                                 // 27600
 *                                                                                                                     // 27601
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class        // 27602
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed               // 27603
 * from the element causing the element not to appear hidden.                                                          // 27604
 *                                                                                                                     // 27605
 * ## Why is !important used?                                                                                          // 27606
 *                                                                                                                     // 27607
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27608
 * can be easily overridden by heavier selectors. For example, something as simple                                     // 27609
 * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27610
 * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27611
 *                                                                                                                     // 27612
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27613
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27614
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27615
 *                                                                                                                     // 27616
 * ### Overriding `.ng-hide`                                                                                           // 27617
 *                                                                                                                     // 27618
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27619
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27620
 * class in CSS:                                                                                                       // 27621
 *                                                                                                                     // 27622
 * ```css                                                                                                              // 27623
 * .ng-hide {                                                                                                          // 27624
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27625
 *   display: block!important;                                                                                         // 27626
 *   position: absolute;                                                                                               // 27627
 *   top: -9999px;                                                                                                     // 27628
 *   left: -9999px;                                                                                                    // 27629
 * }                                                                                                                   // 27630
 * ```                                                                                                                 // 27631
 *                                                                                                                     // 27632
 * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27633
 *                                                                                                                     // 27634
 * ## A note about animations with `ngHide`                                                                            // 27635
 *                                                                                                                     // 27636
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27637
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`     // 27638
 * CSS class is added and removed for you instead of your own CSS class.                                               // 27639
 *                                                                                                                     // 27640
 * ```css                                                                                                              // 27641
 * //                                                                                                                  // 27642
 * //a working example can be found at the bottom of this page                                                         // 27643
 * //                                                                                                                  // 27644
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27645
 *   transition: 0.5s linear all;                                                                                      // 27646
 * }                                                                                                                   // 27647
 *                                                                                                                     // 27648
 * .my-element.ng-hide-add { ... }                                                                                     // 27649
 * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27650
 * .my-element.ng-hide-remove { ... }                                                                                  // 27651
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27652
 * ```                                                                                                                 // 27653
 *                                                                                                                     // 27654
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27655
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27656
 *                                                                                                                     // 27657
 * @animations                                                                                                         // 27658
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *                                                                                                                     // 27661
 * @element ANY                                                                                                        // 27662
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then                                // 27663
 *     the element is shown or hidden respectively.                                                                    // 27664
 *                                                                                                                     // 27665
 * @example                                                                                                            // 27666
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27667
    <file name="index.html">                                                                                           // 27668
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>                             // 27669
      <div>                                                                                                            // 27670
        Show:                                                                                                          // 27671
        <div class="check-element animate-hide" ng-show="checked">                                                     // 27672
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                 // 27673
        </div>                                                                                                         // 27674
      </div>                                                                                                           // 27675
      <div>                                                                                                            // 27676
        Hide:                                                                                                          // 27677
        <div class="check-element animate-hide" ng-hide="checked">                                                     // 27678
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                  // 27679
        </div>                                                                                                         // 27680
      </div>                                                                                                           // 27681
    </file>                                                                                                            // 27682
    <file name="glyphicons.css">                                                                                       // 27683
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27684
    </file>                                                                                                            // 27685
    <file name="animations.css">                                                                                       // 27686
      .animate-hide {                                                                                                  // 27687
        transition: all linear 0.5s;                                                                                   // 27688
        line-height: 20px;                                                                                             // 27689
        opacity: 1;                                                                                                    // 27690
        padding: 10px;                                                                                                 // 27691
        border: 1px solid black;                                                                                       // 27692
        background: white;                                                                                             // 27693
      }                                                                                                                // 27694
                                                                                                                       // 27695
      .animate-hide.ng-hide {                                                                                          // 27696
        line-height: 0;                                                                                                // 27697
        opacity: 0;                                                                                                    // 27698
        padding: 0 10px;                                                                                               // 27699
      }                                                                                                                // 27700
                                                                                                                       // 27701
      .check-element {                                                                                                 // 27702
        padding: 10px;                                                                                                 // 27703
        border: 1px solid black;                                                                                       // 27704
        background: white;                                                                                             // 27705
      }                                                                                                                // 27706
    </file>                                                                                                            // 27707
    <file name="protractor.js" type="protractor">                                                                      // 27708
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27709
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27710
                                                                                                                       // 27711
      it('should check ng-show / ng-hide', function() {                                                                // 27712
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27713
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27714
                                                                                                                       // 27715
        element(by.model('checked')).click();                                                                          // 27716
                                                                                                                       // 27717
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27718
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27719
      });                                                                                                              // 27720
    </file>                                                                                                            // 27721
  </example>                                                                                                           // 27722
 */                                                                                                                    // 27723
var ngHideDirective = ['$animate', function($animate) {                                                                // 27724
  return {                                                                                                             // 27725
    restrict: 'A',                                                                                                     // 27726
    multiElement: true,                                                                                                // 27727
    link: function(scope, element, attr) {                                                                             // 27728
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {                                                    // 27729
        // The comment inside of the ngShowDirective explains why we add and                                           // 27730
        // remove a temporary class for the show/hide animation                                                        // 27731
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {                                          // 27732
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27733
        });                                                                                                            // 27734
      });                                                                                                              // 27735
    }                                                                                                                  // 27736
  };                                                                                                                   // 27737
}];                                                                                                                    // 27738
                                                                                                                       // 27739
/**                                                                                                                    // 27740
 * @ngdoc directive                                                                                                    // 27741
 * @name ngStyle                                                                                                       // 27742
 * @restrict AC                                                                                                        // 27743
 *                                                                                                                     // 27744
 * @description                                                                                                        // 27745
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.                               // 27746
 *                                                                                                                     // 27747
 * @element ANY                                                                                                        // 27748
 * @param {expression} ngStyle                                                                                         // 27749
 *                                                                                                                     // 27750
 * {@link guide/expression Expression} which evals to an                                                               // 27751
 * object whose keys are CSS style names and values are corresponding values for those CSS                             // 27752
 * keys.                                                                                                               // 27753
 *                                                                                                                     // 27754
 * Since some CSS style names are not valid keys for an object, they must be quoted.                                   // 27755
 * See the 'background-color' style in the example below.                                                              // 27756
 *                                                                                                                     // 27757
 * @example                                                                                                            // 27758
   <example>                                                                                                           // 27759
     <file name="index.html">                                                                                          // 27760
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">                                       // 27761
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">                    // 27762
        <input type="button" value="clear" ng-click="myStyle={}">                                                      // 27763
        <br/>                                                                                                          // 27764
        <span ng-style="myStyle">Sample Text</span>                                                                    // 27765
        <pre>myStyle={{myStyle}}</pre>                                                                                 // 27766
     </file>                                                                                                           // 27767
     <file name="style.css">                                                                                           // 27768
       span {                                                                                                          // 27769
         color: black;                                                                                                 // 27770
       }                                                                                                               // 27771
     </file>                                                                                                           // 27772
     <file name="protractor.js" type="protractor">                                                                     // 27773
       var colorSpan = element(by.css('span'));                                                                        // 27774
                                                                                                                       // 27775
       it('should check ng-style', function() {                                                                        // 27776
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27777
         element(by.css('input[value=\'set color\']')).click();                                                        // 27778
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');                                            // 27779
         element(by.css('input[value=clear]')).click();                                                                // 27780
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27781
       });                                                                                                             // 27782
     </file>                                                                                                           // 27783
   </example>                                                                                                          // 27784
 */                                                                                                                    // 27785
var ngStyleDirective = ngDirective(function(scope, element, attr) {                                                    // 27786
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {                                       // 27787
    if (oldStyles && (newStyles !== oldStyles)) {                                                                      // 27788
      forEach(oldStyles, function(val, style) { element.css(style, '');});                                             // 27789
    }                                                                                                                  // 27790
    if (newStyles) element.css(newStyles);                                                                             // 27791
  }, true);                                                                                                            // 27792
});                                                                                                                    // 27793
                                                                                                                       // 27794
/**                                                                                                                    // 27795
 * @ngdoc directive                                                                                                    // 27796
 * @name ngSwitch                                                                                                      // 27797
 * @restrict EA                                                                                                        // 27798
 *                                                                                                                     // 27799
 * @description                                                                                                        // 27800
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.  // 27801
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.                                                                                       // 27803
 *                                                                                                                     // 27804
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it       // 27805
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element            // 27807
 * (where you place the directive), place an expression on the **`on="..."` attribute**                                // 27808
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place               // 27809
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on    // 27810
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.                                                                                             // 27812
 *                                                                                                                     // 27813
 * <div class="alert alert-info">                                                                                      // 27814
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted                     // 27815
 * as literal string values to match against.                                                                          // 27816
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the               // 27817
 * value of the expression `$scope.someVal`.                                                                           // 27818
 * </div>                                                                                                              // 27819
                                                                                                                       // 27820
 * @animations                                                                                                         // 27821
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container     // 27822
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *                                                                                                                     // 27824
 * @usage                                                                                                              // 27825
 *                                                                                                                     // 27826
 * ```                                                                                                                 // 27827
 * <ANY ng-switch="expression">                                                                                        // 27828
 *   <ANY ng-switch-when="matchValue1">...</ANY>                                                                       // 27829
 *   <ANY ng-switch-when="matchValue2">...</ANY>                                                                       // 27830
 *   <ANY ng-switch-default>...</ANY>                                                                                  // 27831
 * </ANY>                                                                                                              // 27832
 * ```                                                                                                                 // 27833
 *                                                                                                                     // 27834
 *                                                                                                                     // 27835
 * @scope                                                                                                              // 27836
 * @priority 1200                                                                                                      // 27837
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.                                     // 27838
 * On child elements add:                                                                                              // 27839
 *                                                                                                                     // 27840
 * * `ngSwitchWhen`: the case statement to match against. If match then this                                           // 27841
 *   case will be displayed. If the same match appears multiple times, all the                                         // 27842
 *   elements will be displayed.                                                                                       // 27843
 * * `ngSwitchDefault`: the default case when no other case match. If there                                            // 27844
 *   are multiple default cases, all of them will be displayed when no other                                           // 27845
 *   case match.                                                                                                       // 27846
 *                                                                                                                     // 27847
 *                                                                                                                     // 27848
 * @example                                                                                                            // 27849
  <example module="switchExample" deps="angular-animate.js" animations="true">                                         // 27850
    <file name="index.html">                                                                                           // 27851
      <div ng-controller="ExampleController">                                                                          // 27852
        <select ng-model="selection" ng-options="item for item in items">                                              // 27853
        </select>                                                                                                      // 27854
        <code>selection={{selection}}</code>                                                                           // 27855
        <hr/>                                                                                                          // 27856
        <div class="animate-switch-container"                                                                          // 27857
          ng-switch on="selection">                                                                                    // 27858
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>                                   // 27859
            <div class="animate-switch" ng-switch-when="home">Home Span</div>                                          // 27860
            <div class="animate-switch" ng-switch-default>default</div>                                                // 27861
        </div>                                                                                                         // 27862
      </div>                                                                                                           // 27863
    </file>                                                                                                            // 27864
    <file name="script.js">                                                                                            // 27865
      angular.module('switchExample', ['ngAnimate'])                                                                   // 27866
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 27867
          $scope.items = ['settings', 'home', 'other'];                                                                // 27868
          $scope.selection = $scope.items[0];                                                                          // 27869
        }]);                                                                                                           // 27870
    </file>                                                                                                            // 27871
    <file name="animations.css">                                                                                       // 27872
      .animate-switch-container {                                                                                      // 27873
        position:relative;                                                                                             // 27874
        background:white;                                                                                              // 27875
        border:1px solid black;                                                                                        // 27876
        height:40px;                                                                                                   // 27877
        overflow:hidden;                                                                                               // 27878
      }                                                                                                                // 27879
                                                                                                                       // 27880
      .animate-switch {                                                                                                // 27881
        padding:10px;                                                                                                  // 27882
      }                                                                                                                // 27883
                                                                                                                       // 27884
      .animate-switch.ng-animate {                                                                                     // 27885
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 27886
                                                                                                                       // 27887
        position:absolute;                                                                                             // 27888
        top:0;                                                                                                         // 27889
        left:0;                                                                                                        // 27890
        right:0;                                                                                                       // 27891
        bottom:0;                                                                                                      // 27892
      }                                                                                                                // 27893
                                                                                                                       // 27894
      .animate-switch.ng-leave.ng-leave-active,                                                                        // 27895
      .animate-switch.ng-enter {                                                                                       // 27896
        top:-50px;                                                                                                     // 27897
      }                                                                                                                // 27898
      .animate-switch.ng-leave,                                                                                        // 27899
      .animate-switch.ng-enter.ng-enter-active {                                                                       // 27900
        top:0;                                                                                                         // 27901
      }                                                                                                                // 27902
    </file>                                                                                                            // 27903
    <file name="protractor.js" type="protractor">                                                                      // 27904
      var switchElem = element(by.css('[ng-switch]'));                                                                 // 27905
      var select = element(by.model('selection'));                                                                     // 27906
                                                                                                                       // 27907
      it('should start in settings', function() {                                                                      // 27908
        expect(switchElem.getText()).toMatch(/Settings Div/);                                                          // 27909
      });                                                                                                              // 27910
      it('should change to home', function() {                                                                         // 27911
        select.all(by.css('option')).get(1).click();                                                                   // 27912
        expect(switchElem.getText()).toMatch(/Home Span/);                                                             // 27913
      });                                                                                                              // 27914
      it('should select default', function() {                                                                         // 27915
        select.all(by.css('option')).get(2).click();                                                                   // 27916
        expect(switchElem.getText()).toMatch(/default/);                                                               // 27917
      });                                                                                                              // 27918
    </file>                                                                                                            // 27919
  </example>                                                                                                           // 27920
 */                                                                                                                    // 27921
var ngSwitchDirective = ['$animate', function($animate) {                                                              // 27922
  return {                                                                                                             // 27923
    require: 'ngSwitch',                                                                                               // 27924
                                                                                                                       // 27925
    // asks for $scope to fool the BC controller module                                                                // 27926
    controller: ['$scope', function ngSwitchController() {                                                             // 27927
     this.cases = {};                                                                                                  // 27928
    }],                                                                                                                // 27929
    link: function(scope, element, attr, ngSwitchController) {                                                         // 27930
      var watchExpr = attr.ngSwitch || attr.on,                                                                        // 27931
          selectedTranscludes = [],                                                                                    // 27932
          selectedElements = [],                                                                                       // 27933
          previousLeaveAnimations = [],                                                                                // 27934
          selectedScopes = [];                                                                                         // 27935
                                                                                                                       // 27936
      var spliceFactory = function(array, index) {                                                                     // 27937
          return function() { array.splice(index, 1); };                                                               // 27938
      };                                                                                                               // 27939
                                                                                                                       // 27940
      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {                                                    // 27941
        var i, ii;                                                                                                     // 27942
        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {                                                // 27943
          $animate.cancel(previousLeaveAnimations[i]);                                                                 // 27944
        }                                                                                                              // 27945
        previousLeaveAnimations.length = 0;                                                                            // 27946
                                                                                                                       // 27947
        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {                                                         // 27948
          var selected = getBlockNodes(selectedElements[i].clone);                                                     // 27949
          selectedScopes[i].$destroy();                                                                                // 27950
          var promise = previousLeaveAnimations[i] = $animate.leave(selected);                                         // 27951
          promise.then(spliceFactory(previousLeaveAnimations, i));                                                     // 27952
        }                                                                                                              // 27953
                                                                                                                       // 27954
        selectedElements.length = 0;                                                                                   // 27955
        selectedScopes.length = 0;                                                                                     // 27956
                                                                                                                       // 27957
        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {          // 27958
          forEach(selectedTranscludes, function(selectedTransclude) {                                                  // 27959
            selectedTransclude.transclude(function(caseElement, selectedScope) {                                       // 27960
              selectedScopes.push(selectedScope);                                                                      // 27961
              var anchor = selectedTransclude.element;                                                                 // 27962
              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');                       // 27963
              var block = { clone: caseElement };                                                                      // 27964
                                                                                                                       // 27965
              selectedElements.push(block);                                                                            // 27966
              $animate.enter(caseElement, anchor.parent(), anchor);                                                    // 27967
            });                                                                                                        // 27968
          });                                                                                                          // 27969
        }                                                                                                              // 27970
      });                                                                                                              // 27971
    }                                                                                                                  // 27972
  };                                                                                                                   // 27973
}];                                                                                                                    // 27974
                                                                                                                       // 27975
var ngSwitchWhenDirective = ngDirective({                                                                              // 27976
  transclude: 'element',                                                                                               // 27977
  priority: 1200,                                                                                                      // 27978
  require: '^ngSwitch',                                                                                                // 27979
  multiElement: true,                                                                                                  // 27980
  link: function(scope, element, attrs, ctrl, $transclude) {                                                           // 27981
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);                               // 27982
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });                          // 27983
  }                                                                                                                    // 27984
});                                                                                                                    // 27985
                                                                                                                       // 27986
var ngSwitchDefaultDirective = ngDirective({                                                                           // 27987
  transclude: 'element',                                                                                               // 27988
  priority: 1200,                                                                                                      // 27989
  require: '^ngSwitch',                                                                                                // 27990
  multiElement: true,                                                                                                  // 27991
  link: function(scope, element, attr, ctrl, $transclude) {                                                            // 27992
    ctrl.cases['?'] = (ctrl.cases['?'] || []);                                                                         // 27993
    ctrl.cases['?'].push({ transclude: $transclude, element: element });                                               // 27994
   }                                                                                                                   // 27995
});                                                                                                                    // 27996
                                                                                                                       // 27997
/**                                                                                                                    // 27998
 * @ngdoc directive                                                                                                    // 27999
 * @name ngTransclude                                                                                                  // 28000
 * @restrict EAC                                                                                                       // 28001
 *                                                                                                                     // 28002
 * @description                                                                                                        // 28003
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *                                                                                                                     // 28005
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *                                                                                                                     // 28007
 * @element ANY                                                                                                        // 28008
 *                                                                                                                     // 28009
 * @example                                                                                                            // 28010
   <example module="transcludeExample">                                                                                // 28011
     <file name="index.html">                                                                                          // 28012
       <script>                                                                                                        // 28013
         angular.module('transcludeExample', [])                                                                       // 28014
          .directive('pane', function(){                                                                               // 28015
             return {                                                                                                  // 28016
               restrict: 'E',                                                                                          // 28017
               transclude: true,                                                                                       // 28018
               scope: { title:'@' },                                                                                   // 28019
               template: '<div style="border: 1px solid black;">' +                                                    // 28020
                           '<div style="background-color: gray">{{title}}</div>' +                                     // 28021
                           '<ng-transclude></ng-transclude>' +                                                         // 28022
                         '</div>'                                                                                      // 28023
             };                                                                                                        // 28024
         })                                                                                                            // 28025
         .controller('ExampleController', ['$scope', function($scope) {                                                // 28026
           $scope.title = 'Lorem Ipsum';                                                                               // 28027
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';                                   // 28028
         }]);                                                                                                          // 28029
       </script>                                                                                                       // 28030
       <div ng-controller="ExampleController">                                                                         // 28031
         <input ng-model="title" aria-label="title"> <br/>                                                             // 28032
         <textarea ng-model="text" aria-label="text"></textarea> <br/>                                                 // 28033
         <pane title="{{title}}">{{text}}</pane>                                                                       // 28034
       </div>                                                                                                          // 28035
     </file>                                                                                                           // 28036
     <file name="protractor.js" type="protractor">                                                                     // 28037
        it('should have transcluded', function() {                                                                     // 28038
          var titleElement = element(by.model('title'));                                                               // 28039
          titleElement.clear();                                                                                        // 28040
          titleElement.sendKeys('TITLE');                                                                              // 28041
          var textElement = element(by.model('text'));                                                                 // 28042
          textElement.clear();                                                                                         // 28043
          textElement.sendKeys('TEXT');                                                                                // 28044
          expect(element(by.binding('title')).getText()).toEqual('TITLE');                                             // 28045
          expect(element(by.binding('text')).getText()).toEqual('TEXT');                                               // 28046
        });                                                                                                            // 28047
     </file>                                                                                                           // 28048
   </example>                                                                                                          // 28049
 *                                                                                                                     // 28050
 */                                                                                                                    // 28051
var ngTranscludeDirective = ngDirective({                                                                              // 28052
  restrict: 'EAC',                                                                                                     // 28053
  link: function($scope, $element, $attrs, controller, $transclude) {                                                  // 28054
    if (!$transclude) {                                                                                                // 28055
      throw minErr('ngTransclude')('orphan',                                                                           // 28056
       'Illegal use of ngTransclude directive in the template! ' +                                                     // 28057
       'No parent directive that requires a transclusion found. ' +                                                    // 28058
       'Element: {0}',                                                                                                 // 28059
       startingTag($element));                                                                                         // 28060
    }                                                                                                                  // 28061
                                                                                                                       // 28062
    $transclude(function(clone) {                                                                                      // 28063
      $element.empty();                                                                                                // 28064
      $element.append(clone);                                                                                          // 28065
    });                                                                                                                // 28066
  }                                                                                                                    // 28067
});                                                                                                                    // 28068
                                                                                                                       // 28069
/**                                                                                                                    // 28070
 * @ngdoc directive                                                                                                    // 28071
 * @name script                                                                                                        // 28072
 * @restrict E                                                                                                         // 28073
 *                                                                                                                     // 28074
 * @description                                                                                                        // 28075
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the               // 28076
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},                                                 // 28077
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the                   // 28078
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be               // 28079
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.                         // 28080
 *                                                                                                                     // 28081
 * @param {string} type Must be set to `'text/ng-template'`.                                                           // 28082
 * @param {string} id Cache name of the template.                                                                      // 28083
 *                                                                                                                     // 28084
 * @example                                                                                                            // 28085
  <example>                                                                                                            // 28086
    <file name="index.html">                                                                                           // 28087
      <script type="text/ng-template" id="/tpl.html">                                                                  // 28088
        Content of the template.                                                                                       // 28089
      </script>                                                                                                        // 28090
                                                                                                                       // 28091
      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>                                     // 28092
      <div id="tpl-content" ng-include src="currentTpl"></div>                                                         // 28093
    </file>                                                                                                            // 28094
    <file name="protractor.js" type="protractor">                                                                      // 28095
      it('should load template defined inside script tag', function() {                                                // 28096
        element(by.css('#tpl-link')).click();                                                                          // 28097
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);                          // 28098
      });                                                                                                              // 28099
    </file>                                                                                                            // 28100
  </example>                                                                                                           // 28101
 */                                                                                                                    // 28102
var scriptDirective = ['$templateCache', function($templateCache) {                                                    // 28103
  return {                                                                                                             // 28104
    restrict: 'E',                                                                                                     // 28105
    terminal: true,                                                                                                    // 28106
    compile: function(element, attr) {                                                                                 // 28107
      if (attr.type == 'text/ng-template') {                                                                           // 28108
        var templateUrl = attr.id,                                                                                     // 28109
            text = element[0].text;                                                                                    // 28110
                                                                                                                       // 28111
        $templateCache.put(templateUrl, text);                                                                         // 28112
      }                                                                                                                // 28113
    }                                                                                                                  // 28114
  };                                                                                                                   // 28115
}];                                                                                                                    // 28116
                                                                                                                       // 28117
var noopNgModelController = { $setViewValue: noop, $render: noop };                                                    // 28118
                                                                                                                       // 28119
/**                                                                                                                    // 28120
 * @ngdoc type                                                                                                         // 28121
 * @name  select.SelectController                                                                                      // 28122
 * @description                                                                                                        // 28123
 * The controller for the `<select>` directive. This provides support for reading                                      // 28124
 * and writing the selected value(s) of the control and also coordinates dynamically                                   // 28125
 * added `<option>` elements, perhaps by an `ngRepeat` directive.                                                      // 28126
 */                                                                                                                    // 28127
var SelectController =                                                                                                 // 28128
        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {                                          // 28129
                                                                                                                       // 28130
  var self = this,                                                                                                     // 28131
      optionsMap = new HashMap();                                                                                      // 28132
                                                                                                                       // 28133
  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors                           // 28134
  self.ngModelCtrl = noopNgModelController;                                                                            // 28135
                                                                                                                       // 28136
  // The "unknown" option is one that is prepended to the list if the viewValue                                        // 28137
  // does not match any of the options. When it is rendered the value of the unknown                                   // 28138
  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.                                      // 28139
  //                                                                                                                   // 28140
  // We can't just jqLite('<option>') since jqLite is not smart enough                                                 // 28141
  // to create it in <select> and IE barfs otherwise.                                                                  // 28142
  self.unknownOption = jqLite(document.createElement('option'));                                                       // 28143
  self.renderUnknownOption = function(val) {                                                                           // 28144
    var unknownVal = '? ' + hashKey(val) + ' ?';                                                                       // 28145
    self.unknownOption.val(unknownVal);                                                                                // 28146
    $element.prepend(self.unknownOption);                                                                              // 28147
    $element.val(unknownVal);                                                                                          // 28148
  };                                                                                                                   // 28149
                                                                                                                       // 28150
  $scope.$on('$destroy', function() {                                                                                  // 28151
    // disable unknown option so that we don't do work when the whole select is being destroyed                        // 28152
    self.renderUnknownOption = noop;                                                                                   // 28153
  });                                                                                                                  // 28154
                                                                                                                       // 28155
  self.removeUnknownOption = function() {                                                                              // 28156
    if (self.unknownOption.parent()) self.unknownOption.remove();                                                      // 28157
  };                                                                                                                   // 28158
                                                                                                                       // 28159
                                                                                                                       // 28160
  // Read the value of the select control, the implementation of this changes depending                                // 28161
  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 28162
  self.readValue = function readSingleValue() {                                                                        // 28163
    self.removeUnknownOption();                                                                                        // 28164
    return $element.val();                                                                                             // 28165
  };                                                                                                                   // 28166
                                                                                                                       // 28167
                                                                                                                       // 28168
  // Write the value to the select control, the implementation of this changes depending                               // 28169
  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 28170
  self.writeValue = function writeSingleValue(value) {                                                                 // 28171
    if (self.hasOption(value)) {                                                                                       // 28172
      self.removeUnknownOption();                                                                                      // 28173
      $element.val(value);                                                                                             // 28174
      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy                                  // 28175
    } else {                                                                                                           // 28176
      if (value == null && self.emptyOption) {                                                                         // 28177
        self.removeUnknownOption();                                                                                    // 28178
        $element.val('');                                                                                              // 28179
      } else {                                                                                                         // 28180
        self.renderUnknownOption(value);                                                                               // 28181
      }                                                                                                                // 28182
    }                                                                                                                  // 28183
  };                                                                                                                   // 28184
                                                                                                                       // 28185
                                                                                                                       // 28186
  // Tell the select control that an option, with the given value, has been added                                      // 28187
  self.addOption = function(value, element) {                                                                          // 28188
    assertNotHasOwnProperty(value, '"option value"');                                                                  // 28189
    if (value === '') {                                                                                                // 28190
      self.emptyOption = element;                                                                                      // 28191
    }                                                                                                                  // 28192
    var count = optionsMap.get(value) || 0;                                                                            // 28193
    optionsMap.put(value, count + 1);                                                                                  // 28194
  };                                                                                                                   // 28195
                                                                                                                       // 28196
  // Tell the select control that an option, with the given value, has been removed                                    // 28197
  self.removeOption = function(value) {                                                                                // 28198
    var count = optionsMap.get(value);                                                                                 // 28199
    if (count) {                                                                                                       // 28200
      if (count === 1) {                                                                                               // 28201
        optionsMap.remove(value);                                                                                      // 28202
        if (value === '') {                                                                                            // 28203
          self.emptyOption = undefined;                                                                                // 28204
        }                                                                                                              // 28205
      } else {                                                                                                         // 28206
        optionsMap.put(value, count - 1);                                                                              // 28207
      }                                                                                                                // 28208
    }                                                                                                                  // 28209
  };                                                                                                                   // 28210
                                                                                                                       // 28211
  // Check whether the select control has an option matching the given value                                           // 28212
  self.hasOption = function(value) {                                                                                   // 28213
    return !!optionsMap.get(value);                                                                                    // 28214
  };                                                                                                                   // 28215
}];                                                                                                                    // 28216
                                                                                                                       // 28217
/**                                                                                                                    // 28218
 * @ngdoc directive                                                                                                    // 28219
 * @name select                                                                                                        // 28220
 * @restrict E                                                                                                         // 28221
 *                                                                                                                     // 28222
 * @description                                                                                                        // 28223
 * HTML `SELECT` element with angular data-binding.                                                                    // 28224
 *                                                                                                                     // 28225
 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding                      // 28226
 * between the scope and the `<select>` control (including setting default values).                                    // 28227
 * Ìt also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or            // 28228
 * {@link ngOptions `ngOptions`} directives.                                                                           // 28229
 *                                                                                                                     // 28230
 * When an item in the `<select>` menu is selected, the value of the selected option will be bound                     // 28231
 * to the model identified by the `ngModel` directive. With static or repeated options, this is                        // 28232
 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.       // 28233
 * If you want dynamic value attributes, you can use interpolation inside the value attribute.                         // 28234
 *                                                                                                                     // 28235
 * <div class="alert alert-warning">                                                                                   // 28236
 * Note that the value of a `select` directive used without `ngOptions` is always a string.                            // 28237
 * When the model needs to be bound to a non-string value, you must either explictly convert it                        // 28238
 * using a directive (see example below) or use `ngOptions` to specify the set of options.                             // 28239
 * This is because an option element can only be bound to string values at present.                                    // 28240
 * </div>                                                                                                              // 28241
 *                                                                                                                     // 28242
 * If the viewValue of `ngModel` does not match any of the options, then the control                                   // 28243
 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.                    // 28244
 *                                                                                                                     // 28245
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 28246
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"                // 28247
 * option. See example below for demonstration.                                                                        // 28248
 *                                                                                                                     // 28249
 * <div class="alert alert-info">                                                                                      // 28250
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions               // 28251
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as                        // 28252
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 28253
 * comprehension expression, and additionally in reducing memory and increasing speed by not creating                  // 28254
 * a new scope for each repeated instance.                                                                             // 28255
 * </div>                                                                                                              // 28256
 *                                                                                                                     // 28257
 *                                                                                                                     // 28258
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 28259
 * @param {string=} name Property name of the form under which the control is published.                               // 28260
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 28261
 * @param {string=} ngRequired Adds required attribute and required validation constraint to                           // 28262
 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required                    // 28263
 * when you want to data-bind to the required attribute.                                                               // 28264
 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user             // 28265
 *    interaction with the select element.                                                                             // 28266
 * @param {string=} ngOptions sets the options that the select is populated with and defines what is                   // 28267
 * set on the model on selection. See {@link ngOptions `ngOptions`}.                                                   // 28268
 *                                                                                                                     // 28269
 * @example                                                                                                            // 28270
 * ### Simple `select` elements with static options                                                                    // 28271
 *                                                                                                                     // 28272
 * <example name="static-select" module="staticSelect">                                                                // 28273
 * <file name="index.html">                                                                                            // 28274
 * <div ng-controller="ExampleController">                                                                             // 28275
 *   <form name="myForm">                                                                                              // 28276
 *     <label for="singleSelect"> Single select: </label><br>                                                          // 28277
 *     <select name="singleSelect" ng-model="data.singleSelect">                                                       // 28278
 *       <option value="option-1">Option 1</option>                                                                    // 28279
 *       <option value="option-2">Option 2</option>                                                                    // 28280
 *     </select><br>                                                                                                   // 28281
 *                                                                                                                     // 28282
 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>     // 28283
 *     <select name="singleSelect" ng-model="data.singleSelect">                                                       // 28284
 *       <option value="">---Please select---</option> <!-- not selected / blank option -->                            // 28285
 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->                                     // 28286
 *       <option value="option-2">Option 2</option>                                                                    // 28287
 *     </select><br>                                                                                                   // 28288
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>                                       // 28289
 *     <tt>singleSelect = {{data.singleSelect}}</tt>                                                                   // 28290
 *                                                                                                                     // 28291
 *     <hr>                                                                                                            // 28292
 *     <label for="multipleSelect"> Multiple select: </label><br>                                                      // 28293
 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>                      // 28294
 *       <option value="option-1">Option 1</option>                                                                    // 28295
 *       <option value="option-2">Option 2</option>                                                                    // 28296
 *       <option value="option-3">Option 3</option>                                                                    // 28297
 *     </select><br>                                                                                                   // 28298
 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>                                                          // 28299
 *   </form>                                                                                                           // 28300
 * </div>                                                                                                              // 28301
 * </file>                                                                                                             // 28302
 * <file name="app.js">                                                                                                // 28303
 *  angular.module('staticSelect', [])                                                                                 // 28304
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28305
 *      $scope.data = {                                                                                                // 28306
 *       singleSelect: null,                                                                                           // 28307
 *       multipleSelect: [],                                                                                           // 28308
 *       option1: 'option-1',                                                                                          // 28309
 *      };                                                                                                             // 28310
 *                                                                                                                     // 28311
 *      $scope.forceUnknownOption = function() {                                                                       // 28312
 *        $scope.data.singleSelect = 'nonsense';                                                                       // 28313
 *      };                                                                                                             // 28314
 *   }]);                                                                                                              // 28315
 * </file>                                                                                                             // 28316
 *</example>                                                                                                           // 28317
 *                                                                                                                     // 28318
 * ### Using `ngRepeat` to generate `select` options                                                                   // 28319
 * <example name="ngrepeat-select" module="ngrepeatSelect">                                                            // 28320
 * <file name="index.html">                                                                                            // 28321
 * <div ng-controller="ExampleController">                                                                             // 28322
 *   <form name="myForm">                                                                                              // 28323
 *     <label for="repeatSelect"> Repeat select: </label>                                                              // 28324
 *     <select name="repeatSelect" ng-model="data.repeatSelect">                                                       // 28325
 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>            // 28326
 *     </select>                                                                                                       // 28327
 *   </form>                                                                                                           // 28328
 *   <hr>                                                                                                              // 28329
 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>                                                                // 28330
 * </div>                                                                                                              // 28331
 * </file>                                                                                                             // 28332
 * <file name="app.js">                                                                                                // 28333
 *  angular.module('ngrepeatSelect', [])                                                                               // 28334
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28335
 *      $scope.data = {                                                                                                // 28336
 *       singleSelect: null,                                                                                           // 28337
 *       availableOptions: [                                                                                           // 28338
 *         {id: '1', name: 'Option A'},                                                                                // 28339
 *         {id: '2', name: 'Option B'},                                                                                // 28340
 *         {id: '3', name: 'Option C'}                                                                                 // 28341
 *       ],                                                                                                            // 28342
 *      };                                                                                                             // 28343
 *   }]);                                                                                                              // 28344
 * </file>                                                                                                             // 28345
 *</example>                                                                                                           // 28346
 *                                                                                                                     // 28347
 *                                                                                                                     // 28348
 * ### Using `select` with `ngOptions` and setting a default value                                                     // 28349
 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.                              // 28350
 *                                                                                                                     // 28351
 * <example name="select-with-default-values" module="defaultValueSelect">                                             // 28352
 * <file name="index.html">                                                                                            // 28353
 * <div ng-controller="ExampleController">                                                                             // 28354
 *   <form name="myForm">                                                                                              // 28355
 *     <label for="mySelect">Make a choice:</label>                                                                    // 28356
 *     <select name="mySelect" id="mySelect"                                                                           // 28357
 *       ng-options="option.name for option in data.availableOptions track by option.id"                               // 28358
 *       ng-model="data.selectedOption"></select>                                                                      // 28359
 *   </form>                                                                                                           // 28360
 *   <hr>                                                                                                              // 28361
 *   <tt>option = {{data.selectedOption}}</tt><br/>                                                                    // 28362
 * </div>                                                                                                              // 28363
 * </file>                                                                                                             // 28364
 * <file name="app.js">                                                                                                // 28365
 *  angular.module('defaultValueSelect', [])                                                                           // 28366
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28367
 *      $scope.data = {                                                                                                // 28368
 *       availableOptions: [                                                                                           // 28369
 *         {id: '1', name: 'Option A'},                                                                                // 28370
 *         {id: '2', name: 'Option B'},                                                                                // 28371
 *         {id: '3', name: 'Option C'}                                                                                 // 28372
 *       ],                                                                                                            // 28373
 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui             // 28374
 *       };                                                                                                            // 28375
 *   }]);                                                                                                              // 28376
 * </file>                                                                                                             // 28377
 *</example>                                                                                                           // 28378
 *                                                                                                                     // 28379
 *                                                                                                                     // 28380
 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting                                       // 28381
 *                                                                                                                     // 28382
 * <example name="select-with-non-string-options" module="nonStringSelect">                                            // 28383
 *   <file name="index.html">                                                                                          // 28384
 *     <select ng-model="model.id" convert-to-number>                                                                  // 28385
 *       <option value="0">Zero</option>                                                                               // 28386
 *       <option value="1">One</option>                                                                                // 28387
 *       <option value="2">Two</option>                                                                                // 28388
 *     </select>                                                                                                       // 28389
 *     {{ model }}                                                                                                     // 28390
 *   </file>                                                                                                           // 28391
 *   <file name="app.js">                                                                                              // 28392
 *     angular.module('nonStringSelect', [])                                                                           // 28393
 *       .run(function($rootScope) {                                                                                   // 28394
 *         $rootScope.model = { id: 2 };                                                                               // 28395
 *       })                                                                                                            // 28396
 *       .directive('convertToNumber', function() {                                                                    // 28397
 *         return {                                                                                                    // 28398
 *           require: 'ngModel',                                                                                       // 28399
 *           link: function(scope, element, attrs, ngModel) {                                                          // 28400
 *             ngModel.$parsers.push(function(val) {                                                                   // 28401
 *               return parseInt(val, 10);                                                                             // 28402
 *             });                                                                                                     // 28403
 *             ngModel.$formatters.push(function(val) {                                                                // 28404
 *               return '' + val;                                                                                      // 28405
 *             });                                                                                                     // 28406
 *           }                                                                                                         // 28407
 *         };                                                                                                          // 28408
 *       });                                                                                                           // 28409
 *   </file>                                                                                                           // 28410
 *   <file name="protractor.js" type="protractor">                                                                     // 28411
 *     it('should initialize to model', function() {                                                                   // 28412
 *       var select = element(by.css('select'));                                                                       // 28413
 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');                           // 28414
 *     });                                                                                                             // 28415
 *   </file>                                                                                                           // 28416
 * </example>                                                                                                          // 28417
 *                                                                                                                     // 28418
 */                                                                                                                    // 28419
var selectDirective = function() {                                                                                     // 28420
                                                                                                                       // 28421
  return {                                                                                                             // 28422
    restrict: 'E',                                                                                                     // 28423
    require: ['select', '?ngModel'],                                                                                   // 28424
    controller: SelectController,                                                                                      // 28425
    link: function(scope, element, attr, ctrls) {                                                                      // 28426
                                                                                                                       // 28427
      // if ngModel is not defined, we don't need to do anything                                                       // 28428
      var ngModelCtrl = ctrls[1];                                                                                      // 28429
      if (!ngModelCtrl) return;                                                                                        // 28430
                                                                                                                       // 28431
      var selectCtrl = ctrls[0];                                                                                       // 28432
                                                                                                                       // 28433
      selectCtrl.ngModelCtrl = ngModelCtrl;                                                                            // 28434
                                                                                                                       // 28435
      // We delegate rendering to the `writeValue` method, which can be changed                                        // 28436
      // if the select can have multiple selected values or if the options are being                                   // 28437
      // generated by `ngOptions`                                                                                      // 28438
      ngModelCtrl.$render = function() {                                                                               // 28439
        selectCtrl.writeValue(ngModelCtrl.$viewValue);                                                                 // 28440
      };                                                                                                               // 28441
                                                                                                                       // 28442
      // When the selected item(s) changes we delegate getting the value of the select control                         // 28443
      // to the `readValue` method, which can be changed if the select can have multiple                               // 28444
      // selected values or if the options are being generated by `ngOptions`                                          // 28445
      element.on('change', function() {                                                                                // 28446
        scope.$apply(function() {                                                                                      // 28447
          ngModelCtrl.$setViewValue(selectCtrl.readValue());                                                           // 28448
        });                                                                                                            // 28449
      });                                                                                                              // 28450
                                                                                                                       // 28451
      // If the select allows multiple values then we need to modify how we read and write                             // 28452
      // values from and to the control; also what it means for the value to be empty and                              // 28453
      // we have to add an extra watch since ngModel doesn't work well with arrays - it                                // 28454
      // doesn't trigger rendering if only an item in the array changes.                                               // 28455
      if (attr.multiple) {                                                                                             // 28456
                                                                                                                       // 28457
        // Read value now needs to check each option to see if it is selected                                          // 28458
        selectCtrl.readValue = function readMultipleValue() {                                                          // 28459
          var array = [];                                                                                              // 28460
          forEach(element.find('option'), function(option) {                                                           // 28461
            if (option.selected) {                                                                                     // 28462
              array.push(option.value);                                                                                // 28463
            }                                                                                                          // 28464
          });                                                                                                          // 28465
          return array;                                                                                                // 28466
        };                                                                                                             // 28467
                                                                                                                       // 28468
        // Write value now needs to set the selected property of each matching option                                  // 28469
        selectCtrl.writeValue = function writeMultipleValue(value) {                                                   // 28470
          var items = new HashMap(value);                                                                              // 28471
          forEach(element.find('option'), function(option) {                                                           // 28472
            option.selected = isDefined(items.get(option.value));                                                      // 28473
          });                                                                                                          // 28474
        };                                                                                                             // 28475
                                                                                                                       // 28476
        // we have to do it on each watch since ngModel watches reference, but                                         // 28477
        // we need to work of an array, so we need to see if anything was inserted/removed                             // 28478
        var lastView, lastViewRef = NaN;                                                                               // 28479
        scope.$watch(function selectMultipleWatch() {                                                                  // 28480
          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {                   // 28481
            lastView = shallowCopy(ngModelCtrl.$viewValue);                                                            // 28482
            ngModelCtrl.$render();                                                                                     // 28483
          }                                                                                                            // 28484
          lastViewRef = ngModelCtrl.$viewValue;                                                                        // 28485
        });                                                                                                            // 28486
                                                                                                                       // 28487
        // If we are a multiple select then value is now a collection                                                  // 28488
        // so the meaning of $isEmpty changes                                                                          // 28489
        ngModelCtrl.$isEmpty = function(value) {                                                                       // 28490
          return !value || value.length === 0;                                                                         // 28491
        };                                                                                                             // 28492
                                                                                                                       // 28493
      }                                                                                                                // 28494
    }                                                                                                                  // 28495
  };                                                                                                                   // 28496
};                                                                                                                     // 28497
                                                                                                                       // 28498
                                                                                                                       // 28499
// The option directive is purely designed to communicate the existence (or lack of)                                   // 28500
// of dynamically created (and destroyed) option elements to their containing select                                   // 28501
// directive via its controller.                                                                                       // 28502
var optionDirective = ['$interpolate', function($interpolate) {                                                        // 28503
                                                                                                                       // 28504
  function chromeHack(optionElement) {                                                                                 // 28505
    // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459                                       // 28506
    // Adding an <option selected="selected"> element to a <select required="required"> should                         // 28507
    // automatically select the new element                                                                            // 28508
    if (optionElement[0].hasAttribute('selected')) {                                                                   // 28509
      optionElement[0].selected = true;                                                                                // 28510
    }                                                                                                                  // 28511
  }                                                                                                                    // 28512
                                                                                                                       // 28513
  return {                                                                                                             // 28514
    restrict: 'E',                                                                                                     // 28515
    priority: 100,                                                                                                     // 28516
    compile: function(element, attr) {                                                                                 // 28517
                                                                                                                       // 28518
      if (isDefined(attr.value)) {                                                                                     // 28519
        // If the value attribute is defined, check if it contains an interpolation                                    // 28520
        var valueInterpolated = $interpolate(attr.value, true);                                                        // 28521
      } else {                                                                                                         // 28522
        // If the value attribute is not defined then we fall back to the                                              // 28523
        // text content of the option element, which may be interpolated                                               // 28524
        var interpolateFn = $interpolate(element.text(), true);                                                        // 28525
        if (!interpolateFn) {                                                                                          // 28526
          attr.$set('value', element.text());                                                                          // 28527
        }                                                                                                              // 28528
      }                                                                                                                // 28529
                                                                                                                       // 28530
      return function(scope, element, attr) {                                                                          // 28531
                                                                                                                       // 28532
        // This is an optimization over using ^^ since we don't want to have to search                                 // 28533
        // all the way to the root of the DOM for every single option element                                          // 28534
        var selectCtrlName = '$selectController',                                                                      // 28535
            parent = element.parent(),                                                                                 // 28536
            selectCtrl = parent.data(selectCtrlName) ||                                                                // 28537
              parent.parent().data(selectCtrlName); // in case we are in optgroup                                      // 28538
                                                                                                                       // 28539
        function addOption(optionValue) {                                                                              // 28540
          selectCtrl.addOption(optionValue, element);                                                                  // 28541
          selectCtrl.ngModelCtrl.$render();                                                                            // 28542
          chromeHack(element);                                                                                         // 28543
        }                                                                                                              // 28544
                                                                                                                       // 28545
        // Only update trigger option updates if this is an option within a `select`                                   // 28546
        // that also has `ngModel` attached                                                                            // 28547
        if (selectCtrl && selectCtrl.ngModelCtrl) {                                                                    // 28548
                                                                                                                       // 28549
          if (valueInterpolated) {                                                                                     // 28550
            // The value attribute is interpolated                                                                     // 28551
            var oldVal;                                                                                                // 28552
            attr.$observe('value', function valueAttributeObserveAction(newVal) {                                      // 28553
              if (isDefined(oldVal)) {                                                                                 // 28554
                selectCtrl.removeOption(oldVal);                                                                       // 28555
              }                                                                                                        // 28556
              oldVal = newVal;                                                                                         // 28557
              addOption(newVal);                                                                                       // 28558
            });                                                                                                        // 28559
          } else if (interpolateFn) {                                                                                  // 28560
            // The text content is interpolated                                                                        // 28561
            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {                              // 28562
              attr.$set('value', newVal);                                                                              // 28563
              if (oldVal !== newVal) {                                                                                 // 28564
                selectCtrl.removeOption(oldVal);                                                                       // 28565
              }                                                                                                        // 28566
              addOption(newVal);                                                                                       // 28567
            });                                                                                                        // 28568
          } else {                                                                                                     // 28569
            // The value attribute is static                                                                           // 28570
            addOption(attr.value);                                                                                     // 28571
          }                                                                                                            // 28572
                                                                                                                       // 28573
          element.on('$destroy', function() {                                                                          // 28574
            selectCtrl.removeOption(attr.value);                                                                       // 28575
            selectCtrl.ngModelCtrl.$render();                                                                          // 28576
          });                                                                                                          // 28577
        }                                                                                                              // 28578
      };                                                                                                               // 28579
    }                                                                                                                  // 28580
  };                                                                                                                   // 28581
}];                                                                                                                    // 28582
                                                                                                                       // 28583
var styleDirective = valueFn({                                                                                         // 28584
  restrict: 'E',                                                                                                       // 28585
  terminal: false                                                                                                      // 28586
});                                                                                                                    // 28587
                                                                                                                       // 28588
var requiredDirective = function() {                                                                                   // 28589
  return {                                                                                                             // 28590
    restrict: 'A',                                                                                                     // 28591
    require: '?ngModel',                                                                                               // 28592
    link: function(scope, elm, attr, ctrl) {                                                                           // 28593
      if (!ctrl) return;                                                                                               // 28594
      attr.required = true; // force truthy in case we are on non input element                                        // 28595
                                                                                                                       // 28596
      ctrl.$validators.required = function(modelValue, viewValue) {                                                    // 28597
        return !attr.required || !ctrl.$isEmpty(viewValue);                                                            // 28598
      };                                                                                                               // 28599
                                                                                                                       // 28600
      attr.$observe('required', function() {                                                                           // 28601
        ctrl.$validate();                                                                                              // 28602
      });                                                                                                              // 28603
    }                                                                                                                  // 28604
  };                                                                                                                   // 28605
};                                                                                                                     // 28606
                                                                                                                       // 28607
                                                                                                                       // 28608
var patternDirective = function() {                                                                                    // 28609
  return {                                                                                                             // 28610
    restrict: 'A',                                                                                                     // 28611
    require: '?ngModel',                                                                                               // 28612
    link: function(scope, elm, attr, ctrl) {                                                                           // 28613
      if (!ctrl) return;                                                                                               // 28614
                                                                                                                       // 28615
      var regexp, patternExp = attr.ngPattern || attr.pattern;                                                         // 28616
      attr.$observe('pattern', function(regex) {                                                                       // 28617
        if (isString(regex) && regex.length > 0) {                                                                     // 28618
          regex = new RegExp('^' + regex + '$');                                                                       // 28619
        }                                                                                                              // 28620
                                                                                                                       // 28621
        if (regex && !regex.test) {                                                                                    // 28622
          throw minErr('ngPattern')('noregexp',                                                                        // 28623
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,                                       // 28624
            regex, startingTag(elm));                                                                                  // 28625
        }                                                                                                              // 28626
                                                                                                                       // 28627
        regexp = regex || undefined;                                                                                   // 28628
        ctrl.$validate();                                                                                              // 28629
      });                                                                                                              // 28630
                                                                                                                       // 28631
      ctrl.$validators.pattern = function(modelValue, viewValue) {                                                     // 28632
        // HTML5 pattern constraint validates the input value, so we validate the viewValue                            // 28633
        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);                              // 28634
      };                                                                                                               // 28635
    }                                                                                                                  // 28636
  };                                                                                                                   // 28637
};                                                                                                                     // 28638
                                                                                                                       // 28639
                                                                                                                       // 28640
var maxlengthDirective = function() {                                                                                  // 28641
  return {                                                                                                             // 28642
    restrict: 'A',                                                                                                     // 28643
    require: '?ngModel',                                                                                               // 28644
    link: function(scope, elm, attr, ctrl) {                                                                           // 28645
      if (!ctrl) return;                                                                                               // 28646
                                                                                                                       // 28647
      var maxlength = -1;                                                                                              // 28648
      attr.$observe('maxlength', function(value) {                                                                     // 28649
        var intVal = toInt(value);                                                                                     // 28650
        maxlength = isNaN(intVal) ? -1 : intVal;                                                                       // 28651
        ctrl.$validate();                                                                                              // 28652
      });                                                                                                              // 28653
      ctrl.$validators.maxlength = function(modelValue, viewValue) {                                                   // 28654
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);                         // 28655
      };                                                                                                               // 28656
    }                                                                                                                  // 28657
  };                                                                                                                   // 28658
};                                                                                                                     // 28659
                                                                                                                       // 28660
var minlengthDirective = function() {                                                                                  // 28661
  return {                                                                                                             // 28662
    restrict: 'A',                                                                                                     // 28663
    require: '?ngModel',                                                                                               // 28664
    link: function(scope, elm, attr, ctrl) {                                                                           // 28665
      if (!ctrl) return;                                                                                               // 28666
                                                                                                                       // 28667
      var minlength = 0;                                                                                               // 28668
      attr.$observe('minlength', function(value) {                                                                     // 28669
        minlength = toInt(value) || 0;                                                                                 // 28670
        ctrl.$validate();                                                                                              // 28671
      });                                                                                                              // 28672
      ctrl.$validators.minlength = function(modelValue, viewValue) {                                                   // 28673
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;                                              // 28674
      };                                                                                                               // 28675
    }                                                                                                                  // 28676
  };                                                                                                                   // 28677
};                                                                                                                     // 28678
                                                                                                                       // 28679
if (window.angular.bootstrap) {                                                                                        // 28680
  //AngularJS is already loaded, so we can return here...                                                              // 28681
  console.log('WARNING: Tried to load angular more than once.');                                                       // 28682
  return;                                                                                                              // 28683
}                                                                                                                      // 28684
                                                                                                                       // 28685
//try to bind to jquery now so that one can write jqLite(document).ready()                                             // 28686
//but we will rebind on bootstrap again.                                                                               // 28687
bindJQuery();                                                                                                          // 28688
                                                                                                                       // 28689
publishExternalAPI(angular);                                                                                           // 28690
                                                                                                                       // 28691
angular.module("ngLocale", [], ["$provide", function($provide) {                                                       // 28692
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};                // 28693
function getDecimals(n) {                                                                                              // 28694
  n = n + '';                                                                                                          // 28695
  var i = n.indexOf('.');                                                                                              // 28696
  return (i == -1) ? 0 : n.length - i - 1;                                                                             // 28697
}                                                                                                                      // 28698
                                                                                                                       // 28699
function getVF(n, opt_precision) {                                                                                     // 28700
  var v = opt_precision;                                                                                               // 28701
                                                                                                                       // 28702
  if (undefined === v) {                                                                                               // 28703
    v = Math.min(getDecimals(n), 3);                                                                                   // 28704
  }                                                                                                                    // 28705
                                                                                                                       // 28706
  var base = Math.pow(10, v);                                                                                          // 28707
  var f = ((n * base) | 0) % base;                                                                                     // 28708
  return {v: v, f: f};                                                                                                 // 28709
}                                                                                                                      // 28710
                                                                                                                       // 28711
$provide.value("$locale", {                                                                                            // 28712
  "DATETIME_FORMATS": {                                                                                                // 28713
    "AMPMS": [                                                                                                         // 28714
      "AM",                                                                                                            // 28715
      "PM"                                                                                                             // 28716
    ],                                                                                                                 // 28717
    "DAY": [                                                                                                           // 28718
      "Sunday",                                                                                                        // 28719
      "Monday",                                                                                                        // 28720
      "Tuesday",                                                                                                       // 28721
      "Wednesday",                                                                                                     // 28722
      "Thursday",                                                                                                      // 28723
      "Friday",                                                                                                        // 28724
      "Saturday"                                                                                                       // 28725
    ],                                                                                                                 // 28726
    "ERANAMES": [                                                                                                      // 28727
      "Before Christ",                                                                                                 // 28728
      "Anno Domini"                                                                                                    // 28729
    ],                                                                                                                 // 28730
    "ERAS": [                                                                                                          // 28731
      "BC",                                                                                                            // 28732
      "AD"                                                                                                             // 28733
    ],                                                                                                                 // 28734
    "FIRSTDAYOFWEEK": 6,                                                                                               // 28735
    "MONTH": [                                                                                                         // 28736
      "January",                                                                                                       // 28737
      "February",                                                                                                      // 28738
      "March",                                                                                                         // 28739
      "April",                                                                                                         // 28740
      "May",                                                                                                           // 28741
      "June",                                                                                                          // 28742
      "July",                                                                                                          // 28743
      "August",                                                                                                        // 28744
      "September",                                                                                                     // 28745
      "October",                                                                                                       // 28746
      "November",                                                                                                      // 28747
      "December"                                                                                                       // 28748
    ],                                                                                                                 // 28749
    "SHORTDAY": [                                                                                                      // 28750
      "Sun",                                                                                                           // 28751
      "Mon",                                                                                                           // 28752
      "Tue",                                                                                                           // 28753
      "Wed",                                                                                                           // 28754
      "Thu",                                                                                                           // 28755
      "Fri",                                                                                                           // 28756
      "Sat"                                                                                                            // 28757
    ],                                                                                                                 // 28758
    "SHORTMONTH": [                                                                                                    // 28759
      "Jan",                                                                                                           // 28760
      "Feb",                                                                                                           // 28761
      "Mar",                                                                                                           // 28762
      "Apr",                                                                                                           // 28763
      "May",                                                                                                           // 28764
      "Jun",                                                                                                           // 28765
      "Jul",                                                                                                           // 28766
      "Aug",                                                                                                           // 28767
      "Sep",                                                                                                           // 28768
      "Oct",                                                                                                           // 28769
      "Nov",                                                                                                           // 28770
      "Dec"                                                                                                            // 28771
    ],                                                                                                                 // 28772
    "WEEKENDRANGE": [                                                                                                  // 28773
      5,                                                                                                               // 28774
      6                                                                                                                // 28775
    ],                                                                                                                 // 28776
    "fullDate": "EEEE, MMMM d, y",                                                                                     // 28777
    "longDate": "MMMM d, y",                                                                                           // 28778
    "medium": "MMM d, y h:mm:ss a",                                                                                    // 28779
    "mediumDate": "MMM d, y",                                                                                          // 28780
    "mediumTime": "h:mm:ss a",                                                                                         // 28781
    "short": "M/d/yy h:mm a",                                                                                          // 28782
    "shortDate": "M/d/yy",                                                                                             // 28783
    "shortTime": "h:mm a"                                                                                              // 28784
  },                                                                                                                   // 28785
  "NUMBER_FORMATS": {                                                                                                  // 28786
    "CURRENCY_SYM": "$",                                                                                               // 28787
    "DECIMAL_SEP": ".",                                                                                                // 28788
    "GROUP_SEP": ",",                                                                                                  // 28789
    "PATTERNS": [                                                                                                      // 28790
      {                                                                                                                // 28791
        "gSize": 3,                                                                                                    // 28792
        "lgSize": 3,                                                                                                   // 28793
        "maxFrac": 3,                                                                                                  // 28794
        "minFrac": 0,                                                                                                  // 28795
        "minInt": 1,                                                                                                   // 28796
        "negPre": "-",                                                                                                 // 28797
        "negSuf": "",                                                                                                  // 28798
        "posPre": "",                                                                                                  // 28799
        "posSuf": ""                                                                                                   // 28800
      },                                                                                                               // 28801
      {                                                                                                                // 28802
        "gSize": 3,                                                                                                    // 28803
        "lgSize": 3,                                                                                                   // 28804
        "maxFrac": 2,                                                                                                  // 28805
        "minFrac": 2,                                                                                                  // 28806
        "minInt": 1,                                                                                                   // 28807
        "negPre": "-\u00a4",                                                                                           // 28808
        "negSuf": "",                                                                                                  // 28809
        "posPre": "\u00a4",                                                                                            // 28810
        "posSuf": ""                                                                                                   // 28811
      }                                                                                                                // 28812
    ]                                                                                                                  // 28813
  },                                                                                                                   // 28814
  "id": "en-us",                                                                                                       // 28815
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
});                                                                                                                    // 28817
}]);                                                                                                                   // 28818
                                                                                                                       // 28819
  jqLite(document).ready(function() {                                                                                  // 28820
    angularInit(document, bootstrap);                                                                                  // 28821
  });                                                                                                                  // 28822
                                                                                                                       // 28823
})(window, document);                                                                                                  // 28824
                                                                                                                       // 28825
!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['angular:angular'] = {};

})();
